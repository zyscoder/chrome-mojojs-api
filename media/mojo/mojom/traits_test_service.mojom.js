// media/mojo/mojom/traits_test_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'media/mojo/mojom/traits_test_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('media.mojom');
  var media_types$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/media_types.mojom', 'media_types.mojom.js');
  }



  function TraitsTestService_EchoVideoFrame_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoVideoFrame_Params.prototype.initDefaults_ = function() {
    this.f = null;
  };
  TraitsTestService_EchoVideoFrame_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoVideoFrame_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoVideoFrame_Params.f
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, media_types$.VideoFrame, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoVideoFrame_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoVideoFrame_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoVideoFrame_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.f =
        decoder.decodeStructPointer(media_types$.VideoFrame);
    return val;
  };

  TraitsTestService_EchoVideoFrame_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoVideoFrame_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(media_types$.VideoFrame, val.f);
  };
  function TraitsTestService_EchoVideoFrame_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoVideoFrame_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoVideoFrame_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoVideoFrame_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoVideoFrame_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, media_types$.VideoFrame, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoVideoFrame_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoVideoFrame_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoVideoFrame_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(media_types$.VideoFrame);
    return val;
  };

  TraitsTestService_EchoVideoFrame_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoVideoFrame_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(media_types$.VideoFrame, val.pass);
  };
  function VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params.prototype.initDefaults_ = function() {
    this.vfm = null;
  };
  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params.vfm
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, media_types$.VideoFrameMetadata, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.vfm =
        decoder.decodeStructPointer(media_types$.VideoFrameMetadata);
    return val;
  };

  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(media_types$.VideoFrameMetadata, val.vfm);
  };
  function VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, media_types$.VideoFrameMetadata, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(media_types$.VideoFrameMetadata);
    return val;
  };

  VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(media_types$.VideoFrameMetadata, val.pass);
  };
  var kTraitsTestService_EchoVideoFrame_Name = 1884410484;

  function TraitsTestServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TraitsTestService,
                                                   handleOrPtrInfo);
  }

  function TraitsTestServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TraitsTestService, associatedInterfacePtrInfo);
  }

  TraitsTestServiceAssociatedPtr.prototype =
      Object.create(TraitsTestServicePtr.prototype);
  TraitsTestServiceAssociatedPtr.prototype.constructor =
      TraitsTestServiceAssociatedPtr;

  function TraitsTestServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  TraitsTestServicePtr.prototype.echoVideoFrame = function() {
    return TraitsTestServiceProxy.prototype.echoVideoFrame
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoVideoFrame = function(f) {
    var params_ = new TraitsTestService_EchoVideoFrame_Params();
    params_.f = f;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoVideoFrame_Name,
          codec.align(TraitsTestService_EchoVideoFrame_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoVideoFrame_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoVideoFrame_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TraitsTestServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  TraitsTestServiceStub.prototype.echoVideoFrame = function(f) {
    return this.delegate_ && this.delegate_.echoVideoFrame && this.delegate_.echoVideoFrame(f);
  }

  TraitsTestServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TraitsTestServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTraitsTestService_EchoVideoFrame_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoVideoFrame_Params);
      this.echoVideoFrame(params.f).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoVideoFrame_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoVideoFrame_Name,
            codec.align(TraitsTestService_EchoVideoFrame_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoVideoFrame_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTraitsTestServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTraitsTestService_EchoVideoFrame_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoVideoFrame_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTraitsTestServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTraitsTestService_EchoVideoFrame_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoVideoFrame_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TraitsTestService = {
    name: 'media.mojom.TraitsTestService',
    kVersion: 0,
    ptrClass: TraitsTestServicePtr,
    proxyClass: TraitsTestServiceProxy,
    stubClass: TraitsTestServiceStub,
    validateRequest: validateTraitsTestServiceRequest,
    validateResponse: validateTraitsTestServiceResponse,
  };
  TraitsTestServiceStub.prototype.validator = validateTraitsTestServiceRequest;
  TraitsTestServiceProxy.prototype.validator = validateTraitsTestServiceResponse;
  var kVideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Name = 1573692833;

  function VideoFrameMetadataTraitsTestServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(VideoFrameMetadataTraitsTestService,
                                                   handleOrPtrInfo);
  }

  function VideoFrameMetadataTraitsTestServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        VideoFrameMetadataTraitsTestService, associatedInterfacePtrInfo);
  }

  VideoFrameMetadataTraitsTestServiceAssociatedPtr.prototype =
      Object.create(VideoFrameMetadataTraitsTestServicePtr.prototype);
  VideoFrameMetadataTraitsTestServiceAssociatedPtr.prototype.constructor =
      VideoFrameMetadataTraitsTestServiceAssociatedPtr;

  function VideoFrameMetadataTraitsTestServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  VideoFrameMetadataTraitsTestServicePtr.prototype.echoVideoFrameMetadata = function() {
    return VideoFrameMetadataTraitsTestServiceProxy.prototype.echoVideoFrameMetadata
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameMetadataTraitsTestServiceProxy.prototype.echoVideoFrameMetadata = function(vfm) {
    var params_ = new VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params();
    params_.vfm = vfm;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kVideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Name,
          codec.align(VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function VideoFrameMetadataTraitsTestServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  VideoFrameMetadataTraitsTestServiceStub.prototype.echoVideoFrameMetadata = function(vfm) {
    return this.delegate_ && this.delegate_.echoVideoFrameMetadata && this.delegate_.echoVideoFrameMetadata(vfm);
  }

  VideoFrameMetadataTraitsTestServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  VideoFrameMetadataTraitsTestServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Name:
      var params = reader.decodeStruct(VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params);
      this.echoVideoFrameMetadata(params.vfm).then(function(response) {
        var responseParams =
            new VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kVideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Name,
            codec.align(VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateVideoFrameMetadataTraitsTestServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kVideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Name:
        if (message.expectsResponse())
          paramsClass = VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateVideoFrameMetadataTraitsTestServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kVideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_Name:
        if (message.isResponse())
          paramsClass = VideoFrameMetadataTraitsTestService_EchoVideoFrameMetadata_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var VideoFrameMetadataTraitsTestService = {
    name: 'media.mojom.VideoFrameMetadataTraitsTestService',
    kVersion: 0,
    ptrClass: VideoFrameMetadataTraitsTestServicePtr,
    proxyClass: VideoFrameMetadataTraitsTestServiceProxy,
    stubClass: VideoFrameMetadataTraitsTestServiceStub,
    validateRequest: validateVideoFrameMetadataTraitsTestServiceRequest,
    validateResponse: validateVideoFrameMetadataTraitsTestServiceResponse,
  };
  VideoFrameMetadataTraitsTestServiceStub.prototype.validator = validateVideoFrameMetadataTraitsTestServiceRequest;
  VideoFrameMetadataTraitsTestServiceProxy.prototype.validator = validateVideoFrameMetadataTraitsTestServiceResponse;
  exports.TraitsTestService = TraitsTestService;
  exports.TraitsTestServicePtr = TraitsTestServicePtr;
  exports.TraitsTestServiceAssociatedPtr = TraitsTestServiceAssociatedPtr;
  exports.VideoFrameMetadataTraitsTestService = VideoFrameMetadataTraitsTestService;
  exports.VideoFrameMetadataTraitsTestServicePtr = VideoFrameMetadataTraitsTestServicePtr;
  exports.VideoFrameMetadataTraitsTestServiceAssociatedPtr = VideoFrameMetadataTraitsTestServiceAssociatedPtr;
})();