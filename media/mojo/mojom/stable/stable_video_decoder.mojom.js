// media/mojo/mojom/stable/stable_video_decoder.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'media/mojo/mojom/stable/stable_video_decoder.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('media.stable.mojom');
  var gpu_feature_info$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/gpu_feature_info.mojom', '../../../../gpu/ipc/common/gpu_feature_info.mojom.js');
  }
  var stable_video_decoder_types$ =
      mojo.internal.exposeNamespace('media.stable.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/stable/stable_video_decoder_types.mojom', 'stable_video_decoder_types.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }


  var STABLE_VIDEO_DECODER_FACTORY_SERVICE_SANDBOX = sandbox$.Sandbox.kHardwareVideoDecoding;

  function MediaLog_AddLogRecord_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaLog_AddLogRecord_Params.prototype.initDefaults_ = function() {
    this.event = null;
  };
  MediaLog_AddLogRecord_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaLog_AddLogRecord_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaLog_AddLogRecord_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, stable_video_decoder_types$.MediaLogRecord, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaLog_AddLogRecord_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaLog_AddLogRecord_Params.decode = function(decoder) {
    var packed;
    var val = new MediaLog_AddLogRecord_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event =
        decoder.decodeStructPointer(stable_video_decoder_types$.MediaLogRecord);
    return val;
  };

  MediaLog_AddLogRecord_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaLog_AddLogRecord_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(stable_video_decoder_types$.MediaLogRecord, val.event);
  };
  function VideoFrameHandleReleaser_ReleaseVideoFrame_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandleReleaser_ReleaseVideoFrame_Params.prototype.initDefaults_ = function() {
    this.releaseToken = null;
  };
  VideoFrameHandleReleaser_ReleaseVideoFrame_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandleReleaser_ReleaseVideoFrame_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoFrameHandleReleaser_ReleaseVideoFrame_Params.releaseToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandleReleaser_ReleaseVideoFrame_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoFrameHandleReleaser_ReleaseVideoFrame_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandleReleaser_ReleaseVideoFrame_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.releaseToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    return val;
  };

  VideoFrameHandleReleaser_ReleaseVideoFrame_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandleReleaser_ReleaseVideoFrame_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.releaseToken);
  };
  function VideoDecoderClient_OnVideoFrameDecoded_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoDecoderClient_OnVideoFrameDecoded_Params.prototype.initDefaults_ = function() {
    this.frame = null;
    this.canReadWithoutStalling = false;
    this.releaseToken = null;
  };
  VideoDecoderClient_OnVideoFrameDecoded_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoDecoderClient_OnVideoFrameDecoded_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoDecoderClient_OnVideoFrameDecoded_Params.frame
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, stable_video_decoder_types$.VideoFrame, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate VideoDecoderClient_OnVideoFrameDecoded_Params.releaseToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoDecoderClient_OnVideoFrameDecoded_Params.encodedSize = codec.kStructHeaderSize + 24;

  VideoDecoderClient_OnVideoFrameDecoded_Params.decode = function(decoder) {
    var packed;
    var val = new VideoDecoderClient_OnVideoFrameDecoded_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frame =
        decoder.decodeStructPointer(stable_video_decoder_types$.VideoFrame);
    packed = decoder.readUint8();
    val.canReadWithoutStalling = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.releaseToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    return val;
  };

  VideoDecoderClient_OnVideoFrameDecoded_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoDecoderClient_OnVideoFrameDecoded_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(stable_video_decoder_types$.VideoFrame, val.frame);
    packed = 0;
    packed |= (val.canReadWithoutStalling & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.releaseToken);
  };
  function VideoDecoderClient_OnWaiting_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoDecoderClient_OnWaiting_Params.prototype.initDefaults_ = function() {
    this.reason = 0;
  };
  VideoDecoderClient_OnWaiting_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoDecoderClient_OnWaiting_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoDecoderClient_OnWaiting_Params.reason
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, stable_video_decoder_types$.WaitingReason);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoDecoderClient_OnWaiting_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoDecoderClient_OnWaiting_Params.decode = function(decoder) {
    var packed;
    var val = new VideoDecoderClient_OnWaiting_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.reason =
        decoder.decodeStruct(new codec.Enum(stable_video_decoder_types$.WaitingReason));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VideoDecoderClient_OnWaiting_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoDecoderClient_OnWaiting_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.reason);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CdmContextEventCallback_EventCallback_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CdmContextEventCallback_EventCallback_Params.prototype.initDefaults_ = function() {
    this.event = 0;
  };
  CdmContextEventCallback_EventCallback_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CdmContextEventCallback_EventCallback_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CdmContextEventCallback_EventCallback_Params.event
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, stable_video_decoder_types$.CdmContextEvent);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CdmContextEventCallback_EventCallback_Params.encodedSize = codec.kStructHeaderSize + 8;

  CdmContextEventCallback_EventCallback_Params.decode = function(decoder) {
    var packed;
    var val = new CdmContextEventCallback_EventCallback_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event =
        decoder.decodeStruct(new codec.Enum(stable_video_decoder_types$.CdmContextEvent));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CdmContextEventCallback_EventCallback_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CdmContextEventCallback_EventCallback_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.event);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StableCdmContext_GetHwKeyData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableCdmContext_GetHwKeyData_Params.prototype.initDefaults_ = function() {
    this.decryptConfig = null;
    this.hwIdentifier = null;
  };
  StableCdmContext_GetHwKeyData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableCdmContext_GetHwKeyData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableCdmContext_GetHwKeyData_Params.decryptConfig
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, stable_video_decoder_types$.DecryptConfig, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableCdmContext_GetHwKeyData_Params.hwIdentifier
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableCdmContext_GetHwKeyData_Params.encodedSize = codec.kStructHeaderSize + 16;

  StableCdmContext_GetHwKeyData_Params.decode = function(decoder) {
    var packed;
    var val = new StableCdmContext_GetHwKeyData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.decryptConfig =
        decoder.decodeStructPointer(stable_video_decoder_types$.DecryptConfig);
    val.hwIdentifier =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  StableCdmContext_GetHwKeyData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableCdmContext_GetHwKeyData_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(stable_video_decoder_types$.DecryptConfig, val.decryptConfig);
    encoder.encodeArrayPointer(codec.Uint8, val.hwIdentifier);
  };
  function StableCdmContext_GetHwKeyData_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableCdmContext_GetHwKeyData_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.keyData = null;
  };
  StableCdmContext_GetHwKeyData_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableCdmContext_GetHwKeyData_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableCdmContext_GetHwKeyData_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, stable_video_decoder_types$.DecryptStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableCdmContext_GetHwKeyData_ResponseParams.keyData
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableCdmContext_GetHwKeyData_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  StableCdmContext_GetHwKeyData_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new StableCdmContext_GetHwKeyData_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(stable_video_decoder_types$.DecryptStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.keyData =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  StableCdmContext_GetHwKeyData_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableCdmContext_GetHwKeyData_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.Uint8, val.keyData);
  };
  function StableCdmContext_RegisterEventCallback_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableCdmContext_RegisterEventCallback_Params.prototype.initDefaults_ = function() {
    this.callback = new CdmContextEventCallbackPtr();
  };
  StableCdmContext_RegisterEventCallback_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableCdmContext_RegisterEventCallback_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableCdmContext_RegisterEventCallback_Params.callback
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableCdmContext_RegisterEventCallback_Params.encodedSize = codec.kStructHeaderSize + 8;

  StableCdmContext_RegisterEventCallback_Params.decode = function(decoder) {
    var packed;
    var val = new StableCdmContext_RegisterEventCallback_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.callback =
        decoder.decodeStruct(new codec.Interface(CdmContextEventCallbackPtr));
    return val;
  };

  StableCdmContext_RegisterEventCallback_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableCdmContext_RegisterEventCallback_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(CdmContextEventCallbackPtr), val.callback);
  };
  function StableCdmContext_GetHwConfigData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableCdmContext_GetHwConfigData_Params.prototype.initDefaults_ = function() {
  };
  StableCdmContext_GetHwConfigData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableCdmContext_GetHwConfigData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableCdmContext_GetHwConfigData_Params.encodedSize = codec.kStructHeaderSize + 0;

  StableCdmContext_GetHwConfigData_Params.decode = function(decoder) {
    var packed;
    var val = new StableCdmContext_GetHwConfigData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  StableCdmContext_GetHwConfigData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableCdmContext_GetHwConfigData_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function StableCdmContext_GetHwConfigData_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableCdmContext_GetHwConfigData_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.configData = null;
  };
  StableCdmContext_GetHwConfigData_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableCdmContext_GetHwConfigData_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate StableCdmContext_GetHwConfigData_ResponseParams.configData
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableCdmContext_GetHwConfigData_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  StableCdmContext_GetHwConfigData_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new StableCdmContext_GetHwConfigData_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.configData =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  StableCdmContext_GetHwConfigData_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableCdmContext_GetHwConfigData_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.Uint8, val.configData);
  };
  function StableCdmContext_GetScreenResolutions_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableCdmContext_GetScreenResolutions_Params.prototype.initDefaults_ = function() {
  };
  StableCdmContext_GetScreenResolutions_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableCdmContext_GetScreenResolutions_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableCdmContext_GetScreenResolutions_Params.encodedSize = codec.kStructHeaderSize + 0;

  StableCdmContext_GetScreenResolutions_Params.decode = function(decoder) {
    var packed;
    var val = new StableCdmContext_GetScreenResolutions_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  StableCdmContext_GetScreenResolutions_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableCdmContext_GetScreenResolutions_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function StableCdmContext_GetScreenResolutions_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableCdmContext_GetScreenResolutions_ResponseParams.prototype.initDefaults_ = function() {
    this.resolutions = null;
  };
  StableCdmContext_GetScreenResolutions_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableCdmContext_GetScreenResolutions_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableCdmContext_GetScreenResolutions_ResponseParams.resolutions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(geometry$.Size), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableCdmContext_GetScreenResolutions_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  StableCdmContext_GetScreenResolutions_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new StableCdmContext_GetScreenResolutions_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.resolutions =
        decoder.decodeArrayPointer(new codec.PointerTo(geometry$.Size));
    return val;
  };

  StableCdmContext_GetScreenResolutions_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableCdmContext_GetScreenResolutions_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(geometry$.Size), val.resolutions);
  };
  function StableCdmContext_AllocateSecureBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableCdmContext_AllocateSecureBuffer_Params.prototype.initDefaults_ = function() {
    this.size = 0;
  };
  StableCdmContext_AllocateSecureBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableCdmContext_AllocateSecureBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  StableCdmContext_AllocateSecureBuffer_Params.encodedSize = codec.kStructHeaderSize + 8;

  StableCdmContext_AllocateSecureBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new StableCdmContext_AllocateSecureBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.size =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StableCdmContext_AllocateSecureBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableCdmContext_AllocateSecureBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.size);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StableCdmContext_AllocateSecureBuffer_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableCdmContext_AllocateSecureBuffer_ResponseParams.prototype.initDefaults_ = function() {
    this.secureBuffer = null;
  };
  StableCdmContext_AllocateSecureBuffer_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableCdmContext_AllocateSecureBuffer_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableCdmContext_AllocateSecureBuffer_ResponseParams.secureBuffer
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableCdmContext_AllocateSecureBuffer_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  StableCdmContext_AllocateSecureBuffer_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new StableCdmContext_AllocateSecureBuffer_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.secureBuffer =
        decoder.decodeStruct(codec.NullableHandle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StableCdmContext_AllocateSecureBuffer_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableCdmContext_AllocateSecureBuffer_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableHandle, val.secureBuffer);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StableVideoDecoder_GetSupportedConfigs_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableVideoDecoder_GetSupportedConfigs_Params.prototype.initDefaults_ = function() {
  };
  StableVideoDecoder_GetSupportedConfigs_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableVideoDecoder_GetSupportedConfigs_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableVideoDecoder_GetSupportedConfigs_Params.encodedSize = codec.kStructHeaderSize + 0;

  StableVideoDecoder_GetSupportedConfigs_Params.decode = function(decoder) {
    var packed;
    var val = new StableVideoDecoder_GetSupportedConfigs_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  StableVideoDecoder_GetSupportedConfigs_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableVideoDecoder_GetSupportedConfigs_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function StableVideoDecoder_GetSupportedConfigs_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableVideoDecoder_GetSupportedConfigs_ResponseParams.prototype.initDefaults_ = function() {
    this.supportedConfigs = null;
    this.decoderType = 0;
  };
  StableVideoDecoder_GetSupportedConfigs_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableVideoDecoder_GetSupportedConfigs_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoder_GetSupportedConfigs_ResponseParams.supportedConfigs
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(stable_video_decoder_types$.SupportedVideoDecoderConfig), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoder_GetSupportedConfigs_ResponseParams.decoderType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, stable_video_decoder_types$.VideoDecoderType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableVideoDecoder_GetSupportedConfigs_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  StableVideoDecoder_GetSupportedConfigs_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new StableVideoDecoder_GetSupportedConfigs_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.supportedConfigs =
        decoder.decodeArrayPointer(new codec.PointerTo(stable_video_decoder_types$.SupportedVideoDecoderConfig));
    val.decoderType =
        decoder.decodeStruct(new codec.Enum(stable_video_decoder_types$.VideoDecoderType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StableVideoDecoder_GetSupportedConfigs_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableVideoDecoder_GetSupportedConfigs_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(stable_video_decoder_types$.SupportedVideoDecoderConfig), val.supportedConfigs);
    encoder.encodeStruct(codec.Int32, val.decoderType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StableVideoDecoder_Construct_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableVideoDecoder_Construct_Params.prototype.initDefaults_ = function() {
    this.client = new associatedBindings.AssociatedInterfacePtrInfo();
    this.mediaLog = new MediaLogPtr();
    this.videoFrameHandleReleaser = new bindings.InterfaceRequest();
    this.decoderBufferPipe = null;
    this.targetColorSpace = null;
  };
  StableVideoDecoder_Construct_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableVideoDecoder_Construct_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoder_Construct_Params.client
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoder_Construct_Params.mediaLog
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoder_Construct_Params.videoFrameHandleReleaser
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoder_Construct_Params.decoderBufferPipe
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 20, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoder_Construct_Params.targetColorSpace
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, stable_video_decoder_types$.ColorSpace, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableVideoDecoder_Construct_Params.encodedSize = codec.kStructHeaderSize + 32;

  StableVideoDecoder_Construct_Params.decode = function(decoder) {
    var packed;
    var val = new StableVideoDecoder_Construct_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.mediaLog =
        decoder.decodeStruct(new codec.Interface(MediaLogPtr));
    val.videoFrameHandleReleaser =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.decoderBufferPipe =
        decoder.decodeStruct(codec.Handle);
    val.targetColorSpace =
        decoder.decodeStructPointer(stable_video_decoder_types$.ColorSpace);
    return val;
  };

  StableVideoDecoder_Construct_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableVideoDecoder_Construct_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.client);
    encoder.encodeStruct(new codec.Interface(MediaLogPtr), val.mediaLog);
    encoder.encodeStruct(codec.InterfaceRequest, val.videoFrameHandleReleaser);
    encoder.encodeStruct(codec.Handle, val.decoderBufferPipe);
    encoder.encodeStructPointer(stable_video_decoder_types$.ColorSpace, val.targetColorSpace);
  };
  function StableVideoDecoder_Initialize_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableVideoDecoder_Initialize_Params.prototype.initDefaults_ = function() {
    this.config = null;
    this.lowDelay = false;
    this.cdmContext = new StableCdmContextPtr();
  };
  StableVideoDecoder_Initialize_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableVideoDecoder_Initialize_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoder_Initialize_Params.config
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, stable_video_decoder_types$.VideoDecoderConfig, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate StableVideoDecoder_Initialize_Params.cdmContext
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 12, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableVideoDecoder_Initialize_Params.encodedSize = codec.kStructHeaderSize + 24;

  StableVideoDecoder_Initialize_Params.decode = function(decoder) {
    var packed;
    var val = new StableVideoDecoder_Initialize_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.config =
        decoder.decodeStructPointer(stable_video_decoder_types$.VideoDecoderConfig);
    packed = decoder.readUint8();
    val.lowDelay = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.cdmContext =
        decoder.decodeStruct(new codec.NullableInterface(StableCdmContextPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StableVideoDecoder_Initialize_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableVideoDecoder_Initialize_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(stable_video_decoder_types$.VideoDecoderConfig, val.config);
    packed = 0;
    packed |= (val.lowDelay & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(new codec.NullableInterface(StableCdmContextPtr), val.cdmContext);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StableVideoDecoder_Initialize_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableVideoDecoder_Initialize_ResponseParams.prototype.initDefaults_ = function() {
    this.status = null;
    this.needsBitstreamConversion = false;
    this.needsTranscryption = false;
    this.maxDecodeRequests = 0;
    this.decoderType = 0;
  };
  StableVideoDecoder_Initialize_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableVideoDecoder_Initialize_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32},
      {version: 1, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoder_Initialize_ResponseParams.status
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, stable_video_decoder_types$.Status, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate StableVideoDecoder_Initialize_ResponseParams.decoderType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, stable_video_decoder_types$.VideoDecoderType);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  StableVideoDecoder_Initialize_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  StableVideoDecoder_Initialize_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new StableVideoDecoder_Initialize_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStructPointer(stable_video_decoder_types$.Status);
    packed = decoder.readUint8();
    val.needsBitstreamConversion = (packed >> 0) & 1 ? true : false;
    val.needsTranscryption = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.maxDecodeRequests =
        decoder.decodeStruct(codec.Int32);
    val.decoderType =
        decoder.decodeStruct(new codec.Enum(stable_video_decoder_types$.VideoDecoderType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StableVideoDecoder_Initialize_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableVideoDecoder_Initialize_ResponseParams.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStructPointer(stable_video_decoder_types$.Status, val.status);
    packed = 0;
    packed |= (val.needsBitstreamConversion & 1) << 0
    packed |= (val.needsTranscryption & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.maxDecodeRequests);
    encoder.encodeStruct(codec.Int32, val.decoderType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StableVideoDecoder_Decode_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableVideoDecoder_Decode_Params.prototype.initDefaults_ = function() {
    this.buffer = null;
  };
  StableVideoDecoder_Decode_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableVideoDecoder_Decode_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoder_Decode_Params.buffer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, stable_video_decoder_types$.DecoderBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableVideoDecoder_Decode_Params.encodedSize = codec.kStructHeaderSize + 8;

  StableVideoDecoder_Decode_Params.decode = function(decoder) {
    var packed;
    var val = new StableVideoDecoder_Decode_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.buffer =
        decoder.decodeStructPointer(stable_video_decoder_types$.DecoderBuffer);
    return val;
  };

  StableVideoDecoder_Decode_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableVideoDecoder_Decode_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(stable_video_decoder_types$.DecoderBuffer, val.buffer);
  };
  function StableVideoDecoder_Decode_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableVideoDecoder_Decode_ResponseParams.prototype.initDefaults_ = function() {
    this.status = null;
  };
  StableVideoDecoder_Decode_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableVideoDecoder_Decode_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoder_Decode_ResponseParams.status
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, stable_video_decoder_types$.Status, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableVideoDecoder_Decode_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  StableVideoDecoder_Decode_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new StableVideoDecoder_Decode_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStructPointer(stable_video_decoder_types$.Status);
    return val;
  };

  StableVideoDecoder_Decode_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableVideoDecoder_Decode_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(stable_video_decoder_types$.Status, val.status);
  };
  function StableVideoDecoder_Reset_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableVideoDecoder_Reset_Params.prototype.initDefaults_ = function() {
  };
  StableVideoDecoder_Reset_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableVideoDecoder_Reset_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableVideoDecoder_Reset_Params.encodedSize = codec.kStructHeaderSize + 0;

  StableVideoDecoder_Reset_Params.decode = function(decoder) {
    var packed;
    var val = new StableVideoDecoder_Reset_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  StableVideoDecoder_Reset_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableVideoDecoder_Reset_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function StableVideoDecoder_Reset_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableVideoDecoder_Reset_ResponseParams.prototype.initDefaults_ = function() {
  };
  StableVideoDecoder_Reset_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableVideoDecoder_Reset_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableVideoDecoder_Reset_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  StableVideoDecoder_Reset_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new StableVideoDecoder_Reset_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  StableVideoDecoder_Reset_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableVideoDecoder_Reset_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function StableVideoDecoderFactory_CreateStableVideoDecoder_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableVideoDecoderFactory_CreateStableVideoDecoder_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
    this.tracker = new StableVideoDecoderTrackerPtr();
  };
  StableVideoDecoderFactory_CreateStableVideoDecoder_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableVideoDecoderFactory_CreateStableVideoDecoder_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16},
      {version: 1, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoderFactory_CreateStableVideoDecoder_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;



    // version check StableVideoDecoderFactory_CreateStableVideoDecoder_Params.tracker
    if (!messageValidator.isFieldInStructVersion(offset, 1))
      return validator.validationError.NONE;
    // validate StableVideoDecoderFactory_CreateStableVideoDecoder_Params.tracker
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 4, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableVideoDecoderFactory_CreateStableVideoDecoder_Params.encodedSize = codec.kStructHeaderSize + 16;

  StableVideoDecoderFactory_CreateStableVideoDecoder_Params.decode = function(decoder) {
    var packed;
    var val = new StableVideoDecoderFactory_CreateStableVideoDecoder_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    if (version >= 1) {
      val.tracker =
          decoder.decodeStruct(new codec.NullableInterface(StableVideoDecoderTrackerPtr));
    } else {
      val.tracker = null;
    }
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  StableVideoDecoderFactory_CreateStableVideoDecoder_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableVideoDecoderFactory_CreateStableVideoDecoder_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(new codec.NullableInterface(StableVideoDecoderTrackerPtr), val.tracker);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params.prototype.initDefaults_ = function() {
    this.gpuFeatureInfo = null;
    this.enableDirectVideoDecoder = false;
    this.receiver = new bindings.InterfaceRequest();
  };
  StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params.gpuFeatureInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_feature_info$.GpuFeatureInfo, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 12, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params.encodedSize = codec.kStructHeaderSize + 16;

  StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params.decode = function(decoder) {
    var packed;
    var val = new StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.gpuFeatureInfo =
        decoder.decodeStructPointer(gpu_feature_info$.GpuFeatureInfo);
    packed = decoder.readUint8();
    val.enableDirectVideoDecoder = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    return val;
  };

  StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_feature_info$.GpuFeatureInfo, val.gpuFeatureInfo);
    packed = 0;
    packed |= (val.enableDirectVideoDecoder & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
  };
  var kMediaLog_AddLogRecord_Name = 0;

  function MediaLogPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MediaLog,
                                                   handleOrPtrInfo);
  }

  function MediaLogAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MediaLog, associatedInterfacePtrInfo);
  }

  MediaLogAssociatedPtr.prototype =
      Object.create(MediaLogPtr.prototype);
  MediaLogAssociatedPtr.prototype.constructor =
      MediaLogAssociatedPtr;

  function MediaLogProxy(receiver) {
    this.receiver_ = receiver;
  }
  MediaLogPtr.prototype.addLogRecord = function() {
    return MediaLogProxy.prototype.addLogRecord
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaLogProxy.prototype.addLogRecord = function(event) {
    var params_ = new MediaLog_AddLogRecord_Params();
    params_.event = event;
    var builder = new codec.MessageV0Builder(
        kMediaLog_AddLogRecord_Name,
        codec.align(MediaLog_AddLogRecord_Params.encodedSize));
    builder.encodeStruct(MediaLog_AddLogRecord_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MediaLogStub(delegate) {
    this.delegate_ = delegate;
  }
  MediaLogStub.prototype.addLogRecord = function(event) {
    return this.delegate_ && this.delegate_.addLogRecord && this.delegate_.addLogRecord(event);
  }

  MediaLogStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMediaLog_AddLogRecord_Name:
      var params = reader.decodeStruct(MediaLog_AddLogRecord_Params);
      this.addLogRecord(params.event);
      return true;
    default:
      return false;
    }
  };

  MediaLogStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMediaLogRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMediaLog_AddLogRecord_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaLog_AddLogRecord_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMediaLogResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MediaLog = {
    name: 'media.stable.mojom.MediaLog',
    kVersion: 0,
    ptrClass: MediaLogPtr,
    proxyClass: MediaLogProxy,
    stubClass: MediaLogStub,
    validateRequest: validateMediaLogRequest,
    validateResponse: null,
  };
  MediaLogStub.prototype.validator = validateMediaLogRequest;
  MediaLogProxy.prototype.validator = null;
  var kVideoFrameHandleReleaser_ReleaseVideoFrame_Name = 0;

  function VideoFrameHandleReleaserPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(VideoFrameHandleReleaser,
                                                   handleOrPtrInfo);
  }

  function VideoFrameHandleReleaserAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        VideoFrameHandleReleaser, associatedInterfacePtrInfo);
  }

  VideoFrameHandleReleaserAssociatedPtr.prototype =
      Object.create(VideoFrameHandleReleaserPtr.prototype);
  VideoFrameHandleReleaserAssociatedPtr.prototype.constructor =
      VideoFrameHandleReleaserAssociatedPtr;

  function VideoFrameHandleReleaserProxy(receiver) {
    this.receiver_ = receiver;
  }
  VideoFrameHandleReleaserPtr.prototype.releaseVideoFrame = function() {
    return VideoFrameHandleReleaserProxy.prototype.releaseVideoFrame
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandleReleaserProxy.prototype.releaseVideoFrame = function(releaseToken) {
    var params_ = new VideoFrameHandleReleaser_ReleaseVideoFrame_Params();
    params_.releaseToken = releaseToken;
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandleReleaser_ReleaseVideoFrame_Name,
        codec.align(VideoFrameHandleReleaser_ReleaseVideoFrame_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandleReleaser_ReleaseVideoFrame_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function VideoFrameHandleReleaserStub(delegate) {
    this.delegate_ = delegate;
  }
  VideoFrameHandleReleaserStub.prototype.releaseVideoFrame = function(releaseToken) {
    return this.delegate_ && this.delegate_.releaseVideoFrame && this.delegate_.releaseVideoFrame(releaseToken);
  }

  VideoFrameHandleReleaserStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVideoFrameHandleReleaser_ReleaseVideoFrame_Name:
      var params = reader.decodeStruct(VideoFrameHandleReleaser_ReleaseVideoFrame_Params);
      this.releaseVideoFrame(params.releaseToken);
      return true;
    default:
      return false;
    }
  };

  VideoFrameHandleReleaserStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateVideoFrameHandleReleaserRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kVideoFrameHandleReleaser_ReleaseVideoFrame_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandleReleaser_ReleaseVideoFrame_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateVideoFrameHandleReleaserResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var VideoFrameHandleReleaser = {
    name: 'media.stable.mojom.VideoFrameHandleReleaser',
    kVersion: 0,
    ptrClass: VideoFrameHandleReleaserPtr,
    proxyClass: VideoFrameHandleReleaserProxy,
    stubClass: VideoFrameHandleReleaserStub,
    validateRequest: validateVideoFrameHandleReleaserRequest,
    validateResponse: null,
  };
  VideoFrameHandleReleaserStub.prototype.validator = validateVideoFrameHandleReleaserRequest;
  VideoFrameHandleReleaserProxy.prototype.validator = null;
  var kVideoDecoderClient_OnVideoFrameDecoded_Name = 0;
  var kVideoDecoderClient_OnWaiting_Name = 1;

  function VideoDecoderClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(VideoDecoderClient,
                                                   handleOrPtrInfo);
  }

  function VideoDecoderClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        VideoDecoderClient, associatedInterfacePtrInfo);
  }

  VideoDecoderClientAssociatedPtr.prototype =
      Object.create(VideoDecoderClientPtr.prototype);
  VideoDecoderClientAssociatedPtr.prototype.constructor =
      VideoDecoderClientAssociatedPtr;

  function VideoDecoderClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  VideoDecoderClientPtr.prototype.onVideoFrameDecoded = function() {
    return VideoDecoderClientProxy.prototype.onVideoFrameDecoded
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoDecoderClientProxy.prototype.onVideoFrameDecoded = function(frame, canReadWithoutStalling, releaseToken) {
    var params_ = new VideoDecoderClient_OnVideoFrameDecoded_Params();
    params_.frame = frame;
    params_.canReadWithoutStalling = canReadWithoutStalling;
    params_.releaseToken = releaseToken;
    var builder = new codec.MessageV0Builder(
        kVideoDecoderClient_OnVideoFrameDecoded_Name,
        codec.align(VideoDecoderClient_OnVideoFrameDecoded_Params.encodedSize));
    builder.encodeStruct(VideoDecoderClient_OnVideoFrameDecoded_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoDecoderClientPtr.prototype.onWaiting = function() {
    return VideoDecoderClientProxy.prototype.onWaiting
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoDecoderClientProxy.prototype.onWaiting = function(reason) {
    var params_ = new VideoDecoderClient_OnWaiting_Params();
    params_.reason = reason;
    var builder = new codec.MessageV0Builder(
        kVideoDecoderClient_OnWaiting_Name,
        codec.align(VideoDecoderClient_OnWaiting_Params.encodedSize));
    builder.encodeStruct(VideoDecoderClient_OnWaiting_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function VideoDecoderClientStub(delegate) {
    this.delegate_ = delegate;
  }
  VideoDecoderClientStub.prototype.onVideoFrameDecoded = function(frame, canReadWithoutStalling, releaseToken) {
    return this.delegate_ && this.delegate_.onVideoFrameDecoded && this.delegate_.onVideoFrameDecoded(frame, canReadWithoutStalling, releaseToken);
  }
  VideoDecoderClientStub.prototype.onWaiting = function(reason) {
    return this.delegate_ && this.delegate_.onWaiting && this.delegate_.onWaiting(reason);
  }

  VideoDecoderClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVideoDecoderClient_OnVideoFrameDecoded_Name:
      var params = reader.decodeStruct(VideoDecoderClient_OnVideoFrameDecoded_Params);
      this.onVideoFrameDecoded(params.frame, params.canReadWithoutStalling, params.releaseToken);
      return true;
    case kVideoDecoderClient_OnWaiting_Name:
      var params = reader.decodeStruct(VideoDecoderClient_OnWaiting_Params);
      this.onWaiting(params.reason);
      return true;
    default:
      return false;
    }
  };

  VideoDecoderClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateVideoDecoderClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kVideoDecoderClient_OnVideoFrameDecoded_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoDecoderClient_OnVideoFrameDecoded_Params;
      break;
      case kVideoDecoderClient_OnWaiting_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoDecoderClient_OnWaiting_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateVideoDecoderClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var VideoDecoderClient = {
    name: 'media.stable.mojom.VideoDecoderClient',
    kVersion: 0,
    ptrClass: VideoDecoderClientPtr,
    proxyClass: VideoDecoderClientProxy,
    stubClass: VideoDecoderClientStub,
    validateRequest: validateVideoDecoderClientRequest,
    validateResponse: null,
  };
  VideoDecoderClientStub.prototype.validator = validateVideoDecoderClientRequest;
  VideoDecoderClientProxy.prototype.validator = null;
  var kCdmContextEventCallback_EventCallback_Name = 0;

  function CdmContextEventCallbackPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CdmContextEventCallback,
                                                   handleOrPtrInfo);
  }

  function CdmContextEventCallbackAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CdmContextEventCallback, associatedInterfacePtrInfo);
  }

  CdmContextEventCallbackAssociatedPtr.prototype =
      Object.create(CdmContextEventCallbackPtr.prototype);
  CdmContextEventCallbackAssociatedPtr.prototype.constructor =
      CdmContextEventCallbackAssociatedPtr;

  function CdmContextEventCallbackProxy(receiver) {
    this.receiver_ = receiver;
  }
  CdmContextEventCallbackPtr.prototype.eventCallback = function() {
    return CdmContextEventCallbackProxy.prototype.eventCallback
        .apply(this.ptr.getProxy(), arguments);
  };

  CdmContextEventCallbackProxy.prototype.eventCallback = function(event) {
    var params_ = new CdmContextEventCallback_EventCallback_Params();
    params_.event = event;
    var builder = new codec.MessageV0Builder(
        kCdmContextEventCallback_EventCallback_Name,
        codec.align(CdmContextEventCallback_EventCallback_Params.encodedSize));
    builder.encodeStruct(CdmContextEventCallback_EventCallback_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function CdmContextEventCallbackStub(delegate) {
    this.delegate_ = delegate;
  }
  CdmContextEventCallbackStub.prototype.eventCallback = function(event) {
    return this.delegate_ && this.delegate_.eventCallback && this.delegate_.eventCallback(event);
  }

  CdmContextEventCallbackStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCdmContextEventCallback_EventCallback_Name:
      var params = reader.decodeStruct(CdmContextEventCallback_EventCallback_Params);
      this.eventCallback(params.event);
      return true;
    default:
      return false;
    }
  };

  CdmContextEventCallbackStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateCdmContextEventCallbackRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCdmContextEventCallback_EventCallback_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CdmContextEventCallback_EventCallback_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCdmContextEventCallbackResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var CdmContextEventCallback = {
    name: 'media.stable.mojom.CdmContextEventCallback',
    kVersion: 0,
    ptrClass: CdmContextEventCallbackPtr,
    proxyClass: CdmContextEventCallbackProxy,
    stubClass: CdmContextEventCallbackStub,
    validateRequest: validateCdmContextEventCallbackRequest,
    validateResponse: null,
  };
  CdmContextEventCallbackStub.prototype.validator = validateCdmContextEventCallbackRequest;
  CdmContextEventCallbackProxy.prototype.validator = null;
  var kStableCdmContext_GetHwKeyData_Name = 0;
  var kStableCdmContext_RegisterEventCallback_Name = 1;
  var kStableCdmContext_GetHwConfigData_Name = 2;
  var kStableCdmContext_GetScreenResolutions_Name = 3;
  var kStableCdmContext_AllocateSecureBuffer_Name = 4;

  function StableCdmContextPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(StableCdmContext,
                                                   handleOrPtrInfo);
  }

  function StableCdmContextAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        StableCdmContext, associatedInterfacePtrInfo);
  }

  StableCdmContextAssociatedPtr.prototype =
      Object.create(StableCdmContextPtr.prototype);
  StableCdmContextAssociatedPtr.prototype.constructor =
      StableCdmContextAssociatedPtr;

  function StableCdmContextProxy(receiver) {
    this.receiver_ = receiver;
  }
  StableCdmContextPtr.prototype.getHwKeyData = function() {
    return StableCdmContextProxy.prototype.getHwKeyData
        .apply(this.ptr.getProxy(), arguments);
  };

  StableCdmContextProxy.prototype.getHwKeyData = function(decryptConfig, hwIdentifier) {
    var params_ = new StableCdmContext_GetHwKeyData_Params();
    params_.decryptConfig = decryptConfig;
    params_.hwIdentifier = hwIdentifier;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kStableCdmContext_GetHwKeyData_Name,
          codec.align(StableCdmContext_GetHwKeyData_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(StableCdmContext_GetHwKeyData_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(StableCdmContext_GetHwKeyData_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  StableCdmContextPtr.prototype.registerEventCallback = function() {
    return StableCdmContextProxy.prototype.registerEventCallback
        .apply(this.ptr.getProxy(), arguments);
  };

  StableCdmContextProxy.prototype.registerEventCallback = function(callback) {
    var params_ = new StableCdmContext_RegisterEventCallback_Params();
    params_.callback = callback;
    var builder = new codec.MessageV0Builder(
        kStableCdmContext_RegisterEventCallback_Name,
        codec.align(StableCdmContext_RegisterEventCallback_Params.encodedSize));
    builder.encodeStruct(StableCdmContext_RegisterEventCallback_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  StableCdmContextPtr.prototype.getHwConfigData = function() {
    return StableCdmContextProxy.prototype.getHwConfigData
        .apply(this.ptr.getProxy(), arguments);
  };

  StableCdmContextProxy.prototype.getHwConfigData = function() {
    var params_ = new StableCdmContext_GetHwConfigData_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kStableCdmContext_GetHwConfigData_Name,
          codec.align(StableCdmContext_GetHwConfigData_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(StableCdmContext_GetHwConfigData_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(StableCdmContext_GetHwConfigData_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  StableCdmContextPtr.prototype.getScreenResolutions = function() {
    return StableCdmContextProxy.prototype.getScreenResolutions
        .apply(this.ptr.getProxy(), arguments);
  };

  StableCdmContextProxy.prototype.getScreenResolutions = function() {
    var params_ = new StableCdmContext_GetScreenResolutions_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kStableCdmContext_GetScreenResolutions_Name,
          codec.align(StableCdmContext_GetScreenResolutions_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(StableCdmContext_GetScreenResolutions_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(StableCdmContext_GetScreenResolutions_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  StableCdmContextPtr.prototype.allocateSecureBuffer = function() {
    return StableCdmContextProxy.prototype.allocateSecureBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  StableCdmContextProxy.prototype.allocateSecureBuffer = function(size) {
    var params_ = new StableCdmContext_AllocateSecureBuffer_Params();
    params_.size = size;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kStableCdmContext_AllocateSecureBuffer_Name,
          codec.align(StableCdmContext_AllocateSecureBuffer_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(StableCdmContext_AllocateSecureBuffer_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(StableCdmContext_AllocateSecureBuffer_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function StableCdmContextStub(delegate) {
    this.delegate_ = delegate;
  }
  StableCdmContextStub.prototype.getHwKeyData = function(decryptConfig, hwIdentifier) {
    return this.delegate_ && this.delegate_.getHwKeyData && this.delegate_.getHwKeyData(decryptConfig, hwIdentifier);
  }
  StableCdmContextStub.prototype.registerEventCallback = function(callback) {
    return this.delegate_ && this.delegate_.registerEventCallback && this.delegate_.registerEventCallback(callback);
  }
  StableCdmContextStub.prototype.getHwConfigData = function() {
    return this.delegate_ && this.delegate_.getHwConfigData && this.delegate_.getHwConfigData();
  }
  StableCdmContextStub.prototype.getScreenResolutions = function() {
    return this.delegate_ && this.delegate_.getScreenResolutions && this.delegate_.getScreenResolutions();
  }
  StableCdmContextStub.prototype.allocateSecureBuffer = function(size) {
    return this.delegate_ && this.delegate_.allocateSecureBuffer && this.delegate_.allocateSecureBuffer(size);
  }

  StableCdmContextStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kStableCdmContext_RegisterEventCallback_Name:
      var params = reader.decodeStruct(StableCdmContext_RegisterEventCallback_Params);
      this.registerEventCallback(params.callback);
      return true;
    default:
      return false;
    }
  };

  StableCdmContextStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kStableCdmContext_GetHwKeyData_Name:
      var params = reader.decodeStruct(StableCdmContext_GetHwKeyData_Params);
      this.getHwKeyData(params.decryptConfig, params.hwIdentifier).then(function(response) {
        var responseParams =
            new StableCdmContext_GetHwKeyData_ResponseParams();
        responseParams.status = response.status;
        responseParams.keyData = response.keyData;
        var builder = new codec.MessageV1Builder(
            kStableCdmContext_GetHwKeyData_Name,
            codec.align(StableCdmContext_GetHwKeyData_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(StableCdmContext_GetHwKeyData_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kStableCdmContext_GetHwConfigData_Name:
      var params = reader.decodeStruct(StableCdmContext_GetHwConfigData_Params);
      this.getHwConfigData().then(function(response) {
        var responseParams =
            new StableCdmContext_GetHwConfigData_ResponseParams();
        responseParams.success = response.success;
        responseParams.configData = response.configData;
        var builder = new codec.MessageV1Builder(
            kStableCdmContext_GetHwConfigData_Name,
            codec.align(StableCdmContext_GetHwConfigData_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(StableCdmContext_GetHwConfigData_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kStableCdmContext_GetScreenResolutions_Name:
      var params = reader.decodeStruct(StableCdmContext_GetScreenResolutions_Params);
      this.getScreenResolutions().then(function(response) {
        var responseParams =
            new StableCdmContext_GetScreenResolutions_ResponseParams();
        responseParams.resolutions = response.resolutions;
        var builder = new codec.MessageV1Builder(
            kStableCdmContext_GetScreenResolutions_Name,
            codec.align(StableCdmContext_GetScreenResolutions_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(StableCdmContext_GetScreenResolutions_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kStableCdmContext_AllocateSecureBuffer_Name:
      var params = reader.decodeStruct(StableCdmContext_AllocateSecureBuffer_Params);
      this.allocateSecureBuffer(params.size).then(function(response) {
        var responseParams =
            new StableCdmContext_AllocateSecureBuffer_ResponseParams();
        responseParams.secureBuffer = response.secureBuffer;
        var builder = new codec.MessageV1Builder(
            kStableCdmContext_AllocateSecureBuffer_Name,
            codec.align(StableCdmContext_AllocateSecureBuffer_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(StableCdmContext_AllocateSecureBuffer_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateStableCdmContextRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kStableCdmContext_GetHwKeyData_Name:
        if (message.expectsResponse())
          paramsClass = StableCdmContext_GetHwKeyData_Params;
      break;
      case kStableCdmContext_RegisterEventCallback_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = StableCdmContext_RegisterEventCallback_Params;
      break;
      case kStableCdmContext_GetHwConfigData_Name:
        if (message.expectsResponse())
          paramsClass = StableCdmContext_GetHwConfigData_Params;
      break;
      case kStableCdmContext_GetScreenResolutions_Name:
        if (message.expectsResponse())
          paramsClass = StableCdmContext_GetScreenResolutions_Params;
      break;
      case kStableCdmContext_AllocateSecureBuffer_Name:
        if (message.expectsResponse())
          paramsClass = StableCdmContext_AllocateSecureBuffer_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateStableCdmContextResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kStableCdmContext_GetHwKeyData_Name:
        if (message.isResponse())
          paramsClass = StableCdmContext_GetHwKeyData_ResponseParams;
        break;
      case kStableCdmContext_GetHwConfigData_Name:
        if (message.isResponse())
          paramsClass = StableCdmContext_GetHwConfigData_ResponseParams;
        break;
      case kStableCdmContext_GetScreenResolutions_Name:
        if (message.isResponse())
          paramsClass = StableCdmContext_GetScreenResolutions_ResponseParams;
        break;
      case kStableCdmContext_AllocateSecureBuffer_Name:
        if (message.isResponse())
          paramsClass = StableCdmContext_AllocateSecureBuffer_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var StableCdmContext = {
    name: 'media.stable.mojom.StableCdmContext',
    kVersion: 2,
    ptrClass: StableCdmContextPtr,
    proxyClass: StableCdmContextProxy,
    stubClass: StableCdmContextStub,
    validateRequest: validateStableCdmContextRequest,
    validateResponse: validateStableCdmContextResponse,
  };
  StableCdmContextStub.prototype.validator = validateStableCdmContextRequest;
  StableCdmContextProxy.prototype.validator = validateStableCdmContextResponse;
  var kStableVideoDecoder_GetSupportedConfigs_Name = 0;
  var kStableVideoDecoder_Construct_Name = 1;
  var kStableVideoDecoder_Initialize_Name = 2;
  var kStableVideoDecoder_Decode_Name = 3;
  var kStableVideoDecoder_Reset_Name = 4;

  function StableVideoDecoderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(StableVideoDecoder,
                                                   handleOrPtrInfo);
  }

  function StableVideoDecoderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        StableVideoDecoder, associatedInterfacePtrInfo);
  }

  StableVideoDecoderAssociatedPtr.prototype =
      Object.create(StableVideoDecoderPtr.prototype);
  StableVideoDecoderAssociatedPtr.prototype.constructor =
      StableVideoDecoderAssociatedPtr;

  function StableVideoDecoderProxy(receiver) {
    this.receiver_ = receiver;
  }
  StableVideoDecoderPtr.prototype.getSupportedConfigs = function() {
    return StableVideoDecoderProxy.prototype.getSupportedConfigs
        .apply(this.ptr.getProxy(), arguments);
  };

  StableVideoDecoderProxy.prototype.getSupportedConfigs = function() {
    var params_ = new StableVideoDecoder_GetSupportedConfigs_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kStableVideoDecoder_GetSupportedConfigs_Name,
          codec.align(StableVideoDecoder_GetSupportedConfigs_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(StableVideoDecoder_GetSupportedConfigs_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(StableVideoDecoder_GetSupportedConfigs_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  StableVideoDecoderPtr.prototype.construct = function() {
    return StableVideoDecoderProxy.prototype.construct
        .apply(this.ptr.getProxy(), arguments);
  };

  StableVideoDecoderProxy.prototype.construct = function(client, mediaLog, videoFrameHandleReleaser, decoderBufferPipe, targetColorSpace) {
    var params_ = new StableVideoDecoder_Construct_Params();
    params_.client = client;
    params_.mediaLog = mediaLog;
    params_.videoFrameHandleReleaser = videoFrameHandleReleaser;
    params_.decoderBufferPipe = decoderBufferPipe;
    params_.targetColorSpace = targetColorSpace;
    var builder = new codec.MessageV2Builder(
        kStableVideoDecoder_Construct_Name,
        codec.align(StableVideoDecoder_Construct_Params.encodedSize));
    builder.setPayload(StableVideoDecoder_Construct_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  StableVideoDecoderPtr.prototype.initialize = function() {
    return StableVideoDecoderProxy.prototype.initialize
        .apply(this.ptr.getProxy(), arguments);
  };

  StableVideoDecoderProxy.prototype.initialize = function(config, lowDelay, cdmContext) {
    var params_ = new StableVideoDecoder_Initialize_Params();
    params_.config = config;
    params_.lowDelay = lowDelay;
    params_.cdmContext = cdmContext;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kStableVideoDecoder_Initialize_Name,
          codec.align(StableVideoDecoder_Initialize_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(StableVideoDecoder_Initialize_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(StableVideoDecoder_Initialize_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  StableVideoDecoderPtr.prototype.decode = function() {
    return StableVideoDecoderProxy.prototype.decode
        .apply(this.ptr.getProxy(), arguments);
  };

  StableVideoDecoderProxy.prototype.decode = function(buffer) {
    var params_ = new StableVideoDecoder_Decode_Params();
    params_.buffer = buffer;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kStableVideoDecoder_Decode_Name,
          codec.align(StableVideoDecoder_Decode_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(StableVideoDecoder_Decode_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(StableVideoDecoder_Decode_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  StableVideoDecoderPtr.prototype.reset = function() {
    return StableVideoDecoderProxy.prototype.reset
        .apply(this.ptr.getProxy(), arguments);
  };

  StableVideoDecoderProxy.prototype.reset = function() {
    var params_ = new StableVideoDecoder_Reset_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kStableVideoDecoder_Reset_Name,
          codec.align(StableVideoDecoder_Reset_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(StableVideoDecoder_Reset_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(StableVideoDecoder_Reset_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function StableVideoDecoderStub(delegate) {
    this.delegate_ = delegate;
  }
  StableVideoDecoderStub.prototype.getSupportedConfigs = function() {
    return this.delegate_ && this.delegate_.getSupportedConfigs && this.delegate_.getSupportedConfigs();
  }
  StableVideoDecoderStub.prototype.construct = function(client, mediaLog, videoFrameHandleReleaser, decoderBufferPipe, targetColorSpace) {
    return this.delegate_ && this.delegate_.construct && this.delegate_.construct(client, mediaLog, videoFrameHandleReleaser, decoderBufferPipe, targetColorSpace);
  }
  StableVideoDecoderStub.prototype.initialize = function(config, lowDelay, cdmContext) {
    return this.delegate_ && this.delegate_.initialize && this.delegate_.initialize(config, lowDelay, cdmContext);
  }
  StableVideoDecoderStub.prototype.decode = function(buffer) {
    return this.delegate_ && this.delegate_.decode && this.delegate_.decode(buffer);
  }
  StableVideoDecoderStub.prototype.reset = function() {
    return this.delegate_ && this.delegate_.reset && this.delegate_.reset();
  }

  StableVideoDecoderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kStableVideoDecoder_Construct_Name:
      var params = reader.decodeStruct(StableVideoDecoder_Construct_Params);
      this.construct(params.client, params.mediaLog, params.videoFrameHandleReleaser, params.decoderBufferPipe, params.targetColorSpace);
      return true;
    default:
      return false;
    }
  };

  StableVideoDecoderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kStableVideoDecoder_GetSupportedConfigs_Name:
      var params = reader.decodeStruct(StableVideoDecoder_GetSupportedConfigs_Params);
      this.getSupportedConfigs().then(function(response) {
        var responseParams =
            new StableVideoDecoder_GetSupportedConfigs_ResponseParams();
        responseParams.supportedConfigs = response.supportedConfigs;
        responseParams.decoderType = response.decoderType;
        var builder = new codec.MessageV1Builder(
            kStableVideoDecoder_GetSupportedConfigs_Name,
            codec.align(StableVideoDecoder_GetSupportedConfigs_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(StableVideoDecoder_GetSupportedConfigs_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kStableVideoDecoder_Initialize_Name:
      var params = reader.decodeStruct(StableVideoDecoder_Initialize_Params);
      this.initialize(params.config, params.lowDelay, params.cdmContext).then(function(response) {
        var responseParams =
            new StableVideoDecoder_Initialize_ResponseParams();
        responseParams.status = response.status;
        responseParams.needsBitstreamConversion = response.needsBitstreamConversion;
        responseParams.maxDecodeRequests = response.maxDecodeRequests;
        responseParams.decoderType = response.decoderType;
        responseParams.needsTranscryption = response.needsTranscryption;
        var builder = new codec.MessageV1Builder(
            kStableVideoDecoder_Initialize_Name,
            codec.align(StableVideoDecoder_Initialize_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(StableVideoDecoder_Initialize_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kStableVideoDecoder_Decode_Name:
      var params = reader.decodeStruct(StableVideoDecoder_Decode_Params);
      this.decode(params.buffer).then(function(response) {
        var responseParams =
            new StableVideoDecoder_Decode_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kStableVideoDecoder_Decode_Name,
            codec.align(StableVideoDecoder_Decode_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(StableVideoDecoder_Decode_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kStableVideoDecoder_Reset_Name:
      var params = reader.decodeStruct(StableVideoDecoder_Reset_Params);
      this.reset().then(function(response) {
        var responseParams =
            new StableVideoDecoder_Reset_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kStableVideoDecoder_Reset_Name,
            codec.align(StableVideoDecoder_Reset_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(StableVideoDecoder_Reset_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateStableVideoDecoderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kStableVideoDecoder_GetSupportedConfigs_Name:
        if (message.expectsResponse())
          paramsClass = StableVideoDecoder_GetSupportedConfigs_Params;
      break;
      case kStableVideoDecoder_Construct_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = StableVideoDecoder_Construct_Params;
      break;
      case kStableVideoDecoder_Initialize_Name:
        if (message.expectsResponse())
          paramsClass = StableVideoDecoder_Initialize_Params;
      break;
      case kStableVideoDecoder_Decode_Name:
        if (message.expectsResponse())
          paramsClass = StableVideoDecoder_Decode_Params;
      break;
      case kStableVideoDecoder_Reset_Name:
        if (message.expectsResponse())
          paramsClass = StableVideoDecoder_Reset_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateStableVideoDecoderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kStableVideoDecoder_GetSupportedConfigs_Name:
        if (message.isResponse())
          paramsClass = StableVideoDecoder_GetSupportedConfigs_ResponseParams;
        break;
      case kStableVideoDecoder_Initialize_Name:
        if (message.isResponse())
          paramsClass = StableVideoDecoder_Initialize_ResponseParams;
        break;
      case kStableVideoDecoder_Decode_Name:
        if (message.isResponse())
          paramsClass = StableVideoDecoder_Decode_ResponseParams;
        break;
      case kStableVideoDecoder_Reset_Name:
        if (message.isResponse())
          paramsClass = StableVideoDecoder_Reset_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var StableVideoDecoder = {
    name: 'media.stable.mojom.StableVideoDecoder',
    kVersion: 1,
    ptrClass: StableVideoDecoderPtr,
    proxyClass: StableVideoDecoderProxy,
    stubClass: StableVideoDecoderStub,
    validateRequest: validateStableVideoDecoderRequest,
    validateResponse: validateStableVideoDecoderResponse,
  };
  StableVideoDecoderStub.prototype.validator = validateStableVideoDecoderRequest;
  StableVideoDecoderProxy.prototype.validator = validateStableVideoDecoderResponse;

  function StableVideoDecoderTrackerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(StableVideoDecoderTracker,
                                                   handleOrPtrInfo);
  }

  function StableVideoDecoderTrackerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        StableVideoDecoderTracker, associatedInterfacePtrInfo);
  }

  StableVideoDecoderTrackerAssociatedPtr.prototype =
      Object.create(StableVideoDecoderTrackerPtr.prototype);
  StableVideoDecoderTrackerAssociatedPtr.prototype.constructor =
      StableVideoDecoderTrackerAssociatedPtr;

  function StableVideoDecoderTrackerProxy(receiver) {
    this.receiver_ = receiver;
  }

  function StableVideoDecoderTrackerStub(delegate) {
    this.delegate_ = delegate;
  }

  StableVideoDecoderTrackerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  StableVideoDecoderTrackerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateStableVideoDecoderTrackerRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateStableVideoDecoderTrackerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var StableVideoDecoderTracker = {
    name: 'media.stable.mojom.StableVideoDecoderTracker',
    kVersion: 0,
    ptrClass: StableVideoDecoderTrackerPtr,
    proxyClass: StableVideoDecoderTrackerProxy,
    stubClass: StableVideoDecoderTrackerStub,
    validateRequest: validateStableVideoDecoderTrackerRequest,
    validateResponse: null,
  };
  StableVideoDecoderTrackerStub.prototype.validator = validateStableVideoDecoderTrackerRequest;
  StableVideoDecoderTrackerProxy.prototype.validator = null;
  var kStableVideoDecoderFactory_CreateStableVideoDecoder_Name = 0;

  function StableVideoDecoderFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(StableVideoDecoderFactory,
                                                   handleOrPtrInfo);
  }

  function StableVideoDecoderFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        StableVideoDecoderFactory, associatedInterfacePtrInfo);
  }

  StableVideoDecoderFactoryAssociatedPtr.prototype =
      Object.create(StableVideoDecoderFactoryPtr.prototype);
  StableVideoDecoderFactoryAssociatedPtr.prototype.constructor =
      StableVideoDecoderFactoryAssociatedPtr;

  function StableVideoDecoderFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  StableVideoDecoderFactoryPtr.prototype.createStableVideoDecoder = function() {
    return StableVideoDecoderFactoryProxy.prototype.createStableVideoDecoder
        .apply(this.ptr.getProxy(), arguments);
  };

  StableVideoDecoderFactoryProxy.prototype.createStableVideoDecoder = function(receiver, tracker) {
    var params_ = new StableVideoDecoderFactory_CreateStableVideoDecoder_Params();
    params_.receiver = receiver;
    params_.tracker = tracker;
    var builder = new codec.MessageV0Builder(
        kStableVideoDecoderFactory_CreateStableVideoDecoder_Name,
        codec.align(StableVideoDecoderFactory_CreateStableVideoDecoder_Params.encodedSize));
    builder.encodeStruct(StableVideoDecoderFactory_CreateStableVideoDecoder_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function StableVideoDecoderFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  StableVideoDecoderFactoryStub.prototype.createStableVideoDecoder = function(receiver, tracker) {
    return this.delegate_ && this.delegate_.createStableVideoDecoder && this.delegate_.createStableVideoDecoder(receiver, tracker);
  }

  StableVideoDecoderFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kStableVideoDecoderFactory_CreateStableVideoDecoder_Name:
      var params = reader.decodeStruct(StableVideoDecoderFactory_CreateStableVideoDecoder_Params);
      this.createStableVideoDecoder(params.receiver, params.tracker);
      return true;
    default:
      return false;
    }
  };

  StableVideoDecoderFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateStableVideoDecoderFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kStableVideoDecoderFactory_CreateStableVideoDecoder_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = StableVideoDecoderFactory_CreateStableVideoDecoder_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateStableVideoDecoderFactoryResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var StableVideoDecoderFactory = {
    name: 'media.stable.mojom.StableVideoDecoderFactory',
    kVersion: 1,
    ptrClass: StableVideoDecoderFactoryPtr,
    proxyClass: StableVideoDecoderFactoryProxy,
    stubClass: StableVideoDecoderFactoryStub,
    validateRequest: validateStableVideoDecoderFactoryRequest,
    validateResponse: null,
  };
  StableVideoDecoderFactoryStub.prototype.validator = validateStableVideoDecoderFactoryRequest;
  StableVideoDecoderFactoryProxy.prototype.validator = null;
  var kStableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Name = 1961517162;

  function StableVideoDecoderFactoryProcessPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(StableVideoDecoderFactoryProcess,
                                                   handleOrPtrInfo);
  }

  function StableVideoDecoderFactoryProcessAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        StableVideoDecoderFactoryProcess, associatedInterfacePtrInfo);
  }

  StableVideoDecoderFactoryProcessAssociatedPtr.prototype =
      Object.create(StableVideoDecoderFactoryProcessPtr.prototype);
  StableVideoDecoderFactoryProcessAssociatedPtr.prototype.constructor =
      StableVideoDecoderFactoryProcessAssociatedPtr;

  function StableVideoDecoderFactoryProcessProxy(receiver) {
    this.receiver_ = receiver;
  }
  StableVideoDecoderFactoryProcessPtr.prototype.initializeStableVideoDecoderFactory = function() {
    return StableVideoDecoderFactoryProcessProxy.prototype.initializeStableVideoDecoderFactory
        .apply(this.ptr.getProxy(), arguments);
  };

  StableVideoDecoderFactoryProcessProxy.prototype.initializeStableVideoDecoderFactory = function(gpuFeatureInfo, enableDirectVideoDecoder, receiver) {
    var params_ = new StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params();
    params_.gpuFeatureInfo = gpuFeatureInfo;
    params_.enableDirectVideoDecoder = enableDirectVideoDecoder;
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kStableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Name,
        codec.align(StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params.encodedSize));
    builder.encodeStruct(StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function StableVideoDecoderFactoryProcessStub(delegate) {
    this.delegate_ = delegate;
  }
  StableVideoDecoderFactoryProcessStub.prototype.initializeStableVideoDecoderFactory = function(gpuFeatureInfo, enableDirectVideoDecoder, receiver) {
    return this.delegate_ && this.delegate_.initializeStableVideoDecoderFactory && this.delegate_.initializeStableVideoDecoderFactory(gpuFeatureInfo, enableDirectVideoDecoder, receiver);
  }

  StableVideoDecoderFactoryProcessStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kStableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Name:
      var params = reader.decodeStruct(StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params);
      this.initializeStableVideoDecoderFactory(params.gpuFeatureInfo, params.enableDirectVideoDecoder, params.receiver);
      return true;
    default:
      return false;
    }
  };

  StableVideoDecoderFactoryProcessStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateStableVideoDecoderFactoryProcessRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kStableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = StableVideoDecoderFactoryProcess_InitializeStableVideoDecoderFactory_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateStableVideoDecoderFactoryProcessResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var StableVideoDecoderFactoryProcess = {
    name: 'media.stable.mojom.StableVideoDecoderFactoryProcess',
    kVersion: 0,
    ptrClass: StableVideoDecoderFactoryProcessPtr,
    proxyClass: StableVideoDecoderFactoryProcessProxy,
    stubClass: StableVideoDecoderFactoryProcessStub,
    validateRequest: validateStableVideoDecoderFactoryProcessRequest,
    validateResponse: null,
  };
  StableVideoDecoderFactoryProcessStub.prototype.validator = validateStableVideoDecoderFactoryProcessRequest;
  StableVideoDecoderFactoryProcessProxy.prototype.validator = null;
  exports.STABLE_VIDEO_DECODER_FACTORY_SERVICE_SANDBOX = STABLE_VIDEO_DECODER_FACTORY_SERVICE_SANDBOX;
  exports.MediaLog = MediaLog;
  exports.MediaLogPtr = MediaLogPtr;
  exports.MediaLogAssociatedPtr = MediaLogAssociatedPtr;
  exports.VideoFrameHandleReleaser = VideoFrameHandleReleaser;
  exports.VideoFrameHandleReleaserPtr = VideoFrameHandleReleaserPtr;
  exports.VideoFrameHandleReleaserAssociatedPtr = VideoFrameHandleReleaserAssociatedPtr;
  exports.VideoDecoderClient = VideoDecoderClient;
  exports.VideoDecoderClientPtr = VideoDecoderClientPtr;
  exports.VideoDecoderClientAssociatedPtr = VideoDecoderClientAssociatedPtr;
  exports.CdmContextEventCallback = CdmContextEventCallback;
  exports.CdmContextEventCallbackPtr = CdmContextEventCallbackPtr;
  exports.CdmContextEventCallbackAssociatedPtr = CdmContextEventCallbackAssociatedPtr;
  exports.StableCdmContext = StableCdmContext;
  exports.StableCdmContextPtr = StableCdmContextPtr;
  exports.StableCdmContextAssociatedPtr = StableCdmContextAssociatedPtr;
  exports.StableVideoDecoder = StableVideoDecoder;
  exports.StableVideoDecoderPtr = StableVideoDecoderPtr;
  exports.StableVideoDecoderAssociatedPtr = StableVideoDecoderAssociatedPtr;
  exports.StableVideoDecoderTracker = StableVideoDecoderTracker;
  exports.StableVideoDecoderTrackerPtr = StableVideoDecoderTrackerPtr;
  exports.StableVideoDecoderTrackerAssociatedPtr = StableVideoDecoderTrackerAssociatedPtr;
  exports.StableVideoDecoderFactory = StableVideoDecoderFactory;
  exports.StableVideoDecoderFactoryPtr = StableVideoDecoderFactoryPtr;
  exports.StableVideoDecoderFactoryAssociatedPtr = StableVideoDecoderFactoryAssociatedPtr;
  exports.StableVideoDecoderFactoryProcess = StableVideoDecoderFactoryProcess;
  exports.StableVideoDecoderFactoryProcessPtr = StableVideoDecoderFactoryProcessPtr;
  exports.StableVideoDecoderFactoryProcessAssociatedPtr = StableVideoDecoderFactoryProcessAssociatedPtr;
})();