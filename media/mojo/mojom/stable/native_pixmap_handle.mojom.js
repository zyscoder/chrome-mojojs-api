// media/mojo/mojom/stable/native_pixmap_handle.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'media/mojo/mojom/stable/native_pixmap_handle.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('media.stable.mojom');



  function NativePixmapPlane(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativePixmapPlane.prototype.initDefaults_ = function() {
    this.stride = 0;
    this.bufferHandle = null;
    this.offset = 0;
    this.size = 0;
  };
  NativePixmapPlane.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativePixmapPlane.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    // validate NativePixmapPlane.bufferHandle
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 4, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NativePixmapPlane.encodedSize = codec.kStructHeaderSize + 24;

  NativePixmapPlane.decode = function(decoder) {
    var packed;
    var val = new NativePixmapPlane();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.stride =
        decoder.decodeStruct(codec.Uint32);
    val.bufferHandle =
        decoder.decodeStruct(codec.Handle);
    val.offset =
        decoder.decodeStruct(codec.Uint64);
    val.size =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  NativePixmapPlane.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativePixmapPlane.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.stride);
    encoder.encodeStruct(codec.Handle, val.bufferHandle);
    encoder.encodeStruct(codec.Uint64, val.offset);
    encoder.encodeStruct(codec.Uint64, val.size);
  };
  function NativePixmapHandle(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NativePixmapHandle.prototype.initDefaults_ = function() {
    this.planes = null;
    this.modifier = 0;
  };
  NativePixmapHandle.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NativePixmapHandle.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NativePixmapHandle.planes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(NativePixmapPlane), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  NativePixmapHandle.encodedSize = codec.kStructHeaderSize + 16;

  NativePixmapHandle.decode = function(decoder) {
    var packed;
    var val = new NativePixmapHandle();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.planes =
        decoder.decodeArrayPointer(new codec.PointerTo(NativePixmapPlane));
    val.modifier =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  NativePixmapHandle.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NativePixmapHandle.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(NativePixmapPlane), val.planes);
    encoder.encodeStruct(codec.Uint64, val.modifier);
  };
  exports.NativePixmapPlane = NativePixmapPlane;
  exports.NativePixmapHandle = NativePixmapHandle;
})();