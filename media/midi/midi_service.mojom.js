// media/midi/midi_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'media/midi/midi_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('midi.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../mojo/public/mojom/base/time.mojom.js');
  }


  var Result = {};
  Result.NOT_INITIALIZED = 0;
  Result.OK = 1;
  Result.NOT_SUPPORTED = 2;
  Result.INITIALIZATION_ERROR = 3;
  Result.MIN_VALUE = 0;
  Result.MAX_VALUE = 3;

  Result.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  Result.toKnownEnumValue = function(value) {
    return value;
  };

  Result.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var PortState = {};
  PortState.DISCONNECTED = 0;
  PortState.CONNECTED = 1;
  PortState.OPENED = 2;
  PortState.MIN_VALUE = 0;
  PortState.MAX_VALUE = 2;

  PortState.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  PortState.toKnownEnumValue = function(value) {
    return value;
  };

  PortState.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function PortInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PortInfo.prototype.initDefaults_ = function() {
    this.id = null;
    this.manufacturer = null;
    this.name = null;
    this.version = null;
    this.state = 0;
  };
  PortInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PortInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PortInfo.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PortInfo.manufacturer
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PortInfo.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PortInfo.version
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PortInfo.state
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 32, PortState);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PortInfo.encodedSize = codec.kStructHeaderSize + 40;

  PortInfo.decode = function(decoder) {
    var packed;
    var val = new PortInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    val.manufacturer =
        decoder.decodeStruct(codec.String);
    val.name =
        decoder.decodeStruct(codec.String);
    val.version =
        decoder.decodeStruct(codec.String);
    val.state =
        decoder.decodeStruct(new codec.Enum(PortState));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PortInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PortInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeStruct(codec.String, val.manufacturer);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.String, val.version);
    encoder.encodeStruct(codec.Int32, val.state);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MidiSessionClient_AddInputPort_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MidiSessionClient_AddInputPort_Params.prototype.initDefaults_ = function() {
    this.info = null;
  };
  MidiSessionClient_AddInputPort_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MidiSessionClient_AddInputPort_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MidiSessionClient_AddInputPort_Params.info
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PortInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MidiSessionClient_AddInputPort_Params.encodedSize = codec.kStructHeaderSize + 8;

  MidiSessionClient_AddInputPort_Params.decode = function(decoder) {
    var packed;
    var val = new MidiSessionClient_AddInputPort_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.info =
        decoder.decodeStructPointer(PortInfo);
    return val;
  };

  MidiSessionClient_AddInputPort_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MidiSessionClient_AddInputPort_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PortInfo, val.info);
  };
  function MidiSessionClient_AddOutputPort_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MidiSessionClient_AddOutputPort_Params.prototype.initDefaults_ = function() {
    this.info = null;
  };
  MidiSessionClient_AddOutputPort_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MidiSessionClient_AddOutputPort_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MidiSessionClient_AddOutputPort_Params.info
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PortInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MidiSessionClient_AddOutputPort_Params.encodedSize = codec.kStructHeaderSize + 8;

  MidiSessionClient_AddOutputPort_Params.decode = function(decoder) {
    var packed;
    var val = new MidiSessionClient_AddOutputPort_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.info =
        decoder.decodeStructPointer(PortInfo);
    return val;
  };

  MidiSessionClient_AddOutputPort_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MidiSessionClient_AddOutputPort_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PortInfo, val.info);
  };
  function MidiSessionClient_SetInputPortState_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MidiSessionClient_SetInputPortState_Params.prototype.initDefaults_ = function() {
    this.port = 0;
    this.state = 0;
  };
  MidiSessionClient_SetInputPortState_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MidiSessionClient_SetInputPortState_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate MidiSessionClient_SetInputPortState_Params.state
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, PortState);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MidiSessionClient_SetInputPortState_Params.encodedSize = codec.kStructHeaderSize + 8;

  MidiSessionClient_SetInputPortState_Params.decode = function(decoder) {
    var packed;
    var val = new MidiSessionClient_SetInputPortState_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.port =
        decoder.decodeStruct(codec.Uint32);
    val.state =
        decoder.decodeStruct(new codec.Enum(PortState));
    return val;
  };

  MidiSessionClient_SetInputPortState_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MidiSessionClient_SetInputPortState_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.port);
    encoder.encodeStruct(codec.Int32, val.state);
  };
  function MidiSessionClient_SetOutputPortState_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MidiSessionClient_SetOutputPortState_Params.prototype.initDefaults_ = function() {
    this.port = 0;
    this.state = 0;
  };
  MidiSessionClient_SetOutputPortState_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MidiSessionClient_SetOutputPortState_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate MidiSessionClient_SetOutputPortState_Params.state
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, PortState);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MidiSessionClient_SetOutputPortState_Params.encodedSize = codec.kStructHeaderSize + 8;

  MidiSessionClient_SetOutputPortState_Params.decode = function(decoder) {
    var packed;
    var val = new MidiSessionClient_SetOutputPortState_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.port =
        decoder.decodeStruct(codec.Uint32);
    val.state =
        decoder.decodeStruct(new codec.Enum(PortState));
    return val;
  };

  MidiSessionClient_SetOutputPortState_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MidiSessionClient_SetOutputPortState_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.port);
    encoder.encodeStruct(codec.Int32, val.state);
  };
  function MidiSessionClient_SessionStarted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MidiSessionClient_SessionStarted_Params.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  MidiSessionClient_SessionStarted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MidiSessionClient_SessionStarted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MidiSessionClient_SessionStarted_Params.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, Result);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MidiSessionClient_SessionStarted_Params.encodedSize = codec.kStructHeaderSize + 8;

  MidiSessionClient_SessionStarted_Params.decode = function(decoder) {
    var packed;
    var val = new MidiSessionClient_SessionStarted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(Result));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MidiSessionClient_SessionStarted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MidiSessionClient_SessionStarted_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MidiSessionClient_AcknowledgeSentData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MidiSessionClient_AcknowledgeSentData_Params.prototype.initDefaults_ = function() {
    this.bytes = 0;
  };
  MidiSessionClient_AcknowledgeSentData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MidiSessionClient_AcknowledgeSentData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MidiSessionClient_AcknowledgeSentData_Params.encodedSize = codec.kStructHeaderSize + 8;

  MidiSessionClient_AcknowledgeSentData_Params.decode = function(decoder) {
    var packed;
    var val = new MidiSessionClient_AcknowledgeSentData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bytes =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MidiSessionClient_AcknowledgeSentData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MidiSessionClient_AcknowledgeSentData_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.bytes);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MidiSessionClient_DataReceived_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MidiSessionClient_DataReceived_Params.prototype.initDefaults_ = function() {
    this.port = 0;
    this.data = null;
    this.timestamp = null;
  };
  MidiSessionClient_DataReceived_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MidiSessionClient_DataReceived_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate MidiSessionClient_DataReceived_Params.data
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MidiSessionClient_DataReceived_Params.timestamp
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MidiSessionClient_DataReceived_Params.encodedSize = codec.kStructHeaderSize + 24;

  MidiSessionClient_DataReceived_Params.decode = function(decoder) {
    var packed;
    var val = new MidiSessionClient_DataReceived_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.port =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.data =
        decoder.decodeArrayPointer(codec.Uint8);
    val.timestamp =
        decoder.decodeStructPointer(time$.TimeTicks);
    return val;
  };

  MidiSessionClient_DataReceived_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MidiSessionClient_DataReceived_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.port);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.Uint8, val.data);
    encoder.encodeStructPointer(time$.TimeTicks, val.timestamp);
  };
  function MidiSessionProvider_StartSession_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MidiSessionProvider_StartSession_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
    this.client = new MidiSessionClientPtr();
  };
  MidiSessionProvider_StartSession_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MidiSessionProvider_StartSession_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MidiSessionProvider_StartSession_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate MidiSessionProvider_StartSession_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MidiSessionProvider_StartSession_Params.encodedSize = codec.kStructHeaderSize + 16;

  MidiSessionProvider_StartSession_Params.decode = function(decoder) {
    var packed;
    var val = new MidiSessionProvider_StartSession_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.client =
        decoder.decodeStruct(new codec.Interface(MidiSessionClientPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MidiSessionProvider_StartSession_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MidiSessionProvider_StartSession_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(new codec.Interface(MidiSessionClientPtr), val.client);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MidiSession_SendData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MidiSession_SendData_Params.prototype.initDefaults_ = function() {
    this.port = 0;
    this.data = null;
    this.timestamp = null;
  };
  MidiSession_SendData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MidiSession_SendData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate MidiSession_SendData_Params.data
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MidiSession_SendData_Params.timestamp
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MidiSession_SendData_Params.encodedSize = codec.kStructHeaderSize + 24;

  MidiSession_SendData_Params.decode = function(decoder) {
    var packed;
    var val = new MidiSession_SendData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.port =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.data =
        decoder.decodeArrayPointer(codec.Uint8);
    val.timestamp =
        decoder.decodeStructPointer(time$.TimeTicks);
    return val;
  };

  MidiSession_SendData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MidiSession_SendData_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.port);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.Uint8, val.data);
    encoder.encodeStructPointer(time$.TimeTicks, val.timestamp);
  };
  var kMidiSessionClient_AddInputPort_Name = 1435733036;
  var kMidiSessionClient_AddOutputPort_Name = 1293698093;
  var kMidiSessionClient_SetInputPortState_Name = 1497642652;
  var kMidiSessionClient_SetOutputPortState_Name = 638615734;
  var kMidiSessionClient_SessionStarted_Name = 1226603500;
  var kMidiSessionClient_AcknowledgeSentData_Name = 119460085;
  var kMidiSessionClient_DataReceived_Name = 489707222;

  function MidiSessionClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MidiSessionClient,
                                                   handleOrPtrInfo);
  }

  function MidiSessionClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MidiSessionClient, associatedInterfacePtrInfo);
  }

  MidiSessionClientAssociatedPtr.prototype =
      Object.create(MidiSessionClientPtr.prototype);
  MidiSessionClientAssociatedPtr.prototype.constructor =
      MidiSessionClientAssociatedPtr;

  function MidiSessionClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  MidiSessionClientPtr.prototype.addInputPort = function() {
    return MidiSessionClientProxy.prototype.addInputPort
        .apply(this.ptr.getProxy(), arguments);
  };

  MidiSessionClientProxy.prototype.addInputPort = function(info) {
    var params_ = new MidiSessionClient_AddInputPort_Params();
    params_.info = info;
    var builder = new codec.MessageV0Builder(
        kMidiSessionClient_AddInputPort_Name,
        codec.align(MidiSessionClient_AddInputPort_Params.encodedSize));
    builder.encodeStruct(MidiSessionClient_AddInputPort_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MidiSessionClientPtr.prototype.addOutputPort = function() {
    return MidiSessionClientProxy.prototype.addOutputPort
        .apply(this.ptr.getProxy(), arguments);
  };

  MidiSessionClientProxy.prototype.addOutputPort = function(info) {
    var params_ = new MidiSessionClient_AddOutputPort_Params();
    params_.info = info;
    var builder = new codec.MessageV0Builder(
        kMidiSessionClient_AddOutputPort_Name,
        codec.align(MidiSessionClient_AddOutputPort_Params.encodedSize));
    builder.encodeStruct(MidiSessionClient_AddOutputPort_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MidiSessionClientPtr.prototype.setInputPortState = function() {
    return MidiSessionClientProxy.prototype.setInputPortState
        .apply(this.ptr.getProxy(), arguments);
  };

  MidiSessionClientProxy.prototype.setInputPortState = function(port, state) {
    var params_ = new MidiSessionClient_SetInputPortState_Params();
    params_.port = port;
    params_.state = state;
    var builder = new codec.MessageV0Builder(
        kMidiSessionClient_SetInputPortState_Name,
        codec.align(MidiSessionClient_SetInputPortState_Params.encodedSize));
    builder.encodeStruct(MidiSessionClient_SetInputPortState_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MidiSessionClientPtr.prototype.setOutputPortState = function() {
    return MidiSessionClientProxy.prototype.setOutputPortState
        .apply(this.ptr.getProxy(), arguments);
  };

  MidiSessionClientProxy.prototype.setOutputPortState = function(port, state) {
    var params_ = new MidiSessionClient_SetOutputPortState_Params();
    params_.port = port;
    params_.state = state;
    var builder = new codec.MessageV0Builder(
        kMidiSessionClient_SetOutputPortState_Name,
        codec.align(MidiSessionClient_SetOutputPortState_Params.encodedSize));
    builder.encodeStruct(MidiSessionClient_SetOutputPortState_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MidiSessionClientPtr.prototype.sessionStarted = function() {
    return MidiSessionClientProxy.prototype.sessionStarted
        .apply(this.ptr.getProxy(), arguments);
  };

  MidiSessionClientProxy.prototype.sessionStarted = function(result) {
    var params_ = new MidiSessionClient_SessionStarted_Params();
    params_.result = result;
    var builder = new codec.MessageV0Builder(
        kMidiSessionClient_SessionStarted_Name,
        codec.align(MidiSessionClient_SessionStarted_Params.encodedSize));
    builder.encodeStruct(MidiSessionClient_SessionStarted_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MidiSessionClientPtr.prototype.acknowledgeSentData = function() {
    return MidiSessionClientProxy.prototype.acknowledgeSentData
        .apply(this.ptr.getProxy(), arguments);
  };

  MidiSessionClientProxy.prototype.acknowledgeSentData = function(bytes) {
    var params_ = new MidiSessionClient_AcknowledgeSentData_Params();
    params_.bytes = bytes;
    var builder = new codec.MessageV0Builder(
        kMidiSessionClient_AcknowledgeSentData_Name,
        codec.align(MidiSessionClient_AcknowledgeSentData_Params.encodedSize));
    builder.encodeStruct(MidiSessionClient_AcknowledgeSentData_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MidiSessionClientPtr.prototype.dataReceived = function() {
    return MidiSessionClientProxy.prototype.dataReceived
        .apply(this.ptr.getProxy(), arguments);
  };

  MidiSessionClientProxy.prototype.dataReceived = function(port, data, timestamp) {
    var params_ = new MidiSessionClient_DataReceived_Params();
    params_.port = port;
    params_.data = data;
    params_.timestamp = timestamp;
    var builder = new codec.MessageV0Builder(
        kMidiSessionClient_DataReceived_Name,
        codec.align(MidiSessionClient_DataReceived_Params.encodedSize));
    builder.encodeStruct(MidiSessionClient_DataReceived_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MidiSessionClientStub(delegate) {
    this.delegate_ = delegate;
  }
  MidiSessionClientStub.prototype.addInputPort = function(info) {
    return this.delegate_ && this.delegate_.addInputPort && this.delegate_.addInputPort(info);
  }
  MidiSessionClientStub.prototype.addOutputPort = function(info) {
    return this.delegate_ && this.delegate_.addOutputPort && this.delegate_.addOutputPort(info);
  }
  MidiSessionClientStub.prototype.setInputPortState = function(port, state) {
    return this.delegate_ && this.delegate_.setInputPortState && this.delegate_.setInputPortState(port, state);
  }
  MidiSessionClientStub.prototype.setOutputPortState = function(port, state) {
    return this.delegate_ && this.delegate_.setOutputPortState && this.delegate_.setOutputPortState(port, state);
  }
  MidiSessionClientStub.prototype.sessionStarted = function(result) {
    return this.delegate_ && this.delegate_.sessionStarted && this.delegate_.sessionStarted(result);
  }
  MidiSessionClientStub.prototype.acknowledgeSentData = function(bytes) {
    return this.delegate_ && this.delegate_.acknowledgeSentData && this.delegate_.acknowledgeSentData(bytes);
  }
  MidiSessionClientStub.prototype.dataReceived = function(port, data, timestamp) {
    return this.delegate_ && this.delegate_.dataReceived && this.delegate_.dataReceived(port, data, timestamp);
  }

  MidiSessionClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMidiSessionClient_AddInputPort_Name:
      var params = reader.decodeStruct(MidiSessionClient_AddInputPort_Params);
      this.addInputPort(params.info);
      return true;
    case kMidiSessionClient_AddOutputPort_Name:
      var params = reader.decodeStruct(MidiSessionClient_AddOutputPort_Params);
      this.addOutputPort(params.info);
      return true;
    case kMidiSessionClient_SetInputPortState_Name:
      var params = reader.decodeStruct(MidiSessionClient_SetInputPortState_Params);
      this.setInputPortState(params.port, params.state);
      return true;
    case kMidiSessionClient_SetOutputPortState_Name:
      var params = reader.decodeStruct(MidiSessionClient_SetOutputPortState_Params);
      this.setOutputPortState(params.port, params.state);
      return true;
    case kMidiSessionClient_SessionStarted_Name:
      var params = reader.decodeStruct(MidiSessionClient_SessionStarted_Params);
      this.sessionStarted(params.result);
      return true;
    case kMidiSessionClient_AcknowledgeSentData_Name:
      var params = reader.decodeStruct(MidiSessionClient_AcknowledgeSentData_Params);
      this.acknowledgeSentData(params.bytes);
      return true;
    case kMidiSessionClient_DataReceived_Name:
      var params = reader.decodeStruct(MidiSessionClient_DataReceived_Params);
      this.dataReceived(params.port, params.data, params.timestamp);
      return true;
    default:
      return false;
    }
  };

  MidiSessionClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMidiSessionClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMidiSessionClient_AddInputPort_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MidiSessionClient_AddInputPort_Params;
      break;
      case kMidiSessionClient_AddOutputPort_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MidiSessionClient_AddOutputPort_Params;
      break;
      case kMidiSessionClient_SetInputPortState_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MidiSessionClient_SetInputPortState_Params;
      break;
      case kMidiSessionClient_SetOutputPortState_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MidiSessionClient_SetOutputPortState_Params;
      break;
      case kMidiSessionClient_SessionStarted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MidiSessionClient_SessionStarted_Params;
      break;
      case kMidiSessionClient_AcknowledgeSentData_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MidiSessionClient_AcknowledgeSentData_Params;
      break;
      case kMidiSessionClient_DataReceived_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MidiSessionClient_DataReceived_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMidiSessionClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MidiSessionClient = {
    name: 'midi.mojom.MidiSessionClient',
    kVersion: 0,
    ptrClass: MidiSessionClientPtr,
    proxyClass: MidiSessionClientProxy,
    stubClass: MidiSessionClientStub,
    validateRequest: validateMidiSessionClientRequest,
    validateResponse: null,
  };
  MidiSessionClientStub.prototype.validator = validateMidiSessionClientRequest;
  MidiSessionClientProxy.prototype.validator = null;
  var kMidiSessionProvider_StartSession_Name = 280139672;

  function MidiSessionProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MidiSessionProvider,
                                                   handleOrPtrInfo);
  }

  function MidiSessionProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MidiSessionProvider, associatedInterfacePtrInfo);
  }

  MidiSessionProviderAssociatedPtr.prototype =
      Object.create(MidiSessionProviderPtr.prototype);
  MidiSessionProviderAssociatedPtr.prototype.constructor =
      MidiSessionProviderAssociatedPtr;

  function MidiSessionProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  MidiSessionProviderPtr.prototype.startSession = function() {
    return MidiSessionProviderProxy.prototype.startSession
        .apply(this.ptr.getProxy(), arguments);
  };

  MidiSessionProviderProxy.prototype.startSession = function(receiver, client) {
    var params_ = new MidiSessionProvider_StartSession_Params();
    params_.receiver = receiver;
    params_.client = client;
    var builder = new codec.MessageV0Builder(
        kMidiSessionProvider_StartSession_Name,
        codec.align(MidiSessionProvider_StartSession_Params.encodedSize));
    builder.encodeStruct(MidiSessionProvider_StartSession_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MidiSessionProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  MidiSessionProviderStub.prototype.startSession = function(receiver, client) {
    return this.delegate_ && this.delegate_.startSession && this.delegate_.startSession(receiver, client);
  }

  MidiSessionProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMidiSessionProvider_StartSession_Name:
      var params = reader.decodeStruct(MidiSessionProvider_StartSession_Params);
      this.startSession(params.receiver, params.client);
      return true;
    default:
      return false;
    }
  };

  MidiSessionProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMidiSessionProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMidiSessionProvider_StartSession_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MidiSessionProvider_StartSession_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMidiSessionProviderResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MidiSessionProvider = {
    name: 'midi.mojom.MidiSessionProvider',
    kVersion: 0,
    ptrClass: MidiSessionProviderPtr,
    proxyClass: MidiSessionProviderProxy,
    stubClass: MidiSessionProviderStub,
    validateRequest: validateMidiSessionProviderRequest,
    validateResponse: null,
  };
  MidiSessionProviderStub.prototype.validator = validateMidiSessionProviderRequest;
  MidiSessionProviderProxy.prototype.validator = null;
  var kMidiSession_SendData_Name = 85713694;

  function MidiSessionPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MidiSession,
                                                   handleOrPtrInfo);
  }

  function MidiSessionAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MidiSession, associatedInterfacePtrInfo);
  }

  MidiSessionAssociatedPtr.prototype =
      Object.create(MidiSessionPtr.prototype);
  MidiSessionAssociatedPtr.prototype.constructor =
      MidiSessionAssociatedPtr;

  function MidiSessionProxy(receiver) {
    this.receiver_ = receiver;
  }
  MidiSessionPtr.prototype.sendData = function() {
    return MidiSessionProxy.prototype.sendData
        .apply(this.ptr.getProxy(), arguments);
  };

  MidiSessionProxy.prototype.sendData = function(port, data, timestamp) {
    var params_ = new MidiSession_SendData_Params();
    params_.port = port;
    params_.data = data;
    params_.timestamp = timestamp;
    var builder = new codec.MessageV0Builder(
        kMidiSession_SendData_Name,
        codec.align(MidiSession_SendData_Params.encodedSize));
    builder.encodeStruct(MidiSession_SendData_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MidiSessionStub(delegate) {
    this.delegate_ = delegate;
  }
  MidiSessionStub.prototype.sendData = function(port, data, timestamp) {
    return this.delegate_ && this.delegate_.sendData && this.delegate_.sendData(port, data, timestamp);
  }

  MidiSessionStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMidiSession_SendData_Name:
      var params = reader.decodeStruct(MidiSession_SendData_Params);
      this.sendData(params.port, params.data, params.timestamp);
      return true;
    default:
      return false;
    }
  };

  MidiSessionStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMidiSessionRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMidiSession_SendData_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MidiSession_SendData_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMidiSessionResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MidiSession = {
    name: 'midi.mojom.MidiSession',
    kVersion: 0,
    ptrClass: MidiSessionPtr,
    proxyClass: MidiSessionProxy,
    stubClass: MidiSessionStub,
    validateRequest: validateMidiSessionRequest,
    validateResponse: null,
  };
  MidiSessionStub.prototype.validator = validateMidiSessionRequest;
  MidiSessionProxy.prototype.validator = null;
  exports.Result = Result;
  exports.PortState = PortState;
  exports.PortInfo = PortInfo;
  exports.MidiSessionClient = MidiSessionClient;
  exports.MidiSessionClientPtr = MidiSessionClientPtr;
  exports.MidiSessionClientAssociatedPtr = MidiSessionClientAssociatedPtr;
  exports.MidiSessionProvider = MidiSessionProvider;
  exports.MidiSessionProviderPtr = MidiSessionProviderPtr;
  exports.MidiSessionProviderAssociatedPtr = MidiSessionProviderAssociatedPtr;
  exports.MidiSession = MidiSession;
  exports.MidiSessionPtr = MidiSessionPtr;
  exports.MidiSessionAssociatedPtr = MidiSessionAssociatedPtr;
})();