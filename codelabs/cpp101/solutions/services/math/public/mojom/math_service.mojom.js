// codelabs/cpp101/solutions/services/math/public/mojom/math_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'codelabs/cpp101/solutions/services/math/public/mojom/math_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('math.mojom');



  function MathService_Divide_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MathService_Divide_Params.prototype.initDefaults_ = function() {
    this.dividend = 0;
    this.divisor = 0;
  };
  MathService_Divide_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MathService_Divide_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  MathService_Divide_Params.encodedSize = codec.kStructHeaderSize + 8;

  MathService_Divide_Params.decode = function(decoder) {
    var packed;
    var val = new MathService_Divide_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dividend =
        decoder.decodeStruct(codec.Int32);
    val.divisor =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  MathService_Divide_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MathService_Divide_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.dividend);
    encoder.encodeStruct(codec.Int32, val.divisor);
  };
  function MathService_Divide_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MathService_Divide_ResponseParams.prototype.initDefaults_ = function() {
    this.quotient = 0;
  };
  MathService_Divide_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MathService_Divide_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MathService_Divide_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  MathService_Divide_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MathService_Divide_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.quotient =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MathService_Divide_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MathService_Divide_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.quotient);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kMathService_Divide_Name = 186173104;

  function MathServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MathService,
                                                   handleOrPtrInfo);
  }

  function MathServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MathService, associatedInterfacePtrInfo);
  }

  MathServiceAssociatedPtr.prototype =
      Object.create(MathServicePtr.prototype);
  MathServiceAssociatedPtr.prototype.constructor =
      MathServiceAssociatedPtr;

  function MathServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  MathServicePtr.prototype.divide = function() {
    return MathServiceProxy.prototype.divide
        .apply(this.ptr.getProxy(), arguments);
  };

  MathServiceProxy.prototype.divide = function(dividend, divisor) {
    var params_ = new MathService_Divide_Params();
    params_.dividend = dividend;
    params_.divisor = divisor;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMathService_Divide_Name,
          codec.align(MathService_Divide_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MathService_Divide_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MathService_Divide_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function MathServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  MathServiceStub.prototype.divide = function(dividend, divisor) {
    return this.delegate_ && this.delegate_.divide && this.delegate_.divide(dividend, divisor);
  }

  MathServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  MathServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMathService_Divide_Name:
      var params = reader.decodeStruct(MathService_Divide_Params);
      this.divide(params.dividend, params.divisor).then(function(response) {
        var responseParams =
            new MathService_Divide_ResponseParams();
        responseParams.quotient = response.quotient;
        var builder = new codec.MessageV1Builder(
            kMathService_Divide_Name,
            codec.align(MathService_Divide_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MathService_Divide_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateMathServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMathService_Divide_Name:
        if (message.expectsResponse())
          paramsClass = MathService_Divide_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMathServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kMathService_Divide_Name:
        if (message.isResponse())
          paramsClass = MathService_Divide_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var MathService = {
    name: 'math.mojom.MathService',
    kVersion: 0,
    ptrClass: MathServicePtr,
    proxyClass: MathServiceProxy,
    stubClass: MathServiceStub,
    validateRequest: validateMathServiceRequest,
    validateResponse: validateMathServiceResponse,
  };
  MathServiceStub.prototype.validator = validateMathServiceRequest;
  MathServiceProxy.prototype.validator = validateMathServiceResponse;
  exports.MathService = MathService;
  exports.MathServicePtr = MathServicePtr;
  exports.MathServiceAssociatedPtr = MathServiceAssociatedPtr;
})();