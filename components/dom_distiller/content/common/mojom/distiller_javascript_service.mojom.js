// components/dom_distiller/content/common/mojom/distiller_javascript_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/dom_distiller/content/common/mojom/distiller_javascript_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('domDistiller.mojom');
  var distilled_page_prefs$ =
      mojo.internal.exposeNamespace('domDistiller.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/dom_distiller/core/mojom/distilled_page_prefs.mojom', '../../../core/mojom/distilled_page_prefs.mojom.js');
  }



  function DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params.prototype.initDefaults_ = function() {
  };
  DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params.encodedSize = codec.kStructHeaderSize + 0;

  DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params.decode = function(decoder) {
    var packed;
    var val = new DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DistillerJavaScriptService_HandleStoreThemePref_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DistillerJavaScriptService_HandleStoreThemePref_Params.prototype.initDefaults_ = function() {
    this.theme = 0;
  };
  DistillerJavaScriptService_HandleStoreThemePref_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DistillerJavaScriptService_HandleStoreThemePref_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DistillerJavaScriptService_HandleStoreThemePref_Params.theme
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, distilled_page_prefs$.Theme);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DistillerJavaScriptService_HandleStoreThemePref_Params.encodedSize = codec.kStructHeaderSize + 8;

  DistillerJavaScriptService_HandleStoreThemePref_Params.decode = function(decoder) {
    var packed;
    var val = new DistillerJavaScriptService_HandleStoreThemePref_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.theme =
        decoder.decodeStruct(new codec.Enum(distilled_page_prefs$.Theme));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DistillerJavaScriptService_HandleStoreThemePref_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DistillerJavaScriptService_HandleStoreThemePref_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.theme);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DistillerJavaScriptService_HandleStoreFontFamilyPref_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DistillerJavaScriptService_HandleStoreFontFamilyPref_Params.prototype.initDefaults_ = function() {
    this.fontFamily = 0;
  };
  DistillerJavaScriptService_HandleStoreFontFamilyPref_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DistillerJavaScriptService_HandleStoreFontFamilyPref_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DistillerJavaScriptService_HandleStoreFontFamilyPref_Params.fontFamily
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, distilled_page_prefs$.FontFamily);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DistillerJavaScriptService_HandleStoreFontFamilyPref_Params.encodedSize = codec.kStructHeaderSize + 8;

  DistillerJavaScriptService_HandleStoreFontFamilyPref_Params.decode = function(decoder) {
    var packed;
    var val = new DistillerJavaScriptService_HandleStoreFontFamilyPref_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fontFamily =
        decoder.decodeStruct(new codec.Enum(distilled_page_prefs$.FontFamily));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DistillerJavaScriptService_HandleStoreFontFamilyPref_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DistillerJavaScriptService_HandleStoreFontFamilyPref_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.fontFamily);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DistillerJavaScriptService_HandleStoreFontScalingPref_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DistillerJavaScriptService_HandleStoreFontScalingPref_Params.prototype.initDefaults_ = function() {
    this.fontScale = 0;
  };
  DistillerJavaScriptService_HandleStoreFontScalingPref_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DistillerJavaScriptService_HandleStoreFontScalingPref_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DistillerJavaScriptService_HandleStoreFontScalingPref_Params.encodedSize = codec.kStructHeaderSize + 8;

  DistillerJavaScriptService_HandleStoreFontScalingPref_Params.decode = function(decoder) {
    var packed;
    var val = new DistillerJavaScriptService_HandleStoreFontScalingPref_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fontScale =
        decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DistillerJavaScriptService_HandleStoreFontScalingPref_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DistillerJavaScriptService_HandleStoreFontScalingPref_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Float, val.fontScale);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kDistillerJavaScriptService_HandleDistillerOpenSettingsCall_Name = 542093337;
  var kDistillerJavaScriptService_HandleStoreThemePref_Name = 1972949411;
  var kDistillerJavaScriptService_HandleStoreFontFamilyPref_Name = 1604424062;
  var kDistillerJavaScriptService_HandleStoreFontScalingPref_Name = 1309962605;

  function DistillerJavaScriptServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DistillerJavaScriptService,
                                                   handleOrPtrInfo);
  }

  function DistillerJavaScriptServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DistillerJavaScriptService, associatedInterfacePtrInfo);
  }

  DistillerJavaScriptServiceAssociatedPtr.prototype =
      Object.create(DistillerJavaScriptServicePtr.prototype);
  DistillerJavaScriptServiceAssociatedPtr.prototype.constructor =
      DistillerJavaScriptServiceAssociatedPtr;

  function DistillerJavaScriptServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  DistillerJavaScriptServicePtr.prototype.handleDistillerOpenSettingsCall = function() {
    return DistillerJavaScriptServiceProxy.prototype.handleDistillerOpenSettingsCall
        .apply(this.ptr.getProxy(), arguments);
  };

  DistillerJavaScriptServiceProxy.prototype.handleDistillerOpenSettingsCall = function() {
    var params_ = new DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params();
    var builder = new codec.MessageV0Builder(
        kDistillerJavaScriptService_HandleDistillerOpenSettingsCall_Name,
        codec.align(DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params.encodedSize));
    builder.encodeStruct(DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DistillerJavaScriptServicePtr.prototype.handleStoreThemePref = function() {
    return DistillerJavaScriptServiceProxy.prototype.handleStoreThemePref
        .apply(this.ptr.getProxy(), arguments);
  };

  DistillerJavaScriptServiceProxy.prototype.handleStoreThemePref = function(theme) {
    var params_ = new DistillerJavaScriptService_HandleStoreThemePref_Params();
    params_.theme = theme;
    var builder = new codec.MessageV0Builder(
        kDistillerJavaScriptService_HandleStoreThemePref_Name,
        codec.align(DistillerJavaScriptService_HandleStoreThemePref_Params.encodedSize));
    builder.encodeStruct(DistillerJavaScriptService_HandleStoreThemePref_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DistillerJavaScriptServicePtr.prototype.handleStoreFontFamilyPref = function() {
    return DistillerJavaScriptServiceProxy.prototype.handleStoreFontFamilyPref
        .apply(this.ptr.getProxy(), arguments);
  };

  DistillerJavaScriptServiceProxy.prototype.handleStoreFontFamilyPref = function(fontFamily) {
    var params_ = new DistillerJavaScriptService_HandleStoreFontFamilyPref_Params();
    params_.fontFamily = fontFamily;
    var builder = new codec.MessageV0Builder(
        kDistillerJavaScriptService_HandleStoreFontFamilyPref_Name,
        codec.align(DistillerJavaScriptService_HandleStoreFontFamilyPref_Params.encodedSize));
    builder.encodeStruct(DistillerJavaScriptService_HandleStoreFontFamilyPref_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DistillerJavaScriptServicePtr.prototype.handleStoreFontScalingPref = function() {
    return DistillerJavaScriptServiceProxy.prototype.handleStoreFontScalingPref
        .apply(this.ptr.getProxy(), arguments);
  };

  DistillerJavaScriptServiceProxy.prototype.handleStoreFontScalingPref = function(fontScale) {
    var params_ = new DistillerJavaScriptService_HandleStoreFontScalingPref_Params();
    params_.fontScale = fontScale;
    var builder = new codec.MessageV0Builder(
        kDistillerJavaScriptService_HandleStoreFontScalingPref_Name,
        codec.align(DistillerJavaScriptService_HandleStoreFontScalingPref_Params.encodedSize));
    builder.encodeStruct(DistillerJavaScriptService_HandleStoreFontScalingPref_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DistillerJavaScriptServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  DistillerJavaScriptServiceStub.prototype.handleDistillerOpenSettingsCall = function() {
    return this.delegate_ && this.delegate_.handleDistillerOpenSettingsCall && this.delegate_.handleDistillerOpenSettingsCall();
  }
  DistillerJavaScriptServiceStub.prototype.handleStoreThemePref = function(theme) {
    return this.delegate_ && this.delegate_.handleStoreThemePref && this.delegate_.handleStoreThemePref(theme);
  }
  DistillerJavaScriptServiceStub.prototype.handleStoreFontFamilyPref = function(fontFamily) {
    return this.delegate_ && this.delegate_.handleStoreFontFamilyPref && this.delegate_.handleStoreFontFamilyPref(fontFamily);
  }
  DistillerJavaScriptServiceStub.prototype.handleStoreFontScalingPref = function(fontScale) {
    return this.delegate_ && this.delegate_.handleStoreFontScalingPref && this.delegate_.handleStoreFontScalingPref(fontScale);
  }

  DistillerJavaScriptServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDistillerJavaScriptService_HandleDistillerOpenSettingsCall_Name:
      var params = reader.decodeStruct(DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params);
      this.handleDistillerOpenSettingsCall();
      return true;
    case kDistillerJavaScriptService_HandleStoreThemePref_Name:
      var params = reader.decodeStruct(DistillerJavaScriptService_HandleStoreThemePref_Params);
      this.handleStoreThemePref(params.theme);
      return true;
    case kDistillerJavaScriptService_HandleStoreFontFamilyPref_Name:
      var params = reader.decodeStruct(DistillerJavaScriptService_HandleStoreFontFamilyPref_Params);
      this.handleStoreFontFamilyPref(params.fontFamily);
      return true;
    case kDistillerJavaScriptService_HandleStoreFontScalingPref_Name:
      var params = reader.decodeStruct(DistillerJavaScriptService_HandleStoreFontScalingPref_Params);
      this.handleStoreFontScalingPref(params.fontScale);
      return true;
    default:
      return false;
    }
  };

  DistillerJavaScriptServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDistillerJavaScriptServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDistillerJavaScriptService_HandleDistillerOpenSettingsCall_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params;
      break;
      case kDistillerJavaScriptService_HandleStoreThemePref_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DistillerJavaScriptService_HandleStoreThemePref_Params;
      break;
      case kDistillerJavaScriptService_HandleStoreFontFamilyPref_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DistillerJavaScriptService_HandleStoreFontFamilyPref_Params;
      break;
      case kDistillerJavaScriptService_HandleStoreFontScalingPref_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DistillerJavaScriptService_HandleStoreFontScalingPref_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDistillerJavaScriptServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DistillerJavaScriptService = {
    name: 'dom_distiller.mojom.DistillerJavaScriptService',
    kVersion: 0,
    ptrClass: DistillerJavaScriptServicePtr,
    proxyClass: DistillerJavaScriptServiceProxy,
    stubClass: DistillerJavaScriptServiceStub,
    validateRequest: validateDistillerJavaScriptServiceRequest,
    validateResponse: null,
  };
  DistillerJavaScriptServiceStub.prototype.validator = validateDistillerJavaScriptServiceRequest;
  DistillerJavaScriptServiceProxy.prototype.validator = null;
  exports.DistillerJavaScriptService = DistillerJavaScriptService;
  exports.DistillerJavaScriptServicePtr = DistillerJavaScriptServicePtr;
  exports.DistillerJavaScriptServiceAssociatedPtr = DistillerJavaScriptServiceAssociatedPtr;
})();