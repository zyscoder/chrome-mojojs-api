// components/feed/mojom/rss_link_reader.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/feed/mojom/rss_link_reader.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('feed.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../url/mojom/url.mojom.js');
  }



  function RssLinks(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RssLinks.prototype.initDefaults_ = function() {
    this.pageUrl = null;
    this.links = null;
  };
  RssLinks.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RssLinks.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RssLinks.pageUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RssLinks.links
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(url$.Url), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RssLinks.encodedSize = codec.kStructHeaderSize + 16;

  RssLinks.decode = function(decoder) {
    var packed;
    var val = new RssLinks();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pageUrl =
        decoder.decodeStructPointer(url$.Url);
    val.links =
        decoder.decodeArrayPointer(new codec.PointerTo(url$.Url));
    return val;
  };

  RssLinks.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RssLinks.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.pageUrl);
    encoder.encodeArrayPointer(new codec.PointerTo(url$.Url), val.links);
  };
  function RssLinkReader_GetRssLinks_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RssLinkReader_GetRssLinks_Params.prototype.initDefaults_ = function() {
  };
  RssLinkReader_GetRssLinks_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RssLinkReader_GetRssLinks_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RssLinkReader_GetRssLinks_Params.encodedSize = codec.kStructHeaderSize + 0;

  RssLinkReader_GetRssLinks_Params.decode = function(decoder) {
    var packed;
    var val = new RssLinkReader_GetRssLinks_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  RssLinkReader_GetRssLinks_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RssLinkReader_GetRssLinks_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function RssLinkReader_GetRssLinks_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RssLinkReader_GetRssLinks_ResponseParams.prototype.initDefaults_ = function() {
    this.rssLinks = null;
  };
  RssLinkReader_GetRssLinks_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RssLinkReader_GetRssLinks_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RssLinkReader_GetRssLinks_ResponseParams.rssLinks
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, RssLinks, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RssLinkReader_GetRssLinks_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  RssLinkReader_GetRssLinks_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new RssLinkReader_GetRssLinks_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rssLinks =
        decoder.decodeStructPointer(RssLinks);
    return val;
  };

  RssLinkReader_GetRssLinks_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RssLinkReader_GetRssLinks_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(RssLinks, val.rssLinks);
  };
  var kRssLinkReader_GetRssLinks_Name = 1183137208;

  function RssLinkReaderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(RssLinkReader,
                                                   handleOrPtrInfo);
  }

  function RssLinkReaderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        RssLinkReader, associatedInterfacePtrInfo);
  }

  RssLinkReaderAssociatedPtr.prototype =
      Object.create(RssLinkReaderPtr.prototype);
  RssLinkReaderAssociatedPtr.prototype.constructor =
      RssLinkReaderAssociatedPtr;

  function RssLinkReaderProxy(receiver) {
    this.receiver_ = receiver;
  }
  RssLinkReaderPtr.prototype.getRssLinks = function() {
    return RssLinkReaderProxy.prototype.getRssLinks
        .apply(this.ptr.getProxy(), arguments);
  };

  RssLinkReaderProxy.prototype.getRssLinks = function() {
    var params_ = new RssLinkReader_GetRssLinks_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kRssLinkReader_GetRssLinks_Name,
          codec.align(RssLinkReader_GetRssLinks_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(RssLinkReader_GetRssLinks_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(RssLinkReader_GetRssLinks_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function RssLinkReaderStub(delegate) {
    this.delegate_ = delegate;
  }
  RssLinkReaderStub.prototype.getRssLinks = function() {
    return this.delegate_ && this.delegate_.getRssLinks && this.delegate_.getRssLinks();
  }

  RssLinkReaderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  RssLinkReaderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRssLinkReader_GetRssLinks_Name:
      var params = reader.decodeStruct(RssLinkReader_GetRssLinks_Params);
      this.getRssLinks().then(function(response) {
        var responseParams =
            new RssLinkReader_GetRssLinks_ResponseParams();
        responseParams.rssLinks = response.rssLinks;
        var builder = new codec.MessageV1Builder(
            kRssLinkReader_GetRssLinks_Name,
            codec.align(RssLinkReader_GetRssLinks_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(RssLinkReader_GetRssLinks_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateRssLinkReaderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kRssLinkReader_GetRssLinks_Name:
        if (message.expectsResponse())
          paramsClass = RssLinkReader_GetRssLinks_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateRssLinkReaderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kRssLinkReader_GetRssLinks_Name:
        if (message.isResponse())
          paramsClass = RssLinkReader_GetRssLinks_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var RssLinkReader = {
    name: 'feed.mojom.RssLinkReader',
    kVersion: 0,
    ptrClass: RssLinkReaderPtr,
    proxyClass: RssLinkReaderProxy,
    stubClass: RssLinkReaderStub,
    validateRequest: validateRssLinkReaderRequest,
    validateResponse: validateRssLinkReaderResponse,
  };
  RssLinkReaderStub.prototype.validator = validateRssLinkReaderRequest;
  RssLinkReaderProxy.prototype.validator = validateRssLinkReaderResponse;
  exports.RssLinks = RssLinks;
  exports.RssLinkReader = RssLinkReader;
  exports.RssLinkReaderPtr = RssLinkReaderPtr;
  exports.RssLinkReaderAssociatedPtr = RssLinkReaderAssociatedPtr;
})();