// components/network_hints/common/network_hints.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/network_hints/common/network_hints.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('networkHints.mojom');
  var scheme_host_port$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/scheme_host_port.mojom', '../../../url/mojom/scheme_host_port.mojom.js');
  }



  function NetworkHintsHandler_PrefetchDNS_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NetworkHintsHandler_PrefetchDNS_Params.prototype.initDefaults_ = function() {
    this.urlList = null;
  };
  NetworkHintsHandler_PrefetchDNS_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NetworkHintsHandler_PrefetchDNS_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NetworkHintsHandler_PrefetchDNS_Params.urlList
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(scheme_host_port$.SchemeHostPort), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NetworkHintsHandler_PrefetchDNS_Params.encodedSize = codec.kStructHeaderSize + 8;

  NetworkHintsHandler_PrefetchDNS_Params.decode = function(decoder) {
    var packed;
    var val = new NetworkHintsHandler_PrefetchDNS_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.urlList =
        decoder.decodeArrayPointer(new codec.PointerTo(scheme_host_port$.SchemeHostPort));
    return val;
  };

  NetworkHintsHandler_PrefetchDNS_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NetworkHintsHandler_PrefetchDNS_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(scheme_host_port$.SchemeHostPort), val.urlList);
  };
  function NetworkHintsHandler_Preconnect_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NetworkHintsHandler_Preconnect_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.allowCredentials = false;
  };
  NetworkHintsHandler_Preconnect_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NetworkHintsHandler_Preconnect_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NetworkHintsHandler_Preconnect_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, scheme_host_port$.SchemeHostPort, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  NetworkHintsHandler_Preconnect_Params.encodedSize = codec.kStructHeaderSize + 16;

  NetworkHintsHandler_Preconnect_Params.decode = function(decoder) {
    var packed;
    var val = new NetworkHintsHandler_Preconnect_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(scheme_host_port$.SchemeHostPort);
    packed = decoder.readUint8();
    val.allowCredentials = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  NetworkHintsHandler_Preconnect_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NetworkHintsHandler_Preconnect_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(scheme_host_port$.SchemeHostPort, val.url);
    packed = 0;
    packed |= (val.allowCredentials & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kNetworkHintsHandler_PrefetchDNS_Name = 228331704;
  var kNetworkHintsHandler_Preconnect_Name = 2049526750;

  function NetworkHintsHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(NetworkHintsHandler,
                                                   handleOrPtrInfo);
  }

  function NetworkHintsHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        NetworkHintsHandler, associatedInterfacePtrInfo);
  }

  NetworkHintsHandlerAssociatedPtr.prototype =
      Object.create(NetworkHintsHandlerPtr.prototype);
  NetworkHintsHandlerAssociatedPtr.prototype.constructor =
      NetworkHintsHandlerAssociatedPtr;

  function NetworkHintsHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  NetworkHintsHandlerPtr.prototype.prefetchDNS = function() {
    return NetworkHintsHandlerProxy.prototype.prefetchDNS
        .apply(this.ptr.getProxy(), arguments);
  };

  NetworkHintsHandlerProxy.prototype.prefetchDNS = function(urlList) {
    var params_ = new NetworkHintsHandler_PrefetchDNS_Params();
    params_.urlList = urlList;
    var builder = new codec.MessageV0Builder(
        kNetworkHintsHandler_PrefetchDNS_Name,
        codec.align(NetworkHintsHandler_PrefetchDNS_Params.encodedSize));
    builder.encodeStruct(NetworkHintsHandler_PrefetchDNS_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  NetworkHintsHandlerPtr.prototype.preconnect = function() {
    return NetworkHintsHandlerProxy.prototype.preconnect
        .apply(this.ptr.getProxy(), arguments);
  };

  NetworkHintsHandlerProxy.prototype.preconnect = function(url, allowCredentials) {
    var params_ = new NetworkHintsHandler_Preconnect_Params();
    params_.url = url;
    params_.allowCredentials = allowCredentials;
    var builder = new codec.MessageV0Builder(
        kNetworkHintsHandler_Preconnect_Name,
        codec.align(NetworkHintsHandler_Preconnect_Params.encodedSize));
    builder.encodeStruct(NetworkHintsHandler_Preconnect_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function NetworkHintsHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  NetworkHintsHandlerStub.prototype.prefetchDNS = function(urlList) {
    return this.delegate_ && this.delegate_.prefetchDNS && this.delegate_.prefetchDNS(urlList);
  }
  NetworkHintsHandlerStub.prototype.preconnect = function(url, allowCredentials) {
    return this.delegate_ && this.delegate_.preconnect && this.delegate_.preconnect(url, allowCredentials);
  }

  NetworkHintsHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kNetworkHintsHandler_PrefetchDNS_Name:
      var params = reader.decodeStruct(NetworkHintsHandler_PrefetchDNS_Params);
      this.prefetchDNS(params.urlList);
      return true;
    case kNetworkHintsHandler_Preconnect_Name:
      var params = reader.decodeStruct(NetworkHintsHandler_Preconnect_Params);
      this.preconnect(params.url, params.allowCredentials);
      return true;
    default:
      return false;
    }
  };

  NetworkHintsHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateNetworkHintsHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kNetworkHintsHandler_PrefetchDNS_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = NetworkHintsHandler_PrefetchDNS_Params;
      break;
      case kNetworkHintsHandler_Preconnect_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = NetworkHintsHandler_Preconnect_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateNetworkHintsHandlerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var NetworkHintsHandler = {
    name: 'network_hints.mojom.NetworkHintsHandler',
    kVersion: 0,
    ptrClass: NetworkHintsHandlerPtr,
    proxyClass: NetworkHintsHandlerProxy,
    stubClass: NetworkHintsHandlerStub,
    validateRequest: validateNetworkHintsHandlerRequest,
    validateResponse: null,
  };
  NetworkHintsHandlerStub.prototype.validator = validateNetworkHintsHandlerRequest;
  NetworkHintsHandlerProxy.prototype.validator = null;
  exports.NetworkHintsHandler = NetworkHintsHandler;
  exports.NetworkHintsHandlerPtr = NetworkHintsHandlerPtr;
  exports.NetworkHintsHandlerAssociatedPtr = NetworkHintsHandlerAssociatedPtr;
})();