// components/webapps/common/web_page_metadata.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/webapps/common/web_page_metadata.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('webapps.mojom');
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../url/mojom/url.mojom.js');
  }


  var WebPageMobileCapable = {};
  WebPageMobileCapable.UNSPECIFIED = 0;
  WebPageMobileCapable.ENABLED = 1;
  WebPageMobileCapable.ENABLED_APPLE = 2;
  WebPageMobileCapable.MIN_VALUE = 0;
  WebPageMobileCapable.MAX_VALUE = 2;

  WebPageMobileCapable.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  WebPageMobileCapable.toKnownEnumValue = function(value) {
    return value;
  };

  WebPageMobileCapable.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function WebPageIconInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebPageIconInfo.prototype.initDefaults_ = function() {
    this.url = null;
    this.squareSizePx = 0;
  };
  WebPageIconInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebPageIconInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPageIconInfo.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  WebPageIconInfo.encodedSize = codec.kStructHeaderSize + 16;

  WebPageIconInfo.decode = function(decoder) {
    var packed;
    var val = new WebPageIconInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.squareSizePx =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebPageIconInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebPageIconInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.Int32, val.squareSizePx);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebPageMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebPageMetadata.prototype.initDefaults_ = function() {
    this.applicationName = null;
    this.description = null;
    this.applicationUrl = null;
    this.title = null;
    this.icons = null;
    this.mobileCapable = WebPageMobileCapable.UNSPECIFIED;
  };
  WebPageMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebPageMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPageMetadata.applicationName
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPageMetadata.description
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPageMetadata.applicationUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPageMetadata.title
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPageMetadata.icons
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(WebPageIconInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebPageMetadata.mobileCapable
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 40, WebPageMobileCapable);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebPageMetadata.encodedSize = codec.kStructHeaderSize + 48;

  WebPageMetadata.decode = function(decoder) {
    var packed;
    var val = new WebPageMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.applicationName =
        decoder.decodeStructPointer(string16$.String16);
    val.description =
        decoder.decodeStructPointer(string16$.String16);
    val.applicationUrl =
        decoder.decodeStructPointer(url$.Url);
    val.title =
        decoder.decodeStructPointer(string16$.String16);
    val.icons =
        decoder.decodeArrayPointer(new codec.PointerTo(WebPageIconInfo));
    val.mobileCapable =
        decoder.decodeStruct(new codec.Enum(WebPageMobileCapable));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebPageMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebPageMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.applicationName);
    encoder.encodeStructPointer(string16$.String16, val.description);
    encoder.encodeStructPointer(url$.Url, val.applicationUrl);
    encoder.encodeStructPointer(string16$.String16, val.title);
    encoder.encodeArrayPointer(new codec.PointerTo(WebPageIconInfo), val.icons);
    encoder.encodeStruct(codec.Int32, val.mobileCapable);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  exports.WebPageMobileCapable = WebPageMobileCapable;
  exports.WebPageIconInfo = WebPageIconInfo;
  exports.WebPageMetadata = WebPageMetadata;
})();