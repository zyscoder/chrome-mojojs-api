// components/webapps/services/web_app_origin_association/public/mojom/web_app_origin_association_parser.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/webapps/services/web_app_origin_association/public/mojom/web_app_origin_association_parser.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('webapps.mojom');
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../../url/mojom/url.mojom.js');
  }



  function WebAppOriginAssociation(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebAppOriginAssociation.prototype.initDefaults_ = function() {
    this.apps = null;
  };
  WebAppOriginAssociation.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebAppOriginAssociation.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebAppOriginAssociation.apps
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(AssociatedWebApp), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebAppOriginAssociation.encodedSize = codec.kStructHeaderSize + 8;

  WebAppOriginAssociation.decode = function(decoder) {
    var packed;
    var val = new WebAppOriginAssociation();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.apps =
        decoder.decodeArrayPointer(new codec.PointerTo(AssociatedWebApp));
    return val;
  };

  WebAppOriginAssociation.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebAppOriginAssociation.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(AssociatedWebApp), val.apps);
  };
  function AssociatedWebApp(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AssociatedWebApp.prototype.initDefaults_ = function() {
    this.webAppIdentity = null;
  };
  AssociatedWebApp.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AssociatedWebApp.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AssociatedWebApp.webAppIdentity
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AssociatedWebApp.encodedSize = codec.kStructHeaderSize + 8;

  AssociatedWebApp.decode = function(decoder) {
    var packed;
    var val = new AssociatedWebApp();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.webAppIdentity =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  AssociatedWebApp.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AssociatedWebApp.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.webAppIdentity);
  };
  function WebAppOriginAssociationError(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebAppOriginAssociationError.prototype.initDefaults_ = function() {
    this.message = null;
    this.line = 0;
    this.column = 0;
  };
  WebAppOriginAssociationError.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebAppOriginAssociationError.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebAppOriginAssociationError.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  WebAppOriginAssociationError.encodedSize = codec.kStructHeaderSize + 16;

  WebAppOriginAssociationError.decode = function(decoder) {
    var packed;
    var val = new WebAppOriginAssociationError();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message =
        decoder.decodeStruct(codec.String);
    val.line =
        decoder.decodeStruct(codec.Int32);
    val.column =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  WebAppOriginAssociationError.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebAppOriginAssociationError.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.message);
    encoder.encodeStruct(codec.Int32, val.line);
    encoder.encodeStruct(codec.Int32, val.column);
  };
  function WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params.prototype.initDefaults_ = function() {
    this.rawJson = null;
  };
  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params.rawJson
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params.encodedSize = codec.kStructHeaderSize + 8;

  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params.decode = function(decoder) {
    var packed;
    var val = new WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rawJson =
        decoder.decodeStruct(codec.String);
    return val;
  };

  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.rawJson);
  };
  function WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams.prototype.initDefaults_ = function() {
    this.association = null;
    this.errors = null;
  };
  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams.association
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebAppOriginAssociation, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams.errors
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(WebAppOriginAssociationError), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.association =
        decoder.decodeStructPointer(WebAppOriginAssociation);
    val.errors =
        decoder.decodeArrayPointer(new codec.PointerTo(WebAppOriginAssociationError));
    return val;
  };

  WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebAppOriginAssociation, val.association);
    encoder.encodeArrayPointer(new codec.PointerTo(WebAppOriginAssociationError), val.errors);
  };
  var kWebAppOriginAssociationParser_ParseWebAppOriginAssociation_Name = 201295348;

  function WebAppOriginAssociationParserPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WebAppOriginAssociationParser,
                                                   handleOrPtrInfo);
  }

  function WebAppOriginAssociationParserAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WebAppOriginAssociationParser, associatedInterfacePtrInfo);
  }

  WebAppOriginAssociationParserAssociatedPtr.prototype =
      Object.create(WebAppOriginAssociationParserPtr.prototype);
  WebAppOriginAssociationParserAssociatedPtr.prototype.constructor =
      WebAppOriginAssociationParserAssociatedPtr;

  function WebAppOriginAssociationParserProxy(receiver) {
    this.receiver_ = receiver;
  }
  WebAppOriginAssociationParserPtr.prototype.parseWebAppOriginAssociation = function() {
    return WebAppOriginAssociationParserProxy.prototype.parseWebAppOriginAssociation
        .apply(this.ptr.getProxy(), arguments);
  };

  WebAppOriginAssociationParserProxy.prototype.parseWebAppOriginAssociation = function(rawJson) {
    var params_ = new WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params();
    params_.rawJson = rawJson;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebAppOriginAssociationParser_ParseWebAppOriginAssociation_Name,
          codec.align(WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function WebAppOriginAssociationParserStub(delegate) {
    this.delegate_ = delegate;
  }
  WebAppOriginAssociationParserStub.prototype.parseWebAppOriginAssociation = function(rawJson) {
    return this.delegate_ && this.delegate_.parseWebAppOriginAssociation && this.delegate_.parseWebAppOriginAssociation(rawJson);
  }

  WebAppOriginAssociationParserStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  WebAppOriginAssociationParserStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWebAppOriginAssociationParser_ParseWebAppOriginAssociation_Name:
      var params = reader.decodeStruct(WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params);
      this.parseWebAppOriginAssociation(params.rawJson).then(function(response) {
        var responseParams =
            new WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams();
        responseParams.association = response.association;
        responseParams.errors = response.errors;
        var builder = new codec.MessageV1Builder(
            kWebAppOriginAssociationParser_ParseWebAppOriginAssociation_Name,
            codec.align(WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateWebAppOriginAssociationParserRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWebAppOriginAssociationParser_ParseWebAppOriginAssociation_Name:
        if (message.expectsResponse())
          paramsClass = WebAppOriginAssociationParser_ParseWebAppOriginAssociation_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWebAppOriginAssociationParserResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kWebAppOriginAssociationParser_ParseWebAppOriginAssociation_Name:
        if (message.isResponse())
          paramsClass = WebAppOriginAssociationParser_ParseWebAppOriginAssociation_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var WebAppOriginAssociationParser = {
    name: 'webapps.mojom.WebAppOriginAssociationParser',
    kVersion: 0,
    ptrClass: WebAppOriginAssociationParserPtr,
    proxyClass: WebAppOriginAssociationParserProxy,
    stubClass: WebAppOriginAssociationParserStub,
    validateRequest: validateWebAppOriginAssociationParserRequest,
    validateResponse: validateWebAppOriginAssociationParserResponse,
  };
  WebAppOriginAssociationParserStub.prototype.validator = validateWebAppOriginAssociationParserRequest;
  WebAppOriginAssociationParserProxy.prototype.validator = validateWebAppOriginAssociationParserResponse;
  exports.WebAppOriginAssociation = WebAppOriginAssociation;
  exports.AssociatedWebApp = AssociatedWebApp;
  exports.WebAppOriginAssociationError = WebAppOriginAssociationError;
  exports.WebAppOriginAssociationParser = WebAppOriginAssociationParser;
  exports.WebAppOriginAssociationParserPtr = WebAppOriginAssociationParserPtr;
  exports.WebAppOriginAssociationParserAssociatedPtr = WebAppOriginAssociationParserAssociatedPtr;
})();