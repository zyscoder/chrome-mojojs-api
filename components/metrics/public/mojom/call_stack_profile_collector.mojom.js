// components/metrics/public/mojom/call_stack_profile_collector.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/metrics/public/mojom/call_stack_profile_collector.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('metrics.mojom');
  var byte_string$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/byte_string.mojom', '../../../../mojo/public/mojom/base/byte_string.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }


  var ProfileType = {};
  ProfileType.kCPU = 0;
  ProfileType.kHeap = 1;
  ProfileType.MIN_VALUE = 0;
  ProfileType.MAX_VALUE = 1;

  ProfileType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  ProfileType.toKnownEnumValue = function(value) {
    return value;
  };

  ProfileType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function SampledProfile(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SampledProfile.prototype.initDefaults_ = function() {
    this.contents = null;
  };
  SampledProfile.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SampledProfile.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SampledProfile.contents
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, byte_string$.ByteString, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SampledProfile.encodedSize = codec.kStructHeaderSize + 8;

  SampledProfile.decode = function(decoder) {
    var packed;
    var val = new SampledProfile();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.contents =
        decoder.decodeStructPointer(byte_string$.ByteString);
    return val;
  };

  SampledProfile.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SampledProfile.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(byte_string$.ByteString, val.contents);
  };
  function CallStackProfileCollector_Collect_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CallStackProfileCollector_Collect_Params.prototype.initDefaults_ = function() {
    this.startTimestamp = null;
    this.profileType = 0;
    this.profile = null;
  };
  CallStackProfileCollector_Collect_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CallStackProfileCollector_Collect_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CallStackProfileCollector_Collect_Params.startTimestamp
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CallStackProfileCollector_Collect_Params.profileType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, ProfileType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CallStackProfileCollector_Collect_Params.profile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, SampledProfile, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CallStackProfileCollector_Collect_Params.encodedSize = codec.kStructHeaderSize + 24;

  CallStackProfileCollector_Collect_Params.decode = function(decoder) {
    var packed;
    var val = new CallStackProfileCollector_Collect_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.startTimestamp =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.profileType =
        decoder.decodeStruct(new codec.Enum(ProfileType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.profile =
        decoder.decodeStructPointer(SampledProfile);
    return val;
  };

  CallStackProfileCollector_Collect_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CallStackProfileCollector_Collect_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeTicks, val.startTimestamp);
    encoder.encodeStruct(codec.Int32, val.profileType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(SampledProfile, val.profile);
  };
  var kCallStackProfileCollector_Collect_Name = 1437483622;

  function CallStackProfileCollectorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CallStackProfileCollector,
                                                   handleOrPtrInfo);
  }

  function CallStackProfileCollectorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CallStackProfileCollector, associatedInterfacePtrInfo);
  }

  CallStackProfileCollectorAssociatedPtr.prototype =
      Object.create(CallStackProfileCollectorPtr.prototype);
  CallStackProfileCollectorAssociatedPtr.prototype.constructor =
      CallStackProfileCollectorAssociatedPtr;

  function CallStackProfileCollectorProxy(receiver) {
    this.receiver_ = receiver;
  }
  CallStackProfileCollectorPtr.prototype.collect = function() {
    return CallStackProfileCollectorProxy.prototype.collect
        .apply(this.ptr.getProxy(), arguments);
  };

  CallStackProfileCollectorProxy.prototype.collect = function(startTimestamp, profileType, profile) {
    var params_ = new CallStackProfileCollector_Collect_Params();
    params_.startTimestamp = startTimestamp;
    params_.profileType = profileType;
    params_.profile = profile;
    var builder = new codec.MessageV0Builder(
        kCallStackProfileCollector_Collect_Name,
        codec.align(CallStackProfileCollector_Collect_Params.encodedSize));
    builder.encodeStruct(CallStackProfileCollector_Collect_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function CallStackProfileCollectorStub(delegate) {
    this.delegate_ = delegate;
  }
  CallStackProfileCollectorStub.prototype.collect = function(startTimestamp, profileType, profile) {
    return this.delegate_ && this.delegate_.collect && this.delegate_.collect(startTimestamp, profileType, profile);
  }

  CallStackProfileCollectorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCallStackProfileCollector_Collect_Name:
      var params = reader.decodeStruct(CallStackProfileCollector_Collect_Params);
      this.collect(params.startTimestamp, params.profileType, params.profile);
      return true;
    default:
      return false;
    }
  };

  CallStackProfileCollectorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateCallStackProfileCollectorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCallStackProfileCollector_Collect_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CallStackProfileCollector_Collect_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCallStackProfileCollectorResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var CallStackProfileCollector = {
    name: 'metrics.mojom.CallStackProfileCollector',
    kVersion: 0,
    ptrClass: CallStackProfileCollectorPtr,
    proxyClass: CallStackProfileCollectorProxy,
    stubClass: CallStackProfileCollectorStub,
    validateRequest: validateCallStackProfileCollectorRequest,
    validateResponse: null,
  };
  CallStackProfileCollectorStub.prototype.validator = validateCallStackProfileCollectorRequest;
  CallStackProfileCollectorProxy.prototype.validator = null;
  exports.ProfileType = ProfileType;
  exports.SampledProfile = SampledProfile;
  exports.CallStackProfileCollector = CallStackProfileCollector;
  exports.CallStackProfileCollectorPtr = CallStackProfileCollectorPtr;
  exports.CallStackProfileCollectorAssociatedPtr = CallStackProfileCollectorAssociatedPtr;
})();