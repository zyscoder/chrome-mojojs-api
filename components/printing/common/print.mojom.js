// components/printing/common/print.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/printing/common/print.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('printing.mojom');
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var values$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/values.mojom', '../../../mojo/public/mojom/base/values.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var print$ =
      mojo.internal.exposeNamespace('printing.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'printing/mojom/print.mojom', '../../../printing/mojom/print.mojom.js');
  }
  var ax_tree_update$ =
      mojo.internal.exposeNamespace('ax.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/accessibility/mojom/ax_tree_update.mojom', '../../../ui/accessibility/mojom/ax_tree_update.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }


  var PrintFailureReason = {};
  PrintFailureReason.kGeneralFailure = 0;
  PrintFailureReason.kInvalidPageRange = 1;
  PrintFailureReason.kPrintingInProgress = 2;
  PrintFailureReason.MIN_VALUE = 0;
  PrintFailureReason.MAX_VALUE = 2;

  PrintFailureReason.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  PrintFailureReason.toKnownEnumValue = function(value) {
    return value;
  };

  PrintFailureReason.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function PreviewIds(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PreviewIds.prototype.initDefaults_ = function() {
    this.requestId = -1;
    this.uiId = -1;
  };
  PreviewIds.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PreviewIds.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  PreviewIds.encodedSize = codec.kStructHeaderSize + 8;

  PreviewIds.decode = function(decoder) {
    var packed;
    var val = new PreviewIds();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    val.uiId =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  PreviewIds.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PreviewIds.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.requestId);
    encoder.encodeStruct(codec.Int32, val.uiId);
  };
  function RequestPrintPreviewParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RequestPrintPreviewParams.prototype.initDefaults_ = function() {
    this.isModifiable = false;
    this.webnodeOnly = false;
    this.hasSelection = false;
    this.selectionOnly = false;
  };
  RequestPrintPreviewParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RequestPrintPreviewParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    return validator.validationError.NONE;
  };

  RequestPrintPreviewParams.encodedSize = codec.kStructHeaderSize + 8;

  RequestPrintPreviewParams.decode = function(decoder) {
    var packed;
    var val = new RequestPrintPreviewParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isModifiable = (packed >> 0) & 1 ? true : false;
    val.webnodeOnly = (packed >> 1) & 1 ? true : false;
    val.hasSelection = (packed >> 2) & 1 ? true : false;
    val.selectionOnly = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  RequestPrintPreviewParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RequestPrintPreviewParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isModifiable & 1) << 0
    packed |= (val.webnodeOnly & 1) << 1
    packed |= (val.hasSelection & 1) << 2
    packed |= (val.selectionOnly & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintFrameContentParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintFrameContentParams.prototype.initDefaults_ = function() {
    this.printableArea = null;
    this.documentCookie = 0;
  };
  PrintFrameContentParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintFrameContentParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintFrameContentParams.printableArea
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintFrameContentParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintFrameContentParams.decode = function(decoder) {
    var packed;
    var val = new PrintFrameContentParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.printableArea =
        decoder.decodeStructPointer(geometry$.Rect);
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintFrameContentParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintFrameContentParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Rect, val.printableArea);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function OptionsFromDocumentParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  OptionsFromDocumentParams.prototype.initDefaults_ = function() {
    this.isScalingDisabled = false;
    this.copies = 0;
    this.duplex = 0;
  };
  OptionsFromDocumentParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  OptionsFromDocumentParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate OptionsFromDocumentParams.duplex
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, print$.DuplexMode);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  OptionsFromDocumentParams.encodedSize = codec.kStructHeaderSize + 16;

  OptionsFromDocumentParams.decode = function(decoder) {
    var packed;
    var val = new OptionsFromDocumentParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isScalingDisabled = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.copies =
        decoder.decodeStruct(codec.Int32);
    val.duplex =
        decoder.decodeStruct(new codec.Enum(print$.DuplexMode));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  OptionsFromDocumentParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(OptionsFromDocumentParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isScalingDisabled & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.copies);
    encoder.encodeStruct(codec.Int32, val.duplex);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DidPrintContentParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DidPrintContentParams.prototype.initDefaults_ = function() {
    this.metafileDataRegion = null;
    this.subframeContentInfo = null;
  };
  DidPrintContentParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DidPrintContentParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidPrintContentParams.metafileDataRegion
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, shared_memory$.ReadOnlySharedMemoryRegion, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidPrintContentParams.subframeContentInfo
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, codec.Uint32, new codec.PointerTo(unguessable_token$.UnguessableToken), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DidPrintContentParams.encodedSize = codec.kStructHeaderSize + 16;

  DidPrintContentParams.decode = function(decoder) {
    var packed;
    var val = new DidPrintContentParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.metafileDataRegion =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    val.subframeContentInfo =
        decoder.decodeMapPointer(codec.Uint32, new codec.PointerTo(unguessable_token$.UnguessableToken));
    return val;
  };

  DidPrintContentParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DidPrintContentParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.metafileDataRegion);
    encoder.encodeMapPointer(codec.Uint32, new codec.PointerTo(unguessable_token$.UnguessableToken), val.subframeContentInfo);
  };
  function DidStartPreviewParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DidStartPreviewParams.prototype.initDefaults_ = function() {
    this.pageCount = 0;
    this.pagesPerSheet = 0;
    this.pagesToRender = null;
    this.pageSize = null;
    this.fitToPageScaling = 0;
  };
  DidStartPreviewParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DidStartPreviewParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DidStartPreviewParams.pagesToRender
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 4, codec.Uint32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DidStartPreviewParams.pageSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.SizeF, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DidStartPreviewParams.encodedSize = codec.kStructHeaderSize + 32;

  DidStartPreviewParams.decode = function(decoder) {
    var packed;
    var val = new DidStartPreviewParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pageCount =
        decoder.decodeStruct(codec.Uint32);
    val.pagesPerSheet =
        decoder.decodeStruct(codec.Int32);
    val.pagesToRender =
        decoder.decodeArrayPointer(codec.Uint32);
    val.pageSize =
        decoder.decodeStructPointer(geometry$.SizeF);
    val.fitToPageScaling =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DidStartPreviewParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DidStartPreviewParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.pageCount);
    encoder.encodeStruct(codec.Int32, val.pagesPerSheet);
    encoder.encodeArrayPointer(codec.Uint32, val.pagesToRender);
    encoder.encodeStructPointer(geometry$.SizeF, val.pageSize);
    encoder.encodeStruct(codec.Int32, val.fitToPageScaling);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DidPreviewPageParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DidPreviewPageParams.prototype.initDefaults_ = function() {
    this.content = null;
    this.pageIndex = 0;
    this.documentCookie = 0;
  };
  DidPreviewPageParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DidPreviewPageParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidPreviewPageParams.content
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DidPrintContentParams, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  DidPreviewPageParams.encodedSize = codec.kStructHeaderSize + 16;

  DidPreviewPageParams.decode = function(decoder) {
    var packed;
    var val = new DidPreviewPageParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.content =
        decoder.decodeStructPointer(DidPrintContentParams);
    val.pageIndex =
        decoder.decodeStruct(codec.Uint32);
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  DidPreviewPageParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DidPreviewPageParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DidPrintContentParams, val.content);
    encoder.encodeStruct(codec.Uint32, val.pageIndex);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
  };
  function DidPreviewDocumentParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DidPreviewDocumentParams.prototype.initDefaults_ = function() {
    this.content = null;
    this.documentCookie = 0;
    this.expectedPagesCount = 0;
  };
  DidPreviewDocumentParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DidPreviewDocumentParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidPreviewDocumentParams.content
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DidPrintContentParams, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  DidPreviewDocumentParams.encodedSize = codec.kStructHeaderSize + 16;

  DidPreviewDocumentParams.decode = function(decoder) {
    var packed;
    var val = new DidPreviewDocumentParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.content =
        decoder.decodeStructPointer(DidPrintContentParams);
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    val.expectedPagesCount =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  DidPreviewDocumentParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DidPreviewDocumentParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DidPrintContentParams, val.content);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.encodeStruct(codec.Uint32, val.expectedPagesCount);
  };
  function PrintParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintParams.prototype.initDefaults_ = function() {
    this.pageSize = null;
    this.contentSize = null;
    this.printableArea = null;
    this.marginTop = 0;
    this.marginLeft = 0;
    this.pageOrientation = print$.PageOrientation.kUpright;
    this.documentCookie = 0;
    this.dpi = null;
    this.scaleFactor = 1.0;
    this.selectionOnly = false;
    this.isFirstRequest = false;
    this.printToPdf = false;
    this.displayHeaderFooter = false;
    this.rasterizePdf = false;
    this.shouldPrintBackgrounds = false;
    this.preferCssPageSize = false;
    this.generate_tagged_pdf_$flag = false;
    this.generate_tagged_pdf_$value = false;
    this.previewUiId = -1;
    this.previewRequestId = 0;
    this.printScalingOption = print$.PrintScalingOption.kSourceSize;
    this.title = null;
    this.url = null;
    this.headerTemplate = null;
    this.footerTemplate = null;
    this.rasterizePdfDpi = 0;
    this.printedDocType = print$.SkiaDocumentType.kPDF;
    this.pagesPerSheet = 1;
  };
  PrintParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 128}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintParams.pageSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.SizeF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintParams.contentSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.SizeF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintParams.printableArea
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate PrintParams.pageOrientation
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 32, print$.PageOrientation);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintParams.dpi
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;








    // validate PrintParams.printScalingOption
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 68, print$.PrintScalingOption);
    if (err !== validator.validationError.NONE)
        return err;




    // validate PrintParams.title
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintParams.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintParams.headerTemplate
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintParams.footerTemplate
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;





    // validate PrintParams.printedDocType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 108, print$.SkiaDocumentType);
    if (err !== validator.validationError.NONE)
        return err;





    return validator.validationError.NONE;
  };

  PrintParams.encodedSize = codec.kStructHeaderSize + 120;

  PrintParams.decode = function(decoder) {
    var packed;
    var val = new PrintParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pageSize =
        decoder.decodeStructPointer(geometry$.SizeF);
    val.contentSize =
        decoder.decodeStructPointer(geometry$.SizeF);
    val.printableArea =
        decoder.decodeStructPointer(geometry$.RectF);
    val.marginTop =
        decoder.decodeStruct(codec.Float);
    val.marginLeft =
        decoder.decodeStruct(codec.Float);
    val.pageOrientation =
        decoder.decodeStruct(new codec.Enum(print$.PageOrientation));
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    val.dpi =
        decoder.decodeStructPointer(geometry$.Size);
    val.scaleFactor =
        decoder.decodeStruct(codec.Double);
    packed = decoder.readUint8();
    val.selectionOnly = (packed >> 0) & 1 ? true : false;
    val.isFirstRequest = (packed >> 1) & 1 ? true : false;
    val.printToPdf = (packed >> 2) & 1 ? true : false;
    val.displayHeaderFooter = (packed >> 3) & 1 ? true : false;
    val.rasterizePdf = (packed >> 4) & 1 ? true : false;
    val.shouldPrintBackgrounds = (packed >> 5) & 1 ? true : false;
    val.preferCssPageSize = (packed >> 6) & 1 ? true : false;
    val.generate_tagged_pdf_$flag = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.generate_tagged_pdf_$value = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    val.previewUiId =
        decoder.decodeStruct(codec.Int32);
    val.previewRequestId =
        decoder.decodeStruct(codec.Int32);
    val.printScalingOption =
        decoder.decodeStruct(new codec.Enum(print$.PrintScalingOption));
    val.title =
        decoder.decodeStructPointer(string16$.String16);
    val.url =
        decoder.decodeStructPointer(string16$.String16);
    val.headerTemplate =
        decoder.decodeStructPointer(string16$.String16);
    val.footerTemplate =
        decoder.decodeStructPointer(string16$.String16);
    val.rasterizePdfDpi =
        decoder.decodeStruct(codec.Int32);
    val.printedDocType =
        decoder.decodeStruct(new codec.Enum(print$.SkiaDocumentType));
    val.pagesPerSheet =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.SizeF, val.pageSize);
    encoder.encodeStructPointer(geometry$.SizeF, val.contentSize);
    encoder.encodeStructPointer(geometry$.RectF, val.printableArea);
    encoder.encodeStruct(codec.Float, val.marginTop);
    encoder.encodeStruct(codec.Float, val.marginLeft);
    encoder.encodeStruct(codec.Int32, val.pageOrientation);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.encodeStructPointer(geometry$.Size, val.dpi);
    encoder.encodeStruct(codec.Double, val.scaleFactor);
    packed = 0;
    packed |= (val.selectionOnly & 1) << 0
    packed |= (val.isFirstRequest & 1) << 1
    packed |= (val.printToPdf & 1) << 2
    packed |= (val.displayHeaderFooter & 1) << 3
    packed |= (val.rasterizePdf & 1) << 4
    packed |= (val.shouldPrintBackgrounds & 1) << 5
    packed |= (val.preferCssPageSize & 1) << 6
    packed |= (val.generate_tagged_pdf_$flag & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.generate_tagged_pdf_$value & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.previewUiId);
    encoder.encodeStruct(codec.Int32, val.previewRequestId);
    encoder.encodeStruct(codec.Int32, val.printScalingOption);
    encoder.encodeStructPointer(string16$.String16, val.title);
    encoder.encodeStructPointer(string16$.String16, val.url);
    encoder.encodeStructPointer(string16$.String16, val.headerTemplate);
    encoder.encodeStructPointer(string16$.String16, val.footerTemplate);
    encoder.encodeStruct(codec.Int32, val.rasterizePdfDpi);
    encoder.encodeStruct(codec.Int32, val.printedDocType);
    encoder.encodeStruct(codec.Uint32, val.pagesPerSheet);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintPagesParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintPagesParams.prototype.initDefaults_ = function() {
    this.params = null;
    this.pages = null;
  };
  PrintPagesParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintPagesParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintPagesParams.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PrintParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintPagesParams.pages
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(print$.PageRange), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintPagesParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintPagesParams.decode = function(decoder) {
    var packed;
    var val = new PrintPagesParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(PrintParams);
    val.pages =
        decoder.decodeArrayPointer(new codec.PointerTo(print$.PageRange));
    return val;
  };

  PrintPagesParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintPagesParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PrintParams, val.params);
    encoder.encodeArrayPointer(new codec.PointerTo(print$.PageRange), val.pages);
  };
  function DidPrintDocumentParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DidPrintDocumentParams.prototype.initDefaults_ = function() {
    this.content = null;
    this.documentCookie = 0;
    this.pageSize = null;
    this.contentArea = null;
    this.physicalOffsets = null;
  };
  DidPrintDocumentParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DidPrintDocumentParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidPrintDocumentParams.content
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DidPrintContentParams, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DidPrintDocumentParams.pageSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidPrintDocumentParams.contentArea
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidPrintDocumentParams.physicalOffsets
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, geometry$.Point, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DidPrintDocumentParams.encodedSize = codec.kStructHeaderSize + 40;

  DidPrintDocumentParams.decode = function(decoder) {
    var packed;
    var val = new DidPrintDocumentParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.content =
        decoder.decodeStructPointer(DidPrintContentParams);
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.pageSize =
        decoder.decodeStructPointer(geometry$.Size);
    val.contentArea =
        decoder.decodeStructPointer(geometry$.Rect);
    val.physicalOffsets =
        decoder.decodeStructPointer(geometry$.Point);
    return val;
  };

  DidPrintDocumentParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DidPrintDocumentParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DidPrintContentParams, val.content);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(geometry$.Size, val.pageSize);
    encoder.encodeStructPointer(geometry$.Rect, val.contentArea);
    encoder.encodeStructPointer(geometry$.Point, val.physicalOffsets);
  };
  function ScriptedPrintParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScriptedPrintParams.prototype.initDefaults_ = function() {
    this.cookie = 0;
    this.expectedPagesCount = 0;
    this.hasSelection = false;
    this.isScripted = false;
    this.marginType = 0;
  };
  ScriptedPrintParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScriptedPrintParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;






    // validate ScriptedPrintParams.marginType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 12, print$.MarginType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScriptedPrintParams.encodedSize = codec.kStructHeaderSize + 16;

  ScriptedPrintParams.decode = function(decoder) {
    var packed;
    var val = new ScriptedPrintParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cookie =
        decoder.decodeStruct(codec.Int32);
    val.expectedPagesCount =
        decoder.decodeStruct(codec.Uint32);
    packed = decoder.readUint8();
    val.hasSelection = (packed >> 0) & 1 ? true : false;
    val.isScripted = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.marginType =
        decoder.decodeStruct(new codec.Enum(print$.MarginType));
    return val;
  };

  ScriptedPrintParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScriptedPrintParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.cookie);
    encoder.encodeStruct(codec.Uint32, val.expectedPagesCount);
    packed = 0;
    packed |= (val.hasSelection & 1) << 0
    packed |= (val.isScripted & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.marginType);
  };
  function PrintWithParamsResultData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintWithParamsResultData.prototype.initDefaults_ = function() {
    this.params = null;
    this.accessibilityTree = null;
  };
  PrintWithParamsResultData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintWithParamsResultData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintWithParamsResultData.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DidPrintDocumentParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintWithParamsResultData.accessibilityTree
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ax_tree_update$.AXTreeUpdate, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintWithParamsResultData.encodedSize = codec.kStructHeaderSize + 16;

  PrintWithParamsResultData.decode = function(decoder) {
    var packed;
    var val = new PrintWithParamsResultData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(DidPrintDocumentParams);
    val.accessibilityTree =
        decoder.decodeStructPointer(ax_tree_update$.AXTreeUpdate);
    return val;
  };

  PrintWithParamsResultData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintWithParamsResultData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DidPrintDocumentParams, val.params);
    encoder.encodeStructPointer(ax_tree_update$.AXTreeUpdate, val.accessibilityTree);
  };
  function PrintPreviewUI_SetOptionsFromDocument_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintPreviewUI_SetOptionsFromDocument_Params.prototype.initDefaults_ = function() {
    this.params = null;
    this.requestId = 0;
  };
  PrintPreviewUI_SetOptionsFromDocument_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintPreviewUI_SetOptionsFromDocument_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintPreviewUI_SetOptionsFromDocument_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, OptionsFromDocumentParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintPreviewUI_SetOptionsFromDocument_Params.encodedSize = codec.kStructHeaderSize + 16;

  PrintPreviewUI_SetOptionsFromDocument_Params.decode = function(decoder) {
    var packed;
    var val = new PrintPreviewUI_SetOptionsFromDocument_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(OptionsFromDocumentParams);
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintPreviewUI_SetOptionsFromDocument_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintPreviewUI_SetOptionsFromDocument_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(OptionsFromDocumentParams, val.params);
    encoder.encodeStruct(codec.Int32, val.requestId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintPreviewUI_DidPrepareDocumentForPreview_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintPreviewUI_DidPrepareDocumentForPreview_Params.prototype.initDefaults_ = function() {
    this.documentCookie = 0;
    this.requestId = 0;
  };
  PrintPreviewUI_DidPrepareDocumentForPreview_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintPreviewUI_DidPrepareDocumentForPreview_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  PrintPreviewUI_DidPrepareDocumentForPreview_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintPreviewUI_DidPrepareDocumentForPreview_Params.decode = function(decoder) {
    var packed;
    var val = new PrintPreviewUI_DidPrepareDocumentForPreview_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  PrintPreviewUI_DidPrepareDocumentForPreview_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintPreviewUI_DidPrepareDocumentForPreview_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.encodeStruct(codec.Int32, val.requestId);
  };
  function PrintPreviewUI_DidPreviewPage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintPreviewUI_DidPreviewPage_Params.prototype.initDefaults_ = function() {
    this.params = null;
    this.requestId = 0;
  };
  PrintPreviewUI_DidPreviewPage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintPreviewUI_DidPreviewPage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintPreviewUI_DidPreviewPage_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DidPreviewPageParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintPreviewUI_DidPreviewPage_Params.encodedSize = codec.kStructHeaderSize + 16;

  PrintPreviewUI_DidPreviewPage_Params.decode = function(decoder) {
    var packed;
    var val = new PrintPreviewUI_DidPreviewPage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(DidPreviewPageParams);
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintPreviewUI_DidPreviewPage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintPreviewUI_DidPreviewPage_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DidPreviewPageParams, val.params);
    encoder.encodeStruct(codec.Int32, val.requestId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintPreviewUI_MetafileReadyForPrinting_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintPreviewUI_MetafileReadyForPrinting_Params.prototype.initDefaults_ = function() {
    this.params = null;
    this.requestId = 0;
  };
  PrintPreviewUI_MetafileReadyForPrinting_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintPreviewUI_MetafileReadyForPrinting_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintPreviewUI_MetafileReadyForPrinting_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DidPreviewDocumentParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintPreviewUI_MetafileReadyForPrinting_Params.encodedSize = codec.kStructHeaderSize + 16;

  PrintPreviewUI_MetafileReadyForPrinting_Params.decode = function(decoder) {
    var packed;
    var val = new PrintPreviewUI_MetafileReadyForPrinting_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(DidPreviewDocumentParams);
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintPreviewUI_MetafileReadyForPrinting_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintPreviewUI_MetafileReadyForPrinting_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DidPreviewDocumentParams, val.params);
    encoder.encodeStruct(codec.Int32, val.requestId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintPreviewUI_PrintPreviewFailed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintPreviewUI_PrintPreviewFailed_Params.prototype.initDefaults_ = function() {
    this.documentCookie = 0;
    this.requestId = 0;
  };
  PrintPreviewUI_PrintPreviewFailed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintPreviewUI_PrintPreviewFailed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  PrintPreviewUI_PrintPreviewFailed_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintPreviewUI_PrintPreviewFailed_Params.decode = function(decoder) {
    var packed;
    var val = new PrintPreviewUI_PrintPreviewFailed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  PrintPreviewUI_PrintPreviewFailed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintPreviewUI_PrintPreviewFailed_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.encodeStruct(codec.Int32, val.requestId);
  };
  function PrintPreviewUI_PrintPreviewCancelled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintPreviewUI_PrintPreviewCancelled_Params.prototype.initDefaults_ = function() {
    this.documentCookie = 0;
    this.requestId = 0;
  };
  PrintPreviewUI_PrintPreviewCancelled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintPreviewUI_PrintPreviewCancelled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  PrintPreviewUI_PrintPreviewCancelled_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintPreviewUI_PrintPreviewCancelled_Params.decode = function(decoder) {
    var packed;
    var val = new PrintPreviewUI_PrintPreviewCancelled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  PrintPreviewUI_PrintPreviewCancelled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintPreviewUI_PrintPreviewCancelled_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.encodeStruct(codec.Int32, val.requestId);
  };
  function PrintPreviewUI_PrinterSettingsInvalid_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintPreviewUI_PrinterSettingsInvalid_Params.prototype.initDefaults_ = function() {
    this.documentCookie = 0;
    this.requestId = 0;
  };
  PrintPreviewUI_PrinterSettingsInvalid_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintPreviewUI_PrinterSettingsInvalid_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  PrintPreviewUI_PrinterSettingsInvalid_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintPreviewUI_PrinterSettingsInvalid_Params.decode = function(decoder) {
    var packed;
    var val = new PrintPreviewUI_PrinterSettingsInvalid_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  PrintPreviewUI_PrinterSettingsInvalid_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintPreviewUI_PrinterSettingsInvalid_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.encodeStruct(codec.Int32, val.requestId);
  };
  function PrintPreviewUI_DidGetDefaultPageLayout_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintPreviewUI_DidGetDefaultPageLayout_Params.prototype.initDefaults_ = function() {
    this.pageLayoutInPoints = null;
    this.printableAreaInPoints = null;
    this.allPagesHaveCustomSize = false;
    this.allPagesHaveCustomOrientation = false;
    this.requestId = 0;
  };
  PrintPreviewUI_DidGetDefaultPageLayout_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintPreviewUI_DidGetDefaultPageLayout_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintPreviewUI_DidGetDefaultPageLayout_Params.pageLayoutInPoints
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, print$.PageSizeMargins, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintPreviewUI_DidGetDefaultPageLayout_Params.printableAreaInPoints
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  PrintPreviewUI_DidGetDefaultPageLayout_Params.encodedSize = codec.kStructHeaderSize + 24;

  PrintPreviewUI_DidGetDefaultPageLayout_Params.decode = function(decoder) {
    var packed;
    var val = new PrintPreviewUI_DidGetDefaultPageLayout_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pageLayoutInPoints =
        decoder.decodeStructPointer(print$.PageSizeMargins);
    val.printableAreaInPoints =
        decoder.decodeStructPointer(geometry$.RectF);
    packed = decoder.readUint8();
    val.allPagesHaveCustomSize = (packed >> 0) & 1 ? true : false;
    val.allPagesHaveCustomOrientation = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  PrintPreviewUI_DidGetDefaultPageLayout_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintPreviewUI_DidGetDefaultPageLayout_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(print$.PageSizeMargins, val.pageLayoutInPoints);
    encoder.encodeStructPointer(geometry$.RectF, val.printableAreaInPoints);
    packed = 0;
    packed |= (val.allPagesHaveCustomSize & 1) << 0
    packed |= (val.allPagesHaveCustomOrientation & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.requestId);
  };
  function PrintPreviewUI_DidStartPreview_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintPreviewUI_DidStartPreview_Params.prototype.initDefaults_ = function() {
    this.params = null;
    this.requestId = 0;
  };
  PrintPreviewUI_DidStartPreview_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintPreviewUI_DidStartPreview_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintPreviewUI_DidStartPreview_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DidStartPreviewParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintPreviewUI_DidStartPreview_Params.encodedSize = codec.kStructHeaderSize + 16;

  PrintPreviewUI_DidStartPreview_Params.decode = function(decoder) {
    var packed;
    var val = new PrintPreviewUI_DidStartPreview_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(DidStartPreviewParams);
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintPreviewUI_DidStartPreview_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintPreviewUI_DidStartPreview_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DidStartPreviewParams, val.params);
    encoder.encodeStruct(codec.Int32, val.requestId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintRenderFrame_PrintRequestedPages_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_PrintRequestedPages_Params.prototype.initDefaults_ = function() {
  };
  PrintRenderFrame_PrintRequestedPages_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_PrintRequestedPages_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_PrintRequestedPages_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintRenderFrame_PrintRequestedPages_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_PrintRequestedPages_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintRenderFrame_PrintRequestedPages_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_PrintRequestedPages_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintRenderFrame_PrintWithParams_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_PrintWithParams_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  PrintRenderFrame_PrintWithParams_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_PrintWithParams_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintRenderFrame_PrintWithParams_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PrintPagesParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_PrintWithParams_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintRenderFrame_PrintWithParams_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_PrintWithParams_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(PrintPagesParams);
    return val;
  };

  PrintRenderFrame_PrintWithParams_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_PrintWithParams_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PrintPagesParams, val.params);
  };
  function PrintRenderFrame_PrintWithParams_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_PrintWithParams_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  PrintRenderFrame_PrintWithParams_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_PrintWithParams_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintRenderFrame_PrintWithParams_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, PrintWithParamsResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_PrintWithParams_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintRenderFrame_PrintWithParams_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_PrintWithParams_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(PrintWithParamsResult);
    return val;
  };

  PrintRenderFrame_PrintWithParams_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_PrintWithParams_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(PrintWithParamsResult, val.result);
  };
  function PrintRenderFrame_PrintForSystemDialog_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_PrintForSystemDialog_Params.prototype.initDefaults_ = function() {
  };
  PrintRenderFrame_PrintForSystemDialog_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_PrintForSystemDialog_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_PrintForSystemDialog_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintRenderFrame_PrintForSystemDialog_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_PrintForSystemDialog_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintRenderFrame_PrintForSystemDialog_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_PrintForSystemDialog_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintRenderFrame_InitiatePrintPreview_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_InitiatePrintPreview_Params.prototype.initDefaults_ = function() {
    this.hasSelection = false;
  };
  PrintRenderFrame_InitiatePrintPreview_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_InitiatePrintPreview_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintRenderFrame_InitiatePrintPreview_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintRenderFrame_InitiatePrintPreview_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_InitiatePrintPreview_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.hasSelection = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintRenderFrame_InitiatePrintPreview_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_InitiatePrintPreview_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.hasSelection & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintRenderFrame_SetPrintPreviewUI_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_SetPrintPreviewUI_Params.prototype.initDefaults_ = function() {
    this.preview = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  PrintRenderFrame_SetPrintPreviewUI_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_SetPrintPreviewUI_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintRenderFrame_SetPrintPreviewUI_Params.preview
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_SetPrintPreviewUI_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintRenderFrame_SetPrintPreviewUI_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_SetPrintPreviewUI_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.preview =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  PrintRenderFrame_SetPrintPreviewUI_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_SetPrintPreviewUI_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.preview);
  };
  function PrintRenderFrame_PrintPreview_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_PrintPreview_Params.prototype.initDefaults_ = function() {
    this.settings = null;
  };
  PrintRenderFrame_PrintPreview_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_PrintPreview_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintRenderFrame_PrintPreview_Params.settings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, values$.DictionaryValue, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_PrintPreview_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintRenderFrame_PrintPreview_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_PrintPreview_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.settings =
        decoder.decodeStructPointer(values$.DictionaryValue);
    return val;
  };

  PrintRenderFrame_PrintPreview_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_PrintPreview_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(values$.DictionaryValue, val.settings);
  };
  function PrintRenderFrame_OnPrintPreviewDialogClosed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_OnPrintPreviewDialogClosed_Params.prototype.initDefaults_ = function() {
  };
  PrintRenderFrame_OnPrintPreviewDialogClosed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_OnPrintPreviewDialogClosed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_OnPrintPreviewDialogClosed_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintRenderFrame_OnPrintPreviewDialogClosed_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_OnPrintPreviewDialogClosed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintRenderFrame_OnPrintPreviewDialogClosed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_OnPrintPreviewDialogClosed_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintRenderFrame_PrintFrameContent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_PrintFrameContent_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  PrintRenderFrame_PrintFrameContent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_PrintFrameContent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintRenderFrame_PrintFrameContent_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PrintFrameContentParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_PrintFrameContent_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintRenderFrame_PrintFrameContent_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_PrintFrameContent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(PrintFrameContentParams);
    return val;
  };

  PrintRenderFrame_PrintFrameContent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_PrintFrameContent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PrintFrameContentParams, val.params);
  };
  function PrintRenderFrame_PrintFrameContent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_PrintFrameContent_ResponseParams.prototype.initDefaults_ = function() {
    this.documentCookie = 0;
    this.params = null;
  };
  PrintRenderFrame_PrintFrameContent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_PrintFrameContent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PrintRenderFrame_PrintFrameContent_ResponseParams.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, DidPrintContentParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_PrintFrameContent_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintRenderFrame_PrintFrameContent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_PrintFrameContent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.params =
        decoder.decodeStructPointer(DidPrintContentParams);
    return val;
  };

  PrintRenderFrame_PrintFrameContent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_PrintFrameContent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(DidPrintContentParams, val.params);
  };
  function PrintRenderFrame_ConnectToPdfRenderer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_ConnectToPdfRenderer_Params.prototype.initDefaults_ = function() {
  };
  PrintRenderFrame_ConnectToPdfRenderer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_ConnectToPdfRenderer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_ConnectToPdfRenderer_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintRenderFrame_ConnectToPdfRenderer_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_ConnectToPdfRenderer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintRenderFrame_ConnectToPdfRenderer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_ConnectToPdfRenderer_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintRenderFrame_PrintingDone_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_PrintingDone_Params.prototype.initDefaults_ = function() {
    this.success = false;
  };
  PrintRenderFrame_PrintingDone_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_PrintingDone_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintRenderFrame_PrintingDone_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintRenderFrame_PrintingDone_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_PrintingDone_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintRenderFrame_PrintingDone_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_PrintingDone_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintRenderFrame_PrintNodeUnderContextMenu_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_PrintNodeUnderContextMenu_Params.prototype.initDefaults_ = function() {
  };
  PrintRenderFrame_PrintNodeUnderContextMenu_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_PrintNodeUnderContextMenu_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_PrintNodeUnderContextMenu_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintRenderFrame_PrintNodeUnderContextMenu_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_PrintNodeUnderContextMenu_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintRenderFrame_PrintNodeUnderContextMenu_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_PrintNodeUnderContextMenu_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintRenderFrame_SnapshotForContentAnalysis_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_SnapshotForContentAnalysis_Params.prototype.initDefaults_ = function() {
  };
  PrintRenderFrame_SnapshotForContentAnalysis_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_SnapshotForContentAnalysis_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_SnapshotForContentAnalysis_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintRenderFrame_SnapshotForContentAnalysis_Params.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_SnapshotForContentAnalysis_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintRenderFrame_SnapshotForContentAnalysis_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_SnapshotForContentAnalysis_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams.prototype.initDefaults_ = function() {
    this.params = null;
  };
  PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DidPrintDocumentParams, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(DidPrintDocumentParams);
    return val;
  };

  PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DidPrintDocumentParams, val.params);
  };
  function PrintManagerHost_DidGetPrintedPagesCount_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_DidGetPrintedPagesCount_Params.prototype.initDefaults_ = function() {
    this.cookie = 0;
    this.numberPages = 0;
  };
  PrintManagerHost_DidGetPrintedPagesCount_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_DidGetPrintedPagesCount_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  PrintManagerHost_DidGetPrintedPagesCount_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_DidGetPrintedPagesCount_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_DidGetPrintedPagesCount_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cookie =
        decoder.decodeStruct(codec.Int32);
    val.numberPages =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  PrintManagerHost_DidGetPrintedPagesCount_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_DidGetPrintedPagesCount_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.cookie);
    encoder.encodeStruct(codec.Uint32, val.numberPages);
  };
  function PrintManagerHost_GetDefaultPrintSettings_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_GetDefaultPrintSettings_Params.prototype.initDefaults_ = function() {
  };
  PrintManagerHost_GetDefaultPrintSettings_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_GetDefaultPrintSettings_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_GetDefaultPrintSettings_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintManagerHost_GetDefaultPrintSettings_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_GetDefaultPrintSettings_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintManagerHost_GetDefaultPrintSettings_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_GetDefaultPrintSettings_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintManagerHost_GetDefaultPrintSettings_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_GetDefaultPrintSettings_ResponseParams.prototype.initDefaults_ = function() {
    this.defaultSettings = null;
  };
  PrintManagerHost_GetDefaultPrintSettings_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_GetDefaultPrintSettings_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintManagerHost_GetDefaultPrintSettings_ResponseParams.defaultSettings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PrintParams, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_GetDefaultPrintSettings_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_GetDefaultPrintSettings_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_GetDefaultPrintSettings_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.defaultSettings =
        decoder.decodeStructPointer(PrintParams);
    return val;
  };

  PrintManagerHost_GetDefaultPrintSettings_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_GetDefaultPrintSettings_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PrintParams, val.defaultSettings);
  };
  function PrintManagerHost_DidShowPrintDialog_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_DidShowPrintDialog_Params.prototype.initDefaults_ = function() {
  };
  PrintManagerHost_DidShowPrintDialog_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_DidShowPrintDialog_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_DidShowPrintDialog_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintManagerHost_DidShowPrintDialog_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_DidShowPrintDialog_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintManagerHost_DidShowPrintDialog_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_DidShowPrintDialog_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintManagerHost_DidPrintDocument_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_DidPrintDocument_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  PrintManagerHost_DidPrintDocument_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_DidPrintDocument_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintManagerHost_DidPrintDocument_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DidPrintDocumentParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_DidPrintDocument_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_DidPrintDocument_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_DidPrintDocument_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(DidPrintDocumentParams);
    return val;
  };

  PrintManagerHost_DidPrintDocument_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_DidPrintDocument_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DidPrintDocumentParams, val.params);
  };
  function PrintManagerHost_DidPrintDocument_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_DidPrintDocument_ResponseParams.prototype.initDefaults_ = function() {
    this.completed = false;
  };
  PrintManagerHost_DidPrintDocument_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_DidPrintDocument_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintManagerHost_DidPrintDocument_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_DidPrintDocument_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_DidPrintDocument_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.completed = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintManagerHost_DidPrintDocument_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_DidPrintDocument_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.completed & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintManagerHost_IsPrintingEnabled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_IsPrintingEnabled_Params.prototype.initDefaults_ = function() {
  };
  PrintManagerHost_IsPrintingEnabled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_IsPrintingEnabled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_IsPrintingEnabled_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintManagerHost_IsPrintingEnabled_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_IsPrintingEnabled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintManagerHost_IsPrintingEnabled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_IsPrintingEnabled_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintManagerHost_IsPrintingEnabled_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_IsPrintingEnabled_ResponseParams.prototype.initDefaults_ = function() {
    this.printingEnabled = false;
  };
  PrintManagerHost_IsPrintingEnabled_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_IsPrintingEnabled_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintManagerHost_IsPrintingEnabled_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_IsPrintingEnabled_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_IsPrintingEnabled_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.printingEnabled = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintManagerHost_IsPrintingEnabled_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_IsPrintingEnabled_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.printingEnabled & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintManagerHost_ScriptedPrint_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_ScriptedPrint_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  PrintManagerHost_ScriptedPrint_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_ScriptedPrint_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintManagerHost_ScriptedPrint_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ScriptedPrintParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_ScriptedPrint_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_ScriptedPrint_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_ScriptedPrint_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(ScriptedPrintParams);
    return val;
  };

  PrintManagerHost_ScriptedPrint_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_ScriptedPrint_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ScriptedPrintParams, val.params);
  };
  function PrintManagerHost_ScriptedPrint_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_ScriptedPrint_ResponseParams.prototype.initDefaults_ = function() {
    this.settings = null;
  };
  PrintManagerHost_ScriptedPrint_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_ScriptedPrint_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintManagerHost_ScriptedPrint_ResponseParams.settings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PrintPagesParams, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_ScriptedPrint_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_ScriptedPrint_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_ScriptedPrint_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.settings =
        decoder.decodeStructPointer(PrintPagesParams);
    return val;
  };

  PrintManagerHost_ScriptedPrint_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_ScriptedPrint_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PrintPagesParams, val.settings);
  };
  function PrintManagerHost_PrintingFailed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_PrintingFailed_Params.prototype.initDefaults_ = function() {
    this.cookie = 0;
    this.reason = 0;
  };
  PrintManagerHost_PrintingFailed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_PrintingFailed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PrintManagerHost_PrintingFailed_Params.reason
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, PrintFailureReason);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_PrintingFailed_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_PrintingFailed_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_PrintingFailed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cookie =
        decoder.decodeStruct(codec.Int32);
    val.reason =
        decoder.decodeStruct(new codec.Enum(PrintFailureReason));
    return val;
  };

  PrintManagerHost_PrintingFailed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_PrintingFailed_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.cookie);
    encoder.encodeStruct(codec.Int32, val.reason);
  };
  function PrintManagerHost_UpdatePrintSettings_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_UpdatePrintSettings_Params.prototype.initDefaults_ = function() {
    this.jobSettings = null;
  };
  PrintManagerHost_UpdatePrintSettings_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_UpdatePrintSettings_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintManagerHost_UpdatePrintSettings_Params.jobSettings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, values$.DictionaryValue, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_UpdatePrintSettings_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_UpdatePrintSettings_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_UpdatePrintSettings_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.jobSettings =
        decoder.decodeStructPointer(values$.DictionaryValue);
    return val;
  };

  PrintManagerHost_UpdatePrintSettings_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_UpdatePrintSettings_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(values$.DictionaryValue, val.jobSettings);
  };
  function PrintManagerHost_UpdatePrintSettings_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_UpdatePrintSettings_ResponseParams.prototype.initDefaults_ = function() {
    this.currentSettings = null;
  };
  PrintManagerHost_UpdatePrintSettings_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_UpdatePrintSettings_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintManagerHost_UpdatePrintSettings_ResponseParams.currentSettings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PrintPagesParams, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_UpdatePrintSettings_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_UpdatePrintSettings_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_UpdatePrintSettings_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.currentSettings =
        decoder.decodeStructPointer(PrintPagesParams);
    return val;
  };

  PrintManagerHost_UpdatePrintSettings_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_UpdatePrintSettings_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PrintPagesParams, val.currentSettings);
  };
  function PrintManagerHost_SetupScriptedPrintPreview_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_SetupScriptedPrintPreview_Params.prototype.initDefaults_ = function() {
  };
  PrintManagerHost_SetupScriptedPrintPreview_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_SetupScriptedPrintPreview_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_SetupScriptedPrintPreview_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintManagerHost_SetupScriptedPrintPreview_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_SetupScriptedPrintPreview_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintManagerHost_SetupScriptedPrintPreview_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_SetupScriptedPrintPreview_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintManagerHost_SetupScriptedPrintPreview_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_SetupScriptedPrintPreview_ResponseParams.prototype.initDefaults_ = function() {
  };
  PrintManagerHost_SetupScriptedPrintPreview_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_SetupScriptedPrintPreview_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_SetupScriptedPrintPreview_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  PrintManagerHost_SetupScriptedPrintPreview_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_SetupScriptedPrintPreview_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintManagerHost_SetupScriptedPrintPreview_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_SetupScriptedPrintPreview_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintManagerHost_ShowScriptedPrintPreview_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_ShowScriptedPrintPreview_Params.prototype.initDefaults_ = function() {
    this.isModifiable = false;
  };
  PrintManagerHost_ShowScriptedPrintPreview_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_ShowScriptedPrintPreview_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintManagerHost_ShowScriptedPrintPreview_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_ShowScriptedPrintPreview_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_ShowScriptedPrintPreview_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isModifiable = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintManagerHost_ShowScriptedPrintPreview_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_ShowScriptedPrintPreview_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isModifiable & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintManagerHost_RequestPrintPreview_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_RequestPrintPreview_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  PrintManagerHost_RequestPrintPreview_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_RequestPrintPreview_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintManagerHost_RequestPrintPreview_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, RequestPrintPreviewParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_RequestPrintPreview_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_RequestPrintPreview_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_RequestPrintPreview_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(RequestPrintPreviewParams);
    return val;
  };

  PrintManagerHost_RequestPrintPreview_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_RequestPrintPreview_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(RequestPrintPreviewParams, val.params);
  };
  function PrintManagerHost_CheckForCancel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_CheckForCancel_Params.prototype.initDefaults_ = function() {
    this.previewUiId = 0;
    this.requestId = 0;
  };
  PrintManagerHost_CheckForCancel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_CheckForCancel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  PrintManagerHost_CheckForCancel_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_CheckForCancel_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_CheckForCancel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.previewUiId =
        decoder.decodeStruct(codec.Int32);
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  PrintManagerHost_CheckForCancel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_CheckForCancel_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.previewUiId);
    encoder.encodeStruct(codec.Int32, val.requestId);
  };
  function PrintManagerHost_CheckForCancel_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_CheckForCancel_ResponseParams.prototype.initDefaults_ = function() {
    this.cancel = false;
  };
  PrintManagerHost_CheckForCancel_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_CheckForCancel_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintManagerHost_CheckForCancel_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PrintManagerHost_CheckForCancel_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_CheckForCancel_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.cancel = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintManagerHost_CheckForCancel_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_CheckForCancel_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.cancel & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintManagerHost_SetAccessibilityTree_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintManagerHost_SetAccessibilityTree_Params.prototype.initDefaults_ = function() {
    this.cookie = 0;
    this.accessibilityTree = null;
  };
  PrintManagerHost_SetAccessibilityTree_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintManagerHost_SetAccessibilityTree_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PrintManagerHost_SetAccessibilityTree_Params.accessibilityTree
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ax_tree_update$.AXTreeUpdate, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintManagerHost_SetAccessibilityTree_Params.encodedSize = codec.kStructHeaderSize + 16;

  PrintManagerHost_SetAccessibilityTree_Params.decode = function(decoder) {
    var packed;
    var val = new PrintManagerHost_SetAccessibilityTree_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cookie =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.accessibilityTree =
        decoder.decodeStructPointer(ax_tree_update$.AXTreeUpdate);
    return val;
  };

  PrintManagerHost_SetAccessibilityTree_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintManagerHost_SetAccessibilityTree_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.cookie);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(ax_tree_update$.AXTreeUpdate, val.accessibilityTree);
  };

  function PrintWithParamsResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  PrintWithParamsResult.Tags = {
    data: 0,
    failureReason: 1,
  };

  PrintWithParamsResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  PrintWithParamsResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "data",
        "failureReason",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a PrintWithParamsResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(PrintWithParamsResult.prototype, "data", {
    get: function() {
      if (this.$tag != PrintWithParamsResult.Tags.data) {
        throw new ReferenceError(
            "PrintWithParamsResult.data is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PrintWithParamsResult.Tags.data;
      this.$data = value;
    }
  });
  Object.defineProperty(PrintWithParamsResult.prototype, "failureReason", {
    get: function() {
      if (this.$tag != PrintWithParamsResult.Tags.failureReason) {
        throw new ReferenceError(
            "PrintWithParamsResult.failureReason is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PrintWithParamsResult.Tags.failureReason;
      this.$data = value;
    }
  });


    PrintWithParamsResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case PrintWithParamsResult.Tags.data:
          encoder.encodeStructPointer(PrintWithParamsResultData, val.data);
          break;
        case PrintWithParamsResult.Tags.failureReason:
          encoder.encodeStruct(codec.Int32, val.failureReason);
          break;
      }
      encoder.align();
    };


    PrintWithParamsResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new PrintWithParamsResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case PrintWithParamsResult.Tags.data:
          result.data = decoder.decodeStructPointer(PrintWithParamsResultData);
          break;
        case PrintWithParamsResult.Tags.failureReason:
          result.failureReason = decoder.decodeStruct(new codec.Enum(PrintFailureReason));
          break;
      }
      decoder.align();

      return result;
    };


    PrintWithParamsResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case PrintWithParamsResult.Tags.data:
          

    // validate PrintWithParamsResult.data
    err = messageValidator.validateStructPointer(data_offset, PrintWithParamsResultData, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case PrintWithParamsResult.Tags.failureReason:
          

    // validate PrintWithParamsResult.failureReason
    err = messageValidator.validateEnum(data_offset, PrintFailureReason);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  PrintWithParamsResult.encodedSize = 16;
  var kPrintPreviewUI_SetOptionsFromDocument_Name = 1218277297;
  var kPrintPreviewUI_DidPrepareDocumentForPreview_Name = 988751211;
  var kPrintPreviewUI_DidPreviewPage_Name = 828371366;
  var kPrintPreviewUI_MetafileReadyForPrinting_Name = 1652879032;
  var kPrintPreviewUI_PrintPreviewFailed_Name = 707155009;
  var kPrintPreviewUI_PrintPreviewCancelled_Name = 1717319536;
  var kPrintPreviewUI_PrinterSettingsInvalid_Name = 1454844716;
  var kPrintPreviewUI_DidGetDefaultPageLayout_Name = 1569725884;
  var kPrintPreviewUI_DidStartPreview_Name = 2135875618;

  function PrintPreviewUIPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrintPreviewUI,
                                                   handleOrPtrInfo);
  }

  function PrintPreviewUIAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrintPreviewUI, associatedInterfacePtrInfo);
  }

  PrintPreviewUIAssociatedPtr.prototype =
      Object.create(PrintPreviewUIPtr.prototype);
  PrintPreviewUIAssociatedPtr.prototype.constructor =
      PrintPreviewUIAssociatedPtr;

  function PrintPreviewUIProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrintPreviewUIPtr.prototype.setOptionsFromDocument = function() {
    return PrintPreviewUIProxy.prototype.setOptionsFromDocument
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintPreviewUIProxy.prototype.setOptionsFromDocument = function(params, requestId) {
    var params_ = new PrintPreviewUI_SetOptionsFromDocument_Params();
    params_.params = params;
    params_.requestId = requestId;
    var builder = new codec.MessageV0Builder(
        kPrintPreviewUI_SetOptionsFromDocument_Name,
        codec.align(PrintPreviewUI_SetOptionsFromDocument_Params.encodedSize));
    builder.encodeStruct(PrintPreviewUI_SetOptionsFromDocument_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintPreviewUIPtr.prototype.didPrepareDocumentForPreview = function() {
    return PrintPreviewUIProxy.prototype.didPrepareDocumentForPreview
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintPreviewUIProxy.prototype.didPrepareDocumentForPreview = function(documentCookie, requestId) {
    var params_ = new PrintPreviewUI_DidPrepareDocumentForPreview_Params();
    params_.documentCookie = documentCookie;
    params_.requestId = requestId;
    var builder = new codec.MessageV0Builder(
        kPrintPreviewUI_DidPrepareDocumentForPreview_Name,
        codec.align(PrintPreviewUI_DidPrepareDocumentForPreview_Params.encodedSize));
    builder.encodeStruct(PrintPreviewUI_DidPrepareDocumentForPreview_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintPreviewUIPtr.prototype.didPreviewPage = function() {
    return PrintPreviewUIProxy.prototype.didPreviewPage
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintPreviewUIProxy.prototype.didPreviewPage = function(params, requestId) {
    var params_ = new PrintPreviewUI_DidPreviewPage_Params();
    params_.params = params;
    params_.requestId = requestId;
    var builder = new codec.MessageV0Builder(
        kPrintPreviewUI_DidPreviewPage_Name,
        codec.align(PrintPreviewUI_DidPreviewPage_Params.encodedSize));
    builder.encodeStruct(PrintPreviewUI_DidPreviewPage_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintPreviewUIPtr.prototype.metafileReadyForPrinting = function() {
    return PrintPreviewUIProxy.prototype.metafileReadyForPrinting
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintPreviewUIProxy.prototype.metafileReadyForPrinting = function(params, requestId) {
    var params_ = new PrintPreviewUI_MetafileReadyForPrinting_Params();
    params_.params = params;
    params_.requestId = requestId;
    var builder = new codec.MessageV0Builder(
        kPrintPreviewUI_MetafileReadyForPrinting_Name,
        codec.align(PrintPreviewUI_MetafileReadyForPrinting_Params.encodedSize));
    builder.encodeStruct(PrintPreviewUI_MetafileReadyForPrinting_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintPreviewUIPtr.prototype.printPreviewFailed = function() {
    return PrintPreviewUIProxy.prototype.printPreviewFailed
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintPreviewUIProxy.prototype.printPreviewFailed = function(documentCookie, requestId) {
    var params_ = new PrintPreviewUI_PrintPreviewFailed_Params();
    params_.documentCookie = documentCookie;
    params_.requestId = requestId;
    var builder = new codec.MessageV0Builder(
        kPrintPreviewUI_PrintPreviewFailed_Name,
        codec.align(PrintPreviewUI_PrintPreviewFailed_Params.encodedSize));
    builder.encodeStruct(PrintPreviewUI_PrintPreviewFailed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintPreviewUIPtr.prototype.printPreviewCancelled = function() {
    return PrintPreviewUIProxy.prototype.printPreviewCancelled
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintPreviewUIProxy.prototype.printPreviewCancelled = function(documentCookie, requestId) {
    var params_ = new PrintPreviewUI_PrintPreviewCancelled_Params();
    params_.documentCookie = documentCookie;
    params_.requestId = requestId;
    var builder = new codec.MessageV0Builder(
        kPrintPreviewUI_PrintPreviewCancelled_Name,
        codec.align(PrintPreviewUI_PrintPreviewCancelled_Params.encodedSize));
    builder.encodeStruct(PrintPreviewUI_PrintPreviewCancelled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintPreviewUIPtr.prototype.printerSettingsInvalid = function() {
    return PrintPreviewUIProxy.prototype.printerSettingsInvalid
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintPreviewUIProxy.prototype.printerSettingsInvalid = function(documentCookie, requestId) {
    var params_ = new PrintPreviewUI_PrinterSettingsInvalid_Params();
    params_.documentCookie = documentCookie;
    params_.requestId = requestId;
    var builder = new codec.MessageV0Builder(
        kPrintPreviewUI_PrinterSettingsInvalid_Name,
        codec.align(PrintPreviewUI_PrinterSettingsInvalid_Params.encodedSize));
    builder.encodeStruct(PrintPreviewUI_PrinterSettingsInvalid_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintPreviewUIPtr.prototype.didGetDefaultPageLayout = function() {
    return PrintPreviewUIProxy.prototype.didGetDefaultPageLayout
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintPreviewUIProxy.prototype.didGetDefaultPageLayout = function(pageLayoutInPoints, printableAreaInPoints, allPagesHaveCustomSize, allPagesHaveCustomOrientation, requestId) {
    var params_ = new PrintPreviewUI_DidGetDefaultPageLayout_Params();
    params_.pageLayoutInPoints = pageLayoutInPoints;
    params_.printableAreaInPoints = printableAreaInPoints;
    params_.allPagesHaveCustomSize = allPagesHaveCustomSize;
    params_.allPagesHaveCustomOrientation = allPagesHaveCustomOrientation;
    params_.requestId = requestId;
    var builder = new codec.MessageV0Builder(
        kPrintPreviewUI_DidGetDefaultPageLayout_Name,
        codec.align(PrintPreviewUI_DidGetDefaultPageLayout_Params.encodedSize));
    builder.encodeStruct(PrintPreviewUI_DidGetDefaultPageLayout_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintPreviewUIPtr.prototype.didStartPreview = function() {
    return PrintPreviewUIProxy.prototype.didStartPreview
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintPreviewUIProxy.prototype.didStartPreview = function(params, requestId) {
    var params_ = new PrintPreviewUI_DidStartPreview_Params();
    params_.params = params;
    params_.requestId = requestId;
    var builder = new codec.MessageV0Builder(
        kPrintPreviewUI_DidStartPreview_Name,
        codec.align(PrintPreviewUI_DidStartPreview_Params.encodedSize));
    builder.encodeStruct(PrintPreviewUI_DidStartPreview_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PrintPreviewUIStub(delegate) {
    this.delegate_ = delegate;
  }
  PrintPreviewUIStub.prototype.setOptionsFromDocument = function(params, requestId) {
    return this.delegate_ && this.delegate_.setOptionsFromDocument && this.delegate_.setOptionsFromDocument(params, requestId);
  }
  PrintPreviewUIStub.prototype.didPrepareDocumentForPreview = function(documentCookie, requestId) {
    return this.delegate_ && this.delegate_.didPrepareDocumentForPreview && this.delegate_.didPrepareDocumentForPreview(documentCookie, requestId);
  }
  PrintPreviewUIStub.prototype.didPreviewPage = function(params, requestId) {
    return this.delegate_ && this.delegate_.didPreviewPage && this.delegate_.didPreviewPage(params, requestId);
  }
  PrintPreviewUIStub.prototype.metafileReadyForPrinting = function(params, requestId) {
    return this.delegate_ && this.delegate_.metafileReadyForPrinting && this.delegate_.metafileReadyForPrinting(params, requestId);
  }
  PrintPreviewUIStub.prototype.printPreviewFailed = function(documentCookie, requestId) {
    return this.delegate_ && this.delegate_.printPreviewFailed && this.delegate_.printPreviewFailed(documentCookie, requestId);
  }
  PrintPreviewUIStub.prototype.printPreviewCancelled = function(documentCookie, requestId) {
    return this.delegate_ && this.delegate_.printPreviewCancelled && this.delegate_.printPreviewCancelled(documentCookie, requestId);
  }
  PrintPreviewUIStub.prototype.printerSettingsInvalid = function(documentCookie, requestId) {
    return this.delegate_ && this.delegate_.printerSettingsInvalid && this.delegate_.printerSettingsInvalid(documentCookie, requestId);
  }
  PrintPreviewUIStub.prototype.didGetDefaultPageLayout = function(pageLayoutInPoints, printableAreaInPoints, allPagesHaveCustomSize, allPagesHaveCustomOrientation, requestId) {
    return this.delegate_ && this.delegate_.didGetDefaultPageLayout && this.delegate_.didGetDefaultPageLayout(pageLayoutInPoints, printableAreaInPoints, allPagesHaveCustomSize, allPagesHaveCustomOrientation, requestId);
  }
  PrintPreviewUIStub.prototype.didStartPreview = function(params, requestId) {
    return this.delegate_ && this.delegate_.didStartPreview && this.delegate_.didStartPreview(params, requestId);
  }

  PrintPreviewUIStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrintPreviewUI_SetOptionsFromDocument_Name:
      var params = reader.decodeStruct(PrintPreviewUI_SetOptionsFromDocument_Params);
      this.setOptionsFromDocument(params.params, params.requestId);
      return true;
    case kPrintPreviewUI_DidPrepareDocumentForPreview_Name:
      var params = reader.decodeStruct(PrintPreviewUI_DidPrepareDocumentForPreview_Params);
      this.didPrepareDocumentForPreview(params.documentCookie, params.requestId);
      return true;
    case kPrintPreviewUI_DidPreviewPage_Name:
      var params = reader.decodeStruct(PrintPreviewUI_DidPreviewPage_Params);
      this.didPreviewPage(params.params, params.requestId);
      return true;
    case kPrintPreviewUI_MetafileReadyForPrinting_Name:
      var params = reader.decodeStruct(PrintPreviewUI_MetafileReadyForPrinting_Params);
      this.metafileReadyForPrinting(params.params, params.requestId);
      return true;
    case kPrintPreviewUI_PrintPreviewFailed_Name:
      var params = reader.decodeStruct(PrintPreviewUI_PrintPreviewFailed_Params);
      this.printPreviewFailed(params.documentCookie, params.requestId);
      return true;
    case kPrintPreviewUI_PrintPreviewCancelled_Name:
      var params = reader.decodeStruct(PrintPreviewUI_PrintPreviewCancelled_Params);
      this.printPreviewCancelled(params.documentCookie, params.requestId);
      return true;
    case kPrintPreviewUI_PrinterSettingsInvalid_Name:
      var params = reader.decodeStruct(PrintPreviewUI_PrinterSettingsInvalid_Params);
      this.printerSettingsInvalid(params.documentCookie, params.requestId);
      return true;
    case kPrintPreviewUI_DidGetDefaultPageLayout_Name:
      var params = reader.decodeStruct(PrintPreviewUI_DidGetDefaultPageLayout_Params);
      this.didGetDefaultPageLayout(params.pageLayoutInPoints, params.printableAreaInPoints, params.allPagesHaveCustomSize, params.allPagesHaveCustomOrientation, params.requestId);
      return true;
    case kPrintPreviewUI_DidStartPreview_Name:
      var params = reader.decodeStruct(PrintPreviewUI_DidStartPreview_Params);
      this.didStartPreview(params.params, params.requestId);
      return true;
    default:
      return false;
    }
  };

  PrintPreviewUIStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePrintPreviewUIRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrintPreviewUI_SetOptionsFromDocument_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintPreviewUI_SetOptionsFromDocument_Params;
      break;
      case kPrintPreviewUI_DidPrepareDocumentForPreview_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintPreviewUI_DidPrepareDocumentForPreview_Params;
      break;
      case kPrintPreviewUI_DidPreviewPage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintPreviewUI_DidPreviewPage_Params;
      break;
      case kPrintPreviewUI_MetafileReadyForPrinting_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintPreviewUI_MetafileReadyForPrinting_Params;
      break;
      case kPrintPreviewUI_PrintPreviewFailed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintPreviewUI_PrintPreviewFailed_Params;
      break;
      case kPrintPreviewUI_PrintPreviewCancelled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintPreviewUI_PrintPreviewCancelled_Params;
      break;
      case kPrintPreviewUI_PrinterSettingsInvalid_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintPreviewUI_PrinterSettingsInvalid_Params;
      break;
      case kPrintPreviewUI_DidGetDefaultPageLayout_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintPreviewUI_DidGetDefaultPageLayout_Params;
      break;
      case kPrintPreviewUI_DidStartPreview_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintPreviewUI_DidStartPreview_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrintPreviewUIResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PrintPreviewUI = {
    name: 'printing.mojom.PrintPreviewUI',
    kVersion: 0,
    ptrClass: PrintPreviewUIPtr,
    proxyClass: PrintPreviewUIProxy,
    stubClass: PrintPreviewUIStub,
    validateRequest: validatePrintPreviewUIRequest,
    validateResponse: null,
  };
  PrintPreviewUIStub.prototype.validator = validatePrintPreviewUIRequest;
  PrintPreviewUIProxy.prototype.validator = null;
  var kPrintRenderFrame_PrintRequestedPages_Name = 463478790;
  var kPrintRenderFrame_PrintWithParams_Name = 73297381;
  var kPrintRenderFrame_PrintForSystemDialog_Name = 1234878869;
  var kPrintRenderFrame_InitiatePrintPreview_Name = 1955651330;
  var kPrintRenderFrame_SetPrintPreviewUI_Name = 1484636864;
  var kPrintRenderFrame_PrintPreview_Name = 510326254;
  var kPrintRenderFrame_OnPrintPreviewDialogClosed_Name = 107685252;
  var kPrintRenderFrame_PrintFrameContent_Name = 1772588170;
  var kPrintRenderFrame_ConnectToPdfRenderer_Name = 622496542;
  var kPrintRenderFrame_PrintingDone_Name = 1614038760;
  var kPrintRenderFrame_PrintNodeUnderContextMenu_Name = 1281823448;
  var kPrintRenderFrame_SnapshotForContentAnalysis_Name = 1470459010;

  function PrintRenderFramePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrintRenderFrame,
                                                   handleOrPtrInfo);
  }

  function PrintRenderFrameAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrintRenderFrame, associatedInterfacePtrInfo);
  }

  PrintRenderFrameAssociatedPtr.prototype =
      Object.create(PrintRenderFramePtr.prototype);
  PrintRenderFrameAssociatedPtr.prototype.constructor =
      PrintRenderFrameAssociatedPtr;

  function PrintRenderFrameProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrintRenderFramePtr.prototype.printRequestedPages = function() {
    return PrintRenderFrameProxy.prototype.printRequestedPages
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.printRequestedPages = function() {
    var params_ = new PrintRenderFrame_PrintRequestedPages_Params();
    var builder = new codec.MessageV0Builder(
        kPrintRenderFrame_PrintRequestedPages_Name,
        codec.align(PrintRenderFrame_PrintRequestedPages_Params.encodedSize));
    builder.encodeStruct(PrintRenderFrame_PrintRequestedPages_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintRenderFramePtr.prototype.printWithParams = function() {
    return PrintRenderFrameProxy.prototype.printWithParams
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.printWithParams = function(params) {
    var params_ = new PrintRenderFrame_PrintWithParams_Params();
    params_.params = params;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintRenderFrame_PrintWithParams_Name,
          codec.align(PrintRenderFrame_PrintWithParams_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintRenderFrame_PrintWithParams_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintRenderFrame_PrintWithParams_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintRenderFramePtr.prototype.printForSystemDialog = function() {
    return PrintRenderFrameProxy.prototype.printForSystemDialog
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.printForSystemDialog = function() {
    var params_ = new PrintRenderFrame_PrintForSystemDialog_Params();
    var builder = new codec.MessageV0Builder(
        kPrintRenderFrame_PrintForSystemDialog_Name,
        codec.align(PrintRenderFrame_PrintForSystemDialog_Params.encodedSize));
    builder.encodeStruct(PrintRenderFrame_PrintForSystemDialog_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintRenderFramePtr.prototype.initiatePrintPreview = function() {
    return PrintRenderFrameProxy.prototype.initiatePrintPreview
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.initiatePrintPreview = function(hasSelection) {
    var params_ = new PrintRenderFrame_InitiatePrintPreview_Params();
    params_.hasSelection = hasSelection;
    var builder = new codec.MessageV0Builder(
        kPrintRenderFrame_InitiatePrintPreview_Name,
        codec.align(PrintRenderFrame_InitiatePrintPreview_Params.encodedSize));
    builder.encodeStruct(PrintRenderFrame_InitiatePrintPreview_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintRenderFramePtr.prototype.setPrintPreviewUI = function() {
    return PrintRenderFrameProxy.prototype.setPrintPreviewUI
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.setPrintPreviewUI = function(preview) {
    var params_ = new PrintRenderFrame_SetPrintPreviewUI_Params();
    params_.preview = preview;
    var builder = new codec.MessageV2Builder(
        kPrintRenderFrame_SetPrintPreviewUI_Name,
        codec.align(PrintRenderFrame_SetPrintPreviewUI_Params.encodedSize));
    builder.setPayload(PrintRenderFrame_SetPrintPreviewUI_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintRenderFramePtr.prototype.printPreview = function() {
    return PrintRenderFrameProxy.prototype.printPreview
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.printPreview = function(settings) {
    var params_ = new PrintRenderFrame_PrintPreview_Params();
    params_.settings = settings;
    var builder = new codec.MessageV0Builder(
        kPrintRenderFrame_PrintPreview_Name,
        codec.align(PrintRenderFrame_PrintPreview_Params.encodedSize));
    builder.encodeStruct(PrintRenderFrame_PrintPreview_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintRenderFramePtr.prototype.onPrintPreviewDialogClosed = function() {
    return PrintRenderFrameProxy.prototype.onPrintPreviewDialogClosed
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.onPrintPreviewDialogClosed = function() {
    var params_ = new PrintRenderFrame_OnPrintPreviewDialogClosed_Params();
    var builder = new codec.MessageV0Builder(
        kPrintRenderFrame_OnPrintPreviewDialogClosed_Name,
        codec.align(PrintRenderFrame_OnPrintPreviewDialogClosed_Params.encodedSize));
    builder.encodeStruct(PrintRenderFrame_OnPrintPreviewDialogClosed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintRenderFramePtr.prototype.printFrameContent = function() {
    return PrintRenderFrameProxy.prototype.printFrameContent
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.printFrameContent = function(params) {
    var params_ = new PrintRenderFrame_PrintFrameContent_Params();
    params_.params = params;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintRenderFrame_PrintFrameContent_Name,
          codec.align(PrintRenderFrame_PrintFrameContent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintRenderFrame_PrintFrameContent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintRenderFrame_PrintFrameContent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintRenderFramePtr.prototype.connectToPdfRenderer = function() {
    return PrintRenderFrameProxy.prototype.connectToPdfRenderer
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.connectToPdfRenderer = function() {
    var params_ = new PrintRenderFrame_ConnectToPdfRenderer_Params();
    var builder = new codec.MessageV0Builder(
        kPrintRenderFrame_ConnectToPdfRenderer_Name,
        codec.align(PrintRenderFrame_ConnectToPdfRenderer_Params.encodedSize));
    builder.encodeStruct(PrintRenderFrame_ConnectToPdfRenderer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintRenderFramePtr.prototype.printingDone = function() {
    return PrintRenderFrameProxy.prototype.printingDone
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.printingDone = function(success) {
    var params_ = new PrintRenderFrame_PrintingDone_Params();
    params_.success = success;
    var builder = new codec.MessageV0Builder(
        kPrintRenderFrame_PrintingDone_Name,
        codec.align(PrintRenderFrame_PrintingDone_Params.encodedSize));
    builder.encodeStruct(PrintRenderFrame_PrintingDone_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintRenderFramePtr.prototype.printNodeUnderContextMenu = function() {
    return PrintRenderFrameProxy.prototype.printNodeUnderContextMenu
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.printNodeUnderContextMenu = function() {
    var params_ = new PrintRenderFrame_PrintNodeUnderContextMenu_Params();
    var builder = new codec.MessageV0Builder(
        kPrintRenderFrame_PrintNodeUnderContextMenu_Name,
        codec.align(PrintRenderFrame_PrintNodeUnderContextMenu_Params.encodedSize));
    builder.encodeStruct(PrintRenderFrame_PrintNodeUnderContextMenu_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintRenderFramePtr.prototype.snapshotForContentAnalysis = function() {
    return PrintRenderFrameProxy.prototype.snapshotForContentAnalysis
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintRenderFrameProxy.prototype.snapshotForContentAnalysis = function() {
    var params_ = new PrintRenderFrame_SnapshotForContentAnalysis_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintRenderFrame_SnapshotForContentAnalysis_Name,
          codec.align(PrintRenderFrame_SnapshotForContentAnalysis_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintRenderFrame_SnapshotForContentAnalysis_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PrintRenderFrameStub(delegate) {
    this.delegate_ = delegate;
  }
  PrintRenderFrameStub.prototype.printRequestedPages = function() {
    return this.delegate_ && this.delegate_.printRequestedPages && this.delegate_.printRequestedPages();
  }
  PrintRenderFrameStub.prototype.printWithParams = function(params) {
    return this.delegate_ && this.delegate_.printWithParams && this.delegate_.printWithParams(params);
  }
  PrintRenderFrameStub.prototype.printForSystemDialog = function() {
    return this.delegate_ && this.delegate_.printForSystemDialog && this.delegate_.printForSystemDialog();
  }
  PrintRenderFrameStub.prototype.initiatePrintPreview = function(hasSelection) {
    return this.delegate_ && this.delegate_.initiatePrintPreview && this.delegate_.initiatePrintPreview(hasSelection);
  }
  PrintRenderFrameStub.prototype.setPrintPreviewUI = function(preview) {
    return this.delegate_ && this.delegate_.setPrintPreviewUI && this.delegate_.setPrintPreviewUI(preview);
  }
  PrintRenderFrameStub.prototype.printPreview = function(settings) {
    return this.delegate_ && this.delegate_.printPreview && this.delegate_.printPreview(settings);
  }
  PrintRenderFrameStub.prototype.onPrintPreviewDialogClosed = function() {
    return this.delegate_ && this.delegate_.onPrintPreviewDialogClosed && this.delegate_.onPrintPreviewDialogClosed();
  }
  PrintRenderFrameStub.prototype.printFrameContent = function(params) {
    return this.delegate_ && this.delegate_.printFrameContent && this.delegate_.printFrameContent(params);
  }
  PrintRenderFrameStub.prototype.connectToPdfRenderer = function() {
    return this.delegate_ && this.delegate_.connectToPdfRenderer && this.delegate_.connectToPdfRenderer();
  }
  PrintRenderFrameStub.prototype.printingDone = function(success) {
    return this.delegate_ && this.delegate_.printingDone && this.delegate_.printingDone(success);
  }
  PrintRenderFrameStub.prototype.printNodeUnderContextMenu = function() {
    return this.delegate_ && this.delegate_.printNodeUnderContextMenu && this.delegate_.printNodeUnderContextMenu();
  }
  PrintRenderFrameStub.prototype.snapshotForContentAnalysis = function() {
    return this.delegate_ && this.delegate_.snapshotForContentAnalysis && this.delegate_.snapshotForContentAnalysis();
  }

  PrintRenderFrameStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrintRenderFrame_PrintRequestedPages_Name:
      var params = reader.decodeStruct(PrintRenderFrame_PrintRequestedPages_Params);
      this.printRequestedPages();
      return true;
    case kPrintRenderFrame_PrintForSystemDialog_Name:
      var params = reader.decodeStruct(PrintRenderFrame_PrintForSystemDialog_Params);
      this.printForSystemDialog();
      return true;
    case kPrintRenderFrame_InitiatePrintPreview_Name:
      var params = reader.decodeStruct(PrintRenderFrame_InitiatePrintPreview_Params);
      this.initiatePrintPreview(params.hasSelection);
      return true;
    case kPrintRenderFrame_SetPrintPreviewUI_Name:
      var params = reader.decodeStruct(PrintRenderFrame_SetPrintPreviewUI_Params);
      this.setPrintPreviewUI(params.preview);
      return true;
    case kPrintRenderFrame_PrintPreview_Name:
      var params = reader.decodeStruct(PrintRenderFrame_PrintPreview_Params);
      this.printPreview(params.settings);
      return true;
    case kPrintRenderFrame_OnPrintPreviewDialogClosed_Name:
      var params = reader.decodeStruct(PrintRenderFrame_OnPrintPreviewDialogClosed_Params);
      this.onPrintPreviewDialogClosed();
      return true;
    case kPrintRenderFrame_ConnectToPdfRenderer_Name:
      var params = reader.decodeStruct(PrintRenderFrame_ConnectToPdfRenderer_Params);
      this.connectToPdfRenderer();
      return true;
    case kPrintRenderFrame_PrintingDone_Name:
      var params = reader.decodeStruct(PrintRenderFrame_PrintingDone_Params);
      this.printingDone(params.success);
      return true;
    case kPrintRenderFrame_PrintNodeUnderContextMenu_Name:
      var params = reader.decodeStruct(PrintRenderFrame_PrintNodeUnderContextMenu_Params);
      this.printNodeUnderContextMenu();
      return true;
    default:
      return false;
    }
  };

  PrintRenderFrameStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrintRenderFrame_PrintWithParams_Name:
      var params = reader.decodeStruct(PrintRenderFrame_PrintWithParams_Params);
      this.printWithParams(params.params).then(function(response) {
        var responseParams =
            new PrintRenderFrame_PrintWithParams_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kPrintRenderFrame_PrintWithParams_Name,
            codec.align(PrintRenderFrame_PrintWithParams_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintRenderFrame_PrintWithParams_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintRenderFrame_PrintFrameContent_Name:
      var params = reader.decodeStruct(PrintRenderFrame_PrintFrameContent_Params);
      this.printFrameContent(params.params).then(function(response) {
        var responseParams =
            new PrintRenderFrame_PrintFrameContent_ResponseParams();
        responseParams.documentCookie = response.documentCookie;
        responseParams.params = response.params;
        var builder = new codec.MessageV1Builder(
            kPrintRenderFrame_PrintFrameContent_Name,
            codec.align(PrintRenderFrame_PrintFrameContent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintRenderFrame_PrintFrameContent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintRenderFrame_SnapshotForContentAnalysis_Name:
      var params = reader.decodeStruct(PrintRenderFrame_SnapshotForContentAnalysis_Params);
      this.snapshotForContentAnalysis().then(function(response) {
        var responseParams =
            new PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams();
        responseParams.params = response.params;
        var builder = new codec.MessageV1Builder(
            kPrintRenderFrame_SnapshotForContentAnalysis_Name,
            codec.align(PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePrintRenderFrameRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrintRenderFrame_PrintRequestedPages_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintRenderFrame_PrintRequestedPages_Params;
      break;
      case kPrintRenderFrame_PrintWithParams_Name:
        if (message.expectsResponse())
          paramsClass = PrintRenderFrame_PrintWithParams_Params;
      break;
      case kPrintRenderFrame_PrintForSystemDialog_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintRenderFrame_PrintForSystemDialog_Params;
      break;
      case kPrintRenderFrame_InitiatePrintPreview_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintRenderFrame_InitiatePrintPreview_Params;
      break;
      case kPrintRenderFrame_SetPrintPreviewUI_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintRenderFrame_SetPrintPreviewUI_Params;
      break;
      case kPrintRenderFrame_PrintPreview_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintRenderFrame_PrintPreview_Params;
      break;
      case kPrintRenderFrame_OnPrintPreviewDialogClosed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintRenderFrame_OnPrintPreviewDialogClosed_Params;
      break;
      case kPrintRenderFrame_PrintFrameContent_Name:
        if (message.expectsResponse())
          paramsClass = PrintRenderFrame_PrintFrameContent_Params;
      break;
      case kPrintRenderFrame_ConnectToPdfRenderer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintRenderFrame_ConnectToPdfRenderer_Params;
      break;
      case kPrintRenderFrame_PrintingDone_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintRenderFrame_PrintingDone_Params;
      break;
      case kPrintRenderFrame_PrintNodeUnderContextMenu_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintRenderFrame_PrintNodeUnderContextMenu_Params;
      break;
      case kPrintRenderFrame_SnapshotForContentAnalysis_Name:
        if (message.expectsResponse())
          paramsClass = PrintRenderFrame_SnapshotForContentAnalysis_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrintRenderFrameResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPrintRenderFrame_PrintWithParams_Name:
        if (message.isResponse())
          paramsClass = PrintRenderFrame_PrintWithParams_ResponseParams;
        break;
      case kPrintRenderFrame_PrintFrameContent_Name:
        if (message.isResponse())
          paramsClass = PrintRenderFrame_PrintFrameContent_ResponseParams;
        break;
      case kPrintRenderFrame_SnapshotForContentAnalysis_Name:
        if (message.isResponse())
          paramsClass = PrintRenderFrame_SnapshotForContentAnalysis_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PrintRenderFrame = {
    name: 'printing.mojom.PrintRenderFrame',
    kVersion: 0,
    ptrClass: PrintRenderFramePtr,
    proxyClass: PrintRenderFrameProxy,
    stubClass: PrintRenderFrameStub,
    validateRequest: validatePrintRenderFrameRequest,
    validateResponse: validatePrintRenderFrameResponse,
  };
  PrintRenderFrameStub.prototype.validator = validatePrintRenderFrameRequest;
  PrintRenderFrameProxy.prototype.validator = validatePrintRenderFrameResponse;
  var kPrintManagerHost_DidGetPrintedPagesCount_Name = 910299712;
  var kPrintManagerHost_GetDefaultPrintSettings_Name = 366455178;
  var kPrintManagerHost_DidShowPrintDialog_Name = 1104732406;
  var kPrintManagerHost_DidPrintDocument_Name = 1063629352;
  var kPrintManagerHost_IsPrintingEnabled_Name = 338703016;
  var kPrintManagerHost_ScriptedPrint_Name = 1122608124;
  var kPrintManagerHost_PrintingFailed_Name = 37336262;
  var kPrintManagerHost_UpdatePrintSettings_Name = 1496495596;
  var kPrintManagerHost_SetupScriptedPrintPreview_Name = 374634805;
  var kPrintManagerHost_ShowScriptedPrintPreview_Name = 2029263058;
  var kPrintManagerHost_RequestPrintPreview_Name = 1951357560;
  var kPrintManagerHost_CheckForCancel_Name = 799202544;
  var kPrintManagerHost_SetAccessibilityTree_Name = 525877485;

  function PrintManagerHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrintManagerHost,
                                                   handleOrPtrInfo);
  }

  function PrintManagerHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrintManagerHost, associatedInterfacePtrInfo);
  }

  PrintManagerHostAssociatedPtr.prototype =
      Object.create(PrintManagerHostPtr.prototype);
  PrintManagerHostAssociatedPtr.prototype.constructor =
      PrintManagerHostAssociatedPtr;

  function PrintManagerHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrintManagerHostPtr.prototype.didGetPrintedPagesCount = function() {
    return PrintManagerHostProxy.prototype.didGetPrintedPagesCount
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.didGetPrintedPagesCount = function(cookie, numberPages) {
    var params_ = new PrintManagerHost_DidGetPrintedPagesCount_Params();
    params_.cookie = cookie;
    params_.numberPages = numberPages;
    var builder = new codec.MessageV0Builder(
        kPrintManagerHost_DidGetPrintedPagesCount_Name,
        codec.align(PrintManagerHost_DidGetPrintedPagesCount_Params.encodedSize));
    builder.encodeStruct(PrintManagerHost_DidGetPrintedPagesCount_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintManagerHostPtr.prototype.getDefaultPrintSettings = function() {
    return PrintManagerHostProxy.prototype.getDefaultPrintSettings
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.getDefaultPrintSettings = function() {
    var params_ = new PrintManagerHost_GetDefaultPrintSettings_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintManagerHost_GetDefaultPrintSettings_Name,
          codec.align(PrintManagerHost_GetDefaultPrintSettings_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintManagerHost_GetDefaultPrintSettings_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintManagerHost_GetDefaultPrintSettings_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintManagerHostPtr.prototype.didShowPrintDialog = function() {
    return PrintManagerHostProxy.prototype.didShowPrintDialog
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.didShowPrintDialog = function() {
    var params_ = new PrintManagerHost_DidShowPrintDialog_Params();
    var builder = new codec.MessageV0Builder(
        kPrintManagerHost_DidShowPrintDialog_Name,
        codec.align(PrintManagerHost_DidShowPrintDialog_Params.encodedSize));
    builder.encodeStruct(PrintManagerHost_DidShowPrintDialog_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintManagerHostPtr.prototype.didPrintDocument = function() {
    return PrintManagerHostProxy.prototype.didPrintDocument
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.didPrintDocument = function(params) {
    var params_ = new PrintManagerHost_DidPrintDocument_Params();
    params_.params = params;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintManagerHost_DidPrintDocument_Name,
          codec.align(PrintManagerHost_DidPrintDocument_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintManagerHost_DidPrintDocument_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintManagerHost_DidPrintDocument_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintManagerHostPtr.prototype.isPrintingEnabled = function() {
    return PrintManagerHostProxy.prototype.isPrintingEnabled
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.isPrintingEnabled = function() {
    var params_ = new PrintManagerHost_IsPrintingEnabled_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintManagerHost_IsPrintingEnabled_Name,
          codec.align(PrintManagerHost_IsPrintingEnabled_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintManagerHost_IsPrintingEnabled_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintManagerHost_IsPrintingEnabled_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintManagerHostPtr.prototype.scriptedPrint = function() {
    return PrintManagerHostProxy.prototype.scriptedPrint
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.scriptedPrint = function(params) {
    var params_ = new PrintManagerHost_ScriptedPrint_Params();
    params_.params = params;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintManagerHost_ScriptedPrint_Name,
          codec.align(PrintManagerHost_ScriptedPrint_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintManagerHost_ScriptedPrint_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintManagerHost_ScriptedPrint_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintManagerHostPtr.prototype.printingFailed = function() {
    return PrintManagerHostProxy.prototype.printingFailed
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.printingFailed = function(cookie, reason) {
    var params_ = new PrintManagerHost_PrintingFailed_Params();
    params_.cookie = cookie;
    params_.reason = reason;
    var builder = new codec.MessageV0Builder(
        kPrintManagerHost_PrintingFailed_Name,
        codec.align(PrintManagerHost_PrintingFailed_Params.encodedSize));
    builder.encodeStruct(PrintManagerHost_PrintingFailed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintManagerHostPtr.prototype.updatePrintSettings = function() {
    return PrintManagerHostProxy.prototype.updatePrintSettings
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.updatePrintSettings = function(jobSettings) {
    var params_ = new PrintManagerHost_UpdatePrintSettings_Params();
    params_.jobSettings = jobSettings;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintManagerHost_UpdatePrintSettings_Name,
          codec.align(PrintManagerHost_UpdatePrintSettings_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintManagerHost_UpdatePrintSettings_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintManagerHost_UpdatePrintSettings_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintManagerHostPtr.prototype.setupScriptedPrintPreview = function() {
    return PrintManagerHostProxy.prototype.setupScriptedPrintPreview
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.setupScriptedPrintPreview = function() {
    var params_ = new PrintManagerHost_SetupScriptedPrintPreview_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintManagerHost_SetupScriptedPrintPreview_Name,
          codec.align(PrintManagerHost_SetupScriptedPrintPreview_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintManagerHost_SetupScriptedPrintPreview_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintManagerHost_SetupScriptedPrintPreview_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintManagerHostPtr.prototype.showScriptedPrintPreview = function() {
    return PrintManagerHostProxy.prototype.showScriptedPrintPreview
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.showScriptedPrintPreview = function(isModifiable) {
    var params_ = new PrintManagerHost_ShowScriptedPrintPreview_Params();
    params_.isModifiable = isModifiable;
    var builder = new codec.MessageV0Builder(
        kPrintManagerHost_ShowScriptedPrintPreview_Name,
        codec.align(PrintManagerHost_ShowScriptedPrintPreview_Params.encodedSize));
    builder.encodeStruct(PrintManagerHost_ShowScriptedPrintPreview_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintManagerHostPtr.prototype.requestPrintPreview = function() {
    return PrintManagerHostProxy.prototype.requestPrintPreview
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.requestPrintPreview = function(params) {
    var params_ = new PrintManagerHost_RequestPrintPreview_Params();
    params_.params = params;
    var builder = new codec.MessageV0Builder(
        kPrintManagerHost_RequestPrintPreview_Name,
        codec.align(PrintManagerHost_RequestPrintPreview_Params.encodedSize));
    builder.encodeStruct(PrintManagerHost_RequestPrintPreview_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintManagerHostPtr.prototype.checkForCancel = function() {
    return PrintManagerHostProxy.prototype.checkForCancel
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.checkForCancel = function(previewUiId, requestId) {
    var params_ = new PrintManagerHost_CheckForCancel_Params();
    params_.previewUiId = previewUiId;
    params_.requestId = requestId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintManagerHost_CheckForCancel_Name,
          codec.align(PrintManagerHost_CheckForCancel_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintManagerHost_CheckForCancel_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintManagerHost_CheckForCancel_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintManagerHostPtr.prototype.setAccessibilityTree = function() {
    return PrintManagerHostProxy.prototype.setAccessibilityTree
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintManagerHostProxy.prototype.setAccessibilityTree = function(cookie, accessibilityTree) {
    var params_ = new PrintManagerHost_SetAccessibilityTree_Params();
    params_.cookie = cookie;
    params_.accessibilityTree = accessibilityTree;
    var builder = new codec.MessageV0Builder(
        kPrintManagerHost_SetAccessibilityTree_Name,
        codec.align(PrintManagerHost_SetAccessibilityTree_Params.encodedSize));
    builder.encodeStruct(PrintManagerHost_SetAccessibilityTree_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PrintManagerHostStub(delegate) {
    this.delegate_ = delegate;
  }
  PrintManagerHostStub.prototype.didGetPrintedPagesCount = function(cookie, numberPages) {
    return this.delegate_ && this.delegate_.didGetPrintedPagesCount && this.delegate_.didGetPrintedPagesCount(cookie, numberPages);
  }
  PrintManagerHostStub.prototype.getDefaultPrintSettings = function() {
    return this.delegate_ && this.delegate_.getDefaultPrintSettings && this.delegate_.getDefaultPrintSettings();
  }
  PrintManagerHostStub.prototype.didShowPrintDialog = function() {
    return this.delegate_ && this.delegate_.didShowPrintDialog && this.delegate_.didShowPrintDialog();
  }
  PrintManagerHostStub.prototype.didPrintDocument = function(params) {
    return this.delegate_ && this.delegate_.didPrintDocument && this.delegate_.didPrintDocument(params);
  }
  PrintManagerHostStub.prototype.isPrintingEnabled = function() {
    return this.delegate_ && this.delegate_.isPrintingEnabled && this.delegate_.isPrintingEnabled();
  }
  PrintManagerHostStub.prototype.scriptedPrint = function(params) {
    return this.delegate_ && this.delegate_.scriptedPrint && this.delegate_.scriptedPrint(params);
  }
  PrintManagerHostStub.prototype.printingFailed = function(cookie, reason) {
    return this.delegate_ && this.delegate_.printingFailed && this.delegate_.printingFailed(cookie, reason);
  }
  PrintManagerHostStub.prototype.updatePrintSettings = function(jobSettings) {
    return this.delegate_ && this.delegate_.updatePrintSettings && this.delegate_.updatePrintSettings(jobSettings);
  }
  PrintManagerHostStub.prototype.setupScriptedPrintPreview = function() {
    return this.delegate_ && this.delegate_.setupScriptedPrintPreview && this.delegate_.setupScriptedPrintPreview();
  }
  PrintManagerHostStub.prototype.showScriptedPrintPreview = function(isModifiable) {
    return this.delegate_ && this.delegate_.showScriptedPrintPreview && this.delegate_.showScriptedPrintPreview(isModifiable);
  }
  PrintManagerHostStub.prototype.requestPrintPreview = function(params) {
    return this.delegate_ && this.delegate_.requestPrintPreview && this.delegate_.requestPrintPreview(params);
  }
  PrintManagerHostStub.prototype.checkForCancel = function(previewUiId, requestId) {
    return this.delegate_ && this.delegate_.checkForCancel && this.delegate_.checkForCancel(previewUiId, requestId);
  }
  PrintManagerHostStub.prototype.setAccessibilityTree = function(cookie, accessibilityTree) {
    return this.delegate_ && this.delegate_.setAccessibilityTree && this.delegate_.setAccessibilityTree(cookie, accessibilityTree);
  }

  PrintManagerHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrintManagerHost_DidGetPrintedPagesCount_Name:
      var params = reader.decodeStruct(PrintManagerHost_DidGetPrintedPagesCount_Params);
      this.didGetPrintedPagesCount(params.cookie, params.numberPages);
      return true;
    case kPrintManagerHost_DidShowPrintDialog_Name:
      var params = reader.decodeStruct(PrintManagerHost_DidShowPrintDialog_Params);
      this.didShowPrintDialog();
      return true;
    case kPrintManagerHost_PrintingFailed_Name:
      var params = reader.decodeStruct(PrintManagerHost_PrintingFailed_Params);
      this.printingFailed(params.cookie, params.reason);
      return true;
    case kPrintManagerHost_ShowScriptedPrintPreview_Name:
      var params = reader.decodeStruct(PrintManagerHost_ShowScriptedPrintPreview_Params);
      this.showScriptedPrintPreview(params.isModifiable);
      return true;
    case kPrintManagerHost_RequestPrintPreview_Name:
      var params = reader.decodeStruct(PrintManagerHost_RequestPrintPreview_Params);
      this.requestPrintPreview(params.params);
      return true;
    case kPrintManagerHost_SetAccessibilityTree_Name:
      var params = reader.decodeStruct(PrintManagerHost_SetAccessibilityTree_Params);
      this.setAccessibilityTree(params.cookie, params.accessibilityTree);
      return true;
    default:
      return false;
    }
  };

  PrintManagerHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrintManagerHost_GetDefaultPrintSettings_Name:
      var params = reader.decodeStruct(PrintManagerHost_GetDefaultPrintSettings_Params);
      this.getDefaultPrintSettings().then(function(response) {
        var responseParams =
            new PrintManagerHost_GetDefaultPrintSettings_ResponseParams();
        responseParams.defaultSettings = response.defaultSettings;
        var builder = new codec.MessageV1Builder(
            kPrintManagerHost_GetDefaultPrintSettings_Name,
            codec.align(PrintManagerHost_GetDefaultPrintSettings_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintManagerHost_GetDefaultPrintSettings_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintManagerHost_DidPrintDocument_Name:
      var params = reader.decodeStruct(PrintManagerHost_DidPrintDocument_Params);
      this.didPrintDocument(params.params).then(function(response) {
        var responseParams =
            new PrintManagerHost_DidPrintDocument_ResponseParams();
        responseParams.completed = response.completed;
        var builder = new codec.MessageV1Builder(
            kPrintManagerHost_DidPrintDocument_Name,
            codec.align(PrintManagerHost_DidPrintDocument_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintManagerHost_DidPrintDocument_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintManagerHost_IsPrintingEnabled_Name:
      var params = reader.decodeStruct(PrintManagerHost_IsPrintingEnabled_Params);
      this.isPrintingEnabled().then(function(response) {
        var responseParams =
            new PrintManagerHost_IsPrintingEnabled_ResponseParams();
        responseParams.printingEnabled = response.printingEnabled;
        var builder = new codec.MessageV1Builder(
            kPrintManagerHost_IsPrintingEnabled_Name,
            codec.align(PrintManagerHost_IsPrintingEnabled_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintManagerHost_IsPrintingEnabled_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintManagerHost_ScriptedPrint_Name:
      var params = reader.decodeStruct(PrintManagerHost_ScriptedPrint_Params);
      this.scriptedPrint(params.params).then(function(response) {
        var responseParams =
            new PrintManagerHost_ScriptedPrint_ResponseParams();
        responseParams.settings = response.settings;
        var builder = new codec.MessageV1Builder(
            kPrintManagerHost_ScriptedPrint_Name,
            codec.align(PrintManagerHost_ScriptedPrint_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintManagerHost_ScriptedPrint_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintManagerHost_UpdatePrintSettings_Name:
      var params = reader.decodeStruct(PrintManagerHost_UpdatePrintSettings_Params);
      this.updatePrintSettings(params.jobSettings).then(function(response) {
        var responseParams =
            new PrintManagerHost_UpdatePrintSettings_ResponseParams();
        responseParams.currentSettings = response.currentSettings;
        var builder = new codec.MessageV1Builder(
            kPrintManagerHost_UpdatePrintSettings_Name,
            codec.align(PrintManagerHost_UpdatePrintSettings_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintManagerHost_UpdatePrintSettings_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintManagerHost_SetupScriptedPrintPreview_Name:
      var params = reader.decodeStruct(PrintManagerHost_SetupScriptedPrintPreview_Params);
      this.setupScriptedPrintPreview().then(function(response) {
        var responseParams =
            new PrintManagerHost_SetupScriptedPrintPreview_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kPrintManagerHost_SetupScriptedPrintPreview_Name,
            codec.align(PrintManagerHost_SetupScriptedPrintPreview_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintManagerHost_SetupScriptedPrintPreview_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintManagerHost_CheckForCancel_Name:
      var params = reader.decodeStruct(PrintManagerHost_CheckForCancel_Params);
      this.checkForCancel(params.previewUiId, params.requestId).then(function(response) {
        var responseParams =
            new PrintManagerHost_CheckForCancel_ResponseParams();
        responseParams.cancel = response.cancel;
        var builder = new codec.MessageV1Builder(
            kPrintManagerHost_CheckForCancel_Name,
            codec.align(PrintManagerHost_CheckForCancel_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintManagerHost_CheckForCancel_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePrintManagerHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrintManagerHost_DidGetPrintedPagesCount_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintManagerHost_DidGetPrintedPagesCount_Params;
      break;
      case kPrintManagerHost_GetDefaultPrintSettings_Name:
        if (message.expectsResponse())
          paramsClass = PrintManagerHost_GetDefaultPrintSettings_Params;
      break;
      case kPrintManagerHost_DidShowPrintDialog_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintManagerHost_DidShowPrintDialog_Params;
      break;
      case kPrintManagerHost_DidPrintDocument_Name:
        if (message.expectsResponse())
          paramsClass = PrintManagerHost_DidPrintDocument_Params;
      break;
      case kPrintManagerHost_IsPrintingEnabled_Name:
        if (message.expectsResponse())
          paramsClass = PrintManagerHost_IsPrintingEnabled_Params;
      break;
      case kPrintManagerHost_ScriptedPrint_Name:
        if (message.expectsResponse())
          paramsClass = PrintManagerHost_ScriptedPrint_Params;
      break;
      case kPrintManagerHost_PrintingFailed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintManagerHost_PrintingFailed_Params;
      break;
      case kPrintManagerHost_UpdatePrintSettings_Name:
        if (message.expectsResponse())
          paramsClass = PrintManagerHost_UpdatePrintSettings_Params;
      break;
      case kPrintManagerHost_SetupScriptedPrintPreview_Name:
        if (message.expectsResponse())
          paramsClass = PrintManagerHost_SetupScriptedPrintPreview_Params;
      break;
      case kPrintManagerHost_ShowScriptedPrintPreview_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintManagerHost_ShowScriptedPrintPreview_Params;
      break;
      case kPrintManagerHost_RequestPrintPreview_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintManagerHost_RequestPrintPreview_Params;
      break;
      case kPrintManagerHost_CheckForCancel_Name:
        if (message.expectsResponse())
          paramsClass = PrintManagerHost_CheckForCancel_Params;
      break;
      case kPrintManagerHost_SetAccessibilityTree_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintManagerHost_SetAccessibilityTree_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrintManagerHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPrintManagerHost_GetDefaultPrintSettings_Name:
        if (message.isResponse())
          paramsClass = PrintManagerHost_GetDefaultPrintSettings_ResponseParams;
        break;
      case kPrintManagerHost_DidPrintDocument_Name:
        if (message.isResponse())
          paramsClass = PrintManagerHost_DidPrintDocument_ResponseParams;
        break;
      case kPrintManagerHost_IsPrintingEnabled_Name:
        if (message.isResponse())
          paramsClass = PrintManagerHost_IsPrintingEnabled_ResponseParams;
        break;
      case kPrintManagerHost_ScriptedPrint_Name:
        if (message.isResponse())
          paramsClass = PrintManagerHost_ScriptedPrint_ResponseParams;
        break;
      case kPrintManagerHost_UpdatePrintSettings_Name:
        if (message.isResponse())
          paramsClass = PrintManagerHost_UpdatePrintSettings_ResponseParams;
        break;
      case kPrintManagerHost_SetupScriptedPrintPreview_Name:
        if (message.isResponse())
          paramsClass = PrintManagerHost_SetupScriptedPrintPreview_ResponseParams;
        break;
      case kPrintManagerHost_CheckForCancel_Name:
        if (message.isResponse())
          paramsClass = PrintManagerHost_CheckForCancel_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PrintManagerHost = {
    name: 'printing.mojom.PrintManagerHost',
    kVersion: 0,
    ptrClass: PrintManagerHostPtr,
    proxyClass: PrintManagerHostProxy,
    stubClass: PrintManagerHostStub,
    validateRequest: validatePrintManagerHostRequest,
    validateResponse: validatePrintManagerHostResponse,
  };
  PrintManagerHostStub.prototype.validator = validatePrintManagerHostRequest;
  PrintManagerHostProxy.prototype.validator = validatePrintManagerHostResponse;
  exports.PrintFailureReason = PrintFailureReason;
  exports.PreviewIds = PreviewIds;
  exports.RequestPrintPreviewParams = RequestPrintPreviewParams;
  exports.PrintFrameContentParams = PrintFrameContentParams;
  exports.OptionsFromDocumentParams = OptionsFromDocumentParams;
  exports.DidPrintContentParams = DidPrintContentParams;
  exports.DidStartPreviewParams = DidStartPreviewParams;
  exports.DidPreviewPageParams = DidPreviewPageParams;
  exports.DidPreviewDocumentParams = DidPreviewDocumentParams;
  exports.PrintParams = PrintParams;
  exports.PrintPagesParams = PrintPagesParams;
  exports.DidPrintDocumentParams = DidPrintDocumentParams;
  exports.ScriptedPrintParams = ScriptedPrintParams;
  exports.PrintWithParamsResultData = PrintWithParamsResultData;
  exports.PrintWithParamsResult = PrintWithParamsResult;
  exports.PrintPreviewUI = PrintPreviewUI;
  exports.PrintPreviewUIPtr = PrintPreviewUIPtr;
  exports.PrintPreviewUIAssociatedPtr = PrintPreviewUIAssociatedPtr;
  exports.PrintRenderFrame = PrintRenderFrame;
  exports.PrintRenderFramePtr = PrintRenderFramePtr;
  exports.PrintRenderFrameAssociatedPtr = PrintRenderFrameAssociatedPtr;
  exports.PrintManagerHost = PrintManagerHost;
  exports.PrintManagerHostPtr = PrintManagerHostPtr;
  exports.PrintManagerHostAssociatedPtr = PrintManagerHostAssociatedPtr;
})();