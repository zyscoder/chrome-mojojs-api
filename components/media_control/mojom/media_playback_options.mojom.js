// components/media_control/mojom/media_playback_options.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/media_control/mojom/media_playback_options.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('components.mediaControl.mojom');
  var media_playback_renderer_type$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/public/common/media_playback_renderer_type.mojom', '../../../content/public/common/media_playback_renderer_type.mojom.js');
  }



  function MediaPlaybackOptions_SetMediaLoadingBlocked_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlaybackOptions_SetMediaLoadingBlocked_Params.prototype.initDefaults_ = function() {
    this.blocked = false;
  };
  MediaPlaybackOptions_SetMediaLoadingBlocked_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlaybackOptions_SetMediaLoadingBlocked_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaPlaybackOptions_SetMediaLoadingBlocked_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaPlaybackOptions_SetMediaLoadingBlocked_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlaybackOptions_SetMediaLoadingBlocked_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.blocked = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MediaPlaybackOptions_SetMediaLoadingBlocked_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlaybackOptions_SetMediaLoadingBlocked_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.blocked & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params.prototype.initDefaults_ = function() {
    this.enabled = false;
  };
  MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.enabled = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.enabled & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function MediaPlaybackOptions_SetRendererType_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaPlaybackOptions_SetRendererType_Params.prototype.initDefaults_ = function() {
    this.type = 0;
  };
  MediaPlaybackOptions_SetRendererType_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaPlaybackOptions_SetRendererType_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaPlaybackOptions_SetRendererType_Params.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, media_playback_renderer_type$.RendererType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaPlaybackOptions_SetRendererType_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaPlaybackOptions_SetRendererType_Params.decode = function(decoder) {
    var packed;
    var val = new MediaPlaybackOptions_SetRendererType_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(new codec.Enum(media_playback_renderer_type$.RendererType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MediaPlaybackOptions_SetRendererType_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaPlaybackOptions_SetRendererType_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kMediaPlaybackOptions_SetMediaLoadingBlocked_Name = 1950706562;
  var kMediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Name = 1100518503;
  var kMediaPlaybackOptions_SetRendererType_Name = 1391550534;

  function MediaPlaybackOptionsPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MediaPlaybackOptions,
                                                   handleOrPtrInfo);
  }

  function MediaPlaybackOptionsAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MediaPlaybackOptions, associatedInterfacePtrInfo);
  }

  MediaPlaybackOptionsAssociatedPtr.prototype =
      Object.create(MediaPlaybackOptionsPtr.prototype);
  MediaPlaybackOptionsAssociatedPtr.prototype.constructor =
      MediaPlaybackOptionsAssociatedPtr;

  function MediaPlaybackOptionsProxy(receiver) {
    this.receiver_ = receiver;
  }
  MediaPlaybackOptionsPtr.prototype.setMediaLoadingBlocked = function() {
    return MediaPlaybackOptionsProxy.prototype.setMediaLoadingBlocked
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlaybackOptionsProxy.prototype.setMediaLoadingBlocked = function(blocked) {
    var params_ = new MediaPlaybackOptions_SetMediaLoadingBlocked_Params();
    params_.blocked = blocked;
    var builder = new codec.MessageV0Builder(
        kMediaPlaybackOptions_SetMediaLoadingBlocked_Name,
        codec.align(MediaPlaybackOptions_SetMediaLoadingBlocked_Params.encodedSize));
    builder.encodeStruct(MediaPlaybackOptions_SetMediaLoadingBlocked_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlaybackOptionsPtr.prototype.setBackgroundVideoPlaybackEnabled = function() {
    return MediaPlaybackOptionsProxy.prototype.setBackgroundVideoPlaybackEnabled
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlaybackOptionsProxy.prototype.setBackgroundVideoPlaybackEnabled = function(enabled) {
    var params_ = new MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params();
    params_.enabled = enabled;
    var builder = new codec.MessageV0Builder(
        kMediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Name,
        codec.align(MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params.encodedSize));
    builder.encodeStruct(MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  MediaPlaybackOptionsPtr.prototype.setRendererType = function() {
    return MediaPlaybackOptionsProxy.prototype.setRendererType
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaPlaybackOptionsProxy.prototype.setRendererType = function(type) {
    var params_ = new MediaPlaybackOptions_SetRendererType_Params();
    params_.type = type;
    var builder = new codec.MessageV0Builder(
        kMediaPlaybackOptions_SetRendererType_Name,
        codec.align(MediaPlaybackOptions_SetRendererType_Params.encodedSize));
    builder.encodeStruct(MediaPlaybackOptions_SetRendererType_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MediaPlaybackOptionsStub(delegate) {
    this.delegate_ = delegate;
  }
  MediaPlaybackOptionsStub.prototype.setMediaLoadingBlocked = function(blocked) {
    return this.delegate_ && this.delegate_.setMediaLoadingBlocked && this.delegate_.setMediaLoadingBlocked(blocked);
  }
  MediaPlaybackOptionsStub.prototype.setBackgroundVideoPlaybackEnabled = function(enabled) {
    return this.delegate_ && this.delegate_.setBackgroundVideoPlaybackEnabled && this.delegate_.setBackgroundVideoPlaybackEnabled(enabled);
  }
  MediaPlaybackOptionsStub.prototype.setRendererType = function(type) {
    return this.delegate_ && this.delegate_.setRendererType && this.delegate_.setRendererType(type);
  }

  MediaPlaybackOptionsStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMediaPlaybackOptions_SetMediaLoadingBlocked_Name:
      var params = reader.decodeStruct(MediaPlaybackOptions_SetMediaLoadingBlocked_Params);
      this.setMediaLoadingBlocked(params.blocked);
      return true;
    case kMediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Name:
      var params = reader.decodeStruct(MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params);
      this.setBackgroundVideoPlaybackEnabled(params.enabled);
      return true;
    case kMediaPlaybackOptions_SetRendererType_Name:
      var params = reader.decodeStruct(MediaPlaybackOptions_SetRendererType_Params);
      this.setRendererType(params.type);
      return true;
    default:
      return false;
    }
  };

  MediaPlaybackOptionsStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMediaPlaybackOptionsRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMediaPlaybackOptions_SetMediaLoadingBlocked_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlaybackOptions_SetMediaLoadingBlocked_Params;
      break;
      case kMediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlaybackOptions_SetBackgroundVideoPlaybackEnabled_Params;
      break;
      case kMediaPlaybackOptions_SetRendererType_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaPlaybackOptions_SetRendererType_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMediaPlaybackOptionsResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MediaPlaybackOptions = {
    name: 'components.media_control.mojom.MediaPlaybackOptions',
    kVersion: 0,
    ptrClass: MediaPlaybackOptionsPtr,
    proxyClass: MediaPlaybackOptionsProxy,
    stubClass: MediaPlaybackOptionsStub,
    validateRequest: validateMediaPlaybackOptionsRequest,
    validateResponse: null,
  };
  MediaPlaybackOptionsStub.prototype.validator = validateMediaPlaybackOptionsRequest;
  MediaPlaybackOptionsProxy.prototype.validator = null;
  exports.MediaPlaybackOptions = MediaPlaybackOptions;
  exports.MediaPlaybackOptionsPtr = MediaPlaybackOptionsPtr;
  exports.MediaPlaybackOptionsAssociatedPtr = MediaPlaybackOptionsAssociatedPtr;
})();