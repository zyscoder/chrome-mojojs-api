// components/mirroring/mojom/resource_provider.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/mirroring/mojom/resource_provider.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mirroring.mojom');
  var video_capture$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/capture/mojom/video_capture.mojom', '../../../media/capture/mojom/video_capture.mojom.js');
  }
  var network_context$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/network_context.mojom', '../../../services/network/public/mojom/network_context.mojom.js');
  }
  var remoting$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/remoting.mojom', '../../../media/mojo/mojom/remoting.mojom.js');
  }
  var audio_data_pipe$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/audio_data_pipe.mojom', '../../../media/mojo/mojom/audio_data_pipe.mojom.js');
  }
  var audio_input_stream$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/audio_input_stream.mojom', '../../../media/mojo/mojom/audio_input_stream.mojom.js');
  }
  var audio_parameters$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/audio_parameters.mojom', '../../../media/mojo/mojom/audio_parameters.mojom.js');
  }
  var video_encoder_metrics_provider$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/video_encoder_metrics_provider.mojom', '../../../media/mojo/mojom/video_encoder_metrics_provider.mojom.js');
  }
  var context$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/context.mojom', '../../../sandbox/policy/mojom/context.mojom.js');
  }
  var gpu$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/public/mojom/gpu.mojom', '../../../services/viz/public/mojom/gpu.mojom.js');
  }



  function AudioStreamCreatorClient_StreamCreated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AudioStreamCreatorClient_StreamCreated_Params.prototype.initDefaults_ = function() {
    this.stream = new audio_input_stream$.AudioInputStreamPtr();
    this.clientReceiver = new bindings.InterfaceRequest();
    this.dataPipe = null;
  };
  AudioStreamCreatorClient_StreamCreated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AudioStreamCreatorClient_StreamCreated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioStreamCreatorClient_StreamCreated_Params.stream
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioStreamCreatorClient_StreamCreated_Params.clientReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioStreamCreatorClient_StreamCreated_Params.dataPipe
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, audio_data_pipe$.ReadOnlyAudioDataPipe, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AudioStreamCreatorClient_StreamCreated_Params.encodedSize = codec.kStructHeaderSize + 24;

  AudioStreamCreatorClient_StreamCreated_Params.decode = function(decoder) {
    var packed;
    var val = new AudioStreamCreatorClient_StreamCreated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.stream =
        decoder.decodeStruct(new codec.Interface(audio_input_stream$.AudioInputStreamPtr));
    val.clientReceiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.dataPipe =
        decoder.decodeStructPointer(audio_data_pipe$.ReadOnlyAudioDataPipe);
    return val;
  };

  AudioStreamCreatorClient_StreamCreated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AudioStreamCreatorClient_StreamCreated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(audio_input_stream$.AudioInputStreamPtr), val.stream);
    encoder.encodeStruct(codec.InterfaceRequest, val.clientReceiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(audio_data_pipe$.ReadOnlyAudioDataPipe, val.dataPipe);
  };
  function ResourceProvider_BindGpu_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceProvider_BindGpu_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  ResourceProvider_BindGpu_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceProvider_BindGpu_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceProvider_BindGpu_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceProvider_BindGpu_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResourceProvider_BindGpu_Params.decode = function(decoder) {
    var packed;
    var val = new ResourceProvider_BindGpu_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResourceProvider_BindGpu_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceProvider_BindGpu_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResourceProvider_GetVideoCaptureHost_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceProvider_GetVideoCaptureHost_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  ResourceProvider_GetVideoCaptureHost_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceProvider_GetVideoCaptureHost_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceProvider_GetVideoCaptureHost_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceProvider_GetVideoCaptureHost_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResourceProvider_GetVideoCaptureHost_Params.decode = function(decoder) {
    var packed;
    var val = new ResourceProvider_GetVideoCaptureHost_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResourceProvider_GetVideoCaptureHost_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceProvider_GetVideoCaptureHost_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResourceProvider_GetVideoEncoderMetricsProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceProvider_GetVideoEncoderMetricsProvider_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  ResourceProvider_GetVideoEncoderMetricsProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceProvider_GetVideoEncoderMetricsProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceProvider_GetVideoEncoderMetricsProvider_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceProvider_GetVideoEncoderMetricsProvider_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResourceProvider_GetVideoEncoderMetricsProvider_Params.decode = function(decoder) {
    var packed;
    var val = new ResourceProvider_GetVideoEncoderMetricsProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResourceProvider_GetVideoEncoderMetricsProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceProvider_GetVideoEncoderMetricsProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResourceProvider_GetNetworkContext_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceProvider_GetNetworkContext_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  ResourceProvider_GetNetworkContext_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceProvider_GetNetworkContext_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceProvider_GetNetworkContext_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceProvider_GetNetworkContext_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResourceProvider_GetNetworkContext_Params.decode = function(decoder) {
    var packed;
    var val = new ResourceProvider_GetNetworkContext_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResourceProvider_GetNetworkContext_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceProvider_GetNetworkContext_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResourceProvider_CreateAudioStream_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceProvider_CreateAudioStream_Params.prototype.initDefaults_ = function() {
    this.client = new AudioStreamCreatorClientPtr();
    this.param = null;
    this.sharedMemoryCount = 0;
  };
  ResourceProvider_CreateAudioStream_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceProvider_CreateAudioStream_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceProvider_CreateAudioStream_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceProvider_CreateAudioStream_Params.param
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, audio_parameters$.AudioParameters, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResourceProvider_CreateAudioStream_Params.encodedSize = codec.kStructHeaderSize + 24;

  ResourceProvider_CreateAudioStream_Params.decode = function(decoder) {
    var packed;
    var val = new ResourceProvider_CreateAudioStream_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client =
        decoder.decodeStruct(new codec.Interface(AudioStreamCreatorClientPtr));
    val.param =
        decoder.decodeStructPointer(audio_parameters$.AudioParameters);
    val.sharedMemoryCount =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResourceProvider_CreateAudioStream_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceProvider_CreateAudioStream_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(AudioStreamCreatorClientPtr), val.client);
    encoder.encodeStructPointer(audio_parameters$.AudioParameters, val.param);
    encoder.encodeStruct(codec.Uint32, val.sharedMemoryCount);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResourceProvider_ConnectToRemotingSource_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceProvider_ConnectToRemotingSource_Params.prototype.initDefaults_ = function() {
    this.remoter = new remoting$.RemoterPtr();
    this.receiver = new bindings.InterfaceRequest();
  };
  ResourceProvider_ConnectToRemotingSource_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceProvider_ConnectToRemotingSource_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceProvider_ConnectToRemotingSource_Params.remoter
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceProvider_ConnectToRemotingSource_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceProvider_ConnectToRemotingSource_Params.encodedSize = codec.kStructHeaderSize + 16;

  ResourceProvider_ConnectToRemotingSource_Params.decode = function(decoder) {
    var packed;
    var val = new ResourceProvider_ConnectToRemotingSource_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remoter =
        decoder.decodeStruct(new codec.Interface(remoting$.RemoterPtr));
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResourceProvider_ConnectToRemotingSource_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceProvider_ConnectToRemotingSource_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(remoting$.RemoterPtr), val.remoter);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kAudioStreamCreatorClient_StreamCreated_Name = 1698859600;

  function AudioStreamCreatorClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AudioStreamCreatorClient,
                                                   handleOrPtrInfo);
  }

  function AudioStreamCreatorClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AudioStreamCreatorClient, associatedInterfacePtrInfo);
  }

  AudioStreamCreatorClientAssociatedPtr.prototype =
      Object.create(AudioStreamCreatorClientPtr.prototype);
  AudioStreamCreatorClientAssociatedPtr.prototype.constructor =
      AudioStreamCreatorClientAssociatedPtr;

  function AudioStreamCreatorClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  AudioStreamCreatorClientPtr.prototype.streamCreated = function() {
    return AudioStreamCreatorClientProxy.prototype.streamCreated
        .apply(this.ptr.getProxy(), arguments);
  };

  AudioStreamCreatorClientProxy.prototype.streamCreated = function(stream, clientReceiver, dataPipe) {
    var params_ = new AudioStreamCreatorClient_StreamCreated_Params();
    params_.stream = stream;
    params_.clientReceiver = clientReceiver;
    params_.dataPipe = dataPipe;
    var builder = new codec.MessageV0Builder(
        kAudioStreamCreatorClient_StreamCreated_Name,
        codec.align(AudioStreamCreatorClient_StreamCreated_Params.encodedSize));
    builder.encodeStruct(AudioStreamCreatorClient_StreamCreated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AudioStreamCreatorClientStub(delegate) {
    this.delegate_ = delegate;
  }
  AudioStreamCreatorClientStub.prototype.streamCreated = function(stream, clientReceiver, dataPipe) {
    return this.delegate_ && this.delegate_.streamCreated && this.delegate_.streamCreated(stream, clientReceiver, dataPipe);
  }

  AudioStreamCreatorClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAudioStreamCreatorClient_StreamCreated_Name:
      var params = reader.decodeStruct(AudioStreamCreatorClient_StreamCreated_Params);
      this.streamCreated(params.stream, params.clientReceiver, params.dataPipe);
      return true;
    default:
      return false;
    }
  };

  AudioStreamCreatorClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateAudioStreamCreatorClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAudioStreamCreatorClient_StreamCreated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AudioStreamCreatorClient_StreamCreated_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAudioStreamCreatorClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var AudioStreamCreatorClient = {
    name: 'mirroring.mojom.AudioStreamCreatorClient',
    kVersion: 0,
    ptrClass: AudioStreamCreatorClientPtr,
    proxyClass: AudioStreamCreatorClientProxy,
    stubClass: AudioStreamCreatorClientStub,
    validateRequest: validateAudioStreamCreatorClientRequest,
    validateResponse: null,
  };
  AudioStreamCreatorClientStub.prototype.validator = validateAudioStreamCreatorClientRequest;
  AudioStreamCreatorClientProxy.prototype.validator = null;
  var kResourceProvider_BindGpu_Name = 908121540;
  var kResourceProvider_GetVideoCaptureHost_Name = 1487227324;
  var kResourceProvider_GetVideoEncoderMetricsProvider_Name = 1111910108;
  var kResourceProvider_GetNetworkContext_Name = 828796864;
  var kResourceProvider_CreateAudioStream_Name = 1621362275;
  var kResourceProvider_ConnectToRemotingSource_Name = 299579826;

  function ResourceProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ResourceProvider,
                                                   handleOrPtrInfo);
  }

  function ResourceProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ResourceProvider, associatedInterfacePtrInfo);
  }

  ResourceProviderAssociatedPtr.prototype =
      Object.create(ResourceProviderPtr.prototype);
  ResourceProviderAssociatedPtr.prototype.constructor =
      ResourceProviderAssociatedPtr;

  function ResourceProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  ResourceProviderPtr.prototype.bindGpu = function() {
    return ResourceProviderProxy.prototype.bindGpu
        .apply(this.ptr.getProxy(), arguments);
  };

  ResourceProviderProxy.prototype.bindGpu = function(receiver) {
    var params_ = new ResourceProvider_BindGpu_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kResourceProvider_BindGpu_Name,
        codec.align(ResourceProvider_BindGpu_Params.encodedSize));
    builder.encodeStruct(ResourceProvider_BindGpu_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ResourceProviderPtr.prototype.getVideoCaptureHost = function() {
    return ResourceProviderProxy.prototype.getVideoCaptureHost
        .apply(this.ptr.getProxy(), arguments);
  };

  ResourceProviderProxy.prototype.getVideoCaptureHost = function(receiver) {
    var params_ = new ResourceProvider_GetVideoCaptureHost_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kResourceProvider_GetVideoCaptureHost_Name,
        codec.align(ResourceProvider_GetVideoCaptureHost_Params.encodedSize));
    builder.encodeStruct(ResourceProvider_GetVideoCaptureHost_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ResourceProviderPtr.prototype.getVideoEncoderMetricsProvider = function() {
    return ResourceProviderProxy.prototype.getVideoEncoderMetricsProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  ResourceProviderProxy.prototype.getVideoEncoderMetricsProvider = function(receiver) {
    var params_ = new ResourceProvider_GetVideoEncoderMetricsProvider_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kResourceProvider_GetVideoEncoderMetricsProvider_Name,
        codec.align(ResourceProvider_GetVideoEncoderMetricsProvider_Params.encodedSize));
    builder.encodeStruct(ResourceProvider_GetVideoEncoderMetricsProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ResourceProviderPtr.prototype.getNetworkContext = function() {
    return ResourceProviderProxy.prototype.getNetworkContext
        .apply(this.ptr.getProxy(), arguments);
  };

  ResourceProviderProxy.prototype.getNetworkContext = function(receiver) {
    var params_ = new ResourceProvider_GetNetworkContext_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kResourceProvider_GetNetworkContext_Name,
        codec.align(ResourceProvider_GetNetworkContext_Params.encodedSize));
    builder.encodeStruct(ResourceProvider_GetNetworkContext_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ResourceProviderPtr.prototype.createAudioStream = function() {
    return ResourceProviderProxy.prototype.createAudioStream
        .apply(this.ptr.getProxy(), arguments);
  };

  ResourceProviderProxy.prototype.createAudioStream = function(client, param, sharedMemoryCount) {
    var params_ = new ResourceProvider_CreateAudioStream_Params();
    params_.client = client;
    params_.param = param;
    params_.sharedMemoryCount = sharedMemoryCount;
    var builder = new codec.MessageV0Builder(
        kResourceProvider_CreateAudioStream_Name,
        codec.align(ResourceProvider_CreateAudioStream_Params.encodedSize));
    builder.encodeStruct(ResourceProvider_CreateAudioStream_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ResourceProviderPtr.prototype.connectToRemotingSource = function() {
    return ResourceProviderProxy.prototype.connectToRemotingSource
        .apply(this.ptr.getProxy(), arguments);
  };

  ResourceProviderProxy.prototype.connectToRemotingSource = function(remoter, receiver) {
    var params_ = new ResourceProvider_ConnectToRemotingSource_Params();
    params_.remoter = remoter;
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kResourceProvider_ConnectToRemotingSource_Name,
        codec.align(ResourceProvider_ConnectToRemotingSource_Params.encodedSize));
    builder.encodeStruct(ResourceProvider_ConnectToRemotingSource_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ResourceProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  ResourceProviderStub.prototype.bindGpu = function(receiver) {
    return this.delegate_ && this.delegate_.bindGpu && this.delegate_.bindGpu(receiver);
  }
  ResourceProviderStub.prototype.getVideoCaptureHost = function(receiver) {
    return this.delegate_ && this.delegate_.getVideoCaptureHost && this.delegate_.getVideoCaptureHost(receiver);
  }
  ResourceProviderStub.prototype.getVideoEncoderMetricsProvider = function(receiver) {
    return this.delegate_ && this.delegate_.getVideoEncoderMetricsProvider && this.delegate_.getVideoEncoderMetricsProvider(receiver);
  }
  ResourceProviderStub.prototype.getNetworkContext = function(receiver) {
    return this.delegate_ && this.delegate_.getNetworkContext && this.delegate_.getNetworkContext(receiver);
  }
  ResourceProviderStub.prototype.createAudioStream = function(client, param, sharedMemoryCount) {
    return this.delegate_ && this.delegate_.createAudioStream && this.delegate_.createAudioStream(client, param, sharedMemoryCount);
  }
  ResourceProviderStub.prototype.connectToRemotingSource = function(remoter, receiver) {
    return this.delegate_ && this.delegate_.connectToRemotingSource && this.delegate_.connectToRemotingSource(remoter, receiver);
  }

  ResourceProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kResourceProvider_BindGpu_Name:
      var params = reader.decodeStruct(ResourceProvider_BindGpu_Params);
      this.bindGpu(params.receiver);
      return true;
    case kResourceProvider_GetVideoCaptureHost_Name:
      var params = reader.decodeStruct(ResourceProvider_GetVideoCaptureHost_Params);
      this.getVideoCaptureHost(params.receiver);
      return true;
    case kResourceProvider_GetVideoEncoderMetricsProvider_Name:
      var params = reader.decodeStruct(ResourceProvider_GetVideoEncoderMetricsProvider_Params);
      this.getVideoEncoderMetricsProvider(params.receiver);
      return true;
    case kResourceProvider_GetNetworkContext_Name:
      var params = reader.decodeStruct(ResourceProvider_GetNetworkContext_Params);
      this.getNetworkContext(params.receiver);
      return true;
    case kResourceProvider_CreateAudioStream_Name:
      var params = reader.decodeStruct(ResourceProvider_CreateAudioStream_Params);
      this.createAudioStream(params.client, params.param, params.sharedMemoryCount);
      return true;
    case kResourceProvider_ConnectToRemotingSource_Name:
      var params = reader.decodeStruct(ResourceProvider_ConnectToRemotingSource_Params);
      this.connectToRemotingSource(params.remoter, params.receiver);
      return true;
    default:
      return false;
    }
  };

  ResourceProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateResourceProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kResourceProvider_BindGpu_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ResourceProvider_BindGpu_Params;
      break;
      case kResourceProvider_GetVideoCaptureHost_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ResourceProvider_GetVideoCaptureHost_Params;
      break;
      case kResourceProvider_GetVideoEncoderMetricsProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ResourceProvider_GetVideoEncoderMetricsProvider_Params;
      break;
      case kResourceProvider_GetNetworkContext_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ResourceProvider_GetNetworkContext_Params;
      break;
      case kResourceProvider_CreateAudioStream_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ResourceProvider_CreateAudioStream_Params;
      break;
      case kResourceProvider_ConnectToRemotingSource_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ResourceProvider_ConnectToRemotingSource_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateResourceProviderResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ResourceProvider = {
    name: 'mirroring.mojom.ResourceProvider',
    kVersion: 0,
    ptrClass: ResourceProviderPtr,
    proxyClass: ResourceProviderProxy,
    stubClass: ResourceProviderStub,
    validateRequest: validateResourceProviderRequest,
    validateResponse: null,
  };
  ResourceProviderStub.prototype.validator = validateResourceProviderRequest;
  ResourceProviderProxy.prototype.validator = null;
  exports.AudioStreamCreatorClient = AudioStreamCreatorClient;
  exports.AudioStreamCreatorClientPtr = AudioStreamCreatorClientPtr;
  exports.AudioStreamCreatorClientAssociatedPtr = AudioStreamCreatorClientAssociatedPtr;
  exports.ResourceProvider = ResourceProvider;
  exports.ResourceProviderPtr = ResourceProviderPtr;
  exports.ResourceProviderAssociatedPtr = ResourceProviderAssociatedPtr;
})();