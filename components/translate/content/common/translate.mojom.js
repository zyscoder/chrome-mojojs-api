// components/translate/content/common/translate.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/translate/content/common/translate.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('translate.mojom');
  var file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file.mojom', '../../../../mojo/public/mojom/base/file.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../url/mojom/url.mojom.js');
  }


  var TranslateError = {};
  TranslateError.NONE = 0;
  TranslateError.NETWORK = 1;
  TranslateError.INITIALIZATION_ERROR = 2;
  TranslateError.UNKNOWN_LANGUAGE = 3;
  TranslateError.UNSUPPORTED_LANGUAGE = 4;
  TranslateError.IDENTICAL_LANGUAGES = 5;
  TranslateError.TRANSLATION_ERROR = 6;
  TranslateError.TRANSLATION_TIMEOUT = 7;
  TranslateError.UNEXPECTED_SCRIPT_ERROR = 8;
  TranslateError.BAD_ORIGIN = 9;
  TranslateError.SCRIPT_LOAD_ERROR = 10;
  TranslateError.TRANSLATE_ERROR_MAX = 11;
  TranslateError.MIN_VALUE = 0;
  TranslateError.MAX_VALUE = 11;

  TranslateError.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    }
    return false;
  };

  TranslateError.toKnownEnumValue = function(value) {
    return value;
  };

  TranslateError.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function LanguageDetectionDetails(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LanguageDetectionDetails.prototype.initDefaults_ = function() {
    this.url = null;
    this.adoptedLanguage = null;
    this.hasNotranslate = false;
    this.hasRunLangDetection = false;
    this.isModelReliable = false;
    this.modelReliabilityScore = 0;
    this.time = null;
    this.contentLanguage = null;
    this.modelDetectedLanguage = null;
    this.htmlRootLanguage = null;
    this.contents = null;
    this.detectionModelVersion = null;
  };
  LanguageDetectionDetails.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LanguageDetectionDetails.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 80}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LanguageDetectionDetails.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LanguageDetectionDetails.adoptedLanguage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;




    // validate LanguageDetectionDetails.time
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LanguageDetectionDetails.contentLanguage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate LanguageDetectionDetails.modelDetectedLanguage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate LanguageDetectionDetails.htmlRootLanguage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 48, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate LanguageDetectionDetails.contents
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate LanguageDetectionDetails.detectionModelVersion
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 64, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LanguageDetectionDetails.encodedSize = codec.kStructHeaderSize + 72;

  LanguageDetectionDetails.decode = function(decoder) {
    var packed;
    var val = new LanguageDetectionDetails();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.adoptedLanguage =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.hasNotranslate = (packed >> 0) & 1 ? true : false;
    val.hasRunLangDetection = (packed >> 1) & 1 ? true : false;
    val.isModelReliable = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.modelReliabilityScore =
        decoder.decodeStruct(codec.Float);
    val.time =
        decoder.decodeStructPointer(time$.Time);
    val.contentLanguage =
        decoder.decodeStruct(codec.String);
    val.modelDetectedLanguage =
        decoder.decodeStruct(codec.String);
    val.htmlRootLanguage =
        decoder.decodeStruct(codec.String);
    val.contents =
        decoder.decodeStructPointer(string16$.String16);
    val.detectionModelVersion =
        decoder.decodeStruct(codec.String);
    return val;
  };

  LanguageDetectionDetails.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LanguageDetectionDetails.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.adoptedLanguage);
    packed = 0;
    packed |= (val.hasNotranslate & 1) << 0
    packed |= (val.hasRunLangDetection & 1) << 1
    packed |= (val.isModelReliable & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Float, val.modelReliabilityScore);
    encoder.encodeStructPointer(time$.Time, val.time);
    encoder.encodeStruct(codec.String, val.contentLanguage);
    encoder.encodeStruct(codec.String, val.modelDetectedLanguage);
    encoder.encodeStruct(codec.String, val.htmlRootLanguage);
    encoder.encodeStructPointer(string16$.String16, val.contents);
    encoder.encodeStruct(codec.String, val.detectionModelVersion);
  };
  function TranslateAgent_TranslateFrame_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TranslateAgent_TranslateFrame_Params.prototype.initDefaults_ = function() {
    this.translateScript = null;
    this.sourceLang = null;
    this.targetLang = null;
  };
  TranslateAgent_TranslateFrame_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TranslateAgent_TranslateFrame_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TranslateAgent_TranslateFrame_Params.translateScript
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TranslateAgent_TranslateFrame_Params.sourceLang
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TranslateAgent_TranslateFrame_Params.targetLang
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TranslateAgent_TranslateFrame_Params.encodedSize = codec.kStructHeaderSize + 24;

  TranslateAgent_TranslateFrame_Params.decode = function(decoder) {
    var packed;
    var val = new TranslateAgent_TranslateFrame_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.translateScript =
        decoder.decodeStruct(codec.String);
    val.sourceLang =
        decoder.decodeStruct(codec.String);
    val.targetLang =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TranslateAgent_TranslateFrame_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TranslateAgent_TranslateFrame_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.translateScript);
    encoder.encodeStruct(codec.String, val.sourceLang);
    encoder.encodeStruct(codec.String, val.targetLang);
  };
  function TranslateAgent_TranslateFrame_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TranslateAgent_TranslateFrame_ResponseParams.prototype.initDefaults_ = function() {
    this.cancelled = false;
    this.error = 0;
    this.originalLang = null;
    this.translatedLang = null;
  };
  TranslateAgent_TranslateFrame_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TranslateAgent_TranslateFrame_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate TranslateAgent_TranslateFrame_ResponseParams.originalLang
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TranslateAgent_TranslateFrame_ResponseParams.translatedLang
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TranslateAgent_TranslateFrame_ResponseParams.error
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, TranslateError);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TranslateAgent_TranslateFrame_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  TranslateAgent_TranslateFrame_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TranslateAgent_TranslateFrame_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.cancelled = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.error =
        decoder.decodeStruct(new codec.Enum(TranslateError));
    val.originalLang =
        decoder.decodeStruct(codec.String);
    val.translatedLang =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TranslateAgent_TranslateFrame_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TranslateAgent_TranslateFrame_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.cancelled & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.error);
    encoder.encodeStruct(codec.String, val.originalLang);
    encoder.encodeStruct(codec.String, val.translatedLang);
  };
  function TranslateAgent_RevertTranslation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TranslateAgent_RevertTranslation_Params.prototype.initDefaults_ = function() {
  };
  TranslateAgent_RevertTranslation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TranslateAgent_RevertTranslation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TranslateAgent_RevertTranslation_Params.encodedSize = codec.kStructHeaderSize + 0;

  TranslateAgent_RevertTranslation_Params.decode = function(decoder) {
    var packed;
    var val = new TranslateAgent_RevertTranslation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TranslateAgent_RevertTranslation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TranslateAgent_RevertTranslation_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ContentTranslateDriver_RegisterPage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentTranslateDriver_RegisterPage_Params.prototype.initDefaults_ = function() {
    this.translateAgent = new TranslateAgentPtr();
    this.details = null;
    this.translationCritieraMet = false;
  };
  ContentTranslateDriver_RegisterPage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentTranslateDriver_RegisterPage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentTranslateDriver_RegisterPage_Params.translateAgent
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentTranslateDriver_RegisterPage_Params.details
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, LanguageDetectionDetails, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ContentTranslateDriver_RegisterPage_Params.encodedSize = codec.kStructHeaderSize + 24;

  ContentTranslateDriver_RegisterPage_Params.decode = function(decoder) {
    var packed;
    var val = new ContentTranslateDriver_RegisterPage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.translateAgent =
        decoder.decodeStruct(new codec.Interface(TranslateAgentPtr));
    val.details =
        decoder.decodeStructPointer(LanguageDetectionDetails);
    packed = decoder.readUint8();
    val.translationCritieraMet = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ContentTranslateDriver_RegisterPage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentTranslateDriver_RegisterPage_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(TranslateAgentPtr), val.translateAgent);
    encoder.encodeStructPointer(LanguageDetectionDetails, val.details);
    packed = 0;
    packed |= (val.translationCritieraMet & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ContentTranslateDriver_GetLanguageDetectionModel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentTranslateDriver_GetLanguageDetectionModel_Params.prototype.initDefaults_ = function() {
  };
  ContentTranslateDriver_GetLanguageDetectionModel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentTranslateDriver_GetLanguageDetectionModel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ContentTranslateDriver_GetLanguageDetectionModel_Params.encodedSize = codec.kStructHeaderSize + 0;

  ContentTranslateDriver_GetLanguageDetectionModel_Params.decode = function(decoder) {
    var packed;
    var val = new ContentTranslateDriver_GetLanguageDetectionModel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ContentTranslateDriver_GetLanguageDetectionModel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentTranslateDriver_GetLanguageDetectionModel_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams.prototype.initDefaults_ = function() {
    this.modelFile = null;
  };
  ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams.modelFile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file$.File, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.modelFile =
        decoder.decodeStructPointer(file$.File);
    return val;
  };

  ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file$.File, val.modelFile);
  };
  var kTranslateAgent_TranslateFrame_Name = 698165226;
  var kTranslateAgent_RevertTranslation_Name = 1833542105;

  function TranslateAgentPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TranslateAgent,
                                                   handleOrPtrInfo);
  }

  function TranslateAgentAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TranslateAgent, associatedInterfacePtrInfo);
  }

  TranslateAgentAssociatedPtr.prototype =
      Object.create(TranslateAgentPtr.prototype);
  TranslateAgentAssociatedPtr.prototype.constructor =
      TranslateAgentAssociatedPtr;

  function TranslateAgentProxy(receiver) {
    this.receiver_ = receiver;
  }
  TranslateAgentPtr.prototype.translateFrame = function() {
    return TranslateAgentProxy.prototype.translateFrame
        .apply(this.ptr.getProxy(), arguments);
  };

  TranslateAgentProxy.prototype.translateFrame = function(translateScript, sourceLang, targetLang) {
    var params_ = new TranslateAgent_TranslateFrame_Params();
    params_.translateScript = translateScript;
    params_.sourceLang = sourceLang;
    params_.targetLang = targetLang;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTranslateAgent_TranslateFrame_Name,
          codec.align(TranslateAgent_TranslateFrame_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TranslateAgent_TranslateFrame_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TranslateAgent_TranslateFrame_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TranslateAgentPtr.prototype.revertTranslation = function() {
    return TranslateAgentProxy.prototype.revertTranslation
        .apply(this.ptr.getProxy(), arguments);
  };

  TranslateAgentProxy.prototype.revertTranslation = function() {
    var params_ = new TranslateAgent_RevertTranslation_Params();
    var builder = new codec.MessageV0Builder(
        kTranslateAgent_RevertTranslation_Name,
        codec.align(TranslateAgent_RevertTranslation_Params.encodedSize));
    builder.encodeStruct(TranslateAgent_RevertTranslation_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TranslateAgentStub(delegate) {
    this.delegate_ = delegate;
  }
  TranslateAgentStub.prototype.translateFrame = function(translateScript, sourceLang, targetLang) {
    return this.delegate_ && this.delegate_.translateFrame && this.delegate_.translateFrame(translateScript, sourceLang, targetLang);
  }
  TranslateAgentStub.prototype.revertTranslation = function() {
    return this.delegate_ && this.delegate_.revertTranslation && this.delegate_.revertTranslation();
  }

  TranslateAgentStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTranslateAgent_RevertTranslation_Name:
      var params = reader.decodeStruct(TranslateAgent_RevertTranslation_Params);
      this.revertTranslation();
      return true;
    default:
      return false;
    }
  };

  TranslateAgentStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTranslateAgent_TranslateFrame_Name:
      var params = reader.decodeStruct(TranslateAgent_TranslateFrame_Params);
      this.translateFrame(params.translateScript, params.sourceLang, params.targetLang).then(function(response) {
        var responseParams =
            new TranslateAgent_TranslateFrame_ResponseParams();
        responseParams.cancelled = response.cancelled;
        responseParams.originalLang = response.originalLang;
        responseParams.translatedLang = response.translatedLang;
        responseParams.error = response.error;
        var builder = new codec.MessageV1Builder(
            kTranslateAgent_TranslateFrame_Name,
            codec.align(TranslateAgent_TranslateFrame_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TranslateAgent_TranslateFrame_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTranslateAgentRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTranslateAgent_TranslateFrame_Name:
        if (message.expectsResponse())
          paramsClass = TranslateAgent_TranslateFrame_Params;
      break;
      case kTranslateAgent_RevertTranslation_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TranslateAgent_RevertTranslation_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTranslateAgentResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTranslateAgent_TranslateFrame_Name:
        if (message.isResponse())
          paramsClass = TranslateAgent_TranslateFrame_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TranslateAgent = {
    name: 'translate.mojom.TranslateAgent',
    kVersion: 0,
    ptrClass: TranslateAgentPtr,
    proxyClass: TranslateAgentProxy,
    stubClass: TranslateAgentStub,
    validateRequest: validateTranslateAgentRequest,
    validateResponse: validateTranslateAgentResponse,
  };
  TranslateAgentStub.prototype.validator = validateTranslateAgentRequest;
  TranslateAgentProxy.prototype.validator = validateTranslateAgentResponse;
  var kContentTranslateDriver_RegisterPage_Name = 322657447;
  var kContentTranslateDriver_GetLanguageDetectionModel_Name = 1233032989;

  function ContentTranslateDriverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ContentTranslateDriver,
                                                   handleOrPtrInfo);
  }

  function ContentTranslateDriverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ContentTranslateDriver, associatedInterfacePtrInfo);
  }

  ContentTranslateDriverAssociatedPtr.prototype =
      Object.create(ContentTranslateDriverPtr.prototype);
  ContentTranslateDriverAssociatedPtr.prototype.constructor =
      ContentTranslateDriverAssociatedPtr;

  function ContentTranslateDriverProxy(receiver) {
    this.receiver_ = receiver;
  }
  ContentTranslateDriverPtr.prototype.registerPage = function() {
    return ContentTranslateDriverProxy.prototype.registerPage
        .apply(this.ptr.getProxy(), arguments);
  };

  ContentTranslateDriverProxy.prototype.registerPage = function(translateAgent, details, translationCritieraMet) {
    var params_ = new ContentTranslateDriver_RegisterPage_Params();
    params_.translateAgent = translateAgent;
    params_.details = details;
    params_.translationCritieraMet = translationCritieraMet;
    var builder = new codec.MessageV0Builder(
        kContentTranslateDriver_RegisterPage_Name,
        codec.align(ContentTranslateDriver_RegisterPage_Params.encodedSize));
    builder.encodeStruct(ContentTranslateDriver_RegisterPage_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ContentTranslateDriverPtr.prototype.getLanguageDetectionModel = function() {
    return ContentTranslateDriverProxy.prototype.getLanguageDetectionModel
        .apply(this.ptr.getProxy(), arguments);
  };

  ContentTranslateDriverProxy.prototype.getLanguageDetectionModel = function() {
    var params_ = new ContentTranslateDriver_GetLanguageDetectionModel_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kContentTranslateDriver_GetLanguageDetectionModel_Name,
          codec.align(ContentTranslateDriver_GetLanguageDetectionModel_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ContentTranslateDriver_GetLanguageDetectionModel_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ContentTranslateDriverStub(delegate) {
    this.delegate_ = delegate;
  }
  ContentTranslateDriverStub.prototype.registerPage = function(translateAgent, details, translationCritieraMet) {
    return this.delegate_ && this.delegate_.registerPage && this.delegate_.registerPage(translateAgent, details, translationCritieraMet);
  }
  ContentTranslateDriverStub.prototype.getLanguageDetectionModel = function() {
    return this.delegate_ && this.delegate_.getLanguageDetectionModel && this.delegate_.getLanguageDetectionModel();
  }

  ContentTranslateDriverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kContentTranslateDriver_RegisterPage_Name:
      var params = reader.decodeStruct(ContentTranslateDriver_RegisterPage_Params);
      this.registerPage(params.translateAgent, params.details, params.translationCritieraMet);
      return true;
    default:
      return false;
    }
  };

  ContentTranslateDriverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kContentTranslateDriver_GetLanguageDetectionModel_Name:
      var params = reader.decodeStruct(ContentTranslateDriver_GetLanguageDetectionModel_Params);
      this.getLanguageDetectionModel().then(function(response) {
        var responseParams =
            new ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams();
        responseParams.modelFile = response.modelFile;
        var builder = new codec.MessageV1Builder(
            kContentTranslateDriver_GetLanguageDetectionModel_Name,
            codec.align(ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateContentTranslateDriverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kContentTranslateDriver_RegisterPage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ContentTranslateDriver_RegisterPage_Params;
      break;
      case kContentTranslateDriver_GetLanguageDetectionModel_Name:
        if (message.expectsResponse())
          paramsClass = ContentTranslateDriver_GetLanguageDetectionModel_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateContentTranslateDriverResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kContentTranslateDriver_GetLanguageDetectionModel_Name:
        if (message.isResponse())
          paramsClass = ContentTranslateDriver_GetLanguageDetectionModel_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ContentTranslateDriver = {
    name: 'translate.mojom.ContentTranslateDriver',
    kVersion: 0,
    ptrClass: ContentTranslateDriverPtr,
    proxyClass: ContentTranslateDriverProxy,
    stubClass: ContentTranslateDriverStub,
    validateRequest: validateContentTranslateDriverRequest,
    validateResponse: validateContentTranslateDriverResponse,
  };
  ContentTranslateDriverStub.prototype.validator = validateContentTranslateDriverRequest;
  ContentTranslateDriverProxy.prototype.validator = validateContentTranslateDriverResponse;
  exports.TranslateError = TranslateError;
  exports.LanguageDetectionDetails = LanguageDetectionDetails;
  exports.TranslateAgent = TranslateAgent;
  exports.TranslateAgentPtr = TranslateAgentPtr;
  exports.TranslateAgentAssociatedPtr = TranslateAgentAssociatedPtr;
  exports.ContentTranslateDriver = ContentTranslateDriver;
  exports.ContentTranslateDriverPtr = ContentTranslateDriverPtr;
  exports.ContentTranslateDriverAssociatedPtr = ContentTranslateDriverAssociatedPtr;
})();