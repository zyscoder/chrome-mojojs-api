// components/web_package/mojom/web_bundle_parser.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/web_package/mojom/web_bundle_parser.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('webPackage.mojom');
  var read_only_file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_file.mojom', '../../../mojo/public/mojom/base/read_only_file.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../url/mojom/url.mojom.js');
  }


  var BundleParseErrorType = {};
  BundleParseErrorType.kParserInternalError = 0;
  BundleParseErrorType.kFormatError = 1;
  BundleParseErrorType.kVersionError = 2;
  BundleParseErrorType.MIN_VALUE = 0;
  BundleParseErrorType.MAX_VALUE = 2;

  BundleParseErrorType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  BundleParseErrorType.toKnownEnumValue = function(value) {
    return value;
  };

  BundleParseErrorType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var BundleFormatVersion = {};
  BundleFormatVersion.kB1 = 0;
  BundleFormatVersion.kB2 = 1;
  BundleFormatVersion.MIN_VALUE = 0;
  BundleFormatVersion.MAX_VALUE = 1;

  BundleFormatVersion.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  BundleFormatVersion.toKnownEnumValue = function(value) {
    return value;
  };

  BundleFormatVersion.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function BundleIntegrityBlockParseError(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleIntegrityBlockParseError.prototype.initDefaults_ = function() {
    this.type = 0;
    this.message = null;
  };
  BundleIntegrityBlockParseError.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleIntegrityBlockParseError.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleIntegrityBlockParseError.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, BundleParseErrorType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleIntegrityBlockParseError.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleIntegrityBlockParseError.encodedSize = codec.kStructHeaderSize + 16;

  BundleIntegrityBlockParseError.decode = function(decoder) {
    var packed;
    var val = new BundleIntegrityBlockParseError();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(new codec.Enum(BundleParseErrorType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.message =
        decoder.decodeStruct(codec.String);
    return val;
  };

  BundleIntegrityBlockParseError.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleIntegrityBlockParseError.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.message);
  };
  function BundleMetadataParseError(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleMetadataParseError.prototype.initDefaults_ = function() {
    this.type = 0;
    this.message = null;
  };
  BundleMetadataParseError.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleMetadataParseError.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadataParseError.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, BundleParseErrorType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadataParseError.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleMetadataParseError.encodedSize = codec.kStructHeaderSize + 16;

  BundleMetadataParseError.decode = function(decoder) {
    var packed;
    var val = new BundleMetadataParseError();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(new codec.Enum(BundleParseErrorType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.message =
        decoder.decodeStruct(codec.String);
    return val;
  };

  BundleMetadataParseError.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleMetadataParseError.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.message);
  };
  function BundleResponseParseError(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleResponseParseError.prototype.initDefaults_ = function() {
    this.type = 0;
    this.message = null;
  };
  BundleResponseParseError.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleResponseParseError.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleResponseParseError.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, BundleParseErrorType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleResponseParseError.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleResponseParseError.encodedSize = codec.kStructHeaderSize + 16;

  BundleResponseParseError.decode = function(decoder) {
    var packed;
    var val = new BundleResponseParseError();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(new codec.Enum(BundleParseErrorType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.message =
        decoder.decodeStruct(codec.String);
    return val;
  };

  BundleResponseParseError.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleResponseParseError.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.message);
  };
  function BundleIntegrityBlock(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleIntegrityBlock.prototype.initDefaults_ = function() {
    this.size = 0;
    this.signatureStack = null;
  };
  BundleIntegrityBlock.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleIntegrityBlock.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate BundleIntegrityBlock.signatureStack
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(BundleIntegrityBlockSignatureStackEntry), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleIntegrityBlock.encodedSize = codec.kStructHeaderSize + 16;

  BundleIntegrityBlock.decode = function(decoder) {
    var packed;
    var val = new BundleIntegrityBlock();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.size =
        decoder.decodeStruct(codec.Uint64);
    val.signatureStack =
        decoder.decodeArrayPointer(new codec.PointerTo(BundleIntegrityBlockSignatureStackEntry));
    return val;
  };

  BundleIntegrityBlock.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleIntegrityBlock.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.size);
    encoder.encodeArrayPointer(new codec.PointerTo(BundleIntegrityBlockSignatureStackEntry), val.signatureStack);
  };
  function Ed25519PublicKey(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Ed25519PublicKey.prototype.initDefaults_ = function() {
    this.bytes = null;
  };
  Ed25519PublicKey.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Ed25519PublicKey.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Ed25519PublicKey.bytes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [32], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Ed25519PublicKey.encodedSize = codec.kStructHeaderSize + 8;

  Ed25519PublicKey.decode = function(decoder) {
    var packed;
    var val = new Ed25519PublicKey();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bytes =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  Ed25519PublicKey.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Ed25519PublicKey.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.bytes);
  };
  function Ed25519Signature(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Ed25519Signature.prototype.initDefaults_ = function() {
    this.bytes = null;
  };
  Ed25519Signature.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Ed25519Signature.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Ed25519Signature.bytes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [64], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Ed25519Signature.encodedSize = codec.kStructHeaderSize + 8;

  Ed25519Signature.decode = function(decoder) {
    var packed;
    var val = new Ed25519Signature();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bytes =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  Ed25519Signature.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Ed25519Signature.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.bytes);
  };
  function BundleIntegrityBlockSignatureStackEntry(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleIntegrityBlockSignatureStackEntry.prototype.initDefaults_ = function() {
    this.completeEntryCbor = null;
    this.attributesCbor = null;
    this.publicKey = null;
    this.signature = null;
  };
  BundleIntegrityBlockSignatureStackEntry.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleIntegrityBlockSignatureStackEntry.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleIntegrityBlockSignatureStackEntry.completeEntryCbor
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleIntegrityBlockSignatureStackEntry.attributesCbor
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleIntegrityBlockSignatureStackEntry.publicKey
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, Ed25519PublicKey, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleIntegrityBlockSignatureStackEntry.signature
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, Ed25519Signature, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleIntegrityBlockSignatureStackEntry.encodedSize = codec.kStructHeaderSize + 32;

  BundleIntegrityBlockSignatureStackEntry.decode = function(decoder) {
    var packed;
    var val = new BundleIntegrityBlockSignatureStackEntry();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.completeEntryCbor =
        decoder.decodeArrayPointer(codec.Uint8);
    val.attributesCbor =
        decoder.decodeArrayPointer(codec.Uint8);
    val.publicKey =
        decoder.decodeStructPointer(Ed25519PublicKey);
    val.signature =
        decoder.decodeStructPointer(Ed25519Signature);
    return val;
  };

  BundleIntegrityBlockSignatureStackEntry.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleIntegrityBlockSignatureStackEntry.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.completeEntryCbor);
    encoder.encodeArrayPointer(codec.Uint8, val.attributesCbor);
    encoder.encodeStructPointer(Ed25519PublicKey, val.publicKey);
    encoder.encodeStructPointer(Ed25519Signature, val.signature);
  };
  function BundleMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleMetadata.prototype.initDefaults_ = function() {
    this.version = 0;
    this.primaryUrl = null;
    this.requests = null;
  };
  BundleMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadata.version
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, BundleFormatVersion);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadata.primaryUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleMetadata.requests
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 16, false, new codec.PointerTo(url$.Url), new codec.PointerTo(BundleResponseLocation), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleMetadata.encodedSize = codec.kStructHeaderSize + 24;

  BundleMetadata.decode = function(decoder) {
    var packed;
    var val = new BundleMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.version =
        decoder.decodeStruct(new codec.Enum(BundleFormatVersion));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.primaryUrl =
        decoder.decodeStructPointer(url$.Url);
    val.requests =
        decoder.decodeMapPointer(new codec.PointerTo(url$.Url), new codec.PointerTo(BundleResponseLocation));
    return val;
  };

  BundleMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.version);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.primaryUrl);
    encoder.encodeMapPointer(new codec.PointerTo(url$.Url), new codec.PointerTo(BundleResponseLocation), val.requests);
  };
  function BundleResponseLocation(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleResponseLocation.prototype.initDefaults_ = function() {
    this.offset = 0;
    this.length = 0;
  };
  BundleResponseLocation.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleResponseLocation.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  BundleResponseLocation.encodedSize = codec.kStructHeaderSize + 16;

  BundleResponseLocation.decode = function(decoder) {
    var packed;
    var val = new BundleResponseLocation();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.offset =
        decoder.decodeStruct(codec.Uint64);
    val.length =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  BundleResponseLocation.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleResponseLocation.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.offset);
    encoder.encodeStruct(codec.Uint64, val.length);
  };
  function BundleResponse(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleResponse.prototype.initDefaults_ = function() {
    this.responseCode = 0;
    this.responseHeaders = null;
    this.payloadOffset = 0;
    this.payloadLength = 0;
  };
  BundleResponse.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleResponse.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate BundleResponse.responseHeaders
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, codec.String, codec.String, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  BundleResponse.encodedSize = codec.kStructHeaderSize + 32;

  BundleResponse.decode = function(decoder) {
    var packed;
    var val = new BundleResponse();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.responseCode =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.responseHeaders =
        decoder.decodeMapPointer(codec.String, codec.String);
    val.payloadOffset =
        decoder.decodeStruct(codec.Uint64);
    val.payloadLength =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  BundleResponse.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleResponse.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.responseCode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeMapPointer(codec.String, codec.String, val.responseHeaders);
    encoder.encodeStruct(codec.Uint64, val.payloadOffset);
    encoder.encodeStruct(codec.Uint64, val.payloadLength);
  };
  function WebBundleParserFactory_GetParserForDataSource_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBundleParserFactory_GetParserForDataSource_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
    this.baseUrl = null;
    this.dataSource = new BundleDataSourcePtr();
  };
  WebBundleParserFactory_GetParserForDataSource_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBundleParserFactory_GetParserForDataSource_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleParserFactory_GetParserForDataSource_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleParserFactory_GetParserForDataSource_Params.baseUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleParserFactory_GetParserForDataSource_Params.dataSource
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBundleParserFactory_GetParserForDataSource_Params.encodedSize = codec.kStructHeaderSize + 24;

  WebBundleParserFactory_GetParserForDataSource_Params.decode = function(decoder) {
    var packed;
    var val = new WebBundleParserFactory_GetParserForDataSource_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.baseUrl =
        decoder.decodeStructPointer(url$.Url);
    val.dataSource =
        decoder.decodeStruct(new codec.Interface(BundleDataSourcePtr));
    return val;
  };

  WebBundleParserFactory_GetParserForDataSource_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBundleParserFactory_GetParserForDataSource_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.baseUrl);
    encoder.encodeStruct(new codec.Interface(BundleDataSourcePtr), val.dataSource);
  };
  function WebBundleParserFactory_BindFileDataSource_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBundleParserFactory_BindFileDataSource_Params.prototype.initDefaults_ = function() {
    this.dataSource = new bindings.InterfaceRequest();
    this.file = null;
  };
  WebBundleParserFactory_BindFileDataSource_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBundleParserFactory_BindFileDataSource_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleParserFactory_BindFileDataSource_Params.dataSource
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleParserFactory_BindFileDataSource_Params.file
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, read_only_file$.ReadOnlyFile, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBundleParserFactory_BindFileDataSource_Params.encodedSize = codec.kStructHeaderSize + 16;

  WebBundleParserFactory_BindFileDataSource_Params.decode = function(decoder) {
    var packed;
    var val = new WebBundleParserFactory_BindFileDataSource_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dataSource =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.file =
        decoder.decodeStructPointer(read_only_file$.ReadOnlyFile);
    return val;
  };

  WebBundleParserFactory_BindFileDataSource_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBundleParserFactory_BindFileDataSource_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.dataSource);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(read_only_file$.ReadOnlyFile, val.file);
  };
  function WebBundleParser_ParseIntegrityBlock_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBundleParser_ParseIntegrityBlock_Params.prototype.initDefaults_ = function() {
  };
  WebBundleParser_ParseIntegrityBlock_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBundleParser_ParseIntegrityBlock_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBundleParser_ParseIntegrityBlock_Params.encodedSize = codec.kStructHeaderSize + 0;

  WebBundleParser_ParseIntegrityBlock_Params.decode = function(decoder) {
    var packed;
    var val = new WebBundleParser_ParseIntegrityBlock_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  WebBundleParser_ParseIntegrityBlock_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBundleParser_ParseIntegrityBlock_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function WebBundleParser_ParseIntegrityBlock_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBundleParser_ParseIntegrityBlock_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
    this.error = null;
  };
  WebBundleParser_ParseIntegrityBlock_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBundleParser_ParseIntegrityBlock_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleParser_ParseIntegrityBlock_ResponseParams.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, BundleIntegrityBlock, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleParser_ParseIntegrityBlock_ResponseParams.error
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, BundleIntegrityBlockParseError, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBundleParser_ParseIntegrityBlock_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebBundleParser_ParseIntegrityBlock_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBundleParser_ParseIntegrityBlock_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStructPointer(BundleIntegrityBlock);
    val.error =
        decoder.decodeStructPointer(BundleIntegrityBlockParseError);
    return val;
  };

  WebBundleParser_ParseIntegrityBlock_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBundleParser_ParseIntegrityBlock_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(BundleIntegrityBlock, val.result);
    encoder.encodeStructPointer(BundleIntegrityBlockParseError, val.error);
  };
  function WebBundleParser_ParseMetadata_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBundleParser_ParseMetadata_Params.prototype.initDefaults_ = function() {
    this.offset_$flag = false;
    this.offset_$value = 0;
  };
  WebBundleParser_ParseMetadata_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBundleParser_ParseMetadata_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  WebBundleParser_ParseMetadata_Params.encodedSize = codec.kStructHeaderSize + 16;

  WebBundleParser_ParseMetadata_Params.decode = function(decoder) {
    var packed;
    var val = new WebBundleParser_ParseMetadata_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.offset_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.offset_$value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  WebBundleParser_ParseMetadata_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBundleParser_ParseMetadata_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.offset_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint64, val.offset_$value);
  };
  function WebBundleParser_ParseMetadata_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBundleParser_ParseMetadata_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
    this.error = null;
  };
  WebBundleParser_ParseMetadata_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBundleParser_ParseMetadata_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleParser_ParseMetadata_ResponseParams.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, BundleMetadata, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleParser_ParseMetadata_ResponseParams.error
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, BundleMetadataParseError, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBundleParser_ParseMetadata_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebBundleParser_ParseMetadata_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBundleParser_ParseMetadata_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStructPointer(BundleMetadata);
    val.error =
        decoder.decodeStructPointer(BundleMetadataParseError);
    return val;
  };

  WebBundleParser_ParseMetadata_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBundleParser_ParseMetadata_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(BundleMetadata, val.result);
    encoder.encodeStructPointer(BundleMetadataParseError, val.error);
  };
  function WebBundleParser_ParseResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBundleParser_ParseResponse_Params.prototype.initDefaults_ = function() {
    this.responseOffset = 0;
    this.responseLength = 0;
  };
  WebBundleParser_ParseResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBundleParser_ParseResponse_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  WebBundleParser_ParseResponse_Params.encodedSize = codec.kStructHeaderSize + 16;

  WebBundleParser_ParseResponse_Params.decode = function(decoder) {
    var packed;
    var val = new WebBundleParser_ParseResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.responseOffset =
        decoder.decodeStruct(codec.Uint64);
    val.responseLength =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  WebBundleParser_ParseResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBundleParser_ParseResponse_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.responseOffset);
    encoder.encodeStruct(codec.Uint64, val.responseLength);
  };
  function WebBundleParser_ParseResponse_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBundleParser_ParseResponse_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
    this.error = null;
  };
  WebBundleParser_ParseResponse_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBundleParser_ParseResponse_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleParser_ParseResponse_ResponseParams.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, BundleResponse, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleParser_ParseResponse_ResponseParams.error
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, BundleResponseParseError, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBundleParser_ParseResponse_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebBundleParser_ParseResponse_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBundleParser_ParseResponse_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStructPointer(BundleResponse);
    val.error =
        decoder.decodeStructPointer(BundleResponseParseError);
    return val;
  };

  WebBundleParser_ParseResponse_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBundleParser_ParseResponse_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(BundleResponse, val.result);
    encoder.encodeStructPointer(BundleResponseParseError, val.error);
  };
  function WebBundleParser_Close_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBundleParser_Close_Params.prototype.initDefaults_ = function() {
  };
  WebBundleParser_Close_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBundleParser_Close_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBundleParser_Close_Params.encodedSize = codec.kStructHeaderSize + 0;

  WebBundleParser_Close_Params.decode = function(decoder) {
    var packed;
    var val = new WebBundleParser_Close_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  WebBundleParser_Close_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBundleParser_Close_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function WebBundleParser_Close_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBundleParser_Close_ResponseParams.prototype.initDefaults_ = function() {
  };
  WebBundleParser_Close_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBundleParser_Close_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBundleParser_Close_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  WebBundleParser_Close_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBundleParser_Close_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  WebBundleParser_Close_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBundleParser_Close_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function BundleDataSource_Read_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_Read_Params.prototype.initDefaults_ = function() {
    this.offset = 0;
    this.length = 0;
  };
  BundleDataSource_Read_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_Read_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  BundleDataSource_Read_Params.encodedSize = codec.kStructHeaderSize + 16;

  BundleDataSource_Read_Params.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_Read_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.offset =
        decoder.decodeStruct(codec.Uint64);
    val.length =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  BundleDataSource_Read_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_Read_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.offset);
    encoder.encodeStruct(codec.Uint64, val.length);
  };
  function BundleDataSource_Read_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_Read_ResponseParams.prototype.initDefaults_ = function() {
    this.buffer = null;
  };
  BundleDataSource_Read_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_Read_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BundleDataSource_Read_ResponseParams.buffer
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleDataSource_Read_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  BundleDataSource_Read_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_Read_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.buffer =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  BundleDataSource_Read_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_Read_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.buffer);
  };
  function BundleDataSource_Length_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_Length_Params.prototype.initDefaults_ = function() {
  };
  BundleDataSource_Length_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_Length_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleDataSource_Length_Params.encodedSize = codec.kStructHeaderSize + 0;

  BundleDataSource_Length_Params.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_Length_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  BundleDataSource_Length_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_Length_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function BundleDataSource_Length_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_Length_ResponseParams.prototype.initDefaults_ = function() {
    this.length = 0;
  };
  BundleDataSource_Length_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_Length_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  BundleDataSource_Length_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  BundleDataSource_Length_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_Length_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.length =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  BundleDataSource_Length_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_Length_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.length);
  };
  function BundleDataSource_IsRandomAccessContext_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_IsRandomAccessContext_Params.prototype.initDefaults_ = function() {
  };
  BundleDataSource_IsRandomAccessContext_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_IsRandomAccessContext_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleDataSource_IsRandomAccessContext_Params.encodedSize = codec.kStructHeaderSize + 0;

  BundleDataSource_IsRandomAccessContext_Params.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_IsRandomAccessContext_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  BundleDataSource_IsRandomAccessContext_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_IsRandomAccessContext_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function BundleDataSource_IsRandomAccessContext_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_IsRandomAccessContext_ResponseParams.prototype.initDefaults_ = function() {
    this.isRandomAccess = false;
  };
  BundleDataSource_IsRandomAccessContext_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_IsRandomAccessContext_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  BundleDataSource_IsRandomAccessContext_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  BundleDataSource_IsRandomAccessContext_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_IsRandomAccessContext_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isRandomAccess = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  BundleDataSource_IsRandomAccessContext_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_IsRandomAccessContext_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isRandomAccess & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function BundleDataSource_Close_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_Close_Params.prototype.initDefaults_ = function() {
  };
  BundleDataSource_Close_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_Close_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleDataSource_Close_Params.encodedSize = codec.kStructHeaderSize + 0;

  BundleDataSource_Close_Params.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_Close_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  BundleDataSource_Close_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_Close_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function BundleDataSource_Close_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BundleDataSource_Close_ResponseParams.prototype.initDefaults_ = function() {
  };
  BundleDataSource_Close_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BundleDataSource_Close_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BundleDataSource_Close_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  BundleDataSource_Close_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new BundleDataSource_Close_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  BundleDataSource_Close_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BundleDataSource_Close_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  var kWebBundleParserFactory_GetParserForDataSource_Name = 592118418;
  var kWebBundleParserFactory_BindFileDataSource_Name = 1373798969;

  function WebBundleParserFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WebBundleParserFactory,
                                                   handleOrPtrInfo);
  }

  function WebBundleParserFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WebBundleParserFactory, associatedInterfacePtrInfo);
  }

  WebBundleParserFactoryAssociatedPtr.prototype =
      Object.create(WebBundleParserFactoryPtr.prototype);
  WebBundleParserFactoryAssociatedPtr.prototype.constructor =
      WebBundleParserFactoryAssociatedPtr;

  function WebBundleParserFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  WebBundleParserFactoryPtr.prototype.getParserForDataSource = function() {
    return WebBundleParserFactoryProxy.prototype.getParserForDataSource
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBundleParserFactoryProxy.prototype.getParserForDataSource = function(receiver, baseUrl, dataSource) {
    var params_ = new WebBundleParserFactory_GetParserForDataSource_Params();
    params_.receiver = receiver;
    params_.baseUrl = baseUrl;
    params_.dataSource = dataSource;
    var builder = new codec.MessageV0Builder(
        kWebBundleParserFactory_GetParserForDataSource_Name,
        codec.align(WebBundleParserFactory_GetParserForDataSource_Params.encodedSize));
    builder.encodeStruct(WebBundleParserFactory_GetParserForDataSource_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WebBundleParserFactoryPtr.prototype.bindFileDataSource = function() {
    return WebBundleParserFactoryProxy.prototype.bindFileDataSource
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBundleParserFactoryProxy.prototype.bindFileDataSource = function(dataSource, file) {
    var params_ = new WebBundleParserFactory_BindFileDataSource_Params();
    params_.dataSource = dataSource;
    params_.file = file;
    var builder = new codec.MessageV0Builder(
        kWebBundleParserFactory_BindFileDataSource_Name,
        codec.align(WebBundleParserFactory_BindFileDataSource_Params.encodedSize));
    builder.encodeStruct(WebBundleParserFactory_BindFileDataSource_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function WebBundleParserFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  WebBundleParserFactoryStub.prototype.getParserForDataSource = function(receiver, baseUrl, dataSource) {
    return this.delegate_ && this.delegate_.getParserForDataSource && this.delegate_.getParserForDataSource(receiver, baseUrl, dataSource);
  }
  WebBundleParserFactoryStub.prototype.bindFileDataSource = function(dataSource, file) {
    return this.delegate_ && this.delegate_.bindFileDataSource && this.delegate_.bindFileDataSource(dataSource, file);
  }

  WebBundleParserFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWebBundleParserFactory_GetParserForDataSource_Name:
      var params = reader.decodeStruct(WebBundleParserFactory_GetParserForDataSource_Params);
      this.getParserForDataSource(params.receiver, params.baseUrl, params.dataSource);
      return true;
    case kWebBundleParserFactory_BindFileDataSource_Name:
      var params = reader.decodeStruct(WebBundleParserFactory_BindFileDataSource_Params);
      this.bindFileDataSource(params.dataSource, params.file);
      return true;
    default:
      return false;
    }
  };

  WebBundleParserFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateWebBundleParserFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWebBundleParserFactory_GetParserForDataSource_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WebBundleParserFactory_GetParserForDataSource_Params;
      break;
      case kWebBundleParserFactory_BindFileDataSource_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WebBundleParserFactory_BindFileDataSource_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWebBundleParserFactoryResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var WebBundleParserFactory = {
    name: 'web_package.mojom.WebBundleParserFactory',
    kVersion: 0,
    ptrClass: WebBundleParserFactoryPtr,
    proxyClass: WebBundleParserFactoryProxy,
    stubClass: WebBundleParserFactoryStub,
    validateRequest: validateWebBundleParserFactoryRequest,
    validateResponse: null,
  };
  WebBundleParserFactoryStub.prototype.validator = validateWebBundleParserFactoryRequest;
  WebBundleParserFactoryProxy.prototype.validator = null;
  var kWebBundleParser_ParseIntegrityBlock_Name = 1061351805;
  var kWebBundleParser_ParseMetadata_Name = 994970254;
  var kWebBundleParser_ParseResponse_Name = 67585095;
  var kWebBundleParser_Close_Name = 2129858158;

  function WebBundleParserPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WebBundleParser,
                                                   handleOrPtrInfo);
  }

  function WebBundleParserAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WebBundleParser, associatedInterfacePtrInfo);
  }

  WebBundleParserAssociatedPtr.prototype =
      Object.create(WebBundleParserPtr.prototype);
  WebBundleParserAssociatedPtr.prototype.constructor =
      WebBundleParserAssociatedPtr;

  function WebBundleParserProxy(receiver) {
    this.receiver_ = receiver;
  }
  WebBundleParserPtr.prototype.parseIntegrityBlock = function() {
    return WebBundleParserProxy.prototype.parseIntegrityBlock
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBundleParserProxy.prototype.parseIntegrityBlock = function() {
    var params_ = new WebBundleParser_ParseIntegrityBlock_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBundleParser_ParseIntegrityBlock_Name,
          codec.align(WebBundleParser_ParseIntegrityBlock_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBundleParser_ParseIntegrityBlock_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBundleParser_ParseIntegrityBlock_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBundleParserPtr.prototype.parseMetadata = function() {
    return WebBundleParserProxy.prototype.parseMetadata
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBundleParserProxy.prototype.parseMetadata = function(offset) {
    var params_ = new WebBundleParser_ParseMetadata_Params();
    params_.offset = offset;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBundleParser_ParseMetadata_Name,
          codec.align(WebBundleParser_ParseMetadata_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBundleParser_ParseMetadata_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBundleParser_ParseMetadata_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBundleParserPtr.prototype.parseResponse = function() {
    return WebBundleParserProxy.prototype.parseResponse
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBundleParserProxy.prototype.parseResponse = function(responseOffset, responseLength) {
    var params_ = new WebBundleParser_ParseResponse_Params();
    params_.responseOffset = responseOffset;
    params_.responseLength = responseLength;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBundleParser_ParseResponse_Name,
          codec.align(WebBundleParser_ParseResponse_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBundleParser_ParseResponse_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBundleParser_ParseResponse_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBundleParserPtr.prototype.close = function() {
    return WebBundleParserProxy.prototype.close
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBundleParserProxy.prototype.close = function() {
    var params_ = new WebBundleParser_Close_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBundleParser_Close_Name,
          codec.align(WebBundleParser_Close_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBundleParser_Close_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBundleParser_Close_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function WebBundleParserStub(delegate) {
    this.delegate_ = delegate;
  }
  WebBundleParserStub.prototype.parseIntegrityBlock = function() {
    return this.delegate_ && this.delegate_.parseIntegrityBlock && this.delegate_.parseIntegrityBlock();
  }
  WebBundleParserStub.prototype.parseMetadata = function(offset) {
    return this.delegate_ && this.delegate_.parseMetadata && this.delegate_.parseMetadata(offset);
  }
  WebBundleParserStub.prototype.parseResponse = function(responseOffset, responseLength) {
    return this.delegate_ && this.delegate_.parseResponse && this.delegate_.parseResponse(responseOffset, responseLength);
  }
  WebBundleParserStub.prototype.close = function() {
    return this.delegate_ && this.delegate_.close && this.delegate_.close();
  }

  WebBundleParserStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  WebBundleParserStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWebBundleParser_ParseIntegrityBlock_Name:
      var params = reader.decodeStruct(WebBundleParser_ParseIntegrityBlock_Params);
      this.parseIntegrityBlock().then(function(response) {
        var responseParams =
            new WebBundleParser_ParseIntegrityBlock_ResponseParams();
        responseParams.result = response.result;
        responseParams.error = response.error;
        var builder = new codec.MessageV1Builder(
            kWebBundleParser_ParseIntegrityBlock_Name,
            codec.align(WebBundleParser_ParseIntegrityBlock_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBundleParser_ParseIntegrityBlock_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBundleParser_ParseMetadata_Name:
      var params = reader.decodeStruct(WebBundleParser_ParseMetadata_Params);
      this.parseMetadata(params.offset).then(function(response) {
        var responseParams =
            new WebBundleParser_ParseMetadata_ResponseParams();
        responseParams.result = response.result;
        responseParams.error = response.error;
        var builder = new codec.MessageV1Builder(
            kWebBundleParser_ParseMetadata_Name,
            codec.align(WebBundleParser_ParseMetadata_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBundleParser_ParseMetadata_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBundleParser_ParseResponse_Name:
      var params = reader.decodeStruct(WebBundleParser_ParseResponse_Params);
      this.parseResponse(params.responseOffset, params.responseLength).then(function(response) {
        var responseParams =
            new WebBundleParser_ParseResponse_ResponseParams();
        responseParams.result = response.result;
        responseParams.error = response.error;
        var builder = new codec.MessageV1Builder(
            kWebBundleParser_ParseResponse_Name,
            codec.align(WebBundleParser_ParseResponse_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBundleParser_ParseResponse_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBundleParser_Close_Name:
      var params = reader.decodeStruct(WebBundleParser_Close_Params);
      this.close().then(function(response) {
        var responseParams =
            new WebBundleParser_Close_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kWebBundleParser_Close_Name,
            codec.align(WebBundleParser_Close_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBundleParser_Close_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateWebBundleParserRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWebBundleParser_ParseIntegrityBlock_Name:
        if (message.expectsResponse())
          paramsClass = WebBundleParser_ParseIntegrityBlock_Params;
      break;
      case kWebBundleParser_ParseMetadata_Name:
        if (message.expectsResponse())
          paramsClass = WebBundleParser_ParseMetadata_Params;
      break;
      case kWebBundleParser_ParseResponse_Name:
        if (message.expectsResponse())
          paramsClass = WebBundleParser_ParseResponse_Params;
      break;
      case kWebBundleParser_Close_Name:
        if (message.expectsResponse())
          paramsClass = WebBundleParser_Close_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWebBundleParserResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kWebBundleParser_ParseIntegrityBlock_Name:
        if (message.isResponse())
          paramsClass = WebBundleParser_ParseIntegrityBlock_ResponseParams;
        break;
      case kWebBundleParser_ParseMetadata_Name:
        if (message.isResponse())
          paramsClass = WebBundleParser_ParseMetadata_ResponseParams;
        break;
      case kWebBundleParser_ParseResponse_Name:
        if (message.isResponse())
          paramsClass = WebBundleParser_ParseResponse_ResponseParams;
        break;
      case kWebBundleParser_Close_Name:
        if (message.isResponse())
          paramsClass = WebBundleParser_Close_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var WebBundleParser = {
    name: 'web_package.mojom.WebBundleParser',
    kVersion: 0,
    ptrClass: WebBundleParserPtr,
    proxyClass: WebBundleParserProxy,
    stubClass: WebBundleParserStub,
    validateRequest: validateWebBundleParserRequest,
    validateResponse: validateWebBundleParserResponse,
  };
  WebBundleParserStub.prototype.validator = validateWebBundleParserRequest;
  WebBundleParserProxy.prototype.validator = validateWebBundleParserResponse;
  var kBundleDataSource_Read_Name = 1788970578;
  var kBundleDataSource_Length_Name = 657281507;
  var kBundleDataSource_IsRandomAccessContext_Name = 1424521756;
  var kBundleDataSource_Close_Name = 1147815288;

  function BundleDataSourcePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(BundleDataSource,
                                                   handleOrPtrInfo);
  }

  function BundleDataSourceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        BundleDataSource, associatedInterfacePtrInfo);
  }

  BundleDataSourceAssociatedPtr.prototype =
      Object.create(BundleDataSourcePtr.prototype);
  BundleDataSourceAssociatedPtr.prototype.constructor =
      BundleDataSourceAssociatedPtr;

  function BundleDataSourceProxy(receiver) {
    this.receiver_ = receiver;
  }
  BundleDataSourcePtr.prototype.read = function() {
    return BundleDataSourceProxy.prototype.read
        .apply(this.ptr.getProxy(), arguments);
  };

  BundleDataSourceProxy.prototype.read = function(offset, length) {
    var params_ = new BundleDataSource_Read_Params();
    params_.offset = offset;
    params_.length = length;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kBundleDataSource_Read_Name,
          codec.align(BundleDataSource_Read_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(BundleDataSource_Read_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(BundleDataSource_Read_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  BundleDataSourcePtr.prototype.length = function() {
    return BundleDataSourceProxy.prototype.length
        .apply(this.ptr.getProxy(), arguments);
  };

  BundleDataSourceProxy.prototype.length = function() {
    var params_ = new BundleDataSource_Length_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kBundleDataSource_Length_Name,
          codec.align(BundleDataSource_Length_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(BundleDataSource_Length_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(BundleDataSource_Length_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  BundleDataSourcePtr.prototype.isRandomAccessContext = function() {
    return BundleDataSourceProxy.prototype.isRandomAccessContext
        .apply(this.ptr.getProxy(), arguments);
  };

  BundleDataSourceProxy.prototype.isRandomAccessContext = function() {
    var params_ = new BundleDataSource_IsRandomAccessContext_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kBundleDataSource_IsRandomAccessContext_Name,
          codec.align(BundleDataSource_IsRandomAccessContext_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(BundleDataSource_IsRandomAccessContext_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(BundleDataSource_IsRandomAccessContext_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  BundleDataSourcePtr.prototype.close = function() {
    return BundleDataSourceProxy.prototype.close
        .apply(this.ptr.getProxy(), arguments);
  };

  BundleDataSourceProxy.prototype.close = function() {
    var params_ = new BundleDataSource_Close_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kBundleDataSource_Close_Name,
          codec.align(BundleDataSource_Close_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(BundleDataSource_Close_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(BundleDataSource_Close_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function BundleDataSourceStub(delegate) {
    this.delegate_ = delegate;
  }
  BundleDataSourceStub.prototype.read = function(offset, length) {
    return this.delegate_ && this.delegate_.read && this.delegate_.read(offset, length);
  }
  BundleDataSourceStub.prototype.length = function() {
    return this.delegate_ && this.delegate_.length && this.delegate_.length();
  }
  BundleDataSourceStub.prototype.isRandomAccessContext = function() {
    return this.delegate_ && this.delegate_.isRandomAccessContext && this.delegate_.isRandomAccessContext();
  }
  BundleDataSourceStub.prototype.close = function() {
    return this.delegate_ && this.delegate_.close && this.delegate_.close();
  }

  BundleDataSourceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  BundleDataSourceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kBundleDataSource_Read_Name:
      var params = reader.decodeStruct(BundleDataSource_Read_Params);
      this.read(params.offset, params.length).then(function(response) {
        var responseParams =
            new BundleDataSource_Read_ResponseParams();
        responseParams.buffer = response.buffer;
        var builder = new codec.MessageV1Builder(
            kBundleDataSource_Read_Name,
            codec.align(BundleDataSource_Read_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(BundleDataSource_Read_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kBundleDataSource_Length_Name:
      var params = reader.decodeStruct(BundleDataSource_Length_Params);
      this.length().then(function(response) {
        var responseParams =
            new BundleDataSource_Length_ResponseParams();
        responseParams.length = response.length;
        var builder = new codec.MessageV1Builder(
            kBundleDataSource_Length_Name,
            codec.align(BundleDataSource_Length_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(BundleDataSource_Length_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kBundleDataSource_IsRandomAccessContext_Name:
      var params = reader.decodeStruct(BundleDataSource_IsRandomAccessContext_Params);
      this.isRandomAccessContext().then(function(response) {
        var responseParams =
            new BundleDataSource_IsRandomAccessContext_ResponseParams();
        responseParams.isRandomAccess = response.isRandomAccess;
        var builder = new codec.MessageV1Builder(
            kBundleDataSource_IsRandomAccessContext_Name,
            codec.align(BundleDataSource_IsRandomAccessContext_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(BundleDataSource_IsRandomAccessContext_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kBundleDataSource_Close_Name:
      var params = reader.decodeStruct(BundleDataSource_Close_Params);
      this.close().then(function(response) {
        var responseParams =
            new BundleDataSource_Close_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kBundleDataSource_Close_Name,
            codec.align(BundleDataSource_Close_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(BundleDataSource_Close_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateBundleDataSourceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kBundleDataSource_Read_Name:
        if (message.expectsResponse())
          paramsClass = BundleDataSource_Read_Params;
      break;
      case kBundleDataSource_Length_Name:
        if (message.expectsResponse())
          paramsClass = BundleDataSource_Length_Params;
      break;
      case kBundleDataSource_IsRandomAccessContext_Name:
        if (message.expectsResponse())
          paramsClass = BundleDataSource_IsRandomAccessContext_Params;
      break;
      case kBundleDataSource_Close_Name:
        if (message.expectsResponse())
          paramsClass = BundleDataSource_Close_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateBundleDataSourceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kBundleDataSource_Read_Name:
        if (message.isResponse())
          paramsClass = BundleDataSource_Read_ResponseParams;
        break;
      case kBundleDataSource_Length_Name:
        if (message.isResponse())
          paramsClass = BundleDataSource_Length_ResponseParams;
        break;
      case kBundleDataSource_IsRandomAccessContext_Name:
        if (message.isResponse())
          paramsClass = BundleDataSource_IsRandomAccessContext_ResponseParams;
        break;
      case kBundleDataSource_Close_Name:
        if (message.isResponse())
          paramsClass = BundleDataSource_Close_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var BundleDataSource = {
    name: 'web_package.mojom.BundleDataSource',
    kVersion: 0,
    ptrClass: BundleDataSourcePtr,
    proxyClass: BundleDataSourceProxy,
    stubClass: BundleDataSourceStub,
    validateRequest: validateBundleDataSourceRequest,
    validateResponse: validateBundleDataSourceResponse,
  };
  BundleDataSourceStub.prototype.validator = validateBundleDataSourceRequest;
  BundleDataSourceProxy.prototype.validator = validateBundleDataSourceResponse;
  exports.BundleParseErrorType = BundleParseErrorType;
  exports.BundleFormatVersion = BundleFormatVersion;
  exports.BundleIntegrityBlockParseError = BundleIntegrityBlockParseError;
  exports.BundleMetadataParseError = BundleMetadataParseError;
  exports.BundleResponseParseError = BundleResponseParseError;
  exports.BundleIntegrityBlock = BundleIntegrityBlock;
  exports.Ed25519PublicKey = Ed25519PublicKey;
  exports.Ed25519Signature = Ed25519Signature;
  exports.BundleIntegrityBlockSignatureStackEntry = BundleIntegrityBlockSignatureStackEntry;
  exports.BundleMetadata = BundleMetadata;
  exports.BundleResponseLocation = BundleResponseLocation;
  exports.BundleResponse = BundleResponse;
  exports.WebBundleParserFactory = WebBundleParserFactory;
  exports.WebBundleParserFactoryPtr = WebBundleParserFactoryPtr;
  exports.WebBundleParserFactoryAssociatedPtr = WebBundleParserFactoryAssociatedPtr;
  exports.WebBundleParser = WebBundleParser;
  exports.WebBundleParserPtr = WebBundleParserPtr;
  exports.WebBundleParserAssociatedPtr = WebBundleParserAssociatedPtr;
  exports.BundleDataSource = BundleDataSource;
  exports.BundleDataSourcePtr = BundleDataSourcePtr;
  exports.BundleDataSourceAssociatedPtr = BundleDataSourceAssociatedPtr;
})();