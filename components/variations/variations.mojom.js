// components/variations/variations.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/variations/variations.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('variations.mojom');


  var GoogleWebVisibility = {};
  GoogleWebVisibility.ANY = 0;
  GoogleWebVisibility.FIRST_PARTY = 1;
  GoogleWebVisibility.MIN_VALUE = 0;
  GoogleWebVisibility.MAX_VALUE = 1;

  GoogleWebVisibility.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  GoogleWebVisibility.toKnownEnumValue = function(value) {
    return value;
  };

  GoogleWebVisibility.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function VariationsHeaders(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VariationsHeaders.prototype.initDefaults_ = function() {
    this.headersMap = null;
  };
  VariationsHeaders.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VariationsHeaders.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VariationsHeaders.headersMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, new codec.Enum(GoogleWebVisibility), codec.String, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VariationsHeaders.encodedSize = codec.kStructHeaderSize + 8;

  VariationsHeaders.decode = function(decoder) {
    var packed;
    var val = new VariationsHeaders();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.headersMap =
        decoder.decodeMapPointer(new codec.Enum(GoogleWebVisibility), codec.String);
    return val;
  };

  VariationsHeaders.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VariationsHeaders.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(new codec.Enum(GoogleWebVisibility), codec.String, val.headersMap);
  };
  exports.GoogleWebVisibility = GoogleWebVisibility;
  exports.VariationsHeaders = VariationsHeaders;
})();