// components/password_manager/services/csv_password/public/mojom/csv_password_parser.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/password_manager/services/csv_password/public/mojom/csv_password_parser.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('passwordManager.mojom');
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../../url/mojom/url.mojom.js');
  }



  function CSVPasswordSequence(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CSVPasswordSequence.prototype.initDefaults_ = function() {
    this.csvPasswords = null;
  };
  CSVPasswordSequence.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CSVPasswordSequence.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CSVPasswordSequence.csvPasswords
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(CSVPassword), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CSVPasswordSequence.encodedSize = codec.kStructHeaderSize + 8;

  CSVPasswordSequence.decode = function(decoder) {
    var packed;
    var val = new CSVPasswordSequence();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.csvPasswords =
        decoder.decodeArrayPointer(new codec.PointerTo(CSVPassword));
    return val;
  };

  CSVPasswordSequence.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CSVPasswordSequence.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(CSVPassword), val.csvPasswords);
  };
  function CSVPassword(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  CSVPassword.Status = {};
  CSVPassword.Status.kOK = 0;
  CSVPassword.Status.kSyntaxError = 1;
  CSVPassword.Status.kSemanticError = 2;
  CSVPassword.Status.MIN_VALUE = 0;
  CSVPassword.Status.MAX_VALUE = 2;

  CSVPassword.Status.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  CSVPassword.Status.toKnownEnumValue = function(value) {
    return value;
  };

  CSVPassword.Status.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  CSVPassword.prototype.initDefaults_ = function() {
    this.status = 0;
    this.username = null;
    this.password = null;
    this.note = null;
    this.url = null;
    this.invalidUrl = null;
  };
  CSVPassword.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CSVPassword.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CSVPassword.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CSVPassword.Status);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CSVPassword.username
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CSVPassword.password
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CSVPassword.note
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CSVPassword.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CSVPassword.invalidUrl
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CSVPassword.encodedSize = codec.kStructHeaderSize + 48;

  CSVPassword.decode = function(decoder) {
    var packed;
    var val = new CSVPassword();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(CSVPassword.Status));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.username =
        decoder.decodeStruct(codec.String);
    val.password =
        decoder.decodeStruct(codec.String);
    val.note =
        decoder.decodeStruct(codec.String);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.invalidUrl =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  CSVPassword.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CSVPassword.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.username);
    encoder.encodeStruct(codec.String, val.password);
    encoder.encodeStruct(codec.String, val.note);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.NullableString, val.invalidUrl);
  };
  function CSVPasswordParser_ParseCSV_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CSVPasswordParser_ParseCSV_Params.prototype.initDefaults_ = function() {
    this.rawCsv = null;
  };
  CSVPasswordParser_ParseCSV_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CSVPasswordParser_ParseCSV_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CSVPasswordParser_ParseCSV_Params.rawCsv
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CSVPasswordParser_ParseCSV_Params.encodedSize = codec.kStructHeaderSize + 8;

  CSVPasswordParser_ParseCSV_Params.decode = function(decoder) {
    var packed;
    var val = new CSVPasswordParser_ParseCSV_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rawCsv =
        decoder.decodeStruct(codec.String);
    return val;
  };

  CSVPasswordParser_ParseCSV_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CSVPasswordParser_ParseCSV_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.rawCsv);
  };
  function CSVPasswordParser_ParseCSV_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CSVPasswordParser_ParseCSV_ResponseParams.prototype.initDefaults_ = function() {
    this.sequence = null;
  };
  CSVPasswordParser_ParseCSV_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CSVPasswordParser_ParseCSV_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CSVPasswordParser_ParseCSV_ResponseParams.sequence
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, CSVPasswordSequence, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CSVPasswordParser_ParseCSV_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CSVPasswordParser_ParseCSV_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CSVPasswordParser_ParseCSV_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sequence =
        decoder.decodeStructPointer(CSVPasswordSequence);
    return val;
  };

  CSVPasswordParser_ParseCSV_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CSVPasswordParser_ParseCSV_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(CSVPasswordSequence, val.sequence);
  };
  var kCSVPasswordParser_ParseCSV_Name = 59473802;

  function CSVPasswordParserPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CSVPasswordParser,
                                                   handleOrPtrInfo);
  }

  function CSVPasswordParserAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CSVPasswordParser, associatedInterfacePtrInfo);
  }

  CSVPasswordParserAssociatedPtr.prototype =
      Object.create(CSVPasswordParserPtr.prototype);
  CSVPasswordParserAssociatedPtr.prototype.constructor =
      CSVPasswordParserAssociatedPtr;

  function CSVPasswordParserProxy(receiver) {
    this.receiver_ = receiver;
  }
  CSVPasswordParserPtr.prototype.parseCSV = function() {
    return CSVPasswordParserProxy.prototype.parseCSV
        .apply(this.ptr.getProxy(), arguments);
  };

  CSVPasswordParserProxy.prototype.parseCSV = function(rawCsv) {
    var params_ = new CSVPasswordParser_ParseCSV_Params();
    params_.rawCsv = rawCsv;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCSVPasswordParser_ParseCSV_Name,
          codec.align(CSVPasswordParser_ParseCSV_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CSVPasswordParser_ParseCSV_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CSVPasswordParser_ParseCSV_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function CSVPasswordParserStub(delegate) {
    this.delegate_ = delegate;
  }
  CSVPasswordParserStub.prototype.parseCSV = function(rawCsv) {
    return this.delegate_ && this.delegate_.parseCSV && this.delegate_.parseCSV(rawCsv);
  }

  CSVPasswordParserStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  CSVPasswordParserStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCSVPasswordParser_ParseCSV_Name:
      var params = reader.decodeStruct(CSVPasswordParser_ParseCSV_Params);
      this.parseCSV(params.rawCsv).then(function(response) {
        var responseParams =
            new CSVPasswordParser_ParseCSV_ResponseParams();
        responseParams.sequence = response.sequence;
        var builder = new codec.MessageV1Builder(
            kCSVPasswordParser_ParseCSV_Name,
            codec.align(CSVPasswordParser_ParseCSV_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CSVPasswordParser_ParseCSV_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateCSVPasswordParserRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCSVPasswordParser_ParseCSV_Name:
        if (message.expectsResponse())
          paramsClass = CSVPasswordParser_ParseCSV_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCSVPasswordParserResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kCSVPasswordParser_ParseCSV_Name:
        if (message.isResponse())
          paramsClass = CSVPasswordParser_ParseCSV_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var CSVPasswordParser = {
    name: 'password_manager.mojom.CSVPasswordParser',
    kVersion: 0,
    ptrClass: CSVPasswordParserPtr,
    proxyClass: CSVPasswordParserProxy,
    stubClass: CSVPasswordParserStub,
    validateRequest: validateCSVPasswordParserRequest,
    validateResponse: validateCSVPasswordParserResponse,
  };
  CSVPasswordParserStub.prototype.validator = validateCSVPasswordParserRequest;
  CSVPasswordParserProxy.prototype.validator = validateCSVPasswordParserResponse;
  exports.CSVPasswordSequence = CSVPasswordSequence;
  exports.CSVPassword = CSVPassword;
  exports.CSVPasswordParser = CSVPasswordParser;
  exports.CSVPasswordParserPtr = CSVPasswordParserPtr;
  exports.CSVPasswordParserAssociatedPtr = CSVPasswordParserAssociatedPtr;
})();