// components/continuous_search/common/public/mojom/continuous_search.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/continuous_search/common/public/mojom/continuous_search.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('continuousSearch.mojom');
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }


  var ResultType = {};
  ResultType.kSearchResults = 0;
  ResultType.kRelatedSearches = 1;
  ResultType.MIN_VALUE = 0;
  ResultType.MAX_VALUE = 1;

  ResultType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  ResultType.toKnownEnumValue = function(value) {
    return value;
  };

  ResultType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var Category = {};
  Category.kNone = 0;
  Category.kOrganic = 1;
  Category.MIN_VALUE = 0;
  Category.MAX_VALUE = 1;

  Category.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  Category.toKnownEnumValue = function(value) {
    return value;
  };

  Category.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function SearchResult(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SearchResult.prototype.initDefaults_ = function() {
    this.link = null;
    this.title = null;
  };
  SearchResult.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SearchResult.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchResult.link
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchResult.title
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SearchResult.encodedSize = codec.kStructHeaderSize + 16;

  SearchResult.decode = function(decoder) {
    var packed;
    var val = new SearchResult();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.link =
        decoder.decodeStructPointer(url$.Url);
    val.title =
        decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  SearchResult.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SearchResult.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.link);
    encoder.encodeStructPointer(string16$.String16, val.title);
  };
  function ResultGroup(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResultGroup.prototype.initDefaults_ = function() {
    this.type = 0;
    this.results = null;
  };
  ResultGroup.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResultGroup.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResultGroup.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ResultType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResultGroup.results
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(SearchResult), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResultGroup.encodedSize = codec.kStructHeaderSize + 16;

  ResultGroup.decode = function(decoder) {
    var packed;
    var val = new ResultGroup();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(new codec.Enum(ResultType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.results =
        decoder.decodeArrayPointer(new codec.PointerTo(SearchResult));
    return val;
  };

  ResultGroup.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResultGroup.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(SearchResult), val.results);
  };
  function CategoryResults(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CategoryResults.prototype.initDefaults_ = function() {
    this.documentUrl = null;
    this.categoryType = Category.kNone;
    this.groups = null;
  };
  CategoryResults.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CategoryResults.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CategoryResults.documentUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CategoryResults.categoryType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, Category);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CategoryResults.groups
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(ResultGroup), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CategoryResults.encodedSize = codec.kStructHeaderSize + 24;

  CategoryResults.decode = function(decoder) {
    var packed;
    var val = new CategoryResults();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.documentUrl =
        decoder.decodeStructPointer(url$.Url);
    val.categoryType =
        decoder.decodeStruct(new codec.Enum(Category));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.groups =
        decoder.decodeArrayPointer(new codec.PointerTo(ResultGroup));
    return val;
  };

  CategoryResults.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CategoryResults.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.documentUrl);
    encoder.encodeStruct(codec.Int32, val.categoryType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(ResultGroup), val.groups);
  };
  function SearchResultExtractor_ExtractCurrentSearchResults_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SearchResultExtractor_ExtractCurrentSearchResults_Params.prototype.initDefaults_ = function() {
    this.resultTypes = null;
  };
  SearchResultExtractor_ExtractCurrentSearchResults_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SearchResultExtractor_ExtractCurrentSearchResults_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchResultExtractor_ExtractCurrentSearchResults_Params.resultTypes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, new codec.Enum(ResultType), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SearchResultExtractor_ExtractCurrentSearchResults_Params.encodedSize = codec.kStructHeaderSize + 8;

  SearchResultExtractor_ExtractCurrentSearchResults_Params.decode = function(decoder) {
    var packed;
    var val = new SearchResultExtractor_ExtractCurrentSearchResults_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.resultTypes =
        decoder.decodeArrayPointer(new codec.Enum(ResultType));
    return val;
  };

  SearchResultExtractor_ExtractCurrentSearchResults_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SearchResultExtractor_ExtractCurrentSearchResults_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.Enum(ResultType), val.resultTypes);
  };
  function SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.results = null;
  };
  SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, SearchResultExtractor.Status);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams.results
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, CategoryResults, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(SearchResultExtractor.Status));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.results =
        decoder.decodeStructPointer(CategoryResults);
    return val;
  };

  SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(CategoryResults, val.results);
  };
  var kSearchResultExtractor_ExtractCurrentSearchResults_Name = 1604761748;

  function SearchResultExtractorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SearchResultExtractor,
                                                   handleOrPtrInfo);
  }

  function SearchResultExtractorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SearchResultExtractor, associatedInterfacePtrInfo);
  }

  SearchResultExtractorAssociatedPtr.prototype =
      Object.create(SearchResultExtractorPtr.prototype);
  SearchResultExtractorAssociatedPtr.prototype.constructor =
      SearchResultExtractorAssociatedPtr;

  function SearchResultExtractorProxy(receiver) {
    this.receiver_ = receiver;
  }
  SearchResultExtractorPtr.prototype.extractCurrentSearchResults = function() {
    return SearchResultExtractorProxy.prototype.extractCurrentSearchResults
        .apply(this.ptr.getProxy(), arguments);
  };

  SearchResultExtractorProxy.prototype.extractCurrentSearchResults = function(resultTypes) {
    var params_ = new SearchResultExtractor_ExtractCurrentSearchResults_Params();
    params_.resultTypes = resultTypes;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSearchResultExtractor_ExtractCurrentSearchResults_Name,
          codec.align(SearchResultExtractor_ExtractCurrentSearchResults_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SearchResultExtractor_ExtractCurrentSearchResults_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SearchResultExtractorStub(delegate) {
    this.delegate_ = delegate;
  }
  SearchResultExtractorStub.prototype.extractCurrentSearchResults = function(resultTypes) {
    return this.delegate_ && this.delegate_.extractCurrentSearchResults && this.delegate_.extractCurrentSearchResults(resultTypes);
  }

  SearchResultExtractorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  SearchResultExtractorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSearchResultExtractor_ExtractCurrentSearchResults_Name:
      var params = reader.decodeStruct(SearchResultExtractor_ExtractCurrentSearchResults_Params);
      this.extractCurrentSearchResults(params.resultTypes).then(function(response) {
        var responseParams =
            new SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams();
        responseParams.status = response.status;
        responseParams.results = response.results;
        var builder = new codec.MessageV1Builder(
            kSearchResultExtractor_ExtractCurrentSearchResults_Name,
            codec.align(SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSearchResultExtractorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSearchResultExtractor_ExtractCurrentSearchResults_Name:
        if (message.expectsResponse())
          paramsClass = SearchResultExtractor_ExtractCurrentSearchResults_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSearchResultExtractorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSearchResultExtractor_ExtractCurrentSearchResults_Name:
        if (message.isResponse())
          paramsClass = SearchResultExtractor_ExtractCurrentSearchResults_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SearchResultExtractor = {
    name: 'continuous_search.mojom.SearchResultExtractor',
    kVersion: 0,
    ptrClass: SearchResultExtractorPtr,
    proxyClass: SearchResultExtractorProxy,
    stubClass: SearchResultExtractorStub,
    validateRequest: validateSearchResultExtractorRequest,
    validateResponse: validateSearchResultExtractorResponse,
  };
  SearchResultExtractor.Status = {};
  SearchResultExtractor.Status.kSuccess = 0;
  SearchResultExtractor.Status.kNoResults = 1;
  SearchResultExtractor.Status.MIN_VALUE = 0;
  SearchResultExtractor.Status.MAX_VALUE = 1;

  SearchResultExtractor.Status.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  SearchResultExtractor.Status.toKnownEnumValue = function(value) {
    return value;
  };

  SearchResultExtractor.Status.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  SearchResultExtractorStub.prototype.validator = validateSearchResultExtractorRequest;
  SearchResultExtractorProxy.prototype.validator = validateSearchResultExtractorResponse;
  exports.ResultType = ResultType;
  exports.Category = Category;
  exports.SearchResult = SearchResult;
  exports.ResultGroup = ResultGroup;
  exports.CategoryResults = CategoryResults;
  exports.SearchResultExtractor = SearchResultExtractor;
  exports.SearchResultExtractorPtr = SearchResultExtractorPtr;
  exports.SearchResultExtractorAssociatedPtr = SearchResultExtractorAssociatedPtr;
})();