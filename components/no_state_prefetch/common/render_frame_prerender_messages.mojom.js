// components/no_state_prefetch/common/render_frame_prerender_messages.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/no_state_prefetch/common/render_frame_prerender_messages.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('prerender.mojom');



  function PrerenderMessages_SetIsPrerendering_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderMessages_SetIsPrerendering_Params.prototype.initDefaults_ = function() {
    this.histogramPrefix = null;
  };
  PrerenderMessages_SetIsPrerendering_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderMessages_SetIsPrerendering_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrerenderMessages_SetIsPrerendering_Params.histogramPrefix
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderMessages_SetIsPrerendering_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrerenderMessages_SetIsPrerendering_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderMessages_SetIsPrerendering_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.histogramPrefix =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PrerenderMessages_SetIsPrerendering_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderMessages_SetIsPrerendering_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.histogramPrefix);
  };
  var kPrerenderMessages_SetIsPrerendering_Name = 1202879264;

  function PrerenderMessagesPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrerenderMessages,
                                                   handleOrPtrInfo);
  }

  function PrerenderMessagesAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrerenderMessages, associatedInterfacePtrInfo);
  }

  PrerenderMessagesAssociatedPtr.prototype =
      Object.create(PrerenderMessagesPtr.prototype);
  PrerenderMessagesAssociatedPtr.prototype.constructor =
      PrerenderMessagesAssociatedPtr;

  function PrerenderMessagesProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrerenderMessagesPtr.prototype.setIsPrerendering = function() {
    return PrerenderMessagesProxy.prototype.setIsPrerendering
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderMessagesProxy.prototype.setIsPrerendering = function(histogramPrefix) {
    var params_ = new PrerenderMessages_SetIsPrerendering_Params();
    params_.histogramPrefix = histogramPrefix;
    var builder = new codec.MessageV0Builder(
        kPrerenderMessages_SetIsPrerendering_Name,
        codec.align(PrerenderMessages_SetIsPrerendering_Params.encodedSize));
    builder.encodeStruct(PrerenderMessages_SetIsPrerendering_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PrerenderMessagesStub(delegate) {
    this.delegate_ = delegate;
  }
  PrerenderMessagesStub.prototype.setIsPrerendering = function(histogramPrefix) {
    return this.delegate_ && this.delegate_.setIsPrerendering && this.delegate_.setIsPrerendering(histogramPrefix);
  }

  PrerenderMessagesStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrerenderMessages_SetIsPrerendering_Name:
      var params = reader.decodeStruct(PrerenderMessages_SetIsPrerendering_Params);
      this.setIsPrerendering(params.histogramPrefix);
      return true;
    default:
      return false;
    }
  };

  PrerenderMessagesStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePrerenderMessagesRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrerenderMessages_SetIsPrerendering_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderMessages_SetIsPrerendering_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrerenderMessagesResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PrerenderMessages = {
    name: 'prerender.mojom.PrerenderMessages',
    kVersion: 0,
    ptrClass: PrerenderMessagesPtr,
    proxyClass: PrerenderMessagesProxy,
    stubClass: PrerenderMessagesStub,
    validateRequest: validatePrerenderMessagesRequest,
    validateResponse: null,
  };
  PrerenderMessagesStub.prototype.validator = validatePrerenderMessagesRequest;
  PrerenderMessagesProxy.prototype.validator = null;
  exports.PrerenderMessages = PrerenderMessages;
  exports.PrerenderMessagesPtr = PrerenderMessagesPtr;
  exports.PrerenderMessagesAssociatedPtr = PrerenderMessagesAssociatedPtr;
})();