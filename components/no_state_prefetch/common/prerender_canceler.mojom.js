// components/no_state_prefetch/common/prerender_canceler.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/no_state_prefetch/common/prerender_canceler.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('prerender.mojom');



  function PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params.prototype.initDefaults_ = function() {
  };
  PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params.prototype.initDefaults_ = function() {
  };
  PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params.decode = function(decoder) {
    var packed;
    var val = new PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kPrerenderCanceler_CancelPrerenderForUnsupportedScheme_Name = 372260122;
  var kPrerenderCanceler_CancelPrerenderForNoStatePrefetch_Name = 1922944359;

  function PrerenderCancelerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrerenderCanceler,
                                                   handleOrPtrInfo);
  }

  function PrerenderCancelerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrerenderCanceler, associatedInterfacePtrInfo);
  }

  PrerenderCancelerAssociatedPtr.prototype =
      Object.create(PrerenderCancelerPtr.prototype);
  PrerenderCancelerAssociatedPtr.prototype.constructor =
      PrerenderCancelerAssociatedPtr;

  function PrerenderCancelerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrerenderCancelerPtr.prototype.cancelPrerenderForUnsupportedScheme = function() {
    return PrerenderCancelerProxy.prototype.cancelPrerenderForUnsupportedScheme
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderCancelerProxy.prototype.cancelPrerenderForUnsupportedScheme = function() {
    var params_ = new PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params();
    var builder = new codec.MessageV0Builder(
        kPrerenderCanceler_CancelPrerenderForUnsupportedScheme_Name,
        codec.align(PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params.encodedSize));
    builder.encodeStruct(PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrerenderCancelerPtr.prototype.cancelPrerenderForNoStatePrefetch = function() {
    return PrerenderCancelerProxy.prototype.cancelPrerenderForNoStatePrefetch
        .apply(this.ptr.getProxy(), arguments);
  };

  PrerenderCancelerProxy.prototype.cancelPrerenderForNoStatePrefetch = function() {
    var params_ = new PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params();
    var builder = new codec.MessageV0Builder(
        kPrerenderCanceler_CancelPrerenderForNoStatePrefetch_Name,
        codec.align(PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params.encodedSize));
    builder.encodeStruct(PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PrerenderCancelerStub(delegate) {
    this.delegate_ = delegate;
  }
  PrerenderCancelerStub.prototype.cancelPrerenderForUnsupportedScheme = function() {
    return this.delegate_ && this.delegate_.cancelPrerenderForUnsupportedScheme && this.delegate_.cancelPrerenderForUnsupportedScheme();
  }
  PrerenderCancelerStub.prototype.cancelPrerenderForNoStatePrefetch = function() {
    return this.delegate_ && this.delegate_.cancelPrerenderForNoStatePrefetch && this.delegate_.cancelPrerenderForNoStatePrefetch();
  }

  PrerenderCancelerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrerenderCanceler_CancelPrerenderForUnsupportedScheme_Name:
      var params = reader.decodeStruct(PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params);
      this.cancelPrerenderForUnsupportedScheme();
      return true;
    case kPrerenderCanceler_CancelPrerenderForNoStatePrefetch_Name:
      var params = reader.decodeStruct(PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params);
      this.cancelPrerenderForNoStatePrefetch();
      return true;
    default:
      return false;
    }
  };

  PrerenderCancelerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePrerenderCancelerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrerenderCanceler_CancelPrerenderForUnsupportedScheme_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderCanceler_CancelPrerenderForUnsupportedScheme_Params;
      break;
      case kPrerenderCanceler_CancelPrerenderForNoStatePrefetch_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrerenderCanceler_CancelPrerenderForNoStatePrefetch_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrerenderCancelerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PrerenderCanceler = {
    name: 'prerender.mojom.PrerenderCanceler',
    kVersion: 0,
    ptrClass: PrerenderCancelerPtr,
    proxyClass: PrerenderCancelerProxy,
    stubClass: PrerenderCancelerStub,
    validateRequest: validatePrerenderCancelerRequest,
    validateResponse: null,
  };
  PrerenderCancelerStub.prototype.validator = validatePrerenderCancelerRequest;
  PrerenderCancelerProxy.prototype.validator = null;
  exports.PrerenderCanceler = PrerenderCanceler;
  exports.PrerenderCancelerPtr = PrerenderCancelerPtr;
  exports.PrerenderCancelerAssociatedPtr = PrerenderCancelerAssociatedPtr;
})();