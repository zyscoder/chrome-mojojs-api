// components/services/font/public/mojom/font_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/services/font/public/mojom/font_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('fontService.mojom');
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../../../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var read_only_file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_file.mojom', '../../../../../mojo/public/mojom/base/read_only_file.mojom.js');
  }


  var TypefaceSlant = {};
  TypefaceSlant.ROMAN = 0;
  TypefaceSlant.ITALIC = 1;
  TypefaceSlant.OBLIQUE = 2;
  TypefaceSlant.MIN_VALUE = 0;
  TypefaceSlant.MAX_VALUE = 2;

  TypefaceSlant.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  TypefaceSlant.toKnownEnumValue = function(value) {
    return value;
  };

  TypefaceSlant.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var RenderStyleSwitch = {};
  RenderStyleSwitch.OFF = 0;
  RenderStyleSwitch.ON = 1;
  RenderStyleSwitch.NO_PREFERENCE = 2;
  RenderStyleSwitch.MIN_VALUE = 0;
  RenderStyleSwitch.MAX_VALUE = 2;

  RenderStyleSwitch.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  RenderStyleSwitch.toKnownEnumValue = function(value) {
    return value;
  };

  RenderStyleSwitch.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function TypefaceStyle(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TypefaceStyle.prototype.initDefaults_ = function() {
    this.weight = 0;
    this.width = 0;
    this.slant = 0;
  };
  TypefaceStyle.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TypefaceStyle.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate TypefaceStyle.slant
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, TypefaceSlant);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TypefaceStyle.encodedSize = codec.kStructHeaderSize + 8;

  TypefaceStyle.decode = function(decoder) {
    var packed;
    var val = new TypefaceStyle();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.weight =
        decoder.decodeStruct(codec.Uint16);
    val.width =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    val.slant =
        decoder.decodeStruct(new codec.Enum(TypefaceSlant));
    return val;
  };

  TypefaceStyle.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TypefaceStyle.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint16, val.weight);
    encoder.encodeStruct(codec.Uint8, val.width);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.slant);
  };
  function FontIdentity(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontIdentity.prototype.initDefaults_ = function() {
    this.id = 0;
    this.ttcIndex = 0;
    this.filepath = null;
  };
  FontIdentity.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontIdentity.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate FontIdentity.filepath
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FontIdentity.encodedSize = codec.kStructHeaderSize + 16;

  FontIdentity.decode = function(decoder) {
    var packed;
    var val = new FontIdentity();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Uint32);
    val.ttcIndex =
        decoder.decodeStruct(codec.Int32);
    val.filepath =
        decoder.decodeStructPointer(file_path$.FilePath);
    return val;
  };

  FontIdentity.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontIdentity.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.id);
    encoder.encodeStruct(codec.Int32, val.ttcIndex);
    encoder.encodeStructPointer(file_path$.FilePath, val.filepath);
  };
  function FontRenderStyle(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontRenderStyle.prototype.initDefaults_ = function() {
    this.useBitmaps = 0;
    this.useAutohint = 0;
    this.useHinting = 0;
    this.hintStyle = 0;
    this.useAntialias = 0;
    this.useSubpixelRendering = 0;
    this.useSubpixelPositioning = 0;
  };
  FontRenderStyle.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontRenderStyle.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontRenderStyle.useBitmaps
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, RenderStyleSwitch);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontRenderStyle.useAutohint
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, RenderStyleSwitch);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontRenderStyle.useHinting
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, RenderStyleSwitch);
    if (err !== validator.validationError.NONE)
        return err;



    // validate FontRenderStyle.useAntialias
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, RenderStyleSwitch);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontRenderStyle.useSubpixelRendering
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 20, RenderStyleSwitch);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontRenderStyle.useSubpixelPositioning
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 24, RenderStyleSwitch);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FontRenderStyle.encodedSize = codec.kStructHeaderSize + 32;

  FontRenderStyle.decode = function(decoder) {
    var packed;
    var val = new FontRenderStyle();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.useBitmaps =
        decoder.decodeStruct(new codec.Enum(RenderStyleSwitch));
    val.useAutohint =
        decoder.decodeStruct(new codec.Enum(RenderStyleSwitch));
    val.useHinting =
        decoder.decodeStruct(new codec.Enum(RenderStyleSwitch));
    val.hintStyle =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.useAntialias =
        decoder.decodeStruct(new codec.Enum(RenderStyleSwitch));
    val.useSubpixelRendering =
        decoder.decodeStruct(new codec.Enum(RenderStyleSwitch));
    val.useSubpixelPositioning =
        decoder.decodeStruct(new codec.Enum(RenderStyleSwitch));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FontRenderStyle.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontRenderStyle.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.useBitmaps);
    encoder.encodeStruct(codec.Int32, val.useAutohint);
    encoder.encodeStruct(codec.Int32, val.useHinting);
    encoder.encodeStruct(codec.Uint8, val.hintStyle);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.useAntialias);
    encoder.encodeStruct(codec.Int32, val.useSubpixelRendering);
    encoder.encodeStruct(codec.Int32, val.useSubpixelPositioning);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FontService_MatchFamilyName_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_MatchFamilyName_Params.prototype.initDefaults_ = function() {
    this.familyName = null;
    this.style = null;
  };
  FontService_MatchFamilyName_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_MatchFamilyName_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_MatchFamilyName_Params.familyName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_MatchFamilyName_Params.style
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, TypefaceStyle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FontService_MatchFamilyName_Params.encodedSize = codec.kStructHeaderSize + 16;

  FontService_MatchFamilyName_Params.decode = function(decoder) {
    var packed;
    var val = new FontService_MatchFamilyName_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.familyName =
        decoder.decodeStruct(codec.String);
    val.style =
        decoder.decodeStructPointer(TypefaceStyle);
    return val;
  };

  FontService_MatchFamilyName_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_MatchFamilyName_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.familyName);
    encoder.encodeStructPointer(TypefaceStyle, val.style);
  };
  function FontService_MatchFamilyName_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_MatchFamilyName_ResponseParams.prototype.initDefaults_ = function() {
    this.identity = null;
    this.familyName = null;
    this.style = null;
  };
  FontService_MatchFamilyName_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_MatchFamilyName_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_MatchFamilyName_ResponseParams.identity
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FontIdentity, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_MatchFamilyName_ResponseParams.familyName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_MatchFamilyName_ResponseParams.style
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, TypefaceStyle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FontService_MatchFamilyName_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  FontService_MatchFamilyName_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FontService_MatchFamilyName_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.identity =
        decoder.decodeStructPointer(FontIdentity);
    val.familyName =
        decoder.decodeStruct(codec.String);
    val.style =
        decoder.decodeStructPointer(TypefaceStyle);
    return val;
  };

  FontService_MatchFamilyName_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_MatchFamilyName_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FontIdentity, val.identity);
    encoder.encodeStruct(codec.String, val.familyName);
    encoder.encodeStructPointer(TypefaceStyle, val.style);
  };
  function FontService_OpenStream_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_OpenStream_Params.prototype.initDefaults_ = function() {
    this.idNumber = 0;
  };
  FontService_OpenStream_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_OpenStream_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FontService_OpenStream_Params.encodedSize = codec.kStructHeaderSize + 8;

  FontService_OpenStream_Params.decode = function(decoder) {
    var packed;
    var val = new FontService_OpenStream_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.idNumber =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FontService_OpenStream_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_OpenStream_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.idNumber);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FontService_OpenStream_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_OpenStream_ResponseParams.prototype.initDefaults_ = function() {
    this.fontHandle = null;
  };
  FontService_OpenStream_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_OpenStream_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_OpenStream_ResponseParams.fontHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, read_only_file$.ReadOnlyFile, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FontService_OpenStream_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FontService_OpenStream_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FontService_OpenStream_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fontHandle =
        decoder.decodeStructPointer(read_only_file$.ReadOnlyFile);
    return val;
  };

  FontService_OpenStream_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_OpenStream_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(read_only_file$.ReadOnlyFile, val.fontHandle);
  };
  function FontService_FallbackFontForCharacter_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_FallbackFontForCharacter_Params.prototype.initDefaults_ = function() {
    this.character = 0;
    this.locale = null;
  };
  FontService_FallbackFontForCharacter_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_FallbackFontForCharacter_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate FontService_FallbackFontForCharacter_Params.locale
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FontService_FallbackFontForCharacter_Params.encodedSize = codec.kStructHeaderSize + 16;

  FontService_FallbackFontForCharacter_Params.decode = function(decoder) {
    var packed;
    var val = new FontService_FallbackFontForCharacter_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.character =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.locale =
        decoder.decodeStruct(codec.String);
    return val;
  };

  FontService_FallbackFontForCharacter_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_FallbackFontForCharacter_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.character);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.locale);
  };
  function FontService_FallbackFontForCharacter_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_FallbackFontForCharacter_ResponseParams.prototype.initDefaults_ = function() {
    this.identity = null;
    this.familyName = null;
    this.isBold = false;
    this.isItalic = false;
  };
  FontService_FallbackFontForCharacter_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_FallbackFontForCharacter_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_FallbackFontForCharacter_ResponseParams.identity
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FontIdentity, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_FallbackFontForCharacter_ResponseParams.familyName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  FontService_FallbackFontForCharacter_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  FontService_FallbackFontForCharacter_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FontService_FallbackFontForCharacter_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.identity =
        decoder.decodeStructPointer(FontIdentity);
    val.familyName =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.isBold = (packed >> 0) & 1 ? true : false;
    val.isItalic = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FontService_FallbackFontForCharacter_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_FallbackFontForCharacter_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FontIdentity, val.identity);
    encoder.encodeStruct(codec.String, val.familyName);
    packed = 0;
    packed |= (val.isBold & 1) << 0
    packed |= (val.isItalic & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FontService_FontRenderStyleForStrike_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_FontRenderStyleForStrike_Params.prototype.initDefaults_ = function() {
    this.family = null;
    this.size = 0;
    this.isItalic = false;
    this.isBold = false;
    this.deviceScaleFactor = 0;
  };
  FontService_FontRenderStyleForStrike_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_FontRenderStyleForStrike_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_FontRenderStyleForStrike_Params.family
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;





    return validator.validationError.NONE;
  };

  FontService_FontRenderStyleForStrike_Params.encodedSize = codec.kStructHeaderSize + 24;

  FontService_FontRenderStyleForStrike_Params.decode = function(decoder) {
    var packed;
    var val = new FontService_FontRenderStyleForStrike_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.family =
        decoder.decodeStruct(codec.String);
    val.size =
        decoder.decodeStruct(codec.Uint32);
    packed = decoder.readUint8();
    val.isItalic = (packed >> 0) & 1 ? true : false;
    val.isBold = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.deviceScaleFactor =
        decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FontService_FontRenderStyleForStrike_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_FontRenderStyleForStrike_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.family);
    encoder.encodeStruct(codec.Uint32, val.size);
    packed = 0;
    packed |= (val.isItalic & 1) << 0
    packed |= (val.isBold & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Float, val.deviceScaleFactor);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FontService_FontRenderStyleForStrike_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_FontRenderStyleForStrike_ResponseParams.prototype.initDefaults_ = function() {
    this.fontRenderStyle = null;
  };
  FontService_FontRenderStyleForStrike_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_FontRenderStyleForStrike_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_FontRenderStyleForStrike_ResponseParams.fontRenderStyle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FontRenderStyle, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FontService_FontRenderStyleForStrike_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FontService_FontRenderStyleForStrike_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FontService_FontRenderStyleForStrike_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fontRenderStyle =
        decoder.decodeStructPointer(FontRenderStyle);
    return val;
  };

  FontService_FontRenderStyleForStrike_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_FontRenderStyleForStrike_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FontRenderStyle, val.fontRenderStyle);
  };
  function FontService_MatchFontByPostscriptNameOrFullFontName_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_MatchFontByPostscriptNameOrFullFontName_Params.prototype.initDefaults_ = function() {
    this.postscriptNameOrFullFontName = null;
  };
  FontService_MatchFontByPostscriptNameOrFullFontName_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_MatchFontByPostscriptNameOrFullFontName_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_MatchFontByPostscriptNameOrFullFontName_Params.postscriptNameOrFullFontName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FontService_MatchFontByPostscriptNameOrFullFontName_Params.encodedSize = codec.kStructHeaderSize + 8;

  FontService_MatchFontByPostscriptNameOrFullFontName_Params.decode = function(decoder) {
    var packed;
    var val = new FontService_MatchFontByPostscriptNameOrFullFontName_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.postscriptNameOrFullFontName =
        decoder.decodeStruct(codec.String);
    return val;
  };

  FontService_MatchFontByPostscriptNameOrFullFontName_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_MatchFontByPostscriptNameOrFullFontName_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.postscriptNameOrFullFontName);
  };
  function FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams.prototype.initDefaults_ = function() {
    this.identity = null;
  };
  FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams.identity
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FontIdentity, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.identity =
        decoder.decodeStructPointer(FontIdentity);
    return val;
  };

  FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FontIdentity, val.identity);
  };
  function FontService_MatchFontWithFallback_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_MatchFontWithFallback_Params.prototype.initDefaults_ = function() {
    this.family = null;
    this.isBold = false;
    this.isItalic = false;
    this.charset = 0;
    this.fallbackFamilyType = 0;
  };
  FontService_MatchFontWithFallback_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_MatchFontWithFallback_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_MatchFontWithFallback_Params.family
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;





    return validator.validationError.NONE;
  };

  FontService_MatchFontWithFallback_Params.encodedSize = codec.kStructHeaderSize + 24;

  FontService_MatchFontWithFallback_Params.decode = function(decoder) {
    var packed;
    var val = new FontService_MatchFontWithFallback_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.family =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.isBold = (packed >> 0) & 1 ? true : false;
    val.isItalic = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.charset =
        decoder.decodeStruct(codec.Uint32);
    val.fallbackFamilyType =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FontService_MatchFontWithFallback_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_MatchFontWithFallback_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.family);
    packed = 0;
    packed |= (val.isBold & 1) << 0
    packed |= (val.isItalic & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint32, val.charset);
    encoder.encodeStruct(codec.Uint32, val.fallbackFamilyType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FontService_MatchFontWithFallback_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FontService_MatchFontWithFallback_ResponseParams.prototype.initDefaults_ = function() {
    this.fontFileHandle = null;
  };
  FontService_MatchFontWithFallback_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FontService_MatchFontWithFallback_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FontService_MatchFontWithFallback_ResponseParams.fontFileHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, read_only_file$.ReadOnlyFile, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FontService_MatchFontWithFallback_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FontService_MatchFontWithFallback_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FontService_MatchFontWithFallback_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fontFileHandle =
        decoder.decodeStructPointer(read_only_file$.ReadOnlyFile);
    return val;
  };

  FontService_MatchFontWithFallback_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FontService_MatchFontWithFallback_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(read_only_file$.ReadOnlyFile, val.fontFileHandle);
  };
  var kFontService_MatchFamilyName_Name = 1952122973;
  var kFontService_OpenStream_Name = 1998544285;
  var kFontService_FallbackFontForCharacter_Name = 2131263748;
  var kFontService_FontRenderStyleForStrike_Name = 1897035476;
  var kFontService_MatchFontByPostscriptNameOrFullFontName_Name = 2036210791;
  var kFontService_MatchFontWithFallback_Name = 1141029189;

  function FontServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FontService,
                                                   handleOrPtrInfo);
  }

  function FontServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FontService, associatedInterfacePtrInfo);
  }

  FontServiceAssociatedPtr.prototype =
      Object.create(FontServicePtr.prototype);
  FontServiceAssociatedPtr.prototype.constructor =
      FontServiceAssociatedPtr;

  function FontServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  FontServicePtr.prototype.matchFamilyName = function() {
    return FontServiceProxy.prototype.matchFamilyName
        .apply(this.ptr.getProxy(), arguments);
  };

  FontServiceProxy.prototype.matchFamilyName = function(familyName, style) {
    var params_ = new FontService_MatchFamilyName_Params();
    params_.familyName = familyName;
    params_.style = style;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFontService_MatchFamilyName_Name,
          codec.align(FontService_MatchFamilyName_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FontService_MatchFamilyName_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FontService_MatchFamilyName_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FontServicePtr.prototype.openStream = function() {
    return FontServiceProxy.prototype.openStream
        .apply(this.ptr.getProxy(), arguments);
  };

  FontServiceProxy.prototype.openStream = function(idNumber) {
    var params_ = new FontService_OpenStream_Params();
    params_.idNumber = idNumber;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFontService_OpenStream_Name,
          codec.align(FontService_OpenStream_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FontService_OpenStream_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FontService_OpenStream_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FontServicePtr.prototype.fallbackFontForCharacter = function() {
    return FontServiceProxy.prototype.fallbackFontForCharacter
        .apply(this.ptr.getProxy(), arguments);
  };

  FontServiceProxy.prototype.fallbackFontForCharacter = function(character, locale) {
    var params_ = new FontService_FallbackFontForCharacter_Params();
    params_.character = character;
    params_.locale = locale;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFontService_FallbackFontForCharacter_Name,
          codec.align(FontService_FallbackFontForCharacter_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FontService_FallbackFontForCharacter_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FontService_FallbackFontForCharacter_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FontServicePtr.prototype.fontRenderStyleForStrike = function() {
    return FontServiceProxy.prototype.fontRenderStyleForStrike
        .apply(this.ptr.getProxy(), arguments);
  };

  FontServiceProxy.prototype.fontRenderStyleForStrike = function(family, size, isItalic, isBold, deviceScaleFactor) {
    var params_ = new FontService_FontRenderStyleForStrike_Params();
    params_.family = family;
    params_.size = size;
    params_.isItalic = isItalic;
    params_.isBold = isBold;
    params_.deviceScaleFactor = deviceScaleFactor;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFontService_FontRenderStyleForStrike_Name,
          codec.align(FontService_FontRenderStyleForStrike_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FontService_FontRenderStyleForStrike_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FontService_FontRenderStyleForStrike_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FontServicePtr.prototype.matchFontByPostscriptNameOrFullFontName = function() {
    return FontServiceProxy.prototype.matchFontByPostscriptNameOrFullFontName
        .apply(this.ptr.getProxy(), arguments);
  };

  FontServiceProxy.prototype.matchFontByPostscriptNameOrFullFontName = function(postscriptNameOrFullFontName) {
    var params_ = new FontService_MatchFontByPostscriptNameOrFullFontName_Params();
    params_.postscriptNameOrFullFontName = postscriptNameOrFullFontName;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFontService_MatchFontByPostscriptNameOrFullFontName_Name,
          codec.align(FontService_MatchFontByPostscriptNameOrFullFontName_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FontService_MatchFontByPostscriptNameOrFullFontName_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FontServicePtr.prototype.matchFontWithFallback = function() {
    return FontServiceProxy.prototype.matchFontWithFallback
        .apply(this.ptr.getProxy(), arguments);
  };

  FontServiceProxy.prototype.matchFontWithFallback = function(family, isBold, isItalic, charset, fallbackFamilyType) {
    var params_ = new FontService_MatchFontWithFallback_Params();
    params_.family = family;
    params_.isBold = isBold;
    params_.isItalic = isItalic;
    params_.charset = charset;
    params_.fallbackFamilyType = fallbackFamilyType;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFontService_MatchFontWithFallback_Name,
          codec.align(FontService_MatchFontWithFallback_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FontService_MatchFontWithFallback_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FontService_MatchFontWithFallback_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function FontServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  FontServiceStub.prototype.matchFamilyName = function(familyName, style) {
    return this.delegate_ && this.delegate_.matchFamilyName && this.delegate_.matchFamilyName(familyName, style);
  }
  FontServiceStub.prototype.openStream = function(idNumber) {
    return this.delegate_ && this.delegate_.openStream && this.delegate_.openStream(idNumber);
  }
  FontServiceStub.prototype.fallbackFontForCharacter = function(character, locale) {
    return this.delegate_ && this.delegate_.fallbackFontForCharacter && this.delegate_.fallbackFontForCharacter(character, locale);
  }
  FontServiceStub.prototype.fontRenderStyleForStrike = function(family, size, isItalic, isBold, deviceScaleFactor) {
    return this.delegate_ && this.delegate_.fontRenderStyleForStrike && this.delegate_.fontRenderStyleForStrike(family, size, isItalic, isBold, deviceScaleFactor);
  }
  FontServiceStub.prototype.matchFontByPostscriptNameOrFullFontName = function(postscriptNameOrFullFontName) {
    return this.delegate_ && this.delegate_.matchFontByPostscriptNameOrFullFontName && this.delegate_.matchFontByPostscriptNameOrFullFontName(postscriptNameOrFullFontName);
  }
  FontServiceStub.prototype.matchFontWithFallback = function(family, isBold, isItalic, charset, fallbackFamilyType) {
    return this.delegate_ && this.delegate_.matchFontWithFallback && this.delegate_.matchFontWithFallback(family, isBold, isItalic, charset, fallbackFamilyType);
  }

  FontServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  FontServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFontService_MatchFamilyName_Name:
      var params = reader.decodeStruct(FontService_MatchFamilyName_Params);
      this.matchFamilyName(params.familyName, params.style).then(function(response) {
        var responseParams =
            new FontService_MatchFamilyName_ResponseParams();
        responseParams.identity = response.identity;
        responseParams.familyName = response.familyName;
        responseParams.style = response.style;
        var builder = new codec.MessageV1Builder(
            kFontService_MatchFamilyName_Name,
            codec.align(FontService_MatchFamilyName_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FontService_MatchFamilyName_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFontService_OpenStream_Name:
      var params = reader.decodeStruct(FontService_OpenStream_Params);
      this.openStream(params.idNumber).then(function(response) {
        var responseParams =
            new FontService_OpenStream_ResponseParams();
        responseParams.fontHandle = response.fontHandle;
        var builder = new codec.MessageV1Builder(
            kFontService_OpenStream_Name,
            codec.align(FontService_OpenStream_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FontService_OpenStream_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFontService_FallbackFontForCharacter_Name:
      var params = reader.decodeStruct(FontService_FallbackFontForCharacter_Params);
      this.fallbackFontForCharacter(params.character, params.locale).then(function(response) {
        var responseParams =
            new FontService_FallbackFontForCharacter_ResponseParams();
        responseParams.identity = response.identity;
        responseParams.familyName = response.familyName;
        responseParams.isBold = response.isBold;
        responseParams.isItalic = response.isItalic;
        var builder = new codec.MessageV1Builder(
            kFontService_FallbackFontForCharacter_Name,
            codec.align(FontService_FallbackFontForCharacter_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FontService_FallbackFontForCharacter_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFontService_FontRenderStyleForStrike_Name:
      var params = reader.decodeStruct(FontService_FontRenderStyleForStrike_Params);
      this.fontRenderStyleForStrike(params.family, params.size, params.isItalic, params.isBold, params.deviceScaleFactor).then(function(response) {
        var responseParams =
            new FontService_FontRenderStyleForStrike_ResponseParams();
        responseParams.fontRenderStyle = response.fontRenderStyle;
        var builder = new codec.MessageV1Builder(
            kFontService_FontRenderStyleForStrike_Name,
            codec.align(FontService_FontRenderStyleForStrike_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FontService_FontRenderStyleForStrike_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFontService_MatchFontByPostscriptNameOrFullFontName_Name:
      var params = reader.decodeStruct(FontService_MatchFontByPostscriptNameOrFullFontName_Params);
      this.matchFontByPostscriptNameOrFullFontName(params.postscriptNameOrFullFontName).then(function(response) {
        var responseParams =
            new FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams();
        responseParams.identity = response.identity;
        var builder = new codec.MessageV1Builder(
            kFontService_MatchFontByPostscriptNameOrFullFontName_Name,
            codec.align(FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFontService_MatchFontWithFallback_Name:
      var params = reader.decodeStruct(FontService_MatchFontWithFallback_Params);
      this.matchFontWithFallback(params.family, params.isBold, params.isItalic, params.charset, params.fallbackFamilyType).then(function(response) {
        var responseParams =
            new FontService_MatchFontWithFallback_ResponseParams();
        responseParams.fontFileHandle = response.fontFileHandle;
        var builder = new codec.MessageV1Builder(
            kFontService_MatchFontWithFallback_Name,
            codec.align(FontService_MatchFontWithFallback_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FontService_MatchFontWithFallback_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFontServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFontService_MatchFamilyName_Name:
        if (message.expectsResponse())
          paramsClass = FontService_MatchFamilyName_Params;
      break;
      case kFontService_OpenStream_Name:
        if (message.expectsResponse())
          paramsClass = FontService_OpenStream_Params;
      break;
      case kFontService_FallbackFontForCharacter_Name:
        if (message.expectsResponse())
          paramsClass = FontService_FallbackFontForCharacter_Params;
      break;
      case kFontService_FontRenderStyleForStrike_Name:
        if (message.expectsResponse())
          paramsClass = FontService_FontRenderStyleForStrike_Params;
      break;
      case kFontService_MatchFontByPostscriptNameOrFullFontName_Name:
        if (message.expectsResponse())
          paramsClass = FontService_MatchFontByPostscriptNameOrFullFontName_Params;
      break;
      case kFontService_MatchFontWithFallback_Name:
        if (message.expectsResponse())
          paramsClass = FontService_MatchFontWithFallback_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFontServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFontService_MatchFamilyName_Name:
        if (message.isResponse())
          paramsClass = FontService_MatchFamilyName_ResponseParams;
        break;
      case kFontService_OpenStream_Name:
        if (message.isResponse())
          paramsClass = FontService_OpenStream_ResponseParams;
        break;
      case kFontService_FallbackFontForCharacter_Name:
        if (message.isResponse())
          paramsClass = FontService_FallbackFontForCharacter_ResponseParams;
        break;
      case kFontService_FontRenderStyleForStrike_Name:
        if (message.isResponse())
          paramsClass = FontService_FontRenderStyleForStrike_ResponseParams;
        break;
      case kFontService_MatchFontByPostscriptNameOrFullFontName_Name:
        if (message.isResponse())
          paramsClass = FontService_MatchFontByPostscriptNameOrFullFontName_ResponseParams;
        break;
      case kFontService_MatchFontWithFallback_Name:
        if (message.isResponse())
          paramsClass = FontService_MatchFontWithFallback_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var FontService = {
    name: 'font_service.mojom.FontService',
    kVersion: 0,
    ptrClass: FontServicePtr,
    proxyClass: FontServiceProxy,
    stubClass: FontServiceStub,
    validateRequest: validateFontServiceRequest,
    validateResponse: validateFontServiceResponse,
  };
  FontServiceStub.prototype.validator = validateFontServiceRequest;
  FontServiceProxy.prototype.validator = validateFontServiceResponse;
  exports.TypefaceSlant = TypefaceSlant;
  exports.RenderStyleSwitch = RenderStyleSwitch;
  exports.TypefaceStyle = TypefaceStyle;
  exports.FontIdentity = FontIdentity;
  exports.FontRenderStyle = FontRenderStyle;
  exports.FontService = FontService;
  exports.FontServicePtr = FontServicePtr;
  exports.FontServiceAssociatedPtr = FontServiceAssociatedPtr;
})();