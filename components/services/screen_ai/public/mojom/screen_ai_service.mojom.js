// components/services/screen_ai/public/mojom/screen_ai_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/services/screen_ai/public/mojom/screen_ai_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('screenAi.mojom');
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../../../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var read_only_file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_file.mojom', '../../../../../mojo/public/mojom/base/read_only_file.mojom.js');
  }
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var bitmap$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/bitmap.mojom', '../../../../../skia/public/mojom/bitmap.mojom.js');
  }
  var ax_tree_id$ =
      mojo.internal.exposeNamespace('ax.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/accessibility/mojom/ax_tree_id.mojom', '../../../../../ui/accessibility/mojom/ax_tree_id.mojom.js');
  }
  var ax_tree_update$ =
      mojo.internal.exposeNamespace('ax.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/accessibility/mojom/ax_tree_update.mojom', '../../../../../ui/accessibility/mojom/ax_tree_update.mojom.js');
  }



  function VisualAnnotation(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VisualAnnotation.prototype.initDefaults_ = function() {
    this.lines = null;
  };
  VisualAnnotation.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VisualAnnotation.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VisualAnnotation.lines
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(LineBox), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VisualAnnotation.encodedSize = codec.kStructHeaderSize + 8;

  VisualAnnotation.decode = function(decoder) {
    var packed;
    var val = new VisualAnnotation();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.lines =
        decoder.decodeArrayPointer(new codec.PointerTo(LineBox));
    return val;
  };

  VisualAnnotation.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VisualAnnotation.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(LineBox), val.lines);
  };
  function LineBox(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LineBox.prototype.initDefaults_ = function() {
    this.words = null;
    this.textLine = null;
    this.language = null;
    this.blockId = 0;
    this.orderWithinBlock = 0;
  };
  LineBox.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LineBox.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LineBox.words
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(WordBox), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LineBox.textLine
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate LineBox.language
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  LineBox.encodedSize = codec.kStructHeaderSize + 32;

  LineBox.decode = function(decoder) {
    var packed;
    var val = new LineBox();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.words =
        decoder.decodeArrayPointer(new codec.PointerTo(WordBox));
    val.textLine =
        decoder.decodeStruct(codec.String);
    val.language =
        decoder.decodeStruct(codec.String);
    val.blockId =
        decoder.decodeStruct(codec.Int32);
    val.orderWithinBlock =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  LineBox.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LineBox.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(WordBox), val.words);
    encoder.encodeStruct(codec.String, val.textLine);
    encoder.encodeStruct(codec.String, val.language);
    encoder.encodeStruct(codec.Int32, val.blockId);
    encoder.encodeStruct(codec.Int32, val.orderWithinBlock);
  };
  function WordBox(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WordBox.prototype.initDefaults_ = function() {
    this.word = null;
    this.dictionaryWord = false;
    this.language = null;
  };
  WordBox.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WordBox.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WordBox.word
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate WordBox.language
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WordBox.encodedSize = codec.kStructHeaderSize + 24;

  WordBox.decode = function(decoder) {
    var packed;
    var val = new WordBox();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.word =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.dictionaryWord = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.language =
        decoder.decodeStruct(codec.String);
    return val;
  };

  WordBox.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WordBox.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.word);
    packed = 0;
    packed |= (val.dictionaryWord & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.language);
  };
  function ScreenAIAnnotator_ExtractSemanticLayout_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenAIAnnotator_ExtractSemanticLayout_Params.prototype.initDefaults_ = function() {
    this.image = null;
    this.parentTreeId = null;
  };
  ScreenAIAnnotator_ExtractSemanticLayout_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenAIAnnotator_ExtractSemanticLayout_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIAnnotator_ExtractSemanticLayout_Params.image
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, bitmap$.BitmapN32, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIAnnotator_ExtractSemanticLayout_Params.parentTreeId
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 8, ax_tree_id$.AXTreeID, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScreenAIAnnotator_ExtractSemanticLayout_Params.encodedSize = codec.kStructHeaderSize + 24;

  ScreenAIAnnotator_ExtractSemanticLayout_Params.decode = function(decoder) {
    var packed;
    var val = new ScreenAIAnnotator_ExtractSemanticLayout_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.image =
        decoder.decodeStructPointer(bitmap$.BitmapN32);
    val.parentTreeId =
        decoder.decodeStruct(ax_tree_id$.AXTreeID);
    return val;
  };

  ScreenAIAnnotator_ExtractSemanticLayout_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenAIAnnotator_ExtractSemanticLayout_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(bitmap$.BitmapN32, val.image);
    encoder.encodeStruct(ax_tree_id$.AXTreeID, val.parentTreeId);
  };
  function ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams.prototype.initDefaults_ = function() {
    this.childTreeId = null;
  };
  ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams.childTreeId
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, ax_tree_id$.AXTreeID, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.childTreeId =
        decoder.decodeStruct(ax_tree_id$.AXTreeID);
    return val;
  };

  ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(ax_tree_id$.AXTreeID, val.childTreeId);
  };
  function ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params.prototype.initDefaults_ = function() {
    this.image = null;
  };
  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params.image
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, bitmap$.BitmapN32, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params.encodedSize = codec.kStructHeaderSize + 8;

  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params.decode = function(decoder) {
    var packed;
    var val = new ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.image =
        decoder.decodeStructPointer(bitmap$.BitmapN32);
    return val;
  };

  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(bitmap$.BitmapN32, val.image);
  };
  function ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams.prototype.initDefaults_ = function() {
    this.update = null;
  };
  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams.update
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ax_tree_update$.AXTreeUpdate, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.update =
        decoder.decodeStructPointer(ax_tree_update$.AXTreeUpdate);
    return val;
  };

  ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ax_tree_update$.AXTreeUpdate, val.update);
  };
  function ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params.prototype.initDefaults_ = function() {
    this.image = null;
  };
  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params.image
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, bitmap$.BitmapN32, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params.encodedSize = codec.kStructHeaderSize + 8;

  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params.decode = function(decoder) {
    var packed;
    var val = new ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.image =
        decoder.decodeStructPointer(bitmap$.BitmapN32);
    return val;
  };

  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(bitmap$.BitmapN32, val.image);
  };
  function ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams.prototype.initDefaults_ = function() {
    this.visualAnnotation = null;
  };
  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams.visualAnnotation
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VisualAnnotation, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.visualAnnotation =
        decoder.decodeStructPointer(VisualAnnotation);
    return val;
  };

  ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VisualAnnotation, val.visualAnnotation);
  };
  function ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params.prototype.initDefaults_ = function() {
    this.update = null;
  };
  ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params.update
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ax_tree_update$.AXTreeUpdate, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params.encodedSize = codec.kStructHeaderSize + 8;

  ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params.decode = function(decoder) {
    var packed;
    var val = new ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.update =
        decoder.decodeStructPointer(ax_tree_update$.AXTreeUpdate);
    return val;
  };

  ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ax_tree_update$.AXTreeUpdate, val.update);
  };
  function Screen2xMainContentExtractor_ExtractMainContent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Screen2xMainContentExtractor_ExtractMainContent_Params.prototype.initDefaults_ = function() {
    this.snapshot = null;
    this.ukmSourceId = 0;
  };
  Screen2xMainContentExtractor_ExtractMainContent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Screen2xMainContentExtractor_ExtractMainContent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Screen2xMainContentExtractor_ExtractMainContent_Params.snapshot
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ax_tree_update$.AXTreeUpdate, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Screen2xMainContentExtractor_ExtractMainContent_Params.encodedSize = codec.kStructHeaderSize + 16;

  Screen2xMainContentExtractor_ExtractMainContent_Params.decode = function(decoder) {
    var packed;
    var val = new Screen2xMainContentExtractor_ExtractMainContent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.snapshot =
        decoder.decodeStructPointer(ax_tree_update$.AXTreeUpdate);
    val.ukmSourceId =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  Screen2xMainContentExtractor_ExtractMainContent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Screen2xMainContentExtractor_ExtractMainContent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ax_tree_update$.AXTreeUpdate, val.snapshot);
    encoder.encodeStruct(codec.Int64, val.ukmSourceId);
  };
  function Screen2xMainContentExtractor_ExtractMainContent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Screen2xMainContentExtractor_ExtractMainContent_ResponseParams.prototype.initDefaults_ = function() {
    this.contentNodeIds = null;
  };
  Screen2xMainContentExtractor_ExtractMainContent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Screen2xMainContentExtractor_ExtractMainContent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Screen2xMainContentExtractor_ExtractMainContent_ResponseParams.contentNodeIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Screen2xMainContentExtractor_ExtractMainContent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Screen2xMainContentExtractor_ExtractMainContent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Screen2xMainContentExtractor_ExtractMainContent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.contentNodeIds =
        decoder.decodeArrayPointer(codec.Int32);
    return val;
  };

  Screen2xMainContentExtractor_ExtractMainContent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Screen2xMainContentExtractor_ExtractMainContent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Int32, val.contentNodeIds);
  };
  function OCRService_BindAnnotator_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  OCRService_BindAnnotator_Params.prototype.initDefaults_ = function() {
    this.annotator = new bindings.InterfaceRequest();
  };
  OCRService_BindAnnotator_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  OCRService_BindAnnotator_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate OCRService_BindAnnotator_Params.annotator
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  OCRService_BindAnnotator_Params.encodedSize = codec.kStructHeaderSize + 8;

  OCRService_BindAnnotator_Params.decode = function(decoder) {
    var packed;
    var val = new OCRService_BindAnnotator_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.annotator =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  OCRService_BindAnnotator_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(OCRService_BindAnnotator_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.annotator);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function OCRService_BindAnnotatorClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  OCRService_BindAnnotatorClient_Params.prototype.initDefaults_ = function() {
    this.annotatorClient = new ScreenAIAnnotatorClientPtr();
  };
  OCRService_BindAnnotatorClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  OCRService_BindAnnotatorClient_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate OCRService_BindAnnotatorClient_Params.annotatorClient
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  OCRService_BindAnnotatorClient_Params.encodedSize = codec.kStructHeaderSize + 8;

  OCRService_BindAnnotatorClient_Params.decode = function(decoder) {
    var packed;
    var val = new OCRService_BindAnnotatorClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.annotatorClient =
        decoder.decodeStruct(new codec.Interface(ScreenAIAnnotatorClientPtr));
    return val;
  };

  OCRService_BindAnnotatorClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(OCRService_BindAnnotatorClient_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(ScreenAIAnnotatorClientPtr), val.annotatorClient);
  };
  function MainContentExtractionService_BindMainContentExtractor_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MainContentExtractionService_BindMainContentExtractor_Params.prototype.initDefaults_ = function() {
    this.mainContentExtractor = new bindings.InterfaceRequest();
  };
  MainContentExtractionService_BindMainContentExtractor_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MainContentExtractionService_BindMainContentExtractor_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MainContentExtractionService_BindMainContentExtractor_Params.mainContentExtractor
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MainContentExtractionService_BindMainContentExtractor_Params.encodedSize = codec.kStructHeaderSize + 8;

  MainContentExtractionService_BindMainContentExtractor_Params.decode = function(decoder) {
    var packed;
    var val = new MainContentExtractionService_BindMainContentExtractor_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.mainContentExtractor =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  MainContentExtractionService_BindMainContentExtractor_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MainContentExtractionService_BindMainContentExtractor_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.mainContentExtractor);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ScreenAIServiceFactory_InitializeOCR_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenAIServiceFactory_InitializeOCR_Params.prototype.initDefaults_ = function() {
    this.libraryPath = null;
    this.ocrServiceReceiver = new bindings.InterfaceRequest();
  };
  ScreenAIServiceFactory_InitializeOCR_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenAIServiceFactory_InitializeOCR_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIServiceFactory_InitializeOCR_Params.libraryPath
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIServiceFactory_InitializeOCR_Params.ocrServiceReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScreenAIServiceFactory_InitializeOCR_Params.encodedSize = codec.kStructHeaderSize + 16;

  ScreenAIServiceFactory_InitializeOCR_Params.decode = function(decoder) {
    var packed;
    var val = new ScreenAIServiceFactory_InitializeOCR_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.libraryPath =
        decoder.decodeStructPointer(file_path$.FilePath);
    val.ocrServiceReceiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ScreenAIServiceFactory_InitializeOCR_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenAIServiceFactory_InitializeOCR_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file_path$.FilePath, val.libraryPath);
    encoder.encodeStruct(codec.InterfaceRequest, val.ocrServiceReceiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ScreenAIServiceFactory_InitializeOCR_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenAIServiceFactory_InitializeOCR_ResponseParams.prototype.initDefaults_ = function() {
    this.initialized = false;
  };
  ScreenAIServiceFactory_InitializeOCR_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenAIServiceFactory_InitializeOCR_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ScreenAIServiceFactory_InitializeOCR_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ScreenAIServiceFactory_InitializeOCR_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ScreenAIServiceFactory_InitializeOCR_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.initialized = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ScreenAIServiceFactory_InitializeOCR_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenAIServiceFactory_InitializeOCR_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.initialized & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ScreenAIServiceFactory_InitializeMainContentExtraction_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenAIServiceFactory_InitializeMainContentExtraction_Params.prototype.initDefaults_ = function() {
    this.libraryPath = null;
    this.modelFiles = null;
    this.mainContentExtractorService = new bindings.InterfaceRequest();
  };
  ScreenAIServiceFactory_InitializeMainContentExtraction_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenAIServiceFactory_InitializeMainContentExtraction_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIServiceFactory_InitializeMainContentExtraction_Params.libraryPath
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIServiceFactory_InitializeMainContentExtraction_Params.modelFiles
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, codec.String, new codec.PointerTo(read_only_file$.ReadOnlyFile), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenAIServiceFactory_InitializeMainContentExtraction_Params.mainContentExtractorService
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScreenAIServiceFactory_InitializeMainContentExtraction_Params.encodedSize = codec.kStructHeaderSize + 24;

  ScreenAIServiceFactory_InitializeMainContentExtraction_Params.decode = function(decoder) {
    var packed;
    var val = new ScreenAIServiceFactory_InitializeMainContentExtraction_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.libraryPath =
        decoder.decodeStructPointer(file_path$.FilePath);
    val.modelFiles =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(read_only_file$.ReadOnlyFile));
    val.mainContentExtractorService =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ScreenAIServiceFactory_InitializeMainContentExtraction_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenAIServiceFactory_InitializeMainContentExtraction_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file_path$.FilePath, val.libraryPath);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(read_only_file$.ReadOnlyFile), val.modelFiles);
    encoder.encodeStruct(codec.InterfaceRequest, val.mainContentExtractorService);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams.prototype.initDefaults_ = function() {
    this.initialized = false;
  };
  ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.initialized = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.initialized & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kScreenAIAnnotator_ExtractSemanticLayout_Name = 2024061469;
  var kScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Name = 1660724231;
  var kScreenAIAnnotator_PerformOcrAndReturnAnnotation_Name = 186825664;

  function ScreenAIAnnotatorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ScreenAIAnnotator,
                                                   handleOrPtrInfo);
  }

  function ScreenAIAnnotatorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ScreenAIAnnotator, associatedInterfacePtrInfo);
  }

  ScreenAIAnnotatorAssociatedPtr.prototype =
      Object.create(ScreenAIAnnotatorPtr.prototype);
  ScreenAIAnnotatorAssociatedPtr.prototype.constructor =
      ScreenAIAnnotatorAssociatedPtr;

  function ScreenAIAnnotatorProxy(receiver) {
    this.receiver_ = receiver;
  }
  ScreenAIAnnotatorPtr.prototype.extractSemanticLayout = function() {
    return ScreenAIAnnotatorProxy.prototype.extractSemanticLayout
        .apply(this.ptr.getProxy(), arguments);
  };

  ScreenAIAnnotatorProxy.prototype.extractSemanticLayout = function(image, parentTreeId) {
    var params_ = new ScreenAIAnnotator_ExtractSemanticLayout_Params();
    params_.image = image;
    params_.parentTreeId = parentTreeId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kScreenAIAnnotator_ExtractSemanticLayout_Name,
          codec.align(ScreenAIAnnotator_ExtractSemanticLayout_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ScreenAIAnnotator_ExtractSemanticLayout_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ScreenAIAnnotatorPtr.prototype.performOcrAndReturnAXTreeUpdate = function() {
    return ScreenAIAnnotatorProxy.prototype.performOcrAndReturnAXTreeUpdate
        .apply(this.ptr.getProxy(), arguments);
  };

  ScreenAIAnnotatorProxy.prototype.performOcrAndReturnAXTreeUpdate = function(image) {
    var params_ = new ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params();
    params_.image = image;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Name,
          codec.align(ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ScreenAIAnnotatorPtr.prototype.performOcrAndReturnAnnotation = function() {
    return ScreenAIAnnotatorProxy.prototype.performOcrAndReturnAnnotation
        .apply(this.ptr.getProxy(), arguments);
  };

  ScreenAIAnnotatorProxy.prototype.performOcrAndReturnAnnotation = function(image) {
    var params_ = new ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params();
    params_.image = image;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kScreenAIAnnotator_PerformOcrAndReturnAnnotation_Name,
          codec.align(ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ScreenAIAnnotatorStub(delegate) {
    this.delegate_ = delegate;
  }
  ScreenAIAnnotatorStub.prototype.extractSemanticLayout = function(image, parentTreeId) {
    return this.delegate_ && this.delegate_.extractSemanticLayout && this.delegate_.extractSemanticLayout(image, parentTreeId);
  }
  ScreenAIAnnotatorStub.prototype.performOcrAndReturnAXTreeUpdate = function(image) {
    return this.delegate_ && this.delegate_.performOcrAndReturnAXTreeUpdate && this.delegate_.performOcrAndReturnAXTreeUpdate(image);
  }
  ScreenAIAnnotatorStub.prototype.performOcrAndReturnAnnotation = function(image) {
    return this.delegate_ && this.delegate_.performOcrAndReturnAnnotation && this.delegate_.performOcrAndReturnAnnotation(image);
  }

  ScreenAIAnnotatorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ScreenAIAnnotatorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kScreenAIAnnotator_ExtractSemanticLayout_Name:
      var params = reader.decodeStruct(ScreenAIAnnotator_ExtractSemanticLayout_Params);
      this.extractSemanticLayout(params.image, params.parentTreeId).then(function(response) {
        var responseParams =
            new ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams();
        responseParams.childTreeId = response.childTreeId;
        var builder = new codec.MessageV1Builder(
            kScreenAIAnnotator_ExtractSemanticLayout_Name,
            codec.align(ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Name:
      var params = reader.decodeStruct(ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params);
      this.performOcrAndReturnAXTreeUpdate(params.image).then(function(response) {
        var responseParams =
            new ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams();
        responseParams.update = response.update;
        var builder = new codec.MessageV1Builder(
            kScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Name,
            codec.align(ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kScreenAIAnnotator_PerformOcrAndReturnAnnotation_Name:
      var params = reader.decodeStruct(ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params);
      this.performOcrAndReturnAnnotation(params.image).then(function(response) {
        var responseParams =
            new ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams();
        responseParams.visualAnnotation = response.visualAnnotation;
        var builder = new codec.MessageV1Builder(
            kScreenAIAnnotator_PerformOcrAndReturnAnnotation_Name,
            codec.align(ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateScreenAIAnnotatorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kScreenAIAnnotator_ExtractSemanticLayout_Name:
        if (message.expectsResponse())
          paramsClass = ScreenAIAnnotator_ExtractSemanticLayout_Params;
      break;
      case kScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Name:
        if (message.expectsResponse())
          paramsClass = ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Params;
      break;
      case kScreenAIAnnotator_PerformOcrAndReturnAnnotation_Name:
        if (message.expectsResponse())
          paramsClass = ScreenAIAnnotator_PerformOcrAndReturnAnnotation_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateScreenAIAnnotatorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kScreenAIAnnotator_ExtractSemanticLayout_Name:
        if (message.isResponse())
          paramsClass = ScreenAIAnnotator_ExtractSemanticLayout_ResponseParams;
        break;
      case kScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_Name:
        if (message.isResponse())
          paramsClass = ScreenAIAnnotator_PerformOcrAndReturnAXTreeUpdate_ResponseParams;
        break;
      case kScreenAIAnnotator_PerformOcrAndReturnAnnotation_Name:
        if (message.isResponse())
          paramsClass = ScreenAIAnnotator_PerformOcrAndReturnAnnotation_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ScreenAIAnnotator = {
    name: 'screen_ai.mojom.ScreenAIAnnotator',
    kVersion: 0,
    ptrClass: ScreenAIAnnotatorPtr,
    proxyClass: ScreenAIAnnotatorProxy,
    stubClass: ScreenAIAnnotatorStub,
    validateRequest: validateScreenAIAnnotatorRequest,
    validateResponse: validateScreenAIAnnotatorResponse,
  };
  ScreenAIAnnotatorStub.prototype.validator = validateScreenAIAnnotatorRequest;
  ScreenAIAnnotatorProxy.prototype.validator = validateScreenAIAnnotatorResponse;
  var kScreenAIAnnotatorClient_HandleAXTreeUpdate_Name = 438241824;

  function ScreenAIAnnotatorClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ScreenAIAnnotatorClient,
                                                   handleOrPtrInfo);
  }

  function ScreenAIAnnotatorClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ScreenAIAnnotatorClient, associatedInterfacePtrInfo);
  }

  ScreenAIAnnotatorClientAssociatedPtr.prototype =
      Object.create(ScreenAIAnnotatorClientPtr.prototype);
  ScreenAIAnnotatorClientAssociatedPtr.prototype.constructor =
      ScreenAIAnnotatorClientAssociatedPtr;

  function ScreenAIAnnotatorClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  ScreenAIAnnotatorClientPtr.prototype.handleAXTreeUpdate = function() {
    return ScreenAIAnnotatorClientProxy.prototype.handleAXTreeUpdate
        .apply(this.ptr.getProxy(), arguments);
  };

  ScreenAIAnnotatorClientProxy.prototype.handleAXTreeUpdate = function(update) {
    var params_ = new ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params();
    params_.update = update;
    var builder = new codec.MessageV0Builder(
        kScreenAIAnnotatorClient_HandleAXTreeUpdate_Name,
        codec.align(ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params.encodedSize));
    builder.encodeStruct(ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ScreenAIAnnotatorClientStub(delegate) {
    this.delegate_ = delegate;
  }
  ScreenAIAnnotatorClientStub.prototype.handleAXTreeUpdate = function(update) {
    return this.delegate_ && this.delegate_.handleAXTreeUpdate && this.delegate_.handleAXTreeUpdate(update);
  }

  ScreenAIAnnotatorClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kScreenAIAnnotatorClient_HandleAXTreeUpdate_Name:
      var params = reader.decodeStruct(ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params);
      this.handleAXTreeUpdate(params.update);
      return true;
    default:
      return false;
    }
  };

  ScreenAIAnnotatorClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateScreenAIAnnotatorClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kScreenAIAnnotatorClient_HandleAXTreeUpdate_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ScreenAIAnnotatorClient_HandleAXTreeUpdate_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateScreenAIAnnotatorClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ScreenAIAnnotatorClient = {
    name: 'screen_ai.mojom.ScreenAIAnnotatorClient',
    kVersion: 0,
    ptrClass: ScreenAIAnnotatorClientPtr,
    proxyClass: ScreenAIAnnotatorClientProxy,
    stubClass: ScreenAIAnnotatorClientStub,
    validateRequest: validateScreenAIAnnotatorClientRequest,
    validateResponse: null,
  };
  ScreenAIAnnotatorClientStub.prototype.validator = validateScreenAIAnnotatorClientRequest;
  ScreenAIAnnotatorClientProxy.prototype.validator = null;
  var kScreen2xMainContentExtractor_ExtractMainContent_Name = 1876817773;

  function Screen2xMainContentExtractorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Screen2xMainContentExtractor,
                                                   handleOrPtrInfo);
  }

  function Screen2xMainContentExtractorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Screen2xMainContentExtractor, associatedInterfacePtrInfo);
  }

  Screen2xMainContentExtractorAssociatedPtr.prototype =
      Object.create(Screen2xMainContentExtractorPtr.prototype);
  Screen2xMainContentExtractorAssociatedPtr.prototype.constructor =
      Screen2xMainContentExtractorAssociatedPtr;

  function Screen2xMainContentExtractorProxy(receiver) {
    this.receiver_ = receiver;
  }
  Screen2xMainContentExtractorPtr.prototype.extractMainContent = function() {
    return Screen2xMainContentExtractorProxy.prototype.extractMainContent
        .apply(this.ptr.getProxy(), arguments);
  };

  Screen2xMainContentExtractorProxy.prototype.extractMainContent = function(snapshot, ukmSourceId) {
    var params_ = new Screen2xMainContentExtractor_ExtractMainContent_Params();
    params_.snapshot = snapshot;
    params_.ukmSourceId = ukmSourceId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kScreen2xMainContentExtractor_ExtractMainContent_Name,
          codec.align(Screen2xMainContentExtractor_ExtractMainContent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Screen2xMainContentExtractor_ExtractMainContent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Screen2xMainContentExtractor_ExtractMainContent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function Screen2xMainContentExtractorStub(delegate) {
    this.delegate_ = delegate;
  }
  Screen2xMainContentExtractorStub.prototype.extractMainContent = function(snapshot, ukmSourceId) {
    return this.delegate_ && this.delegate_.extractMainContent && this.delegate_.extractMainContent(snapshot, ukmSourceId);
  }

  Screen2xMainContentExtractorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  Screen2xMainContentExtractorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kScreen2xMainContentExtractor_ExtractMainContent_Name:
      var params = reader.decodeStruct(Screen2xMainContentExtractor_ExtractMainContent_Params);
      this.extractMainContent(params.snapshot, params.ukmSourceId).then(function(response) {
        var responseParams =
            new Screen2xMainContentExtractor_ExtractMainContent_ResponseParams();
        responseParams.contentNodeIds = response.contentNodeIds;
        var builder = new codec.MessageV1Builder(
            kScreen2xMainContentExtractor_ExtractMainContent_Name,
            codec.align(Screen2xMainContentExtractor_ExtractMainContent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Screen2xMainContentExtractor_ExtractMainContent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateScreen2xMainContentExtractorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kScreen2xMainContentExtractor_ExtractMainContent_Name:
        if (message.expectsResponse())
          paramsClass = Screen2xMainContentExtractor_ExtractMainContent_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateScreen2xMainContentExtractorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kScreen2xMainContentExtractor_ExtractMainContent_Name:
        if (message.isResponse())
          paramsClass = Screen2xMainContentExtractor_ExtractMainContent_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Screen2xMainContentExtractor = {
    name: 'screen_ai.mojom.Screen2xMainContentExtractor',
    kVersion: 0,
    ptrClass: Screen2xMainContentExtractorPtr,
    proxyClass: Screen2xMainContentExtractorProxy,
    stubClass: Screen2xMainContentExtractorStub,
    validateRequest: validateScreen2xMainContentExtractorRequest,
    validateResponse: validateScreen2xMainContentExtractorResponse,
  };
  Screen2xMainContentExtractorStub.prototype.validator = validateScreen2xMainContentExtractorRequest;
  Screen2xMainContentExtractorProxy.prototype.validator = validateScreen2xMainContentExtractorResponse;
  var kOCRService_BindAnnotator_Name = 1469780791;
  var kOCRService_BindAnnotatorClient_Name = 1540656106;

  function OCRServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(OCRService,
                                                   handleOrPtrInfo);
  }

  function OCRServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        OCRService, associatedInterfacePtrInfo);
  }

  OCRServiceAssociatedPtr.prototype =
      Object.create(OCRServicePtr.prototype);
  OCRServiceAssociatedPtr.prototype.constructor =
      OCRServiceAssociatedPtr;

  function OCRServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  OCRServicePtr.prototype.bindAnnotator = function() {
    return OCRServiceProxy.prototype.bindAnnotator
        .apply(this.ptr.getProxy(), arguments);
  };

  OCRServiceProxy.prototype.bindAnnotator = function(annotator) {
    var params_ = new OCRService_BindAnnotator_Params();
    params_.annotator = annotator;
    var builder = new codec.MessageV0Builder(
        kOCRService_BindAnnotator_Name,
        codec.align(OCRService_BindAnnotator_Params.encodedSize));
    builder.encodeStruct(OCRService_BindAnnotator_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  OCRServicePtr.prototype.bindAnnotatorClient = function() {
    return OCRServiceProxy.prototype.bindAnnotatorClient
        .apply(this.ptr.getProxy(), arguments);
  };

  OCRServiceProxy.prototype.bindAnnotatorClient = function(annotatorClient) {
    var params_ = new OCRService_BindAnnotatorClient_Params();
    params_.annotatorClient = annotatorClient;
    var builder = new codec.MessageV0Builder(
        kOCRService_BindAnnotatorClient_Name,
        codec.align(OCRService_BindAnnotatorClient_Params.encodedSize));
    builder.encodeStruct(OCRService_BindAnnotatorClient_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function OCRServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  OCRServiceStub.prototype.bindAnnotator = function(annotator) {
    return this.delegate_ && this.delegate_.bindAnnotator && this.delegate_.bindAnnotator(annotator);
  }
  OCRServiceStub.prototype.bindAnnotatorClient = function(annotatorClient) {
    return this.delegate_ && this.delegate_.bindAnnotatorClient && this.delegate_.bindAnnotatorClient(annotatorClient);
  }

  OCRServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kOCRService_BindAnnotator_Name:
      var params = reader.decodeStruct(OCRService_BindAnnotator_Params);
      this.bindAnnotator(params.annotator);
      return true;
    case kOCRService_BindAnnotatorClient_Name:
      var params = reader.decodeStruct(OCRService_BindAnnotatorClient_Params);
      this.bindAnnotatorClient(params.annotatorClient);
      return true;
    default:
      return false;
    }
  };

  OCRServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateOCRServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kOCRService_BindAnnotator_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = OCRService_BindAnnotator_Params;
      break;
      case kOCRService_BindAnnotatorClient_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = OCRService_BindAnnotatorClient_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateOCRServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var OCRService = {
    name: 'screen_ai.mojom.OCRService',
    kVersion: 0,
    ptrClass: OCRServicePtr,
    proxyClass: OCRServiceProxy,
    stubClass: OCRServiceStub,
    validateRequest: validateOCRServiceRequest,
    validateResponse: null,
  };
  OCRServiceStub.prototype.validator = validateOCRServiceRequest;
  OCRServiceProxy.prototype.validator = null;
  var kMainContentExtractionService_BindMainContentExtractor_Name = 2017005666;

  function MainContentExtractionServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MainContentExtractionService,
                                                   handleOrPtrInfo);
  }

  function MainContentExtractionServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MainContentExtractionService, associatedInterfacePtrInfo);
  }

  MainContentExtractionServiceAssociatedPtr.prototype =
      Object.create(MainContentExtractionServicePtr.prototype);
  MainContentExtractionServiceAssociatedPtr.prototype.constructor =
      MainContentExtractionServiceAssociatedPtr;

  function MainContentExtractionServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  MainContentExtractionServicePtr.prototype.bindMainContentExtractor = function() {
    return MainContentExtractionServiceProxy.prototype.bindMainContentExtractor
        .apply(this.ptr.getProxy(), arguments);
  };

  MainContentExtractionServiceProxy.prototype.bindMainContentExtractor = function(mainContentExtractor) {
    var params_ = new MainContentExtractionService_BindMainContentExtractor_Params();
    params_.mainContentExtractor = mainContentExtractor;
    var builder = new codec.MessageV0Builder(
        kMainContentExtractionService_BindMainContentExtractor_Name,
        codec.align(MainContentExtractionService_BindMainContentExtractor_Params.encodedSize));
    builder.encodeStruct(MainContentExtractionService_BindMainContentExtractor_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MainContentExtractionServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  MainContentExtractionServiceStub.prototype.bindMainContentExtractor = function(mainContentExtractor) {
    return this.delegate_ && this.delegate_.bindMainContentExtractor && this.delegate_.bindMainContentExtractor(mainContentExtractor);
  }

  MainContentExtractionServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMainContentExtractionService_BindMainContentExtractor_Name:
      var params = reader.decodeStruct(MainContentExtractionService_BindMainContentExtractor_Params);
      this.bindMainContentExtractor(params.mainContentExtractor);
      return true;
    default:
      return false;
    }
  };

  MainContentExtractionServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMainContentExtractionServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMainContentExtractionService_BindMainContentExtractor_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MainContentExtractionService_BindMainContentExtractor_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMainContentExtractionServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MainContentExtractionService = {
    name: 'screen_ai.mojom.MainContentExtractionService',
    kVersion: 0,
    ptrClass: MainContentExtractionServicePtr,
    proxyClass: MainContentExtractionServiceProxy,
    stubClass: MainContentExtractionServiceStub,
    validateRequest: validateMainContentExtractionServiceRequest,
    validateResponse: null,
  };
  MainContentExtractionServiceStub.prototype.validator = validateMainContentExtractionServiceRequest;
  MainContentExtractionServiceProxy.prototype.validator = null;
  var kScreenAIServiceFactory_InitializeOCR_Name = 1326020407;
  var kScreenAIServiceFactory_InitializeMainContentExtraction_Name = 1928303048;

  function ScreenAIServiceFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ScreenAIServiceFactory,
                                                   handleOrPtrInfo);
  }

  function ScreenAIServiceFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ScreenAIServiceFactory, associatedInterfacePtrInfo);
  }

  ScreenAIServiceFactoryAssociatedPtr.prototype =
      Object.create(ScreenAIServiceFactoryPtr.prototype);
  ScreenAIServiceFactoryAssociatedPtr.prototype.constructor =
      ScreenAIServiceFactoryAssociatedPtr;

  function ScreenAIServiceFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  ScreenAIServiceFactoryPtr.prototype.initializeOCR = function() {
    return ScreenAIServiceFactoryProxy.prototype.initializeOCR
        .apply(this.ptr.getProxy(), arguments);
  };

  ScreenAIServiceFactoryProxy.prototype.initializeOCR = function(libraryPath, ocrServiceReceiver) {
    var params_ = new ScreenAIServiceFactory_InitializeOCR_Params();
    params_.libraryPath = libraryPath;
    params_.ocrServiceReceiver = ocrServiceReceiver;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kScreenAIServiceFactory_InitializeOCR_Name,
          codec.align(ScreenAIServiceFactory_InitializeOCR_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ScreenAIServiceFactory_InitializeOCR_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ScreenAIServiceFactory_InitializeOCR_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ScreenAIServiceFactoryPtr.prototype.initializeMainContentExtraction = function() {
    return ScreenAIServiceFactoryProxy.prototype.initializeMainContentExtraction
        .apply(this.ptr.getProxy(), arguments);
  };

  ScreenAIServiceFactoryProxy.prototype.initializeMainContentExtraction = function(libraryPath, modelFiles, mainContentExtractorService) {
    var params_ = new ScreenAIServiceFactory_InitializeMainContentExtraction_Params();
    params_.libraryPath = libraryPath;
    params_.modelFiles = modelFiles;
    params_.mainContentExtractorService = mainContentExtractorService;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kScreenAIServiceFactory_InitializeMainContentExtraction_Name,
          codec.align(ScreenAIServiceFactory_InitializeMainContentExtraction_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ScreenAIServiceFactory_InitializeMainContentExtraction_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ScreenAIServiceFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  ScreenAIServiceFactoryStub.prototype.initializeOCR = function(libraryPath, ocrServiceReceiver) {
    return this.delegate_ && this.delegate_.initializeOCR && this.delegate_.initializeOCR(libraryPath, ocrServiceReceiver);
  }
  ScreenAIServiceFactoryStub.prototype.initializeMainContentExtraction = function(libraryPath, modelFiles, mainContentExtractorService) {
    return this.delegate_ && this.delegate_.initializeMainContentExtraction && this.delegate_.initializeMainContentExtraction(libraryPath, modelFiles, mainContentExtractorService);
  }

  ScreenAIServiceFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ScreenAIServiceFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kScreenAIServiceFactory_InitializeOCR_Name:
      var params = reader.decodeStruct(ScreenAIServiceFactory_InitializeOCR_Params);
      this.initializeOCR(params.libraryPath, params.ocrServiceReceiver).then(function(response) {
        var responseParams =
            new ScreenAIServiceFactory_InitializeOCR_ResponseParams();
        responseParams.initialized = response.initialized;
        var builder = new codec.MessageV1Builder(
            kScreenAIServiceFactory_InitializeOCR_Name,
            codec.align(ScreenAIServiceFactory_InitializeOCR_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ScreenAIServiceFactory_InitializeOCR_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kScreenAIServiceFactory_InitializeMainContentExtraction_Name:
      var params = reader.decodeStruct(ScreenAIServiceFactory_InitializeMainContentExtraction_Params);
      this.initializeMainContentExtraction(params.libraryPath, params.modelFiles, params.mainContentExtractorService).then(function(response) {
        var responseParams =
            new ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams();
        responseParams.initialized = response.initialized;
        var builder = new codec.MessageV1Builder(
            kScreenAIServiceFactory_InitializeMainContentExtraction_Name,
            codec.align(ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateScreenAIServiceFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kScreenAIServiceFactory_InitializeOCR_Name:
        if (message.expectsResponse())
          paramsClass = ScreenAIServiceFactory_InitializeOCR_Params;
      break;
      case kScreenAIServiceFactory_InitializeMainContentExtraction_Name:
        if (message.expectsResponse())
          paramsClass = ScreenAIServiceFactory_InitializeMainContentExtraction_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateScreenAIServiceFactoryResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kScreenAIServiceFactory_InitializeOCR_Name:
        if (message.isResponse())
          paramsClass = ScreenAIServiceFactory_InitializeOCR_ResponseParams;
        break;
      case kScreenAIServiceFactory_InitializeMainContentExtraction_Name:
        if (message.isResponse())
          paramsClass = ScreenAIServiceFactory_InitializeMainContentExtraction_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ScreenAIServiceFactory = {
    name: 'screen_ai.mojom.ScreenAIServiceFactory',
    kVersion: 0,
    ptrClass: ScreenAIServiceFactoryPtr,
    proxyClass: ScreenAIServiceFactoryProxy,
    stubClass: ScreenAIServiceFactoryStub,
    validateRequest: validateScreenAIServiceFactoryRequest,
    validateResponse: validateScreenAIServiceFactoryResponse,
  };
  ScreenAIServiceFactoryStub.prototype.validator = validateScreenAIServiceFactoryRequest;
  ScreenAIServiceFactoryProxy.prototype.validator = validateScreenAIServiceFactoryResponse;
  exports.VisualAnnotation = VisualAnnotation;
  exports.LineBox = LineBox;
  exports.WordBox = WordBox;
  exports.ScreenAIAnnotator = ScreenAIAnnotator;
  exports.ScreenAIAnnotatorPtr = ScreenAIAnnotatorPtr;
  exports.ScreenAIAnnotatorAssociatedPtr = ScreenAIAnnotatorAssociatedPtr;
  exports.ScreenAIAnnotatorClient = ScreenAIAnnotatorClient;
  exports.ScreenAIAnnotatorClientPtr = ScreenAIAnnotatorClientPtr;
  exports.ScreenAIAnnotatorClientAssociatedPtr = ScreenAIAnnotatorClientAssociatedPtr;
  exports.Screen2xMainContentExtractor = Screen2xMainContentExtractor;
  exports.Screen2xMainContentExtractorPtr = Screen2xMainContentExtractorPtr;
  exports.Screen2xMainContentExtractorAssociatedPtr = Screen2xMainContentExtractorAssociatedPtr;
  exports.OCRService = OCRService;
  exports.OCRServicePtr = OCRServicePtr;
  exports.OCRServiceAssociatedPtr = OCRServiceAssociatedPtr;
  exports.MainContentExtractionService = MainContentExtractionService;
  exports.MainContentExtractionServicePtr = MainContentExtractionServicePtr;
  exports.MainContentExtractionServiceAssociatedPtr = MainContentExtractionServiceAssociatedPtr;
  exports.ScreenAIServiceFactory = ScreenAIServiceFactory;
  exports.ScreenAIServiceFactoryPtr = ScreenAIServiceFactoryPtr;
  exports.ScreenAIServiceFactoryAssociatedPtr = ScreenAIServiceFactoryAssociatedPtr;
})();