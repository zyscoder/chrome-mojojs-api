// components/services/paint_preview_compositor/public/mojom/paint_preview_compositor.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/services/paint_preview_compositor/public/mojom/paint_preview_compositor.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('paintPreview.mojom');
  var discardable_shared_memory_manager$ =
      mojo.internal.exposeNamespace('discardableMemory.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/discardable_memory/public/mojom/discardable_shared_memory_manager.mojom', '../../../../discardable_memory/public/mojom/discardable_shared_memory_manager.mojom.js');
  }
  var paint_preview_types$ =
      mojo.internal.exposeNamespace('paintPreview.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/paint_preview/common/mojom/paint_preview_types.mojom', '../../../../paint_preview/common/mojom/paint_preview_types.mojom.js');
  }
  var memory_pressure_level$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/memory_pressure_level.mojom', '../../../../../mojo/public/mojom/base/memory_pressure_level.mojom.js');
  }
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var bitmap$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/bitmap.mojom', '../../../../../skia/public/mojom/bitmap.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function PaintPreviewBeginCompositeRequest(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewBeginCompositeRequest.prototype.initDefaults_ = function() {
    this.proto = null;
    this.recordingMap = null;
  };
  PaintPreviewBeginCompositeRequest.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewBeginCompositeRequest.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewBeginCompositeRequest.proto
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, shared_memory$.ReadOnlySharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewBeginCompositeRequest.recordingMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, new codec.PointerTo(unguessable_token$.UnguessableToken), paint_preview_types$.SerializedRecording, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewBeginCompositeRequest.encodedSize = codec.kStructHeaderSize + 16;

  PaintPreviewBeginCompositeRequest.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewBeginCompositeRequest();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.proto =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    val.recordingMap =
        decoder.decodeMapPointer(new codec.PointerTo(unguessable_token$.UnguessableToken), paint_preview_types$.SerializedRecording);
    return val;
  };

  PaintPreviewBeginCompositeRequest.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewBeginCompositeRequest.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.proto);
    encoder.encodeMapPointer(new codec.PointerTo(unguessable_token$.UnguessableToken), paint_preview_types$.SerializedRecording, val.recordingMap);
  };
  function SubframeClipRect(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SubframeClipRect.prototype.initDefaults_ = function() {
    this.frameGuid = null;
    this.clipRect = null;
  };
  SubframeClipRect.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SubframeClipRect.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SubframeClipRect.frameGuid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SubframeClipRect.clipRect
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SubframeClipRect.encodedSize = codec.kStructHeaderSize + 16;

  SubframeClipRect.decode = function(decoder) {
    var packed;
    var val = new SubframeClipRect();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameGuid =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.clipRect =
        decoder.decodeStructPointer(geometry$.RectF);
    return val;
  };

  SubframeClipRect.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SubframeClipRect.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.frameGuid);
    encoder.encodeStructPointer(geometry$.RectF, val.clipRect);
  };
  function FrameData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameData.prototype.initDefaults_ = function() {
    this.scrollExtents = null;
    this.scrollOffsets = null;
    this.subframes = null;
  };
  FrameData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameData.scrollExtents
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameData.scrollOffsets
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameData.subframes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(SubframeClipRect), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameData.encodedSize = codec.kStructHeaderSize + 24;

  FrameData.decode = function(decoder) {
    var packed;
    var val = new FrameData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.scrollExtents =
        decoder.decodeStructPointer(geometry$.Size);
    val.scrollOffsets =
        decoder.decodeStructPointer(geometry$.Size);
    val.subframes =
        decoder.decodeArrayPointer(new codec.PointerTo(SubframeClipRect));
    return val;
  };

  FrameData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Size, val.scrollExtents);
    encoder.encodeStructPointer(geometry$.Size, val.scrollOffsets);
    encoder.encodeArrayPointer(new codec.PointerTo(SubframeClipRect), val.subframes);
  };
  function PaintPreviewBeginCompositeResponse(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewBeginCompositeResponse.prototype.initDefaults_ = function() {
    this.rootFrameGuid = null;
    this.frames = null;
  };
  PaintPreviewBeginCompositeResponse.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewBeginCompositeResponse.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewBeginCompositeResponse.rootFrameGuid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewBeginCompositeResponse.frames
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, new codec.PointerTo(unguessable_token$.UnguessableToken), new codec.PointerTo(FrameData), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewBeginCompositeResponse.encodedSize = codec.kStructHeaderSize + 16;

  PaintPreviewBeginCompositeResponse.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewBeginCompositeResponse();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rootFrameGuid =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.frames =
        decoder.decodeMapPointer(new codec.PointerTo(unguessable_token$.UnguessableToken), new codec.PointerTo(FrameData));
    return val;
  };

  PaintPreviewBeginCompositeResponse.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewBeginCompositeResponse.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.rootFrameGuid);
    encoder.encodeMapPointer(new codec.PointerTo(unguessable_token$.UnguessableToken), new codec.PointerTo(FrameData), val.frames);
  };
  function PaintPreviewCompositor_BeginSeparatedFrameComposite_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositor_BeginSeparatedFrameComposite_Params.prototype.initDefaults_ = function() {
    this.request = null;
  };
  PaintPreviewCompositor_BeginSeparatedFrameComposite_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositor_BeginSeparatedFrameComposite_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BeginSeparatedFrameComposite_Params.request
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PaintPreviewBeginCompositeRequest, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositor_BeginSeparatedFrameComposite_Params.encodedSize = codec.kStructHeaderSize + 8;

  PaintPreviewCompositor_BeginSeparatedFrameComposite_Params.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositor_BeginSeparatedFrameComposite_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.request =
        decoder.decodeStructPointer(PaintPreviewBeginCompositeRequest);
    return val;
  };

  PaintPreviewCompositor_BeginSeparatedFrameComposite_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositor_BeginSeparatedFrameComposite_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PaintPreviewBeginCompositeRequest, val.request);
  };
  function PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.response = null;
  };
  PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PaintPreviewCompositor.BeginCompositeStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams.response
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, PaintPreviewBeginCompositeResponse, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PaintPreviewCompositor.BeginCompositeStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.response =
        decoder.decodeStructPointer(PaintPreviewBeginCompositeResponse);
    return val;
  };

  PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(PaintPreviewBeginCompositeResponse, val.response);
  };
  function PaintPreviewCompositor_BitmapForSeparatedFrame_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositor_BitmapForSeparatedFrame_Params.prototype.initDefaults_ = function() {
    this.frameGuid = null;
    this.clipRect = null;
    this.scaleFactor = 0;
  };
  PaintPreviewCompositor_BitmapForSeparatedFrame_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositor_BitmapForSeparatedFrame_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BitmapForSeparatedFrame_Params.frameGuid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BitmapForSeparatedFrame_Params.clipRect
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PaintPreviewCompositor_BitmapForSeparatedFrame_Params.encodedSize = codec.kStructHeaderSize + 24;

  PaintPreviewCompositor_BitmapForSeparatedFrame_Params.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositor_BitmapForSeparatedFrame_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameGuid =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.clipRect =
        decoder.decodeStructPointer(geometry$.Rect);
    val.scaleFactor =
        decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PaintPreviewCompositor_BitmapForSeparatedFrame_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositor_BitmapForSeparatedFrame_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.frameGuid);
    encoder.encodeStructPointer(geometry$.Rect, val.clipRect);
    encoder.encodeStruct(codec.Float, val.scaleFactor);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.bitmap = null;
  };
  PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PaintPreviewCompositor.BitmapStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams.bitmap
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, bitmap$.BitmapN32, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PaintPreviewCompositor.BitmapStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.bitmap =
        decoder.decodeStructPointer(bitmap$.BitmapN32);
    return val;
  };

  PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(bitmap$.BitmapN32, val.bitmap);
  };
  function PaintPreviewCompositor_BeginMainFrameComposite_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositor_BeginMainFrameComposite_Params.prototype.initDefaults_ = function() {
    this.request = null;
  };
  PaintPreviewCompositor_BeginMainFrameComposite_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositor_BeginMainFrameComposite_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BeginMainFrameComposite_Params.request
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PaintPreviewBeginCompositeRequest, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositor_BeginMainFrameComposite_Params.encodedSize = codec.kStructHeaderSize + 8;

  PaintPreviewCompositor_BeginMainFrameComposite_Params.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositor_BeginMainFrameComposite_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.request =
        decoder.decodeStructPointer(PaintPreviewBeginCompositeRequest);
    return val;
  };

  PaintPreviewCompositor_BeginMainFrameComposite_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositor_BeginMainFrameComposite_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PaintPreviewBeginCompositeRequest, val.request);
  };
  function PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.response = null;
  };
  PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PaintPreviewCompositor.BeginCompositeStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams.response
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, PaintPreviewBeginCompositeResponse, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PaintPreviewCompositor.BeginCompositeStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.response =
        decoder.decodeStructPointer(PaintPreviewBeginCompositeResponse);
    return val;
  };

  PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(PaintPreviewBeginCompositeResponse, val.response);
  };
  function PaintPreviewCompositor_BitmapForMainFrame_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositor_BitmapForMainFrame_Params.prototype.initDefaults_ = function() {
    this.clipRect = null;
    this.scaleFactor = 0;
  };
  PaintPreviewCompositor_BitmapForMainFrame_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositor_BitmapForMainFrame_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BitmapForMainFrame_Params.clipRect
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PaintPreviewCompositor_BitmapForMainFrame_Params.encodedSize = codec.kStructHeaderSize + 16;

  PaintPreviewCompositor_BitmapForMainFrame_Params.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositor_BitmapForMainFrame_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clipRect =
        decoder.decodeStructPointer(geometry$.Rect);
    val.scaleFactor =
        decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PaintPreviewCompositor_BitmapForMainFrame_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositor_BitmapForMainFrame_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Rect, val.clipRect);
    encoder.encodeStruct(codec.Float, val.scaleFactor);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PaintPreviewCompositor_BitmapForMainFrame_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositor_BitmapForMainFrame_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.bitmap = null;
  };
  PaintPreviewCompositor_BitmapForMainFrame_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositor_BitmapForMainFrame_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BitmapForMainFrame_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PaintPreviewCompositor.BitmapStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_BitmapForMainFrame_ResponseParams.bitmap
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, bitmap$.BitmapN32, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositor_BitmapForMainFrame_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PaintPreviewCompositor_BitmapForMainFrame_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositor_BitmapForMainFrame_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PaintPreviewCompositor.BitmapStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.bitmap =
        decoder.decodeStructPointer(bitmap$.BitmapN32);
    return val;
  };

  PaintPreviewCompositor_BitmapForMainFrame_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositor_BitmapForMainFrame_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(bitmap$.BitmapN32, val.bitmap);
  };
  function PaintPreviewCompositor_SetRootFrameUrl_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositor_SetRootFrameUrl_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  PaintPreviewCompositor_SetRootFrameUrl_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositor_SetRootFrameUrl_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositor_SetRootFrameUrl_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositor_SetRootFrameUrl_Params.encodedSize = codec.kStructHeaderSize + 8;

  PaintPreviewCompositor_SetRootFrameUrl_Params.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositor_SetRootFrameUrl_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PaintPreviewCompositor_SetRootFrameUrl_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositor_SetRootFrameUrl_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params.prototype.initDefaults_ = function() {
    this.manager = new discardable_shared_memory_manager$.DiscardableSharedMemoryManagerPtr();
  };
  PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params.manager
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params.encodedSize = codec.kStructHeaderSize + 8;

  PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.manager =
        decoder.decodeStruct(new codec.Interface(discardable_shared_memory_manager$.DiscardableSharedMemoryManagerPtr));
    return val;
  };

  PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(discardable_shared_memory_manager$.DiscardableSharedMemoryManagerPtr), val.manager);
  };
  function PaintPreviewCompositorCollection_CreateCompositor_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositorCollection_CreateCompositor_Params.prototype.initDefaults_ = function() {
    this.compositor = new bindings.InterfaceRequest();
  };
  PaintPreviewCompositorCollection_CreateCompositor_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositorCollection_CreateCompositor_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositorCollection_CreateCompositor_Params.compositor
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositorCollection_CreateCompositor_Params.encodedSize = codec.kStructHeaderSize + 8;

  PaintPreviewCompositorCollection_CreateCompositor_Params.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositorCollection_CreateCompositor_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.compositor =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PaintPreviewCompositorCollection_CreateCompositor_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositorCollection_CreateCompositor_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.compositor);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PaintPreviewCompositorCollection_CreateCompositor_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositorCollection_CreateCompositor_ResponseParams.prototype.initDefaults_ = function() {
    this.compositorId = null;
  };
  PaintPreviewCompositorCollection_CreateCompositor_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositorCollection_CreateCompositor_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositorCollection_CreateCompositor_ResponseParams.compositorId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositorCollection_CreateCompositor_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PaintPreviewCompositorCollection_CreateCompositor_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositorCollection_CreateCompositor_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.compositorId =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    return val;
  };

  PaintPreviewCompositorCollection_CreateCompositor_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositorCollection_CreateCompositor_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.compositorId);
  };
  function PaintPreviewCompositorCollection_OnMemoryPressure_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositorCollection_OnMemoryPressure_Params.prototype.initDefaults_ = function() {
    this.memoryPressureLevel = 0;
  };
  PaintPreviewCompositorCollection_OnMemoryPressure_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositorCollection_OnMemoryPressure_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositorCollection_OnMemoryPressure_Params.memoryPressureLevel
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, memory_pressure_level$.MemoryPressureLevel);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositorCollection_OnMemoryPressure_Params.encodedSize = codec.kStructHeaderSize + 8;

  PaintPreviewCompositorCollection_OnMemoryPressure_Params.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositorCollection_OnMemoryPressure_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.memoryPressureLevel =
        decoder.decodeStruct(new codec.Enum(memory_pressure_level$.MemoryPressureLevel));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PaintPreviewCompositorCollection_OnMemoryPressure_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositorCollection_OnMemoryPressure_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.memoryPressureLevel);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PaintPreviewCompositorCollection_ListCompositors_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositorCollection_ListCompositors_Params.prototype.initDefaults_ = function() {
  };
  PaintPreviewCompositorCollection_ListCompositors_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositorCollection_ListCompositors_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositorCollection_ListCompositors_Params.encodedSize = codec.kStructHeaderSize + 0;

  PaintPreviewCompositorCollection_ListCompositors_Params.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositorCollection_ListCompositors_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PaintPreviewCompositorCollection_ListCompositors_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositorCollection_ListCompositors_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PaintPreviewCompositorCollection_ListCompositors_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PaintPreviewCompositorCollection_ListCompositors_ResponseParams.prototype.initDefaults_ = function() {
    this.compositorIds = null;
  };
  PaintPreviewCompositorCollection_ListCompositors_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PaintPreviewCompositorCollection_ListCompositors_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PaintPreviewCompositorCollection_ListCompositors_ResponseParams.compositorIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(unguessable_token$.UnguessableToken), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PaintPreviewCompositorCollection_ListCompositors_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PaintPreviewCompositorCollection_ListCompositors_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PaintPreviewCompositorCollection_ListCompositors_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.compositorIds =
        decoder.decodeArrayPointer(new codec.PointerTo(unguessable_token$.UnguessableToken));
    return val;
  };

  PaintPreviewCompositorCollection_ListCompositors_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PaintPreviewCompositorCollection_ListCompositors_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(unguessable_token$.UnguessableToken), val.compositorIds);
  };
  var kPaintPreviewCompositor_BeginSeparatedFrameComposite_Name = 1745209796;
  var kPaintPreviewCompositor_BitmapForSeparatedFrame_Name = 24221383;
  var kPaintPreviewCompositor_BeginMainFrameComposite_Name = 1998401173;
  var kPaintPreviewCompositor_BitmapForMainFrame_Name = 1770682379;
  var kPaintPreviewCompositor_SetRootFrameUrl_Name = 1168567173;

  function PaintPreviewCompositorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PaintPreviewCompositor,
                                                   handleOrPtrInfo);
  }

  function PaintPreviewCompositorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PaintPreviewCompositor, associatedInterfacePtrInfo);
  }

  PaintPreviewCompositorAssociatedPtr.prototype =
      Object.create(PaintPreviewCompositorPtr.prototype);
  PaintPreviewCompositorAssociatedPtr.prototype.constructor =
      PaintPreviewCompositorAssociatedPtr;

  function PaintPreviewCompositorProxy(receiver) {
    this.receiver_ = receiver;
  }
  PaintPreviewCompositorPtr.prototype.beginSeparatedFrameComposite = function() {
    return PaintPreviewCompositorProxy.prototype.beginSeparatedFrameComposite
        .apply(this.ptr.getProxy(), arguments);
  };

  PaintPreviewCompositorProxy.prototype.beginSeparatedFrameComposite = function(request) {
    var params_ = new PaintPreviewCompositor_BeginSeparatedFrameComposite_Params();
    params_.request = request;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPaintPreviewCompositor_BeginSeparatedFrameComposite_Name,
          codec.align(PaintPreviewCompositor_BeginSeparatedFrameComposite_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PaintPreviewCompositor_BeginSeparatedFrameComposite_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PaintPreviewCompositorPtr.prototype.bitmapForSeparatedFrame = function() {
    return PaintPreviewCompositorProxy.prototype.bitmapForSeparatedFrame
        .apply(this.ptr.getProxy(), arguments);
  };

  PaintPreviewCompositorProxy.prototype.bitmapForSeparatedFrame = function(frameGuid, clipRect, scaleFactor) {
    var params_ = new PaintPreviewCompositor_BitmapForSeparatedFrame_Params();
    params_.frameGuid = frameGuid;
    params_.clipRect = clipRect;
    params_.scaleFactor = scaleFactor;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPaintPreviewCompositor_BitmapForSeparatedFrame_Name,
          codec.align(PaintPreviewCompositor_BitmapForSeparatedFrame_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PaintPreviewCompositor_BitmapForSeparatedFrame_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PaintPreviewCompositorPtr.prototype.beginMainFrameComposite = function() {
    return PaintPreviewCompositorProxy.prototype.beginMainFrameComposite
        .apply(this.ptr.getProxy(), arguments);
  };

  PaintPreviewCompositorProxy.prototype.beginMainFrameComposite = function(request) {
    var params_ = new PaintPreviewCompositor_BeginMainFrameComposite_Params();
    params_.request = request;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPaintPreviewCompositor_BeginMainFrameComposite_Name,
          codec.align(PaintPreviewCompositor_BeginMainFrameComposite_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PaintPreviewCompositor_BeginMainFrameComposite_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PaintPreviewCompositorPtr.prototype.bitmapForMainFrame = function() {
    return PaintPreviewCompositorProxy.prototype.bitmapForMainFrame
        .apply(this.ptr.getProxy(), arguments);
  };

  PaintPreviewCompositorProxy.prototype.bitmapForMainFrame = function(clipRect, scaleFactor) {
    var params_ = new PaintPreviewCompositor_BitmapForMainFrame_Params();
    params_.clipRect = clipRect;
    params_.scaleFactor = scaleFactor;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPaintPreviewCompositor_BitmapForMainFrame_Name,
          codec.align(PaintPreviewCompositor_BitmapForMainFrame_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PaintPreviewCompositor_BitmapForMainFrame_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PaintPreviewCompositor_BitmapForMainFrame_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PaintPreviewCompositorPtr.prototype.setRootFrameUrl = function() {
    return PaintPreviewCompositorProxy.prototype.setRootFrameUrl
        .apply(this.ptr.getProxy(), arguments);
  };

  PaintPreviewCompositorProxy.prototype.setRootFrameUrl = function(url) {
    var params_ = new PaintPreviewCompositor_SetRootFrameUrl_Params();
    params_.url = url;
    var builder = new codec.MessageV0Builder(
        kPaintPreviewCompositor_SetRootFrameUrl_Name,
        codec.align(PaintPreviewCompositor_SetRootFrameUrl_Params.encodedSize));
    builder.encodeStruct(PaintPreviewCompositor_SetRootFrameUrl_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PaintPreviewCompositorStub(delegate) {
    this.delegate_ = delegate;
  }
  PaintPreviewCompositorStub.prototype.beginSeparatedFrameComposite = function(request) {
    return this.delegate_ && this.delegate_.beginSeparatedFrameComposite && this.delegate_.beginSeparatedFrameComposite(request);
  }
  PaintPreviewCompositorStub.prototype.bitmapForSeparatedFrame = function(frameGuid, clipRect, scaleFactor) {
    return this.delegate_ && this.delegate_.bitmapForSeparatedFrame && this.delegate_.bitmapForSeparatedFrame(frameGuid, clipRect, scaleFactor);
  }
  PaintPreviewCompositorStub.prototype.beginMainFrameComposite = function(request) {
    return this.delegate_ && this.delegate_.beginMainFrameComposite && this.delegate_.beginMainFrameComposite(request);
  }
  PaintPreviewCompositorStub.prototype.bitmapForMainFrame = function(clipRect, scaleFactor) {
    return this.delegate_ && this.delegate_.bitmapForMainFrame && this.delegate_.bitmapForMainFrame(clipRect, scaleFactor);
  }
  PaintPreviewCompositorStub.prototype.setRootFrameUrl = function(url) {
    return this.delegate_ && this.delegate_.setRootFrameUrl && this.delegate_.setRootFrameUrl(url);
  }

  PaintPreviewCompositorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPaintPreviewCompositor_SetRootFrameUrl_Name:
      var params = reader.decodeStruct(PaintPreviewCompositor_SetRootFrameUrl_Params);
      this.setRootFrameUrl(params.url);
      return true;
    default:
      return false;
    }
  };

  PaintPreviewCompositorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPaintPreviewCompositor_BeginSeparatedFrameComposite_Name:
      var params = reader.decodeStruct(PaintPreviewCompositor_BeginSeparatedFrameComposite_Params);
      this.beginSeparatedFrameComposite(params.request).then(function(response) {
        var responseParams =
            new PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams();
        responseParams.status = response.status;
        responseParams.response = response.response;
        var builder = new codec.MessageV1Builder(
            kPaintPreviewCompositor_BeginSeparatedFrameComposite_Name,
            codec.align(PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPaintPreviewCompositor_BitmapForSeparatedFrame_Name:
      var params = reader.decodeStruct(PaintPreviewCompositor_BitmapForSeparatedFrame_Params);
      this.bitmapForSeparatedFrame(params.frameGuid, params.clipRect, params.scaleFactor).then(function(response) {
        var responseParams =
            new PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams();
        responseParams.status = response.status;
        responseParams.bitmap = response.bitmap;
        var builder = new codec.MessageV1Builder(
            kPaintPreviewCompositor_BitmapForSeparatedFrame_Name,
            codec.align(PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPaintPreviewCompositor_BeginMainFrameComposite_Name:
      var params = reader.decodeStruct(PaintPreviewCompositor_BeginMainFrameComposite_Params);
      this.beginMainFrameComposite(params.request).then(function(response) {
        var responseParams =
            new PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams();
        responseParams.status = response.status;
        responseParams.response = response.response;
        var builder = new codec.MessageV1Builder(
            kPaintPreviewCompositor_BeginMainFrameComposite_Name,
            codec.align(PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPaintPreviewCompositor_BitmapForMainFrame_Name:
      var params = reader.decodeStruct(PaintPreviewCompositor_BitmapForMainFrame_Params);
      this.bitmapForMainFrame(params.clipRect, params.scaleFactor).then(function(response) {
        var responseParams =
            new PaintPreviewCompositor_BitmapForMainFrame_ResponseParams();
        responseParams.status = response.status;
        responseParams.bitmap = response.bitmap;
        var builder = new codec.MessageV1Builder(
            kPaintPreviewCompositor_BitmapForMainFrame_Name,
            codec.align(PaintPreviewCompositor_BitmapForMainFrame_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PaintPreviewCompositor_BitmapForMainFrame_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePaintPreviewCompositorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPaintPreviewCompositor_BeginSeparatedFrameComposite_Name:
        if (message.expectsResponse())
          paramsClass = PaintPreviewCompositor_BeginSeparatedFrameComposite_Params;
      break;
      case kPaintPreviewCompositor_BitmapForSeparatedFrame_Name:
        if (message.expectsResponse())
          paramsClass = PaintPreviewCompositor_BitmapForSeparatedFrame_Params;
      break;
      case kPaintPreviewCompositor_BeginMainFrameComposite_Name:
        if (message.expectsResponse())
          paramsClass = PaintPreviewCompositor_BeginMainFrameComposite_Params;
      break;
      case kPaintPreviewCompositor_BitmapForMainFrame_Name:
        if (message.expectsResponse())
          paramsClass = PaintPreviewCompositor_BitmapForMainFrame_Params;
      break;
      case kPaintPreviewCompositor_SetRootFrameUrl_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PaintPreviewCompositor_SetRootFrameUrl_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePaintPreviewCompositorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPaintPreviewCompositor_BeginSeparatedFrameComposite_Name:
        if (message.isResponse())
          paramsClass = PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams;
        break;
      case kPaintPreviewCompositor_BitmapForSeparatedFrame_Name:
        if (message.isResponse())
          paramsClass = PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams;
        break;
      case kPaintPreviewCompositor_BeginMainFrameComposite_Name:
        if (message.isResponse())
          paramsClass = PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams;
        break;
      case kPaintPreviewCompositor_BitmapForMainFrame_Name:
        if (message.isResponse())
          paramsClass = PaintPreviewCompositor_BitmapForMainFrame_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PaintPreviewCompositor = {
    name: 'paint_preview.mojom.PaintPreviewCompositor',
    kVersion: 0,
    ptrClass: PaintPreviewCompositorPtr,
    proxyClass: PaintPreviewCompositorProxy,
    stubClass: PaintPreviewCompositorStub,
    validateRequest: validatePaintPreviewCompositorRequest,
    validateResponse: validatePaintPreviewCompositorResponse,
  };
  PaintPreviewCompositor.BeginCompositeStatus = {};
  PaintPreviewCompositor.BeginCompositeStatus.kSuccess = 0;
  PaintPreviewCompositor.BeginCompositeStatus.kPartialSuccess = 1;
  PaintPreviewCompositor.BeginCompositeStatus.kDeserializingFailure = -1;
  PaintPreviewCompositor.BeginCompositeStatus.kCompositingFailure = -2;
  PaintPreviewCompositor.BeginCompositeStatus.MIN_VALUE = -2;
  PaintPreviewCompositor.BeginCompositeStatus.MAX_VALUE = 1;

  PaintPreviewCompositor.BeginCompositeStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case -2:
    case -1:
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  PaintPreviewCompositor.BeginCompositeStatus.toKnownEnumValue = function(value) {
    return value;
  };

  PaintPreviewCompositor.BeginCompositeStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  PaintPreviewCompositor.BitmapStatus = {};
  PaintPreviewCompositor.BitmapStatus.kSuccess = 0;
  PaintPreviewCompositor.BitmapStatus.kMissingFrame = 1;
  PaintPreviewCompositor.BitmapStatus.kAllocFailed = 2;
  PaintPreviewCompositor.BitmapStatus.MIN_VALUE = 0;
  PaintPreviewCompositor.BitmapStatus.MAX_VALUE = 2;

  PaintPreviewCompositor.BitmapStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  PaintPreviewCompositor.BitmapStatus.toKnownEnumValue = function(value) {
    return value;
  };

  PaintPreviewCompositor.BitmapStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  PaintPreviewCompositorStub.prototype.validator = validatePaintPreviewCompositorRequest;
  PaintPreviewCompositorProxy.prototype.validator = validatePaintPreviewCompositorResponse;
  var kPaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Name = 2080714638;
  var kPaintPreviewCompositorCollection_CreateCompositor_Name = 1998355700;
  var kPaintPreviewCompositorCollection_OnMemoryPressure_Name = 1317302155;
  var kPaintPreviewCompositorCollection_ListCompositors_Name = 885117469;

  function PaintPreviewCompositorCollectionPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PaintPreviewCompositorCollection,
                                                   handleOrPtrInfo);
  }

  function PaintPreviewCompositorCollectionAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PaintPreviewCompositorCollection, associatedInterfacePtrInfo);
  }

  PaintPreviewCompositorCollectionAssociatedPtr.prototype =
      Object.create(PaintPreviewCompositorCollectionPtr.prototype);
  PaintPreviewCompositorCollectionAssociatedPtr.prototype.constructor =
      PaintPreviewCompositorCollectionAssociatedPtr;

  function PaintPreviewCompositorCollectionProxy(receiver) {
    this.receiver_ = receiver;
  }
  PaintPreviewCompositorCollectionPtr.prototype.setDiscardableSharedMemoryManager = function() {
    return PaintPreviewCompositorCollectionProxy.prototype.setDiscardableSharedMemoryManager
        .apply(this.ptr.getProxy(), arguments);
  };

  PaintPreviewCompositorCollectionProxy.prototype.setDiscardableSharedMemoryManager = function(manager) {
    var params_ = new PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params();
    params_.manager = manager;
    var builder = new codec.MessageV0Builder(
        kPaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Name,
        codec.align(PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params.encodedSize));
    builder.encodeStruct(PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PaintPreviewCompositorCollectionPtr.prototype.createCompositor = function() {
    return PaintPreviewCompositorCollectionProxy.prototype.createCompositor
        .apply(this.ptr.getProxy(), arguments);
  };

  PaintPreviewCompositorCollectionProxy.prototype.createCompositor = function(compositor) {
    var params_ = new PaintPreviewCompositorCollection_CreateCompositor_Params();
    params_.compositor = compositor;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPaintPreviewCompositorCollection_CreateCompositor_Name,
          codec.align(PaintPreviewCompositorCollection_CreateCompositor_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PaintPreviewCompositorCollection_CreateCompositor_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PaintPreviewCompositorCollection_CreateCompositor_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PaintPreviewCompositorCollectionPtr.prototype.onMemoryPressure = function() {
    return PaintPreviewCompositorCollectionProxy.prototype.onMemoryPressure
        .apply(this.ptr.getProxy(), arguments);
  };

  PaintPreviewCompositorCollectionProxy.prototype.onMemoryPressure = function(memoryPressureLevel) {
    var params_ = new PaintPreviewCompositorCollection_OnMemoryPressure_Params();
    params_.memoryPressureLevel = memoryPressureLevel;
    var builder = new codec.MessageV0Builder(
        kPaintPreviewCompositorCollection_OnMemoryPressure_Name,
        codec.align(PaintPreviewCompositorCollection_OnMemoryPressure_Params.encodedSize));
    builder.encodeStruct(PaintPreviewCompositorCollection_OnMemoryPressure_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PaintPreviewCompositorCollectionPtr.prototype.listCompositors = function() {
    return PaintPreviewCompositorCollectionProxy.prototype.listCompositors
        .apply(this.ptr.getProxy(), arguments);
  };

  PaintPreviewCompositorCollectionProxy.prototype.listCompositors = function() {
    var params_ = new PaintPreviewCompositorCollection_ListCompositors_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPaintPreviewCompositorCollection_ListCompositors_Name,
          codec.align(PaintPreviewCompositorCollection_ListCompositors_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PaintPreviewCompositorCollection_ListCompositors_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PaintPreviewCompositorCollection_ListCompositors_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PaintPreviewCompositorCollectionStub(delegate) {
    this.delegate_ = delegate;
  }
  PaintPreviewCompositorCollectionStub.prototype.setDiscardableSharedMemoryManager = function(manager) {
    return this.delegate_ && this.delegate_.setDiscardableSharedMemoryManager && this.delegate_.setDiscardableSharedMemoryManager(manager);
  }
  PaintPreviewCompositorCollectionStub.prototype.createCompositor = function(compositor) {
    return this.delegate_ && this.delegate_.createCompositor && this.delegate_.createCompositor(compositor);
  }
  PaintPreviewCompositorCollectionStub.prototype.onMemoryPressure = function(memoryPressureLevel) {
    return this.delegate_ && this.delegate_.onMemoryPressure && this.delegate_.onMemoryPressure(memoryPressureLevel);
  }
  PaintPreviewCompositorCollectionStub.prototype.listCompositors = function() {
    return this.delegate_ && this.delegate_.listCompositors && this.delegate_.listCompositors();
  }

  PaintPreviewCompositorCollectionStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Name:
      var params = reader.decodeStruct(PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params);
      this.setDiscardableSharedMemoryManager(params.manager);
      return true;
    case kPaintPreviewCompositorCollection_OnMemoryPressure_Name:
      var params = reader.decodeStruct(PaintPreviewCompositorCollection_OnMemoryPressure_Params);
      this.onMemoryPressure(params.memoryPressureLevel);
      return true;
    default:
      return false;
    }
  };

  PaintPreviewCompositorCollectionStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPaintPreviewCompositorCollection_CreateCompositor_Name:
      var params = reader.decodeStruct(PaintPreviewCompositorCollection_CreateCompositor_Params);
      this.createCompositor(params.compositor).then(function(response) {
        var responseParams =
            new PaintPreviewCompositorCollection_CreateCompositor_ResponseParams();
        responseParams.compositorId = response.compositorId;
        var builder = new codec.MessageV1Builder(
            kPaintPreviewCompositorCollection_CreateCompositor_Name,
            codec.align(PaintPreviewCompositorCollection_CreateCompositor_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PaintPreviewCompositorCollection_CreateCompositor_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPaintPreviewCompositorCollection_ListCompositors_Name:
      var params = reader.decodeStruct(PaintPreviewCompositorCollection_ListCompositors_Params);
      this.listCompositors().then(function(response) {
        var responseParams =
            new PaintPreviewCompositorCollection_ListCompositors_ResponseParams();
        responseParams.compositorIds = response.compositorIds;
        var builder = new codec.MessageV1Builder(
            kPaintPreviewCompositorCollection_ListCompositors_Name,
            codec.align(PaintPreviewCompositorCollection_ListCompositors_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PaintPreviewCompositorCollection_ListCompositors_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePaintPreviewCompositorCollectionRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params;
      break;
      case kPaintPreviewCompositorCollection_CreateCompositor_Name:
        if (message.expectsResponse())
          paramsClass = PaintPreviewCompositorCollection_CreateCompositor_Params;
      break;
      case kPaintPreviewCompositorCollection_OnMemoryPressure_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PaintPreviewCompositorCollection_OnMemoryPressure_Params;
      break;
      case kPaintPreviewCompositorCollection_ListCompositors_Name:
        if (message.expectsResponse())
          paramsClass = PaintPreviewCompositorCollection_ListCompositors_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePaintPreviewCompositorCollectionResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPaintPreviewCompositorCollection_CreateCompositor_Name:
        if (message.isResponse())
          paramsClass = PaintPreviewCompositorCollection_CreateCompositor_ResponseParams;
        break;
      case kPaintPreviewCompositorCollection_ListCompositors_Name:
        if (message.isResponse())
          paramsClass = PaintPreviewCompositorCollection_ListCompositors_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PaintPreviewCompositorCollection = {
    name: 'paint_preview.mojom.PaintPreviewCompositorCollection',
    kVersion: 0,
    ptrClass: PaintPreviewCompositorCollectionPtr,
    proxyClass: PaintPreviewCompositorCollectionProxy,
    stubClass: PaintPreviewCompositorCollectionStub,
    validateRequest: validatePaintPreviewCompositorCollectionRequest,
    validateResponse: validatePaintPreviewCompositorCollectionResponse,
  };
  PaintPreviewCompositorCollectionStub.prototype.validator = validatePaintPreviewCompositorCollectionRequest;
  PaintPreviewCompositorCollectionProxy.prototype.validator = validatePaintPreviewCompositorCollectionResponse;
  exports.PaintPreviewBeginCompositeRequest = PaintPreviewBeginCompositeRequest;
  exports.SubframeClipRect = SubframeClipRect;
  exports.FrameData = FrameData;
  exports.PaintPreviewBeginCompositeResponse = PaintPreviewBeginCompositeResponse;
  exports.PaintPreviewCompositor = PaintPreviewCompositor;
  exports.PaintPreviewCompositorPtr = PaintPreviewCompositorPtr;
  exports.PaintPreviewCompositorAssociatedPtr = PaintPreviewCompositorAssociatedPtr;
  exports.PaintPreviewCompositorCollection = PaintPreviewCompositorCollection;
  exports.PaintPreviewCompositorCollectionPtr = PaintPreviewCompositorCollectionPtr;
  exports.PaintPreviewCompositorCollectionAssociatedPtr = PaintPreviewCompositorCollectionAssociatedPtr;
})();