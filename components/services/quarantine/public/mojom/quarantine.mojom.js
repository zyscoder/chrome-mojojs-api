// components/services/quarantine/public/mojom/quarantine.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/services/quarantine/public/mojom/quarantine.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('quarantine.mojom');
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../../../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }


  var QuarantineFileResult = {};
  QuarantineFileResult.OK = 0;
  QuarantineFileResult.ACCESS_DENIED = 1;
  QuarantineFileResult.BLOCKED_BY_POLICY = 2;
  QuarantineFileResult.ANNOTATION_FAILED = 3;
  QuarantineFileResult.FILE_MISSING = 4;
  QuarantineFileResult.SECURITY_CHECK_FAILED = 5;
  QuarantineFileResult.VIRUS_INFECTED = 6;
  QuarantineFileResult.MIN_VALUE = 0;
  QuarantineFileResult.MAX_VALUE = 6;

  QuarantineFileResult.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  QuarantineFileResult.toKnownEnumValue = function(value) {
    return value;
  };

  QuarantineFileResult.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function Quarantine_QuarantineFile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Quarantine_QuarantineFile_Params.prototype.initDefaults_ = function() {
    this.fullPath = null;
    this.sourceUrl = null;
    this.referrerUrl = null;
    this.clientGuid = null;
  };
  Quarantine_QuarantineFile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Quarantine_QuarantineFile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Quarantine_QuarantineFile_Params.fullPath
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Quarantine_QuarantineFile_Params.sourceUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Quarantine_QuarantineFile_Params.referrerUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Quarantine_QuarantineFile_Params.clientGuid
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Quarantine_QuarantineFile_Params.encodedSize = codec.kStructHeaderSize + 32;

  Quarantine_QuarantineFile_Params.decode = function(decoder) {
    var packed;
    var val = new Quarantine_QuarantineFile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fullPath =
        decoder.decodeStructPointer(file_path$.FilePath);
    val.sourceUrl =
        decoder.decodeStructPointer(url$.Url);
    val.referrerUrl =
        decoder.decodeStructPointer(url$.Url);
    val.clientGuid =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Quarantine_QuarantineFile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Quarantine_QuarantineFile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file_path$.FilePath, val.fullPath);
    encoder.encodeStructPointer(url$.Url, val.sourceUrl);
    encoder.encodeStructPointer(url$.Url, val.referrerUrl);
    encoder.encodeStruct(codec.String, val.clientGuid);
  };
  function Quarantine_QuarantineFile_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Quarantine_QuarantineFile_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  Quarantine_QuarantineFile_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Quarantine_QuarantineFile_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Quarantine_QuarantineFile_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, QuarantineFileResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Quarantine_QuarantineFile_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Quarantine_QuarantineFile_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Quarantine_QuarantineFile_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(QuarantineFileResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Quarantine_QuarantineFile_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Quarantine_QuarantineFile_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kQuarantine_QuarantineFile_Name = 1183473598;

  function QuarantinePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Quarantine,
                                                   handleOrPtrInfo);
  }

  function QuarantineAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Quarantine, associatedInterfacePtrInfo);
  }

  QuarantineAssociatedPtr.prototype =
      Object.create(QuarantinePtr.prototype);
  QuarantineAssociatedPtr.prototype.constructor =
      QuarantineAssociatedPtr;

  function QuarantineProxy(receiver) {
    this.receiver_ = receiver;
  }
  QuarantinePtr.prototype.quarantineFile = function() {
    return QuarantineProxy.prototype.quarantineFile
        .apply(this.ptr.getProxy(), arguments);
  };

  QuarantineProxy.prototype.quarantineFile = function(fullPath, sourceUrl, referrerUrl, clientGuid) {
    var params_ = new Quarantine_QuarantineFile_Params();
    params_.fullPath = fullPath;
    params_.sourceUrl = sourceUrl;
    params_.referrerUrl = referrerUrl;
    params_.clientGuid = clientGuid;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kQuarantine_QuarantineFile_Name,
          codec.align(Quarantine_QuarantineFile_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Quarantine_QuarantineFile_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Quarantine_QuarantineFile_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function QuarantineStub(delegate) {
    this.delegate_ = delegate;
  }
  QuarantineStub.prototype.quarantineFile = function(fullPath, sourceUrl, referrerUrl, clientGuid) {
    return this.delegate_ && this.delegate_.quarantineFile && this.delegate_.quarantineFile(fullPath, sourceUrl, referrerUrl, clientGuid);
  }

  QuarantineStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  QuarantineStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kQuarantine_QuarantineFile_Name:
      var params = reader.decodeStruct(Quarantine_QuarantineFile_Params);
      this.quarantineFile(params.fullPath, params.sourceUrl, params.referrerUrl, params.clientGuid).then(function(response) {
        var responseParams =
            new Quarantine_QuarantineFile_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kQuarantine_QuarantineFile_Name,
            codec.align(Quarantine_QuarantineFile_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Quarantine_QuarantineFile_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateQuarantineRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kQuarantine_QuarantineFile_Name:
        if (message.expectsResponse())
          paramsClass = Quarantine_QuarantineFile_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateQuarantineResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kQuarantine_QuarantineFile_Name:
        if (message.isResponse())
          paramsClass = Quarantine_QuarantineFile_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Quarantine = {
    name: 'quarantine.mojom.Quarantine',
    kVersion: 0,
    ptrClass: QuarantinePtr,
    proxyClass: QuarantineProxy,
    stubClass: QuarantineStub,
    validateRequest: validateQuarantineRequest,
    validateResponse: validateQuarantineResponse,
  };
  QuarantineStub.prototype.validator = validateQuarantineRequest;
  QuarantineProxy.prototype.validator = validateQuarantineResponse;
  exports.QuarantineFileResult = QuarantineFileResult;
  exports.Quarantine = Quarantine;
  exports.QuarantinePtr = QuarantinePtr;
  exports.QuarantineAssociatedPtr = QuarantineAssociatedPtr;
})();