// components/services/print_compositor/public/mojom/print_compositor.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/services/print_compositor/public/mojom/print_compositor.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('printing.mojom');
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var ax_tree_update$ =
      mojo.internal.exposeNamespace('ax.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/accessibility/mojom/ax_tree_update.mojom', '../../../../../ui/accessibility/mojom/ax_tree_update.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function PrintCompositor_NotifyUnavailableSubframe_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_NotifyUnavailableSubframe_Params.prototype.initDefaults_ = function() {
    this.frameGuid = 0;
  };
  PrintCompositor_NotifyUnavailableSubframe_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_NotifyUnavailableSubframe_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintCompositor_NotifyUnavailableSubframe_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintCompositor_NotifyUnavailableSubframe_Params.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_NotifyUnavailableSubframe_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameGuid =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  PrintCompositor_NotifyUnavailableSubframe_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_NotifyUnavailableSubframe_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.frameGuid);
  };
  function PrintCompositor_AddSubframeContent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_AddSubframeContent_Params.prototype.initDefaults_ = function() {
    this.frameGuid = 0;
    this.serializedContent = null;
    this.subframeContentInfo = null;
  };
  PrintCompositor_AddSubframeContent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_AddSubframeContent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PrintCompositor_AddSubframeContent_Params.serializedContent
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.ReadOnlySharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_AddSubframeContent_Params.subframeContentInfo
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 16, false, codec.Uint32, codec.Uint64, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintCompositor_AddSubframeContent_Params.encodedSize = codec.kStructHeaderSize + 24;

  PrintCompositor_AddSubframeContent_Params.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_AddSubframeContent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameGuid =
        decoder.decodeStruct(codec.Uint64);
    val.serializedContent =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    val.subframeContentInfo =
        decoder.decodeMapPointer(codec.Uint32, codec.Uint64);
    return val;
  };

  PrintCompositor_AddSubframeContent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_AddSubframeContent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.frameGuid);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.serializedContent);
    encoder.encodeMapPointer(codec.Uint32, codec.Uint64, val.subframeContentInfo);
  };
  function PrintCompositor_SetAccessibilityTree_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_SetAccessibilityTree_Params.prototype.initDefaults_ = function() {
    this.accessibilityTree = null;
  };
  PrintCompositor_SetAccessibilityTree_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_SetAccessibilityTree_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_SetAccessibilityTree_Params.accessibilityTree
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ax_tree_update$.AXTreeUpdate, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintCompositor_SetAccessibilityTree_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintCompositor_SetAccessibilityTree_Params.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_SetAccessibilityTree_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.accessibilityTree =
        decoder.decodeStructPointer(ax_tree_update$.AXTreeUpdate);
    return val;
  };

  PrintCompositor_SetAccessibilityTree_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_SetAccessibilityTree_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ax_tree_update$.AXTreeUpdate, val.accessibilityTree);
  };
  function PrintCompositor_CompositePageToPdf_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_CompositePageToPdf_Params.prototype.initDefaults_ = function() {
    this.frameGuid = 0;
    this.skRegion = null;
    this.subframeContentInfo = null;
  };
  PrintCompositor_CompositePageToPdf_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_CompositePageToPdf_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PrintCompositor_CompositePageToPdf_Params.skRegion
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.ReadOnlySharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_CompositePageToPdf_Params.subframeContentInfo
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 16, false, codec.Uint32, codec.Uint64, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintCompositor_CompositePageToPdf_Params.encodedSize = codec.kStructHeaderSize + 24;

  PrintCompositor_CompositePageToPdf_Params.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_CompositePageToPdf_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameGuid =
        decoder.decodeStruct(codec.Uint64);
    val.skRegion =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    val.subframeContentInfo =
        decoder.decodeMapPointer(codec.Uint32, codec.Uint64);
    return val;
  };

  PrintCompositor_CompositePageToPdf_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_CompositePageToPdf_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.frameGuid);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.skRegion);
    encoder.encodeMapPointer(codec.Uint32, codec.Uint64, val.subframeContentInfo);
  };
  function PrintCompositor_CompositePageToPdf_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_CompositePageToPdf_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.pdfRegion = null;
  };
  PrintCompositor_CompositePageToPdf_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_CompositePageToPdf_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_CompositePageToPdf_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PrintCompositor.Status);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_CompositePageToPdf_ResponseParams.pdfRegion
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.ReadOnlySharedMemoryRegion, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintCompositor_CompositePageToPdf_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintCompositor_CompositePageToPdf_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_CompositePageToPdf_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PrintCompositor.Status));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.pdfRegion =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    return val;
  };

  PrintCompositor_CompositePageToPdf_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_CompositePageToPdf_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.pdfRegion);
  };
  function PrintCompositor_CompositeDocumentToPdf_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_CompositeDocumentToPdf_Params.prototype.initDefaults_ = function() {
    this.frameGuid = 0;
    this.skRegion = null;
    this.subframeContentInfo = null;
  };
  PrintCompositor_CompositeDocumentToPdf_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_CompositeDocumentToPdf_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PrintCompositor_CompositeDocumentToPdf_Params.skRegion
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.ReadOnlySharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_CompositeDocumentToPdf_Params.subframeContentInfo
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 16, false, codec.Uint32, codec.Uint64, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintCompositor_CompositeDocumentToPdf_Params.encodedSize = codec.kStructHeaderSize + 24;

  PrintCompositor_CompositeDocumentToPdf_Params.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_CompositeDocumentToPdf_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameGuid =
        decoder.decodeStruct(codec.Uint64);
    val.skRegion =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    val.subframeContentInfo =
        decoder.decodeMapPointer(codec.Uint32, codec.Uint64);
    return val;
  };

  PrintCompositor_CompositeDocumentToPdf_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_CompositeDocumentToPdf_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.frameGuid);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.skRegion);
    encoder.encodeMapPointer(codec.Uint32, codec.Uint64, val.subframeContentInfo);
  };
  function PrintCompositor_CompositeDocumentToPdf_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_CompositeDocumentToPdf_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.pdfRegion = null;
  };
  PrintCompositor_CompositeDocumentToPdf_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_CompositeDocumentToPdf_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_CompositeDocumentToPdf_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PrintCompositor.Status);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_CompositeDocumentToPdf_ResponseParams.pdfRegion
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.ReadOnlySharedMemoryRegion, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintCompositor_CompositeDocumentToPdf_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintCompositor_CompositeDocumentToPdf_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_CompositeDocumentToPdf_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PrintCompositor.Status));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.pdfRegion =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    return val;
  };

  PrintCompositor_CompositeDocumentToPdf_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_CompositeDocumentToPdf_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.pdfRegion);
  };
  function PrintCompositor_PrepareForDocumentToPdf_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_PrepareForDocumentToPdf_Params.prototype.initDefaults_ = function() {
  };
  PrintCompositor_PrepareForDocumentToPdf_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_PrepareForDocumentToPdf_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintCompositor_PrepareForDocumentToPdf_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintCompositor_PrepareForDocumentToPdf_Params.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_PrepareForDocumentToPdf_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintCompositor_PrepareForDocumentToPdf_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_PrepareForDocumentToPdf_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintCompositor_PrepareForDocumentToPdf_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_PrepareForDocumentToPdf_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  PrintCompositor_PrepareForDocumentToPdf_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_PrepareForDocumentToPdf_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_PrepareForDocumentToPdf_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PrintCompositor.Status);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintCompositor_PrepareForDocumentToPdf_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PrintCompositor_PrepareForDocumentToPdf_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_PrepareForDocumentToPdf_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PrintCompositor.Status));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintCompositor_PrepareForDocumentToPdf_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_PrepareForDocumentToPdf_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintCompositor_CompleteDocumentToPdf_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_CompleteDocumentToPdf_Params.prototype.initDefaults_ = function() {
    this.pagesCount = 0;
  };
  PrintCompositor_CompleteDocumentToPdf_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_CompleteDocumentToPdf_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintCompositor_CompleteDocumentToPdf_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintCompositor_CompleteDocumentToPdf_Params.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_CompleteDocumentToPdf_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pagesCount =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintCompositor_CompleteDocumentToPdf_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_CompleteDocumentToPdf_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.pagesCount);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintCompositor_CompleteDocumentToPdf_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_CompleteDocumentToPdf_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.pdfRegion = null;
  };
  PrintCompositor_CompleteDocumentToPdf_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_CompleteDocumentToPdf_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_CompleteDocumentToPdf_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PrintCompositor.Status);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_CompleteDocumentToPdf_ResponseParams.pdfRegion
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.ReadOnlySharedMemoryRegion, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintCompositor_CompleteDocumentToPdf_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintCompositor_CompleteDocumentToPdf_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_CompleteDocumentToPdf_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PrintCompositor.Status));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.pdfRegion =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    return val;
  };

  PrintCompositor_CompleteDocumentToPdf_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_CompleteDocumentToPdf_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.pdfRegion);
  };
  function PrintCompositor_SetWebContentsURL_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_SetWebContentsURL_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  PrintCompositor_SetWebContentsURL_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_SetWebContentsURL_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_SetWebContentsURL_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintCompositor_SetWebContentsURL_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintCompositor_SetWebContentsURL_Params.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_SetWebContentsURL_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PrintCompositor_SetWebContentsURL_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_SetWebContentsURL_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function PrintCompositor_SetUserAgent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintCompositor_SetUserAgent_Params.prototype.initDefaults_ = function() {
    this.userAgent = null;
  };
  PrintCompositor_SetUserAgent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintCompositor_SetUserAgent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintCompositor_SetUserAgent_Params.userAgent
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintCompositor_SetUserAgent_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintCompositor_SetUserAgent_Params.decode = function(decoder) {
    var packed;
    var val = new PrintCompositor_SetUserAgent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.userAgent =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PrintCompositor_SetUserAgent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintCompositor_SetUserAgent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.userAgent);
  };
  var kPrintCompositor_NotifyUnavailableSubframe_Name = 323234714;
  var kPrintCompositor_AddSubframeContent_Name = 2049088784;
  var kPrintCompositor_SetAccessibilityTree_Name = 2133856613;
  var kPrintCompositor_CompositePageToPdf_Name = 1954851389;
  var kPrintCompositor_CompositeDocumentToPdf_Name = 708675559;
  var kPrintCompositor_PrepareForDocumentToPdf_Name = 300541084;
  var kPrintCompositor_CompleteDocumentToPdf_Name = 1523869156;
  var kPrintCompositor_SetWebContentsURL_Name = 1911462060;
  var kPrintCompositor_SetUserAgent_Name = 245892767;

  function PrintCompositorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrintCompositor,
                                                   handleOrPtrInfo);
  }

  function PrintCompositorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrintCompositor, associatedInterfacePtrInfo);
  }

  PrintCompositorAssociatedPtr.prototype =
      Object.create(PrintCompositorPtr.prototype);
  PrintCompositorAssociatedPtr.prototype.constructor =
      PrintCompositorAssociatedPtr;

  function PrintCompositorProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrintCompositorPtr.prototype.notifyUnavailableSubframe = function() {
    return PrintCompositorProxy.prototype.notifyUnavailableSubframe
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintCompositorProxy.prototype.notifyUnavailableSubframe = function(frameGuid) {
    var params_ = new PrintCompositor_NotifyUnavailableSubframe_Params();
    params_.frameGuid = frameGuid;
    var builder = new codec.MessageV0Builder(
        kPrintCompositor_NotifyUnavailableSubframe_Name,
        codec.align(PrintCompositor_NotifyUnavailableSubframe_Params.encodedSize));
    builder.encodeStruct(PrintCompositor_NotifyUnavailableSubframe_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintCompositorPtr.prototype.addSubframeContent = function() {
    return PrintCompositorProxy.prototype.addSubframeContent
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintCompositorProxy.prototype.addSubframeContent = function(frameGuid, serializedContent, subframeContentInfo) {
    var params_ = new PrintCompositor_AddSubframeContent_Params();
    params_.frameGuid = frameGuid;
    params_.serializedContent = serializedContent;
    params_.subframeContentInfo = subframeContentInfo;
    var builder = new codec.MessageV0Builder(
        kPrintCompositor_AddSubframeContent_Name,
        codec.align(PrintCompositor_AddSubframeContent_Params.encodedSize));
    builder.encodeStruct(PrintCompositor_AddSubframeContent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintCompositorPtr.prototype.setAccessibilityTree = function() {
    return PrintCompositorProxy.prototype.setAccessibilityTree
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintCompositorProxy.prototype.setAccessibilityTree = function(accessibilityTree) {
    var params_ = new PrintCompositor_SetAccessibilityTree_Params();
    params_.accessibilityTree = accessibilityTree;
    var builder = new codec.MessageV0Builder(
        kPrintCompositor_SetAccessibilityTree_Name,
        codec.align(PrintCompositor_SetAccessibilityTree_Params.encodedSize));
    builder.encodeStruct(PrintCompositor_SetAccessibilityTree_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintCompositorPtr.prototype.compositePageToPdf = function() {
    return PrintCompositorProxy.prototype.compositePageToPdf
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintCompositorProxy.prototype.compositePageToPdf = function(frameGuid, skRegion, subframeContentInfo) {
    var params_ = new PrintCompositor_CompositePageToPdf_Params();
    params_.frameGuid = frameGuid;
    params_.skRegion = skRegion;
    params_.subframeContentInfo = subframeContentInfo;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintCompositor_CompositePageToPdf_Name,
          codec.align(PrintCompositor_CompositePageToPdf_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintCompositor_CompositePageToPdf_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintCompositor_CompositePageToPdf_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintCompositorPtr.prototype.compositeDocumentToPdf = function() {
    return PrintCompositorProxy.prototype.compositeDocumentToPdf
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintCompositorProxy.prototype.compositeDocumentToPdf = function(frameGuid, skRegion, subframeContentInfo) {
    var params_ = new PrintCompositor_CompositeDocumentToPdf_Params();
    params_.frameGuid = frameGuid;
    params_.skRegion = skRegion;
    params_.subframeContentInfo = subframeContentInfo;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintCompositor_CompositeDocumentToPdf_Name,
          codec.align(PrintCompositor_CompositeDocumentToPdf_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintCompositor_CompositeDocumentToPdf_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintCompositor_CompositeDocumentToPdf_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintCompositorPtr.prototype.prepareForDocumentToPdf = function() {
    return PrintCompositorProxy.prototype.prepareForDocumentToPdf
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintCompositorProxy.prototype.prepareForDocumentToPdf = function() {
    var params_ = new PrintCompositor_PrepareForDocumentToPdf_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintCompositor_PrepareForDocumentToPdf_Name,
          codec.align(PrintCompositor_PrepareForDocumentToPdf_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintCompositor_PrepareForDocumentToPdf_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintCompositor_PrepareForDocumentToPdf_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintCompositorPtr.prototype.completeDocumentToPdf = function() {
    return PrintCompositorProxy.prototype.completeDocumentToPdf
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintCompositorProxy.prototype.completeDocumentToPdf = function(pagesCount) {
    var params_ = new PrintCompositor_CompleteDocumentToPdf_Params();
    params_.pagesCount = pagesCount;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintCompositor_CompleteDocumentToPdf_Name,
          codec.align(PrintCompositor_CompleteDocumentToPdf_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintCompositor_CompleteDocumentToPdf_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintCompositor_CompleteDocumentToPdf_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintCompositorPtr.prototype.setWebContentsURL = function() {
    return PrintCompositorProxy.prototype.setWebContentsURL
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintCompositorProxy.prototype.setWebContentsURL = function(url) {
    var params_ = new PrintCompositor_SetWebContentsURL_Params();
    params_.url = url;
    var builder = new codec.MessageV0Builder(
        kPrintCompositor_SetWebContentsURL_Name,
        codec.align(PrintCompositor_SetWebContentsURL_Params.encodedSize));
    builder.encodeStruct(PrintCompositor_SetWebContentsURL_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintCompositorPtr.prototype.setUserAgent = function() {
    return PrintCompositorProxy.prototype.setUserAgent
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintCompositorProxy.prototype.setUserAgent = function(userAgent) {
    var params_ = new PrintCompositor_SetUserAgent_Params();
    params_.userAgent = userAgent;
    var builder = new codec.MessageV0Builder(
        kPrintCompositor_SetUserAgent_Name,
        codec.align(PrintCompositor_SetUserAgent_Params.encodedSize));
    builder.encodeStruct(PrintCompositor_SetUserAgent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PrintCompositorStub(delegate) {
    this.delegate_ = delegate;
  }
  PrintCompositorStub.prototype.notifyUnavailableSubframe = function(frameGuid) {
    return this.delegate_ && this.delegate_.notifyUnavailableSubframe && this.delegate_.notifyUnavailableSubframe(frameGuid);
  }
  PrintCompositorStub.prototype.addSubframeContent = function(frameGuid, serializedContent, subframeContentInfo) {
    return this.delegate_ && this.delegate_.addSubframeContent && this.delegate_.addSubframeContent(frameGuid, serializedContent, subframeContentInfo);
  }
  PrintCompositorStub.prototype.setAccessibilityTree = function(accessibilityTree) {
    return this.delegate_ && this.delegate_.setAccessibilityTree && this.delegate_.setAccessibilityTree(accessibilityTree);
  }
  PrintCompositorStub.prototype.compositePageToPdf = function(frameGuid, skRegion, subframeContentInfo) {
    return this.delegate_ && this.delegate_.compositePageToPdf && this.delegate_.compositePageToPdf(frameGuid, skRegion, subframeContentInfo);
  }
  PrintCompositorStub.prototype.compositeDocumentToPdf = function(frameGuid, skRegion, subframeContentInfo) {
    return this.delegate_ && this.delegate_.compositeDocumentToPdf && this.delegate_.compositeDocumentToPdf(frameGuid, skRegion, subframeContentInfo);
  }
  PrintCompositorStub.prototype.prepareForDocumentToPdf = function() {
    return this.delegate_ && this.delegate_.prepareForDocumentToPdf && this.delegate_.prepareForDocumentToPdf();
  }
  PrintCompositorStub.prototype.completeDocumentToPdf = function(pagesCount) {
    return this.delegate_ && this.delegate_.completeDocumentToPdf && this.delegate_.completeDocumentToPdf(pagesCount);
  }
  PrintCompositorStub.prototype.setWebContentsURL = function(url) {
    return this.delegate_ && this.delegate_.setWebContentsURL && this.delegate_.setWebContentsURL(url);
  }
  PrintCompositorStub.prototype.setUserAgent = function(userAgent) {
    return this.delegate_ && this.delegate_.setUserAgent && this.delegate_.setUserAgent(userAgent);
  }

  PrintCompositorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrintCompositor_NotifyUnavailableSubframe_Name:
      var params = reader.decodeStruct(PrintCompositor_NotifyUnavailableSubframe_Params);
      this.notifyUnavailableSubframe(params.frameGuid);
      return true;
    case kPrintCompositor_AddSubframeContent_Name:
      var params = reader.decodeStruct(PrintCompositor_AddSubframeContent_Params);
      this.addSubframeContent(params.frameGuid, params.serializedContent, params.subframeContentInfo);
      return true;
    case kPrintCompositor_SetAccessibilityTree_Name:
      var params = reader.decodeStruct(PrintCompositor_SetAccessibilityTree_Params);
      this.setAccessibilityTree(params.accessibilityTree);
      return true;
    case kPrintCompositor_SetWebContentsURL_Name:
      var params = reader.decodeStruct(PrintCompositor_SetWebContentsURL_Params);
      this.setWebContentsURL(params.url);
      return true;
    case kPrintCompositor_SetUserAgent_Name:
      var params = reader.decodeStruct(PrintCompositor_SetUserAgent_Params);
      this.setUserAgent(params.userAgent);
      return true;
    default:
      return false;
    }
  };

  PrintCompositorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrintCompositor_CompositePageToPdf_Name:
      var params = reader.decodeStruct(PrintCompositor_CompositePageToPdf_Params);
      this.compositePageToPdf(params.frameGuid, params.skRegion, params.subframeContentInfo).then(function(response) {
        var responseParams =
            new PrintCompositor_CompositePageToPdf_ResponseParams();
        responseParams.status = response.status;
        responseParams.pdfRegion = response.pdfRegion;
        var builder = new codec.MessageV1Builder(
            kPrintCompositor_CompositePageToPdf_Name,
            codec.align(PrintCompositor_CompositePageToPdf_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintCompositor_CompositePageToPdf_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintCompositor_CompositeDocumentToPdf_Name:
      var params = reader.decodeStruct(PrintCompositor_CompositeDocumentToPdf_Params);
      this.compositeDocumentToPdf(params.frameGuid, params.skRegion, params.subframeContentInfo).then(function(response) {
        var responseParams =
            new PrintCompositor_CompositeDocumentToPdf_ResponseParams();
        responseParams.status = response.status;
        responseParams.pdfRegion = response.pdfRegion;
        var builder = new codec.MessageV1Builder(
            kPrintCompositor_CompositeDocumentToPdf_Name,
            codec.align(PrintCompositor_CompositeDocumentToPdf_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintCompositor_CompositeDocumentToPdf_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintCompositor_PrepareForDocumentToPdf_Name:
      var params = reader.decodeStruct(PrintCompositor_PrepareForDocumentToPdf_Params);
      this.prepareForDocumentToPdf().then(function(response) {
        var responseParams =
            new PrintCompositor_PrepareForDocumentToPdf_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kPrintCompositor_PrepareForDocumentToPdf_Name,
            codec.align(PrintCompositor_PrepareForDocumentToPdf_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintCompositor_PrepareForDocumentToPdf_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintCompositor_CompleteDocumentToPdf_Name:
      var params = reader.decodeStruct(PrintCompositor_CompleteDocumentToPdf_Params);
      this.completeDocumentToPdf(params.pagesCount).then(function(response) {
        var responseParams =
            new PrintCompositor_CompleteDocumentToPdf_ResponseParams();
        responseParams.status = response.status;
        responseParams.pdfRegion = response.pdfRegion;
        var builder = new codec.MessageV1Builder(
            kPrintCompositor_CompleteDocumentToPdf_Name,
            codec.align(PrintCompositor_CompleteDocumentToPdf_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintCompositor_CompleteDocumentToPdf_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePrintCompositorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrintCompositor_NotifyUnavailableSubframe_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintCompositor_NotifyUnavailableSubframe_Params;
      break;
      case kPrintCompositor_AddSubframeContent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintCompositor_AddSubframeContent_Params;
      break;
      case kPrintCompositor_SetAccessibilityTree_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintCompositor_SetAccessibilityTree_Params;
      break;
      case kPrintCompositor_CompositePageToPdf_Name:
        if (message.expectsResponse())
          paramsClass = PrintCompositor_CompositePageToPdf_Params;
      break;
      case kPrintCompositor_CompositeDocumentToPdf_Name:
        if (message.expectsResponse())
          paramsClass = PrintCompositor_CompositeDocumentToPdf_Params;
      break;
      case kPrintCompositor_PrepareForDocumentToPdf_Name:
        if (message.expectsResponse())
          paramsClass = PrintCompositor_PrepareForDocumentToPdf_Params;
      break;
      case kPrintCompositor_CompleteDocumentToPdf_Name:
        if (message.expectsResponse())
          paramsClass = PrintCompositor_CompleteDocumentToPdf_Params;
      break;
      case kPrintCompositor_SetWebContentsURL_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintCompositor_SetWebContentsURL_Params;
      break;
      case kPrintCompositor_SetUserAgent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintCompositor_SetUserAgent_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrintCompositorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPrintCompositor_CompositePageToPdf_Name:
        if (message.isResponse())
          paramsClass = PrintCompositor_CompositePageToPdf_ResponseParams;
        break;
      case kPrintCompositor_CompositeDocumentToPdf_Name:
        if (message.isResponse())
          paramsClass = PrintCompositor_CompositeDocumentToPdf_ResponseParams;
        break;
      case kPrintCompositor_PrepareForDocumentToPdf_Name:
        if (message.isResponse())
          paramsClass = PrintCompositor_PrepareForDocumentToPdf_ResponseParams;
        break;
      case kPrintCompositor_CompleteDocumentToPdf_Name:
        if (message.isResponse())
          paramsClass = PrintCompositor_CompleteDocumentToPdf_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PrintCompositor = {
    name: 'printing.mojom.PrintCompositor',
    kVersion: 0,
    ptrClass: PrintCompositorPtr,
    proxyClass: PrintCompositorProxy,
    stubClass: PrintCompositorStub,
    validateRequest: validatePrintCompositorRequest,
    validateResponse: validatePrintCompositorResponse,
  };
  PrintCompositor.Status = {};
  PrintCompositor.Status.kSuccess = 0;
  PrintCompositor.Status.kHandleMapError = 1;
  PrintCompositor.Status.kContentFormatError = 2;
  PrintCompositor.Status.kCompositingFailure = 3;
  PrintCompositor.Status.MIN_VALUE = 0;
  PrintCompositor.Status.MAX_VALUE = 3;

  PrintCompositor.Status.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  PrintCompositor.Status.toKnownEnumValue = function(value) {
    return value;
  };

  PrintCompositor.Status.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  PrintCompositorStub.prototype.validator = validatePrintCompositorRequest;
  PrintCompositorProxy.prototype.validator = validatePrintCompositorResponse;
  exports.PrintCompositor = PrintCompositor;
  exports.PrintCompositorPtr = PrintCompositorPtr;
  exports.PrintCompositorAssociatedPtr = PrintCompositorAssociatedPtr;
})();