// components/download/public/common/download_stream.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/download/public/common/download_stream.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('download.mojom');


  var NetworkRequestStatus = {};
  NetworkRequestStatus.OK = 0;
  NetworkRequestStatus.NETWORK_TIMEOUT = 1;
  NetworkRequestStatus.NETWORK_DISCONNECTED = 2;
  NetworkRequestStatus.NETWORK_SERVER_DOWN = 3;
  NetworkRequestStatus.SERVER_NO_RANGE = 4;
  NetworkRequestStatus.SERVER_CONTENT_LENGTH_MISMATCH = 5;
  NetworkRequestStatus.SERVER_UNREACHABLE = 6;
  NetworkRequestStatus.SERVER_CERT_PROBLEM = 7;
  NetworkRequestStatus.USER_CANCELED = 8;
  NetworkRequestStatus.NETWORK_FAILED = 9;
  NetworkRequestStatus.MIN_VALUE = 0;
  NetworkRequestStatus.MAX_VALUE = 9;

  NetworkRequestStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    }
    return false;
  };

  NetworkRequestStatus.toKnownEnumValue = function(value) {
    return value;
  };

  NetworkRequestStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function DownloadStreamHandle(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DownloadStreamHandle.prototype.initDefaults_ = function() {
    this.stream = null;
    this.clientReceiver = new bindings.InterfaceRequest();
  };
  DownloadStreamHandle.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DownloadStreamHandle.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DownloadStreamHandle.stream
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DownloadStreamHandle.clientReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 4, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DownloadStreamHandle.encodedSize = codec.kStructHeaderSize + 8;

  DownloadStreamHandle.decode = function(decoder) {
    var packed;
    var val = new DownloadStreamHandle();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.stream =
        decoder.decodeStruct(codec.Handle);
    val.clientReceiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    return val;
  };

  DownloadStreamHandle.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DownloadStreamHandle.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Handle, val.stream);
    encoder.encodeStruct(codec.InterfaceRequest, val.clientReceiver);
  };
  function DownloadStreamClient_OnStreamCompleted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DownloadStreamClient_OnStreamCompleted_Params.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  DownloadStreamClient_OnStreamCompleted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DownloadStreamClient_OnStreamCompleted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DownloadStreamClient_OnStreamCompleted_Params.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, NetworkRequestStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DownloadStreamClient_OnStreamCompleted_Params.encodedSize = codec.kStructHeaderSize + 8;

  DownloadStreamClient_OnStreamCompleted_Params.decode = function(decoder) {
    var packed;
    var val = new DownloadStreamClient_OnStreamCompleted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(NetworkRequestStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DownloadStreamClient_OnStreamCompleted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DownloadStreamClient_OnStreamCompleted_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kDownloadStreamClient_OnStreamCompleted_Name = 1506143452;

  function DownloadStreamClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DownloadStreamClient,
                                                   handleOrPtrInfo);
  }

  function DownloadStreamClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DownloadStreamClient, associatedInterfacePtrInfo);
  }

  DownloadStreamClientAssociatedPtr.prototype =
      Object.create(DownloadStreamClientPtr.prototype);
  DownloadStreamClientAssociatedPtr.prototype.constructor =
      DownloadStreamClientAssociatedPtr;

  function DownloadStreamClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  DownloadStreamClientPtr.prototype.onStreamCompleted = function() {
    return DownloadStreamClientProxy.prototype.onStreamCompleted
        .apply(this.ptr.getProxy(), arguments);
  };

  DownloadStreamClientProxy.prototype.onStreamCompleted = function(status) {
    var params_ = new DownloadStreamClient_OnStreamCompleted_Params();
    params_.status = status;
    var builder = new codec.MessageV0Builder(
        kDownloadStreamClient_OnStreamCompleted_Name,
        codec.align(DownloadStreamClient_OnStreamCompleted_Params.encodedSize));
    builder.encodeStruct(DownloadStreamClient_OnStreamCompleted_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DownloadStreamClientStub(delegate) {
    this.delegate_ = delegate;
  }
  DownloadStreamClientStub.prototype.onStreamCompleted = function(status) {
    return this.delegate_ && this.delegate_.onStreamCompleted && this.delegate_.onStreamCompleted(status);
  }

  DownloadStreamClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDownloadStreamClient_OnStreamCompleted_Name:
      var params = reader.decodeStruct(DownloadStreamClient_OnStreamCompleted_Params);
      this.onStreamCompleted(params.status);
      return true;
    default:
      return false;
    }
  };

  DownloadStreamClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDownloadStreamClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDownloadStreamClient_OnStreamCompleted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DownloadStreamClient_OnStreamCompleted_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDownloadStreamClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DownloadStreamClient = {
    name: 'download.mojom.DownloadStreamClient',
    kVersion: 0,
    ptrClass: DownloadStreamClientPtr,
    proxyClass: DownloadStreamClientProxy,
    stubClass: DownloadStreamClientStub,
    validateRequest: validateDownloadStreamClientRequest,
    validateResponse: null,
  };
  DownloadStreamClientStub.prototype.validator = validateDownloadStreamClientRequest;
  DownloadStreamClientProxy.prototype.validator = null;
  exports.NetworkRequestStatus = NetworkRequestStatus;
  exports.DownloadStreamHandle = DownloadStreamHandle;
  exports.DownloadStreamClient = DownloadStreamClient;
  exports.DownloadStreamClientPtr = DownloadStreamClientPtr;
  exports.DownloadStreamClientAssociatedPtr = DownloadStreamClientAssociatedPtr;
})();