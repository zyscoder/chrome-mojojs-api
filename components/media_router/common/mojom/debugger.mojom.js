// components/media_router/common/mojom/debugger.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/media_router/common/mojom/debugger.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('mediaRouter.mojom');
  var values$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/values.mojom', '../../../../mojo/public/mojom/base/values.mojom.js');
  }



  function Debugger_ShouldFetchMirroringStats_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Debugger_ShouldFetchMirroringStats_Params.prototype.initDefaults_ = function() {
  };
  Debugger_ShouldFetchMirroringStats_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Debugger_ShouldFetchMirroringStats_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Debugger_ShouldFetchMirroringStats_Params.encodedSize = codec.kStructHeaderSize + 0;

  Debugger_ShouldFetchMirroringStats_Params.decode = function(decoder) {
    var packed;
    var val = new Debugger_ShouldFetchMirroringStats_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Debugger_ShouldFetchMirroringStats_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Debugger_ShouldFetchMirroringStats_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Debugger_ShouldFetchMirroringStats_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Debugger_ShouldFetchMirroringStats_ResponseParams.prototype.initDefaults_ = function() {
    this.shouldFetch = false;
  };
  Debugger_ShouldFetchMirroringStats_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Debugger_ShouldFetchMirroringStats_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Debugger_ShouldFetchMirroringStats_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Debugger_ShouldFetchMirroringStats_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Debugger_ShouldFetchMirroringStats_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.shouldFetch = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Debugger_ShouldFetchMirroringStats_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Debugger_ShouldFetchMirroringStats_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.shouldFetch & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Debugger_OnMirroringStats_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Debugger_OnMirroringStats_Params.prototype.initDefaults_ = function() {
    this.jsonStats = null;
  };
  Debugger_OnMirroringStats_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Debugger_OnMirroringStats_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Debugger_OnMirroringStats_Params.jsonStats
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, values$.Value, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Debugger_OnMirroringStats_Params.encodedSize = codec.kStructHeaderSize + 16;

  Debugger_OnMirroringStats_Params.decode = function(decoder) {
    var packed;
    var val = new Debugger_OnMirroringStats_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.jsonStats =
        decoder.decodeStruct(values$.Value);
    return val;
  };

  Debugger_OnMirroringStats_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Debugger_OnMirroringStats_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(values$.Value, val.jsonStats);
  };
  function Debugger_BindReceiver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Debugger_BindReceiver_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  Debugger_BindReceiver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Debugger_BindReceiver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Debugger_BindReceiver_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Debugger_BindReceiver_Params.encodedSize = codec.kStructHeaderSize + 8;

  Debugger_BindReceiver_Params.decode = function(decoder) {
    var packed;
    var val = new Debugger_BindReceiver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Debugger_BindReceiver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Debugger_BindReceiver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kDebugger_ShouldFetchMirroringStats_Name = 705395637;
  var kDebugger_OnMirroringStats_Name = 1731629043;
  var kDebugger_BindReceiver_Name = 115947854;

  function DebuggerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Debugger,
                                                   handleOrPtrInfo);
  }

  function DebuggerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Debugger, associatedInterfacePtrInfo);
  }

  DebuggerAssociatedPtr.prototype =
      Object.create(DebuggerPtr.prototype);
  DebuggerAssociatedPtr.prototype.constructor =
      DebuggerAssociatedPtr;

  function DebuggerProxy(receiver) {
    this.receiver_ = receiver;
  }
  DebuggerPtr.prototype.shouldFetchMirroringStats = function() {
    return DebuggerProxy.prototype.shouldFetchMirroringStats
        .apply(this.ptr.getProxy(), arguments);
  };

  DebuggerProxy.prototype.shouldFetchMirroringStats = function() {
    var params_ = new Debugger_ShouldFetchMirroringStats_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kDebugger_ShouldFetchMirroringStats_Name,
          codec.align(Debugger_ShouldFetchMirroringStats_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Debugger_ShouldFetchMirroringStats_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Debugger_ShouldFetchMirroringStats_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  DebuggerPtr.prototype.onMirroringStats = function() {
    return DebuggerProxy.prototype.onMirroringStats
        .apply(this.ptr.getProxy(), arguments);
  };

  DebuggerProxy.prototype.onMirroringStats = function(jsonStats) {
    var params_ = new Debugger_OnMirroringStats_Params();
    params_.jsonStats = jsonStats;
    var builder = new codec.MessageV0Builder(
        kDebugger_OnMirroringStats_Name,
        codec.align(Debugger_OnMirroringStats_Params.encodedSize));
    builder.encodeStruct(Debugger_OnMirroringStats_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DebuggerPtr.prototype.bindReceiver = function() {
    return DebuggerProxy.prototype.bindReceiver
        .apply(this.ptr.getProxy(), arguments);
  };

  DebuggerProxy.prototype.bindReceiver = function(receiver) {
    var params_ = new Debugger_BindReceiver_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDebugger_BindReceiver_Name,
        codec.align(Debugger_BindReceiver_Params.encodedSize));
    builder.encodeStruct(Debugger_BindReceiver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DebuggerStub(delegate) {
    this.delegate_ = delegate;
  }
  DebuggerStub.prototype.shouldFetchMirroringStats = function() {
    return this.delegate_ && this.delegate_.shouldFetchMirroringStats && this.delegate_.shouldFetchMirroringStats();
  }
  DebuggerStub.prototype.onMirroringStats = function(jsonStats) {
    return this.delegate_ && this.delegate_.onMirroringStats && this.delegate_.onMirroringStats(jsonStats);
  }
  DebuggerStub.prototype.bindReceiver = function(receiver) {
    return this.delegate_ && this.delegate_.bindReceiver && this.delegate_.bindReceiver(receiver);
  }

  DebuggerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDebugger_OnMirroringStats_Name:
      var params = reader.decodeStruct(Debugger_OnMirroringStats_Params);
      this.onMirroringStats(params.jsonStats);
      return true;
    case kDebugger_BindReceiver_Name:
      var params = reader.decodeStruct(Debugger_BindReceiver_Params);
      this.bindReceiver(params.receiver);
      return true;
    default:
      return false;
    }
  };

  DebuggerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDebugger_ShouldFetchMirroringStats_Name:
      var params = reader.decodeStruct(Debugger_ShouldFetchMirroringStats_Params);
      this.shouldFetchMirroringStats().then(function(response) {
        var responseParams =
            new Debugger_ShouldFetchMirroringStats_ResponseParams();
        responseParams.shouldFetch = response.shouldFetch;
        var builder = new codec.MessageV1Builder(
            kDebugger_ShouldFetchMirroringStats_Name,
            codec.align(Debugger_ShouldFetchMirroringStats_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Debugger_ShouldFetchMirroringStats_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateDebuggerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDebugger_ShouldFetchMirroringStats_Name:
        if (message.expectsResponse())
          paramsClass = Debugger_ShouldFetchMirroringStats_Params;
      break;
      case kDebugger_OnMirroringStats_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Debugger_OnMirroringStats_Params;
      break;
      case kDebugger_BindReceiver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Debugger_BindReceiver_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDebuggerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kDebugger_ShouldFetchMirroringStats_Name:
        if (message.isResponse())
          paramsClass = Debugger_ShouldFetchMirroringStats_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Debugger = {
    name: 'media_router.mojom.Debugger',
    kVersion: 0,
    ptrClass: DebuggerPtr,
    proxyClass: DebuggerProxy,
    stubClass: DebuggerStub,
    validateRequest: validateDebuggerRequest,
    validateResponse: validateDebuggerResponse,
  };
  DebuggerStub.prototype.validator = validateDebuggerRequest;
  DebuggerProxy.prototype.validator = validateDebuggerResponse;
  exports.Debugger = Debugger;
  exports.DebuggerPtr = DebuggerPtr;
  exports.DebuggerAssociatedPtr = DebuggerAssociatedPtr;
})();