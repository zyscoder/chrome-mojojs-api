// components/safe_browsing/content/common/safe_browsing.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/safe_browsing/content/common/safe_browsing.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('safeBrowsing.mojom');
  var safe_browsing_url_checker$ =
      mojo.internal.exposeNamespace('safeBrowsing.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/safe_browsing/core/common/safe_browsing_url_checker.mojom', '../../core/common/safe_browsing_url_checker.mojom.js');
  }
  var byte_string$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/byte_string.mojom', '../../../../mojo/public/mojom/base/byte_string.mojom.js');
  }
  var read_only_file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_file.mojom', '../../../../mojo/public/mojom/base/read_only_file.mojom.js');
  }
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }
  var http_request_headers$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/http_request_headers.mojom', '../../../../services/network/public/mojom/http_request_headers.mojom.js');
  }
  var fetch_api$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/fetch_api.mojom', '../../../../services/network/public/mojom/fetch_api.mojom.js');
  }
  var tokens$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/tokens/tokens.mojom', '../../../../third_party/blink/public/mojom/tokens/tokens.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../url/mojom/url.mojom.js');
  }


  var PhishingDetectorResult = {};
  PhishingDetectorResult.SUCCESS = 0;
  PhishingDetectorResult.CLASSIFIER_NOT_READY = 1;
  PhishingDetectorResult.CANCELLED = 2;
  PhishingDetectorResult.FORWARD_BACK_TRANSITION = 3;
  PhishingDetectorResult.INVALID_SCORE = 4;
  PhishingDetectorResult.MIN_VALUE = 0;
  PhishingDetectorResult.MAX_VALUE = 4;

  PhishingDetectorResult.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  PhishingDetectorResult.toKnownEnumValue = function(value) {
    return value;
  };

  PhishingDetectorResult.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var PhishingImageEmbeddingResult = {};
  PhishingImageEmbeddingResult.kSuccess = 0;
  PhishingImageEmbeddingResult.kImageEmbedderNotReady = 1;
  PhishingImageEmbeddingResult.kCancelled = 2;
  PhishingImageEmbeddingResult.kForwardBackTransition = 3;
  PhishingImageEmbeddingResult.kFailed = 4;
  PhishingImageEmbeddingResult.MIN_VALUE = 0;
  PhishingImageEmbeddingResult.MAX_VALUE = 4;

  PhishingImageEmbeddingResult.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  PhishingImageEmbeddingResult.toKnownEnumValue = function(value) {
    return value;
  };

  PhishingImageEmbeddingResult.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var WebRequestProtocolType = {};
  WebRequestProtocolType.kHttpHttps = 0;
  WebRequestProtocolType.kWebSocket = 1;
  WebRequestProtocolType.MIN_VALUE = 0;
  WebRequestProtocolType.MAX_VALUE = 1;

  WebRequestProtocolType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  WebRequestProtocolType.toKnownEnumValue = function(value) {
    return value;
  };

  WebRequestProtocolType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function AttributeNameValue(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributeNameValue.prototype.initDefaults_ = function() {
    this.name = null;
    this.value = null;
  };
  AttributeNameValue.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributeNameValue.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributeNameValue.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributeNameValue.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AttributeNameValue.encodedSize = codec.kStructHeaderSize + 16;

  AttributeNameValue.decode = function(decoder) {
    var packed;
    var val = new AttributeNameValue();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  AttributeNameValue.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributeNameValue.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.String, val.value);
  };
  function ThreatDOMDetailsNode(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ThreatDOMDetailsNode.prototype.initDefaults_ = function() {
    this.nodeId = 0;
    this.parentNodeId = 0;
    this.url = null;
    this.tagName = null;
    this.parent = null;
    this.children = null;
    this.childNodeIds = null;
    this.attributes = null;
    this.childFrameToken = null;
    this.innerHtml = null;
  };
  ThreatDOMDetailsNode.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ThreatDOMDetailsNode.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 88}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ThreatDOMDetailsNode.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatDOMDetailsNode.tagName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatDOMDetailsNode.parent
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ThreatDOMDetailsNode.children
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(url$.Url), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatDOMDetailsNode.childNodeIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 40, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatDOMDetailsNode.attributes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 8, new codec.PointerTo(AttributeNameValue), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatDOMDetailsNode.childFrameToken
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 56, tokens$.FrameToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatDOMDetailsNode.innerHtml
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 72, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ThreatDOMDetailsNode.encodedSize = codec.kStructHeaderSize + 80;

  ThreatDOMDetailsNode.decode = function(decoder) {
    var packed;
    var val = new ThreatDOMDetailsNode();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nodeId =
        decoder.decodeStruct(codec.Int32);
    val.parentNodeId =
        decoder.decodeStruct(codec.Int32);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.tagName =
        decoder.decodeStruct(codec.String);
    val.parent =
        decoder.decodeStructPointer(url$.Url);
    val.children =
        decoder.decodeArrayPointer(new codec.PointerTo(url$.Url));
    val.childNodeIds =
        decoder.decodeArrayPointer(codec.Int32);
    val.attributes =
        decoder.decodeArrayPointer(new codec.PointerTo(AttributeNameValue));
    val.childFrameToken =
        decoder.decodeStruct(tokens$.FrameToken);
    val.innerHtml =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ThreatDOMDetailsNode.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ThreatDOMDetailsNode.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.nodeId);
    encoder.encodeStruct(codec.Int32, val.parentNodeId);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.tagName);
    encoder.encodeStructPointer(url$.Url, val.parent);
    encoder.encodeArrayPointer(new codec.PointerTo(url$.Url), val.children);
    encoder.encodeArrayPointer(codec.Int32, val.childNodeIds);
    encoder.encodeArrayPointer(new codec.PointerTo(AttributeNameValue), val.attributes);
    encoder.encodeStruct(tokens$.FrameToken, val.childFrameToken);
    encoder.encodeStruct(codec.String, val.innerHtml);
  };
  function SafeBrowsing_CreateCheckerAndCheck_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeBrowsing_CreateCheckerAndCheck_Params.prototype.initDefaults_ = function() {
    this.renderFrameId = 0;
    this.receiver = new bindings.InterfaceRequest();
    this.url = null;
    this.method = null;
    this.headers = null;
    this.loadFlags = 0;
    this.requestDestination = 0;
    this.hasUserGesture = false;
    this.originatedFromServiceWorker = false;
  };
  SafeBrowsing_CreateCheckerAndCheck_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeBrowsing_CreateCheckerAndCheck_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SafeBrowsing_CreateCheckerAndCheck_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 4, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsing_CreateCheckerAndCheck_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsing_CreateCheckerAndCheck_Params.method
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsing_CreateCheckerAndCheck_Params.headers
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, http_request_headers$.HttpRequestHeaders, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SafeBrowsing_CreateCheckerAndCheck_Params.requestDestination
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 36, fetch_api$.RequestDestination);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  SafeBrowsing_CreateCheckerAndCheck_Params.encodedSize = codec.kStructHeaderSize + 48;

  SafeBrowsing_CreateCheckerAndCheck_Params.decode = function(decoder) {
    var packed;
    var val = new SafeBrowsing_CreateCheckerAndCheck_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.renderFrameId =
        decoder.decodeStruct(codec.Int32);
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.method =
        decoder.decodeStruct(codec.String);
    val.headers =
        decoder.decodeStructPointer(http_request_headers$.HttpRequestHeaders);
    val.loadFlags =
        decoder.decodeStruct(codec.Int32);
    val.requestDestination =
        decoder.decodeStruct(new codec.Enum(fetch_api$.RequestDestination));
    packed = decoder.readUint8();
    val.hasUserGesture = (packed >> 0) & 1 ? true : false;
    val.originatedFromServiceWorker = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SafeBrowsing_CreateCheckerAndCheck_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeBrowsing_CreateCheckerAndCheck_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.renderFrameId);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.method);
    encoder.encodeStructPointer(http_request_headers$.HttpRequestHeaders, val.headers);
    encoder.encodeStruct(codec.Int32, val.loadFlags);
    encoder.encodeStruct(codec.Int32, val.requestDestination);
    packed = 0;
    packed |= (val.hasUserGesture & 1) << 0
    packed |= (val.originatedFromServiceWorker & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SafeBrowsing_CreateCheckerAndCheck_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.prototype.initDefaults_ = function() {
    this.slowCheckNotifier = new bindings.InterfaceRequest();
    this.proceed = false;
    this.showedInterstitial = false;
  };
  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsing_CreateCheckerAndCheck_ResponseParams.slowCheckNotifier
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SafeBrowsing_CreateCheckerAndCheck_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.slowCheckNotifier =
        decoder.decodeStruct(codec.NullableInterfaceRequest);
    packed = decoder.readUint8();
    val.proceed = (packed >> 0) & 1 ? true : false;
    val.showedInterstitial = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SafeBrowsing_CreateCheckerAndCheck_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeBrowsing_CreateCheckerAndCheck_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableInterfaceRequest, val.slowCheckNotifier);
    packed = 0;
    packed |= (val.proceed & 1) << 0
    packed |= (val.showedInterstitial & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SafeBrowsing_Clone_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeBrowsing_Clone_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  SafeBrowsing_Clone_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeBrowsing_Clone_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsing_Clone_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SafeBrowsing_Clone_Params.encodedSize = codec.kStructHeaderSize + 8;

  SafeBrowsing_Clone_Params.decode = function(decoder) {
    var packed;
    var val = new SafeBrowsing_Clone_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SafeBrowsing_Clone_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeBrowsing_Clone_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ThreatReporter_GetThreatDOMDetails_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ThreatReporter_GetThreatDOMDetails_Params.prototype.initDefaults_ = function() {
  };
  ThreatReporter_GetThreatDOMDetails_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ThreatReporter_GetThreatDOMDetails_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ThreatReporter_GetThreatDOMDetails_Params.encodedSize = codec.kStructHeaderSize + 0;

  ThreatReporter_GetThreatDOMDetails_Params.decode = function(decoder) {
    var packed;
    var val = new ThreatReporter_GetThreatDOMDetails_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ThreatReporter_GetThreatDOMDetails_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ThreatReporter_GetThreatDOMDetails_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ThreatReporter_GetThreatDOMDetails_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ThreatReporter_GetThreatDOMDetails_ResponseParams.prototype.initDefaults_ = function() {
    this.nodes = null;
  };
  ThreatReporter_GetThreatDOMDetails_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ThreatReporter_GetThreatDOMDetails_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThreatReporter_GetThreatDOMDetails_ResponseParams.nodes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(ThreatDOMDetailsNode), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ThreatReporter_GetThreatDOMDetails_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ThreatReporter_GetThreatDOMDetails_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ThreatReporter_GetThreatDOMDetails_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nodes =
        decoder.decodeArrayPointer(new codec.PointerTo(ThreatDOMDetailsNode));
    return val;
  };

  ThreatReporter_GetThreatDOMDetails_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ThreatReporter_GetThreatDOMDetails_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(ThreatDOMDetailsNode), val.nodes);
  };
  function PhishingDetector_StartPhishingDetection_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhishingDetector_StartPhishingDetection_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  PhishingDetector_StartPhishingDetection_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhishingDetector_StartPhishingDetection_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingDetector_StartPhishingDetection_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhishingDetector_StartPhishingDetection_Params.encodedSize = codec.kStructHeaderSize + 8;

  PhishingDetector_StartPhishingDetection_Params.decode = function(decoder) {
    var packed;
    var val = new PhishingDetector_StartPhishingDetection_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PhishingDetector_StartPhishingDetection_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhishingDetector_StartPhishingDetection_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function PhishingDetector_StartPhishingDetection_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhishingDetector_StartPhishingDetection_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.requestProto = null;
  };
  PhishingDetector_StartPhishingDetection_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhishingDetector_StartPhishingDetection_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingDetector_StartPhishingDetection_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PhishingDetectorResult);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingDetector_StartPhishingDetection_ResponseParams.requestProto
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhishingDetector_StartPhishingDetection_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PhishingDetector_StartPhishingDetection_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PhishingDetector_StartPhishingDetection_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(PhishingDetectorResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.requestProto =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PhishingDetector_StartPhishingDetection_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhishingDetector_StartPhishingDetection_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.requestProto);
  };
  function PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params.prototype.initDefaults_ = function() {
    this.region = null;
    this.tfliteModel = null;
    this.imageEmbeddingModel = null;
  };
  PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params.region
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, shared_memory$.ReadOnlySharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params.tfliteModel
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, read_only_file$.ReadOnlyFile, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params.imageEmbeddingModel
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, read_only_file$.ReadOnlyFile, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params.encodedSize = codec.kStructHeaderSize + 24;

  PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params.decode = function(decoder) {
    var packed;
    var val = new PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.region =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    val.tfliteModel =
        decoder.decodeStructPointer(read_only_file$.ReadOnlyFile);
    val.imageEmbeddingModel =
        decoder.decodeStructPointer(read_only_file$.ReadOnlyFile);
    return val;
  };

  PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.region);
    encoder.encodeStructPointer(read_only_file$.ReadOnlyFile, val.tfliteModel);
    encoder.encodeStructPointer(read_only_file$.ReadOnlyFile, val.imageEmbeddingModel);
  };
  function PhishingModelSetter_SetPhishingFlatBufferModel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhishingModelSetter_SetPhishingFlatBufferModel_Params.prototype.initDefaults_ = function() {
    this.region = null;
    this.tfliteModel = null;
  };
  PhishingModelSetter_SetPhishingFlatBufferModel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhishingModelSetter_SetPhishingFlatBufferModel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingModelSetter_SetPhishingFlatBufferModel_Params.region
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, shared_memory$.ReadOnlySharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingModelSetter_SetPhishingFlatBufferModel_Params.tfliteModel
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, read_only_file$.ReadOnlyFile, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhishingModelSetter_SetPhishingFlatBufferModel_Params.encodedSize = codec.kStructHeaderSize + 16;

  PhishingModelSetter_SetPhishingFlatBufferModel_Params.decode = function(decoder) {
    var packed;
    var val = new PhishingModelSetter_SetPhishingFlatBufferModel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.region =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    val.tfliteModel =
        decoder.decodeStructPointer(read_only_file$.ReadOnlyFile);
    return val;
  };

  PhishingModelSetter_SetPhishingFlatBufferModel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhishingModelSetter_SetPhishingFlatBufferModel_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.region);
    encoder.encodeStructPointer(read_only_file$.ReadOnlyFile, val.tfliteModel);
  };
  function PhishingModelSetter_ClearScorer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhishingModelSetter_ClearScorer_Params.prototype.initDefaults_ = function() {
  };
  PhishingModelSetter_ClearScorer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhishingModelSetter_ClearScorer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhishingModelSetter_ClearScorer_Params.encodedSize = codec.kStructHeaderSize + 0;

  PhishingModelSetter_ClearScorer_Params.decode = function(decoder) {
    var packed;
    var val = new PhishingModelSetter_ClearScorer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PhishingModelSetter_ClearScorer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhishingModelSetter_ClearScorer_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PhishingModelSetter_SetTestObserver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhishingModelSetter_SetTestObserver_Params.prototype.initDefaults_ = function() {
    this.observer = new PhishingModelSetterTestObserverPtr();
  };
  PhishingModelSetter_SetTestObserver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhishingModelSetter_SetTestObserver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingModelSetter_SetTestObserver_Params.observer
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhishingModelSetter_SetTestObserver_Params.encodedSize = codec.kStructHeaderSize + 8;

  PhishingModelSetter_SetTestObserver_Params.decode = function(decoder) {
    var packed;
    var val = new PhishingModelSetter_SetTestObserver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.observer =
        decoder.decodeStruct(new codec.NullableInterface(PhishingModelSetterTestObserverPtr));
    return val;
  };

  PhishingModelSetter_SetTestObserver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhishingModelSetter_SetTestObserver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.NullableInterface(PhishingModelSetterTestObserverPtr), val.observer);
  };
  function PhishingModelSetter_SetTestObserver_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhishingModelSetter_SetTestObserver_ResponseParams.prototype.initDefaults_ = function() {
  };
  PhishingModelSetter_SetTestObserver_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhishingModelSetter_SetTestObserver_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhishingModelSetter_SetTestObserver_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  PhishingModelSetter_SetTestObserver_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PhishingModelSetter_SetTestObserver_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PhishingModelSetter_SetTestObserver_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhishingModelSetter_SetTestObserver_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function PhishingModelSetterTestObserver_PhishingModelUpdated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhishingModelSetterTestObserver_PhishingModelUpdated_Params.prototype.initDefaults_ = function() {
  };
  PhishingModelSetterTestObserver_PhishingModelUpdated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhishingModelSetterTestObserver_PhishingModelUpdated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhishingModelSetterTestObserver_PhishingModelUpdated_Params.encodedSize = codec.kStructHeaderSize + 0;

  PhishingModelSetterTestObserver_PhishingModelUpdated_Params.decode = function(decoder) {
    var packed;
    var val = new PhishingModelSetterTestObserver_PhishingModelUpdated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PhishingModelSetterTestObserver_PhishingModelUpdated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhishingModelSetterTestObserver_PhishingModelUpdated_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PhishingImageEmbedderDetector_StartImageEmbedding_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhishingImageEmbedderDetector_StartImageEmbedding_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  PhishingImageEmbedderDetector_StartImageEmbedding_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhishingImageEmbedderDetector_StartImageEmbedding_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingImageEmbedderDetector_StartImageEmbedding_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhishingImageEmbedderDetector_StartImageEmbedding_Params.encodedSize = codec.kStructHeaderSize + 8;

  PhishingImageEmbedderDetector_StartImageEmbedding_Params.decode = function(decoder) {
    var packed;
    var val = new PhishingImageEmbedderDetector_StartImageEmbedding_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PhishingImageEmbedderDetector_StartImageEmbedding_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhishingImageEmbedderDetector_StartImageEmbedding_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.imageEmbeddingRequestProto = null;
  };
  PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PhishingImageEmbeddingResult);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams.imageEmbeddingRequestProto
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, byte_string$.ByteString, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(PhishingImageEmbeddingResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.imageEmbeddingRequestProto =
        decoder.decodeStructPointer(byte_string$.ByteString);
    return val;
  };

  PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(byte_string$.ByteString, val.imageEmbeddingRequestProto);
  };
  function ExtensionWebRequestReporter_SendWebRequestData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ExtensionWebRequestReporter_SendWebRequestData_Params.prototype.initDefaults_ = function() {
    this.originExtensionId = null;
    this.telemetryUrl = null;
    this.protocolType = 0;
  };
  ExtensionWebRequestReporter_SendWebRequestData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ExtensionWebRequestReporter_SendWebRequestData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ExtensionWebRequestReporter_SendWebRequestData_Params.originExtensionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ExtensionWebRequestReporter_SendWebRequestData_Params.telemetryUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ExtensionWebRequestReporter_SendWebRequestData_Params.protocolType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, WebRequestProtocolType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ExtensionWebRequestReporter_SendWebRequestData_Params.encodedSize = codec.kStructHeaderSize + 24;

  ExtensionWebRequestReporter_SendWebRequestData_Params.decode = function(decoder) {
    var packed;
    var val = new ExtensionWebRequestReporter_SendWebRequestData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.originExtensionId =
        decoder.decodeStruct(codec.String);
    val.telemetryUrl =
        decoder.decodeStructPointer(url$.Url);
    val.protocolType =
        decoder.decodeStruct(new codec.Enum(WebRequestProtocolType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ExtensionWebRequestReporter_SendWebRequestData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ExtensionWebRequestReporter_SendWebRequestData_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.originExtensionId);
    encoder.encodeStructPointer(url$.Url, val.telemetryUrl);
    encoder.encodeStruct(codec.Int32, val.protocolType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ExtensionWebRequestReporter_Clone_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ExtensionWebRequestReporter_Clone_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  ExtensionWebRequestReporter_Clone_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ExtensionWebRequestReporter_Clone_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ExtensionWebRequestReporter_Clone_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ExtensionWebRequestReporter_Clone_Params.encodedSize = codec.kStructHeaderSize + 8;

  ExtensionWebRequestReporter_Clone_Params.decode = function(decoder) {
    var packed;
    var val = new ExtensionWebRequestReporter_Clone_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ExtensionWebRequestReporter_Clone_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ExtensionWebRequestReporter_Clone_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kSafeBrowsing_CreateCheckerAndCheck_Name = 1702181160;
  var kSafeBrowsing_Clone_Name = 1048668197;

  function SafeBrowsingPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SafeBrowsing,
                                                   handleOrPtrInfo);
  }

  function SafeBrowsingAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SafeBrowsing, associatedInterfacePtrInfo);
  }

  SafeBrowsingAssociatedPtr.prototype =
      Object.create(SafeBrowsingPtr.prototype);
  SafeBrowsingAssociatedPtr.prototype.constructor =
      SafeBrowsingAssociatedPtr;

  function SafeBrowsingProxy(receiver) {
    this.receiver_ = receiver;
  }
  SafeBrowsingPtr.prototype.createCheckerAndCheck = function() {
    return SafeBrowsingProxy.prototype.createCheckerAndCheck
        .apply(this.ptr.getProxy(), arguments);
  };

  SafeBrowsingProxy.prototype.createCheckerAndCheck = function(renderFrameId, receiver, url, method, headers, loadFlags, requestDestination, hasUserGesture, originatedFromServiceWorker) {
    var params_ = new SafeBrowsing_CreateCheckerAndCheck_Params();
    params_.renderFrameId = renderFrameId;
    params_.receiver = receiver;
    params_.url = url;
    params_.method = method;
    params_.headers = headers;
    params_.loadFlags = loadFlags;
    params_.requestDestination = requestDestination;
    params_.hasUserGesture = hasUserGesture;
    params_.originatedFromServiceWorker = originatedFromServiceWorker;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSafeBrowsing_CreateCheckerAndCheck_Name,
          codec.align(SafeBrowsing_CreateCheckerAndCheck_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SafeBrowsing_CreateCheckerAndCheck_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SafeBrowsing_CreateCheckerAndCheck_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SafeBrowsingPtr.prototype.clone = function() {
    return SafeBrowsingProxy.prototype.clone
        .apply(this.ptr.getProxy(), arguments);
  };

  SafeBrowsingProxy.prototype.clone = function(receiver) {
    var params_ = new SafeBrowsing_Clone_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kSafeBrowsing_Clone_Name,
        codec.align(SafeBrowsing_Clone_Params.encodedSize));
    builder.encodeStruct(SafeBrowsing_Clone_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function SafeBrowsingStub(delegate) {
    this.delegate_ = delegate;
  }
  SafeBrowsingStub.prototype.createCheckerAndCheck = function(renderFrameId, receiver, url, method, headers, loadFlags, requestDestination, hasUserGesture, originatedFromServiceWorker) {
    return this.delegate_ && this.delegate_.createCheckerAndCheck && this.delegate_.createCheckerAndCheck(renderFrameId, receiver, url, method, headers, loadFlags, requestDestination, hasUserGesture, originatedFromServiceWorker);
  }
  SafeBrowsingStub.prototype.clone = function(receiver) {
    return this.delegate_ && this.delegate_.clone && this.delegate_.clone(receiver);
  }

  SafeBrowsingStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSafeBrowsing_Clone_Name:
      var params = reader.decodeStruct(SafeBrowsing_Clone_Params);
      this.clone(params.receiver);
      return true;
    default:
      return false;
    }
  };

  SafeBrowsingStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSafeBrowsing_CreateCheckerAndCheck_Name:
      var params = reader.decodeStruct(SafeBrowsing_CreateCheckerAndCheck_Params);
      this.createCheckerAndCheck(params.renderFrameId, params.receiver, params.url, params.method, params.headers, params.loadFlags, params.requestDestination, params.hasUserGesture, params.originatedFromServiceWorker).then(function(response) {
        var responseParams =
            new SafeBrowsing_CreateCheckerAndCheck_ResponseParams();
        responseParams.slowCheckNotifier = response.slowCheckNotifier;
        responseParams.proceed = response.proceed;
        responseParams.showedInterstitial = response.showedInterstitial;
        var builder = new codec.MessageV1Builder(
            kSafeBrowsing_CreateCheckerAndCheck_Name,
            codec.align(SafeBrowsing_CreateCheckerAndCheck_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SafeBrowsing_CreateCheckerAndCheck_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSafeBrowsingRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSafeBrowsing_CreateCheckerAndCheck_Name:
        if (message.expectsResponse())
          paramsClass = SafeBrowsing_CreateCheckerAndCheck_Params;
      break;
      case kSafeBrowsing_Clone_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SafeBrowsing_Clone_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSafeBrowsingResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSafeBrowsing_CreateCheckerAndCheck_Name:
        if (message.isResponse())
          paramsClass = SafeBrowsing_CreateCheckerAndCheck_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SafeBrowsing = {
    name: 'safe_browsing.mojom.SafeBrowsing',
    kVersion: 0,
    ptrClass: SafeBrowsingPtr,
    proxyClass: SafeBrowsingProxy,
    stubClass: SafeBrowsingStub,
    validateRequest: validateSafeBrowsingRequest,
    validateResponse: validateSafeBrowsingResponse,
  };
  SafeBrowsingStub.prototype.validator = validateSafeBrowsingRequest;
  SafeBrowsingProxy.prototype.validator = validateSafeBrowsingResponse;
  var kThreatReporter_GetThreatDOMDetails_Name = 629622931;

  function ThreatReporterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ThreatReporter,
                                                   handleOrPtrInfo);
  }

  function ThreatReporterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ThreatReporter, associatedInterfacePtrInfo);
  }

  ThreatReporterAssociatedPtr.prototype =
      Object.create(ThreatReporterPtr.prototype);
  ThreatReporterAssociatedPtr.prototype.constructor =
      ThreatReporterAssociatedPtr;

  function ThreatReporterProxy(receiver) {
    this.receiver_ = receiver;
  }
  ThreatReporterPtr.prototype.getThreatDOMDetails = function() {
    return ThreatReporterProxy.prototype.getThreatDOMDetails
        .apply(this.ptr.getProxy(), arguments);
  };

  ThreatReporterProxy.prototype.getThreatDOMDetails = function() {
    var params_ = new ThreatReporter_GetThreatDOMDetails_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kThreatReporter_GetThreatDOMDetails_Name,
          codec.align(ThreatReporter_GetThreatDOMDetails_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ThreatReporter_GetThreatDOMDetails_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ThreatReporter_GetThreatDOMDetails_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ThreatReporterStub(delegate) {
    this.delegate_ = delegate;
  }
  ThreatReporterStub.prototype.getThreatDOMDetails = function() {
    return this.delegate_ && this.delegate_.getThreatDOMDetails && this.delegate_.getThreatDOMDetails();
  }

  ThreatReporterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ThreatReporterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kThreatReporter_GetThreatDOMDetails_Name:
      var params = reader.decodeStruct(ThreatReporter_GetThreatDOMDetails_Params);
      this.getThreatDOMDetails().then(function(response) {
        var responseParams =
            new ThreatReporter_GetThreatDOMDetails_ResponseParams();
        responseParams.nodes = response.nodes;
        var builder = new codec.MessageV1Builder(
            kThreatReporter_GetThreatDOMDetails_Name,
            codec.align(ThreatReporter_GetThreatDOMDetails_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ThreatReporter_GetThreatDOMDetails_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateThreatReporterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kThreatReporter_GetThreatDOMDetails_Name:
        if (message.expectsResponse())
          paramsClass = ThreatReporter_GetThreatDOMDetails_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateThreatReporterResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kThreatReporter_GetThreatDOMDetails_Name:
        if (message.isResponse())
          paramsClass = ThreatReporter_GetThreatDOMDetails_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ThreatReporter = {
    name: 'safe_browsing.mojom.ThreatReporter',
    kVersion: 0,
    ptrClass: ThreatReporterPtr,
    proxyClass: ThreatReporterProxy,
    stubClass: ThreatReporterStub,
    validateRequest: validateThreatReporterRequest,
    validateResponse: validateThreatReporterResponse,
  };
  ThreatReporterStub.prototype.validator = validateThreatReporterRequest;
  ThreatReporterProxy.prototype.validator = validateThreatReporterResponse;
  var kPhishingDetector_StartPhishingDetection_Name = 1171641807;

  function PhishingDetectorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PhishingDetector,
                                                   handleOrPtrInfo);
  }

  function PhishingDetectorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PhishingDetector, associatedInterfacePtrInfo);
  }

  PhishingDetectorAssociatedPtr.prototype =
      Object.create(PhishingDetectorPtr.prototype);
  PhishingDetectorAssociatedPtr.prototype.constructor =
      PhishingDetectorAssociatedPtr;

  function PhishingDetectorProxy(receiver) {
    this.receiver_ = receiver;
  }
  PhishingDetectorPtr.prototype.startPhishingDetection = function() {
    return PhishingDetectorProxy.prototype.startPhishingDetection
        .apply(this.ptr.getProxy(), arguments);
  };

  PhishingDetectorProxy.prototype.startPhishingDetection = function(url) {
    var params_ = new PhishingDetector_StartPhishingDetection_Params();
    params_.url = url;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPhishingDetector_StartPhishingDetection_Name,
          codec.align(PhishingDetector_StartPhishingDetection_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PhishingDetector_StartPhishingDetection_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PhishingDetector_StartPhishingDetection_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PhishingDetectorStub(delegate) {
    this.delegate_ = delegate;
  }
  PhishingDetectorStub.prototype.startPhishingDetection = function(url) {
    return this.delegate_ && this.delegate_.startPhishingDetection && this.delegate_.startPhishingDetection(url);
  }

  PhishingDetectorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  PhishingDetectorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPhishingDetector_StartPhishingDetection_Name:
      var params = reader.decodeStruct(PhishingDetector_StartPhishingDetection_Params);
      this.startPhishingDetection(params.url).then(function(response) {
        var responseParams =
            new PhishingDetector_StartPhishingDetection_ResponseParams();
        responseParams.result = response.result;
        responseParams.requestProto = response.requestProto;
        var builder = new codec.MessageV1Builder(
            kPhishingDetector_StartPhishingDetection_Name,
            codec.align(PhishingDetector_StartPhishingDetection_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PhishingDetector_StartPhishingDetection_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePhishingDetectorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPhishingDetector_StartPhishingDetection_Name:
        if (message.expectsResponse())
          paramsClass = PhishingDetector_StartPhishingDetection_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePhishingDetectorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPhishingDetector_StartPhishingDetection_Name:
        if (message.isResponse())
          paramsClass = PhishingDetector_StartPhishingDetection_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PhishingDetector = {
    name: 'safe_browsing.mojom.PhishingDetector',
    kVersion: 0,
    ptrClass: PhishingDetectorPtr,
    proxyClass: PhishingDetectorProxy,
    stubClass: PhishingDetectorStub,
    validateRequest: validatePhishingDetectorRequest,
    validateResponse: validatePhishingDetectorResponse,
  };
  PhishingDetectorStub.prototype.validator = validatePhishingDetectorRequest;
  PhishingDetectorProxy.prototype.validator = validatePhishingDetectorResponse;
  var kPhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Name = 1619231705;
  var kPhishingModelSetter_SetPhishingFlatBufferModel_Name = 1161903268;
  var kPhishingModelSetter_ClearScorer_Name = 1244045864;
  var kPhishingModelSetter_SetTestObserver_Name = 331650368;

  function PhishingModelSetterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PhishingModelSetter,
                                                   handleOrPtrInfo);
  }

  function PhishingModelSetterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PhishingModelSetter, associatedInterfacePtrInfo);
  }

  PhishingModelSetterAssociatedPtr.prototype =
      Object.create(PhishingModelSetterPtr.prototype);
  PhishingModelSetterAssociatedPtr.prototype.constructor =
      PhishingModelSetterAssociatedPtr;

  function PhishingModelSetterProxy(receiver) {
    this.receiver_ = receiver;
  }
  PhishingModelSetterPtr.prototype.setImageEmbeddingAndPhishingFlatBufferModel = function() {
    return PhishingModelSetterProxy.prototype.setImageEmbeddingAndPhishingFlatBufferModel
        .apply(this.ptr.getProxy(), arguments);
  };

  PhishingModelSetterProxy.prototype.setImageEmbeddingAndPhishingFlatBufferModel = function(region, tfliteModel, imageEmbeddingModel) {
    var params_ = new PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params();
    params_.region = region;
    params_.tfliteModel = tfliteModel;
    params_.imageEmbeddingModel = imageEmbeddingModel;
    var builder = new codec.MessageV0Builder(
        kPhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Name,
        codec.align(PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params.encodedSize));
    builder.encodeStruct(PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PhishingModelSetterPtr.prototype.setPhishingFlatBufferModel = function() {
    return PhishingModelSetterProxy.prototype.setPhishingFlatBufferModel
        .apply(this.ptr.getProxy(), arguments);
  };

  PhishingModelSetterProxy.prototype.setPhishingFlatBufferModel = function(region, tfliteModel) {
    var params_ = new PhishingModelSetter_SetPhishingFlatBufferModel_Params();
    params_.region = region;
    params_.tfliteModel = tfliteModel;
    var builder = new codec.MessageV0Builder(
        kPhishingModelSetter_SetPhishingFlatBufferModel_Name,
        codec.align(PhishingModelSetter_SetPhishingFlatBufferModel_Params.encodedSize));
    builder.encodeStruct(PhishingModelSetter_SetPhishingFlatBufferModel_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PhishingModelSetterPtr.prototype.clearScorer = function() {
    return PhishingModelSetterProxy.prototype.clearScorer
        .apply(this.ptr.getProxy(), arguments);
  };

  PhishingModelSetterProxy.prototype.clearScorer = function() {
    var params_ = new PhishingModelSetter_ClearScorer_Params();
    var builder = new codec.MessageV0Builder(
        kPhishingModelSetter_ClearScorer_Name,
        codec.align(PhishingModelSetter_ClearScorer_Params.encodedSize));
    builder.encodeStruct(PhishingModelSetter_ClearScorer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PhishingModelSetterPtr.prototype.setTestObserver = function() {
    return PhishingModelSetterProxy.prototype.setTestObserver
        .apply(this.ptr.getProxy(), arguments);
  };

  PhishingModelSetterProxy.prototype.setTestObserver = function(observer) {
    var params_ = new PhishingModelSetter_SetTestObserver_Params();
    params_.observer = observer;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPhishingModelSetter_SetTestObserver_Name,
          codec.align(PhishingModelSetter_SetTestObserver_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PhishingModelSetter_SetTestObserver_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PhishingModelSetter_SetTestObserver_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PhishingModelSetterStub(delegate) {
    this.delegate_ = delegate;
  }
  PhishingModelSetterStub.prototype.setImageEmbeddingAndPhishingFlatBufferModel = function(region, tfliteModel, imageEmbeddingModel) {
    return this.delegate_ && this.delegate_.setImageEmbeddingAndPhishingFlatBufferModel && this.delegate_.setImageEmbeddingAndPhishingFlatBufferModel(region, tfliteModel, imageEmbeddingModel);
  }
  PhishingModelSetterStub.prototype.setPhishingFlatBufferModel = function(region, tfliteModel) {
    return this.delegate_ && this.delegate_.setPhishingFlatBufferModel && this.delegate_.setPhishingFlatBufferModel(region, tfliteModel);
  }
  PhishingModelSetterStub.prototype.clearScorer = function() {
    return this.delegate_ && this.delegate_.clearScorer && this.delegate_.clearScorer();
  }
  PhishingModelSetterStub.prototype.setTestObserver = function(observer) {
    return this.delegate_ && this.delegate_.setTestObserver && this.delegate_.setTestObserver(observer);
  }

  PhishingModelSetterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Name:
      var params = reader.decodeStruct(PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params);
      this.setImageEmbeddingAndPhishingFlatBufferModel(params.region, params.tfliteModel, params.imageEmbeddingModel);
      return true;
    case kPhishingModelSetter_SetPhishingFlatBufferModel_Name:
      var params = reader.decodeStruct(PhishingModelSetter_SetPhishingFlatBufferModel_Params);
      this.setPhishingFlatBufferModel(params.region, params.tfliteModel);
      return true;
    case kPhishingModelSetter_ClearScorer_Name:
      var params = reader.decodeStruct(PhishingModelSetter_ClearScorer_Params);
      this.clearScorer();
      return true;
    default:
      return false;
    }
  };

  PhishingModelSetterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPhishingModelSetter_SetTestObserver_Name:
      var params = reader.decodeStruct(PhishingModelSetter_SetTestObserver_Params);
      this.setTestObserver(params.observer).then(function(response) {
        var responseParams =
            new PhishingModelSetter_SetTestObserver_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kPhishingModelSetter_SetTestObserver_Name,
            codec.align(PhishingModelSetter_SetTestObserver_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PhishingModelSetter_SetTestObserver_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePhishingModelSetterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PhishingModelSetter_SetImageEmbeddingAndPhishingFlatBufferModel_Params;
      break;
      case kPhishingModelSetter_SetPhishingFlatBufferModel_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PhishingModelSetter_SetPhishingFlatBufferModel_Params;
      break;
      case kPhishingModelSetter_ClearScorer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PhishingModelSetter_ClearScorer_Params;
      break;
      case kPhishingModelSetter_SetTestObserver_Name:
        if (message.expectsResponse())
          paramsClass = PhishingModelSetter_SetTestObserver_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePhishingModelSetterResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPhishingModelSetter_SetTestObserver_Name:
        if (message.isResponse())
          paramsClass = PhishingModelSetter_SetTestObserver_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PhishingModelSetter = {
    name: 'safe_browsing.mojom.PhishingModelSetter',
    kVersion: 0,
    ptrClass: PhishingModelSetterPtr,
    proxyClass: PhishingModelSetterProxy,
    stubClass: PhishingModelSetterStub,
    validateRequest: validatePhishingModelSetterRequest,
    validateResponse: validatePhishingModelSetterResponse,
  };
  PhishingModelSetterStub.prototype.validator = validatePhishingModelSetterRequest;
  PhishingModelSetterProxy.prototype.validator = validatePhishingModelSetterResponse;
  var kPhishingModelSetterTestObserver_PhishingModelUpdated_Name = 347606465;

  function PhishingModelSetterTestObserverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PhishingModelSetterTestObserver,
                                                   handleOrPtrInfo);
  }

  function PhishingModelSetterTestObserverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PhishingModelSetterTestObserver, associatedInterfacePtrInfo);
  }

  PhishingModelSetterTestObserverAssociatedPtr.prototype =
      Object.create(PhishingModelSetterTestObserverPtr.prototype);
  PhishingModelSetterTestObserverAssociatedPtr.prototype.constructor =
      PhishingModelSetterTestObserverAssociatedPtr;

  function PhishingModelSetterTestObserverProxy(receiver) {
    this.receiver_ = receiver;
  }
  PhishingModelSetterTestObserverPtr.prototype.phishingModelUpdated = function() {
    return PhishingModelSetterTestObserverProxy.prototype.phishingModelUpdated
        .apply(this.ptr.getProxy(), arguments);
  };

  PhishingModelSetterTestObserverProxy.prototype.phishingModelUpdated = function() {
    var params_ = new PhishingModelSetterTestObserver_PhishingModelUpdated_Params();
    var builder = new codec.MessageV0Builder(
        kPhishingModelSetterTestObserver_PhishingModelUpdated_Name,
        codec.align(PhishingModelSetterTestObserver_PhishingModelUpdated_Params.encodedSize));
    builder.encodeStruct(PhishingModelSetterTestObserver_PhishingModelUpdated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PhishingModelSetterTestObserverStub(delegate) {
    this.delegate_ = delegate;
  }
  PhishingModelSetterTestObserverStub.prototype.phishingModelUpdated = function() {
    return this.delegate_ && this.delegate_.phishingModelUpdated && this.delegate_.phishingModelUpdated();
  }

  PhishingModelSetterTestObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPhishingModelSetterTestObserver_PhishingModelUpdated_Name:
      var params = reader.decodeStruct(PhishingModelSetterTestObserver_PhishingModelUpdated_Params);
      this.phishingModelUpdated();
      return true;
    default:
      return false;
    }
  };

  PhishingModelSetterTestObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePhishingModelSetterTestObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPhishingModelSetterTestObserver_PhishingModelUpdated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PhishingModelSetterTestObserver_PhishingModelUpdated_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePhishingModelSetterTestObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PhishingModelSetterTestObserver = {
    name: 'safe_browsing.mojom.PhishingModelSetterTestObserver',
    kVersion: 0,
    ptrClass: PhishingModelSetterTestObserverPtr,
    proxyClass: PhishingModelSetterTestObserverProxy,
    stubClass: PhishingModelSetterTestObserverStub,
    validateRequest: validatePhishingModelSetterTestObserverRequest,
    validateResponse: null,
  };
  PhishingModelSetterTestObserverStub.prototype.validator = validatePhishingModelSetterTestObserverRequest;
  PhishingModelSetterTestObserverProxy.prototype.validator = null;
  var kPhishingImageEmbedderDetector_StartImageEmbedding_Name = 1483558507;

  function PhishingImageEmbedderDetectorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PhishingImageEmbedderDetector,
                                                   handleOrPtrInfo);
  }

  function PhishingImageEmbedderDetectorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PhishingImageEmbedderDetector, associatedInterfacePtrInfo);
  }

  PhishingImageEmbedderDetectorAssociatedPtr.prototype =
      Object.create(PhishingImageEmbedderDetectorPtr.prototype);
  PhishingImageEmbedderDetectorAssociatedPtr.prototype.constructor =
      PhishingImageEmbedderDetectorAssociatedPtr;

  function PhishingImageEmbedderDetectorProxy(receiver) {
    this.receiver_ = receiver;
  }
  PhishingImageEmbedderDetectorPtr.prototype.startImageEmbedding = function() {
    return PhishingImageEmbedderDetectorProxy.prototype.startImageEmbedding
        .apply(this.ptr.getProxy(), arguments);
  };

  PhishingImageEmbedderDetectorProxy.prototype.startImageEmbedding = function(url) {
    var params_ = new PhishingImageEmbedderDetector_StartImageEmbedding_Params();
    params_.url = url;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPhishingImageEmbedderDetector_StartImageEmbedding_Name,
          codec.align(PhishingImageEmbedderDetector_StartImageEmbedding_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PhishingImageEmbedderDetector_StartImageEmbedding_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PhishingImageEmbedderDetectorStub(delegate) {
    this.delegate_ = delegate;
  }
  PhishingImageEmbedderDetectorStub.prototype.startImageEmbedding = function(url) {
    return this.delegate_ && this.delegate_.startImageEmbedding && this.delegate_.startImageEmbedding(url);
  }

  PhishingImageEmbedderDetectorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  PhishingImageEmbedderDetectorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPhishingImageEmbedderDetector_StartImageEmbedding_Name:
      var params = reader.decodeStruct(PhishingImageEmbedderDetector_StartImageEmbedding_Params);
      this.startImageEmbedding(params.url).then(function(response) {
        var responseParams =
            new PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams();
        responseParams.result = response.result;
        responseParams.imageEmbeddingRequestProto = response.imageEmbeddingRequestProto;
        var builder = new codec.MessageV1Builder(
            kPhishingImageEmbedderDetector_StartImageEmbedding_Name,
            codec.align(PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePhishingImageEmbedderDetectorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPhishingImageEmbedderDetector_StartImageEmbedding_Name:
        if (message.expectsResponse())
          paramsClass = PhishingImageEmbedderDetector_StartImageEmbedding_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePhishingImageEmbedderDetectorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPhishingImageEmbedderDetector_StartImageEmbedding_Name:
        if (message.isResponse())
          paramsClass = PhishingImageEmbedderDetector_StartImageEmbedding_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PhishingImageEmbedderDetector = {
    name: 'safe_browsing.mojom.PhishingImageEmbedderDetector',
    kVersion: 0,
    ptrClass: PhishingImageEmbedderDetectorPtr,
    proxyClass: PhishingImageEmbedderDetectorProxy,
    stubClass: PhishingImageEmbedderDetectorStub,
    validateRequest: validatePhishingImageEmbedderDetectorRequest,
    validateResponse: validatePhishingImageEmbedderDetectorResponse,
  };
  PhishingImageEmbedderDetectorStub.prototype.validator = validatePhishingImageEmbedderDetectorRequest;
  PhishingImageEmbedderDetectorProxy.prototype.validator = validatePhishingImageEmbedderDetectorResponse;
  var kExtensionWebRequestReporter_SendWebRequestData_Name = 1108674977;
  var kExtensionWebRequestReporter_Clone_Name = 2133895445;

  function ExtensionWebRequestReporterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ExtensionWebRequestReporter,
                                                   handleOrPtrInfo);
  }

  function ExtensionWebRequestReporterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ExtensionWebRequestReporter, associatedInterfacePtrInfo);
  }

  ExtensionWebRequestReporterAssociatedPtr.prototype =
      Object.create(ExtensionWebRequestReporterPtr.prototype);
  ExtensionWebRequestReporterAssociatedPtr.prototype.constructor =
      ExtensionWebRequestReporterAssociatedPtr;

  function ExtensionWebRequestReporterProxy(receiver) {
    this.receiver_ = receiver;
  }
  ExtensionWebRequestReporterPtr.prototype.sendWebRequestData = function() {
    return ExtensionWebRequestReporterProxy.prototype.sendWebRequestData
        .apply(this.ptr.getProxy(), arguments);
  };

  ExtensionWebRequestReporterProxy.prototype.sendWebRequestData = function(originExtensionId, telemetryUrl, protocolType) {
    var params_ = new ExtensionWebRequestReporter_SendWebRequestData_Params();
    params_.originExtensionId = originExtensionId;
    params_.telemetryUrl = telemetryUrl;
    params_.protocolType = protocolType;
    var builder = new codec.MessageV0Builder(
        kExtensionWebRequestReporter_SendWebRequestData_Name,
        codec.align(ExtensionWebRequestReporter_SendWebRequestData_Params.encodedSize));
    builder.encodeStruct(ExtensionWebRequestReporter_SendWebRequestData_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ExtensionWebRequestReporterPtr.prototype.clone = function() {
    return ExtensionWebRequestReporterProxy.prototype.clone
        .apply(this.ptr.getProxy(), arguments);
  };

  ExtensionWebRequestReporterProxy.prototype.clone = function(receiver) {
    var params_ = new ExtensionWebRequestReporter_Clone_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kExtensionWebRequestReporter_Clone_Name,
        codec.align(ExtensionWebRequestReporter_Clone_Params.encodedSize));
    builder.encodeStruct(ExtensionWebRequestReporter_Clone_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ExtensionWebRequestReporterStub(delegate) {
    this.delegate_ = delegate;
  }
  ExtensionWebRequestReporterStub.prototype.sendWebRequestData = function(originExtensionId, telemetryUrl, protocolType) {
    return this.delegate_ && this.delegate_.sendWebRequestData && this.delegate_.sendWebRequestData(originExtensionId, telemetryUrl, protocolType);
  }
  ExtensionWebRequestReporterStub.prototype.clone = function(receiver) {
    return this.delegate_ && this.delegate_.clone && this.delegate_.clone(receiver);
  }

  ExtensionWebRequestReporterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kExtensionWebRequestReporter_SendWebRequestData_Name:
      var params = reader.decodeStruct(ExtensionWebRequestReporter_SendWebRequestData_Params);
      this.sendWebRequestData(params.originExtensionId, params.telemetryUrl, params.protocolType);
      return true;
    case kExtensionWebRequestReporter_Clone_Name:
      var params = reader.decodeStruct(ExtensionWebRequestReporter_Clone_Params);
      this.clone(params.receiver);
      return true;
    default:
      return false;
    }
  };

  ExtensionWebRequestReporterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateExtensionWebRequestReporterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kExtensionWebRequestReporter_SendWebRequestData_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ExtensionWebRequestReporter_SendWebRequestData_Params;
      break;
      case kExtensionWebRequestReporter_Clone_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ExtensionWebRequestReporter_Clone_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateExtensionWebRequestReporterResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ExtensionWebRequestReporter = {
    name: 'safe_browsing.mojom.ExtensionWebRequestReporter',
    kVersion: 0,
    ptrClass: ExtensionWebRequestReporterPtr,
    proxyClass: ExtensionWebRequestReporterProxy,
    stubClass: ExtensionWebRequestReporterStub,
    validateRequest: validateExtensionWebRequestReporterRequest,
    validateResponse: null,
  };
  ExtensionWebRequestReporterStub.prototype.validator = validateExtensionWebRequestReporterRequest;
  ExtensionWebRequestReporterProxy.prototype.validator = null;
  exports.PhishingDetectorResult = PhishingDetectorResult;
  exports.PhishingImageEmbeddingResult = PhishingImageEmbeddingResult;
  exports.WebRequestProtocolType = WebRequestProtocolType;
  exports.AttributeNameValue = AttributeNameValue;
  exports.ThreatDOMDetailsNode = ThreatDOMDetailsNode;
  exports.SafeBrowsing = SafeBrowsing;
  exports.SafeBrowsingPtr = SafeBrowsingPtr;
  exports.SafeBrowsingAssociatedPtr = SafeBrowsingAssociatedPtr;
  exports.ThreatReporter = ThreatReporter;
  exports.ThreatReporterPtr = ThreatReporterPtr;
  exports.ThreatReporterAssociatedPtr = ThreatReporterAssociatedPtr;
  exports.PhishingDetector = PhishingDetector;
  exports.PhishingDetectorPtr = PhishingDetectorPtr;
  exports.PhishingDetectorAssociatedPtr = PhishingDetectorAssociatedPtr;
  exports.PhishingModelSetter = PhishingModelSetter;
  exports.PhishingModelSetterPtr = PhishingModelSetterPtr;
  exports.PhishingModelSetterAssociatedPtr = PhishingModelSetterAssociatedPtr;
  exports.PhishingModelSetterTestObserver = PhishingModelSetterTestObserver;
  exports.PhishingModelSetterTestObserverPtr = PhishingModelSetterTestObserverPtr;
  exports.PhishingModelSetterTestObserverAssociatedPtr = PhishingModelSetterTestObserverAssociatedPtr;
  exports.PhishingImageEmbedderDetector = PhishingImageEmbedderDetector;
  exports.PhishingImageEmbedderDetectorPtr = PhishingImageEmbedderDetectorPtr;
  exports.PhishingImageEmbedderDetectorAssociatedPtr = PhishingImageEmbedderDetectorAssociatedPtr;
  exports.ExtensionWebRequestReporter = ExtensionWebRequestReporter;
  exports.ExtensionWebRequestReporterPtr = ExtensionWebRequestReporterPtr;
  exports.ExtensionWebRequestReporterAssociatedPtr = ExtensionWebRequestReporterAssociatedPtr;
})();