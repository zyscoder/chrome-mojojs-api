// components/safe_browsing/core/common/safe_browsing_url_checker.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/safe_browsing/core/common/safe_browsing_url_checker.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('safeBrowsing.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../url/mojom/url.mojom.js');
  }



  function SafeBrowsingUrlChecker_CheckUrl_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeBrowsingUrlChecker_CheckUrl_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.method = null;
  };
  SafeBrowsingUrlChecker_CheckUrl_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeBrowsingUrlChecker_CheckUrl_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsingUrlChecker_CheckUrl_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsingUrlChecker_CheckUrl_Params.method
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SafeBrowsingUrlChecker_CheckUrl_Params.encodedSize = codec.kStructHeaderSize + 16;

  SafeBrowsingUrlChecker_CheckUrl_Params.decode = function(decoder) {
    var packed;
    var val = new SafeBrowsingUrlChecker_CheckUrl_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.method =
        decoder.decodeStruct(codec.String);
    return val;
  };

  SafeBrowsingUrlChecker_CheckUrl_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeBrowsingUrlChecker_CheckUrl_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.method);
  };
  function SafeBrowsingUrlChecker_CheckUrl_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.prototype.initDefaults_ = function() {
    this.slowCheckNotifier = new bindings.InterfaceRequest();
    this.proceed = false;
    this.showedInterstitial = false;
  };
  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeBrowsingUrlChecker_CheckUrl_ResponseParams.slowCheckNotifier
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SafeBrowsingUrlChecker_CheckUrl_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.slowCheckNotifier =
        decoder.decodeStruct(codec.NullableInterfaceRequest);
    packed = decoder.readUint8();
    val.proceed = (packed >> 0) & 1 ? true : false;
    val.showedInterstitial = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SafeBrowsingUrlChecker_CheckUrl_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeBrowsingUrlChecker_CheckUrl_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableInterfaceRequest, val.slowCheckNotifier);
    packed = 0;
    packed |= (val.proceed & 1) << 0
    packed |= (val.showedInterstitial & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function UrlCheckNotifier_OnCompleteCheck_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UrlCheckNotifier_OnCompleteCheck_Params.prototype.initDefaults_ = function() {
    this.proceed = false;
    this.showedInterstitial = false;
  };
  UrlCheckNotifier_OnCompleteCheck_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UrlCheckNotifier_OnCompleteCheck_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  UrlCheckNotifier_OnCompleteCheck_Params.encodedSize = codec.kStructHeaderSize + 8;

  UrlCheckNotifier_OnCompleteCheck_Params.decode = function(decoder) {
    var packed;
    var val = new UrlCheckNotifier_OnCompleteCheck_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.proceed = (packed >> 0) & 1 ? true : false;
    val.showedInterstitial = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  UrlCheckNotifier_OnCompleteCheck_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UrlCheckNotifier_OnCompleteCheck_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.proceed & 1) << 0
    packed |= (val.showedInterstitial & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kSafeBrowsingUrlChecker_CheckUrl_Name = 2092816486;

  function SafeBrowsingUrlCheckerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SafeBrowsingUrlChecker,
                                                   handleOrPtrInfo);
  }

  function SafeBrowsingUrlCheckerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SafeBrowsingUrlChecker, associatedInterfacePtrInfo);
  }

  SafeBrowsingUrlCheckerAssociatedPtr.prototype =
      Object.create(SafeBrowsingUrlCheckerPtr.prototype);
  SafeBrowsingUrlCheckerAssociatedPtr.prototype.constructor =
      SafeBrowsingUrlCheckerAssociatedPtr;

  function SafeBrowsingUrlCheckerProxy(receiver) {
    this.receiver_ = receiver;
  }
  SafeBrowsingUrlCheckerPtr.prototype.checkUrl = function() {
    return SafeBrowsingUrlCheckerProxy.prototype.checkUrl
        .apply(this.ptr.getProxy(), arguments);
  };

  SafeBrowsingUrlCheckerProxy.prototype.checkUrl = function(url, method) {
    var params_ = new SafeBrowsingUrlChecker_CheckUrl_Params();
    params_.url = url;
    params_.method = method;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSafeBrowsingUrlChecker_CheckUrl_Name,
          codec.align(SafeBrowsingUrlChecker_CheckUrl_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SafeBrowsingUrlChecker_CheckUrl_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SafeBrowsingUrlChecker_CheckUrl_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SafeBrowsingUrlCheckerStub(delegate) {
    this.delegate_ = delegate;
  }
  SafeBrowsingUrlCheckerStub.prototype.checkUrl = function(url, method) {
    return this.delegate_ && this.delegate_.checkUrl && this.delegate_.checkUrl(url, method);
  }

  SafeBrowsingUrlCheckerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  SafeBrowsingUrlCheckerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSafeBrowsingUrlChecker_CheckUrl_Name:
      var params = reader.decodeStruct(SafeBrowsingUrlChecker_CheckUrl_Params);
      this.checkUrl(params.url, params.method).then(function(response) {
        var responseParams =
            new SafeBrowsingUrlChecker_CheckUrl_ResponseParams();
        responseParams.slowCheckNotifier = response.slowCheckNotifier;
        responseParams.proceed = response.proceed;
        responseParams.showedInterstitial = response.showedInterstitial;
        var builder = new codec.MessageV1Builder(
            kSafeBrowsingUrlChecker_CheckUrl_Name,
            codec.align(SafeBrowsingUrlChecker_CheckUrl_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SafeBrowsingUrlChecker_CheckUrl_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSafeBrowsingUrlCheckerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSafeBrowsingUrlChecker_CheckUrl_Name:
        if (message.expectsResponse())
          paramsClass = SafeBrowsingUrlChecker_CheckUrl_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSafeBrowsingUrlCheckerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSafeBrowsingUrlChecker_CheckUrl_Name:
        if (message.isResponse())
          paramsClass = SafeBrowsingUrlChecker_CheckUrl_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SafeBrowsingUrlChecker = {
    name: 'safe_browsing.mojom.SafeBrowsingUrlChecker',
    kVersion: 0,
    ptrClass: SafeBrowsingUrlCheckerPtr,
    proxyClass: SafeBrowsingUrlCheckerProxy,
    stubClass: SafeBrowsingUrlCheckerStub,
    validateRequest: validateSafeBrowsingUrlCheckerRequest,
    validateResponse: validateSafeBrowsingUrlCheckerResponse,
  };
  SafeBrowsingUrlCheckerStub.prototype.validator = validateSafeBrowsingUrlCheckerRequest;
  SafeBrowsingUrlCheckerProxy.prototype.validator = validateSafeBrowsingUrlCheckerResponse;
  var kUrlCheckNotifier_OnCompleteCheck_Name = 425494484;

  function UrlCheckNotifierPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(UrlCheckNotifier,
                                                   handleOrPtrInfo);
  }

  function UrlCheckNotifierAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        UrlCheckNotifier, associatedInterfacePtrInfo);
  }

  UrlCheckNotifierAssociatedPtr.prototype =
      Object.create(UrlCheckNotifierPtr.prototype);
  UrlCheckNotifierAssociatedPtr.prototype.constructor =
      UrlCheckNotifierAssociatedPtr;

  function UrlCheckNotifierProxy(receiver) {
    this.receiver_ = receiver;
  }
  UrlCheckNotifierPtr.prototype.onCompleteCheck = function() {
    return UrlCheckNotifierProxy.prototype.onCompleteCheck
        .apply(this.ptr.getProxy(), arguments);
  };

  UrlCheckNotifierProxy.prototype.onCompleteCheck = function(proceed, showedInterstitial) {
    var params_ = new UrlCheckNotifier_OnCompleteCheck_Params();
    params_.proceed = proceed;
    params_.showedInterstitial = showedInterstitial;
    var builder = new codec.MessageV0Builder(
        kUrlCheckNotifier_OnCompleteCheck_Name,
        codec.align(UrlCheckNotifier_OnCompleteCheck_Params.encodedSize));
    builder.encodeStruct(UrlCheckNotifier_OnCompleteCheck_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function UrlCheckNotifierStub(delegate) {
    this.delegate_ = delegate;
  }
  UrlCheckNotifierStub.prototype.onCompleteCheck = function(proceed, showedInterstitial) {
    return this.delegate_ && this.delegate_.onCompleteCheck && this.delegate_.onCompleteCheck(proceed, showedInterstitial);
  }

  UrlCheckNotifierStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kUrlCheckNotifier_OnCompleteCheck_Name:
      var params = reader.decodeStruct(UrlCheckNotifier_OnCompleteCheck_Params);
      this.onCompleteCheck(params.proceed, params.showedInterstitial);
      return true;
    default:
      return false;
    }
  };

  UrlCheckNotifierStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateUrlCheckNotifierRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kUrlCheckNotifier_OnCompleteCheck_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = UrlCheckNotifier_OnCompleteCheck_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateUrlCheckNotifierResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var UrlCheckNotifier = {
    name: 'safe_browsing.mojom.UrlCheckNotifier',
    kVersion: 0,
    ptrClass: UrlCheckNotifierPtr,
    proxyClass: UrlCheckNotifierProxy,
    stubClass: UrlCheckNotifierStub,
    validateRequest: validateUrlCheckNotifierRequest,
    validateResponse: null,
  };
  UrlCheckNotifierStub.prototype.validator = validateUrlCheckNotifierRequest;
  UrlCheckNotifierProxy.prototype.validator = null;
  exports.SafeBrowsingUrlChecker = SafeBrowsingUrlChecker;
  exports.SafeBrowsingUrlCheckerPtr = SafeBrowsingUrlCheckerPtr;
  exports.SafeBrowsingUrlCheckerAssociatedPtr = SafeBrowsingUrlCheckerAssociatedPtr;
  exports.UrlCheckNotifier = UrlCheckNotifier;
  exports.UrlCheckNotifierPtr = UrlCheckNotifierPtr;
  exports.UrlCheckNotifierAssociatedPtr = UrlCheckNotifierAssociatedPtr;
})();