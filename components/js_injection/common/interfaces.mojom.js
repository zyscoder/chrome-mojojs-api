// components/js_injection/common/interfaces.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/js_injection/common/interfaces.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('jsInjection.mojom');
  var origin_matcher$ =
      mojo.internal.exposeNamespace('jsInjection.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/js_injection/common/origin_matcher.mojom', 'origin_matcher.mojom.js');
  }
  var big_buffer$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/big_buffer.mojom', '../../../mojo/public/mojom/base/big_buffer.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var message_port_descriptor$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/messaging/message_port_descriptor.mojom', '../../../third_party/blink/public/mojom/messaging/message_port_descriptor.mojom.js');
  }



  function JsObject(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsObject.prototype.initDefaults_ = function() {
    this.jsObjectName = null;
    this.jsToBrowserMessaging = new associatedBindings.AssociatedInterfacePtrInfo();
    this.originMatcher = null;
  };
  JsObject.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsObject.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsObject.jsObjectName
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsObject.jsToBrowserMessaging
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsObject.originMatcher
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, origin_matcher$.OriginMatcher, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsObject.encodedSize = codec.kStructHeaderSize + 24;

  JsObject.decode = function(decoder) {
    var packed;
    var val = new JsObject();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.jsObjectName =
        decoder.decodeStructPointer(string16$.String16);
    val.jsToBrowserMessaging =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.originMatcher =
        decoder.decodeStructPointer(origin_matcher$.OriginMatcher);
    return val;
  };

  JsObject.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsObject.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.jsObjectName);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.jsToBrowserMessaging);
    encoder.encodeStructPointer(origin_matcher$.OriginMatcher, val.originMatcher);
  };
  function DocumentStartJavaScript(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DocumentStartJavaScript.prototype.initDefaults_ = function() {
    this.scriptId = 0;
    this.script = null;
    this.originMatcher = null;
  };
  DocumentStartJavaScript.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DocumentStartJavaScript.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DocumentStartJavaScript.script
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DocumentStartJavaScript.originMatcher
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, origin_matcher$.OriginMatcher, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DocumentStartJavaScript.encodedSize = codec.kStructHeaderSize + 24;

  DocumentStartJavaScript.decode = function(decoder) {
    var packed;
    var val = new DocumentStartJavaScript();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.scriptId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.script =
        decoder.decodeStructPointer(string16$.String16);
    val.originMatcher =
        decoder.decodeStructPointer(origin_matcher$.OriginMatcher);
    return val;
  };

  DocumentStartJavaScript.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DocumentStartJavaScript.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.scriptId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(string16$.String16, val.script);
    encoder.encodeStructPointer(origin_matcher$.OriginMatcher, val.originMatcher);
  };
  function JsWebMessageArrayBufferValue(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsWebMessageArrayBufferValue.prototype.initDefaults_ = function() {
    this.arrayBufferValue = null;
    this.isResizableByUserJavascript = false;
    this.maxByteLength = 0;
  };
  JsWebMessageArrayBufferValue.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsWebMessageArrayBufferValue.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsWebMessageArrayBufferValue.arrayBufferValue
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, big_buffer$.BigBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  JsWebMessageArrayBufferValue.encodedSize = codec.kStructHeaderSize + 32;

  JsWebMessageArrayBufferValue.decode = function(decoder) {
    var packed;
    var val = new JsWebMessageArrayBufferValue();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.arrayBufferValue =
        decoder.decodeStruct(big_buffer$.BigBuffer);
    packed = decoder.readUint8();
    val.isResizableByUserJavascript = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.maxByteLength =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  JsWebMessageArrayBufferValue.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsWebMessageArrayBufferValue.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(big_buffer$.BigBuffer, val.arrayBufferValue);
    packed = 0;
    packed |= (val.isResizableByUserJavascript & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint64, val.maxByteLength);
  };
  function JsToBrowserMessaging_PostMessage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsToBrowserMessaging_PostMessage_Params.prototype.initDefaults_ = function() {
    this.message = null;
    this.ports = null;
  };
  JsToBrowserMessaging_PostMessage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsToBrowserMessaging_PostMessage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsToBrowserMessaging_PostMessage_Params.message
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, JsWebMessage, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsToBrowserMessaging_PostMessage_Params.ports
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(message_port_descriptor$.MessagePortDescriptor), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsToBrowserMessaging_PostMessage_Params.encodedSize = codec.kStructHeaderSize + 24;

  JsToBrowserMessaging_PostMessage_Params.decode = function(decoder) {
    var packed;
    var val = new JsToBrowserMessaging_PostMessage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message =
        decoder.decodeStruct(JsWebMessage);
    val.ports =
        decoder.decodeArrayPointer(new codec.PointerTo(message_port_descriptor$.MessagePortDescriptor));
    return val;
  };

  JsToBrowserMessaging_PostMessage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsToBrowserMessaging_PostMessage_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(JsWebMessage, val.message);
    encoder.encodeArrayPointer(new codec.PointerTo(message_port_descriptor$.MessagePortDescriptor), val.ports);
  };
  function JsToBrowserMessaging_SetBrowserToJsMessaging_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsToBrowserMessaging_SetBrowserToJsMessaging_Params.prototype.initDefaults_ = function() {
    this.browserToJsMessaging = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  JsToBrowserMessaging_SetBrowserToJsMessaging_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsToBrowserMessaging_SetBrowserToJsMessaging_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsToBrowserMessaging_SetBrowserToJsMessaging_Params.browserToJsMessaging
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsToBrowserMessaging_SetBrowserToJsMessaging_Params.encodedSize = codec.kStructHeaderSize + 8;

  JsToBrowserMessaging_SetBrowserToJsMessaging_Params.decode = function(decoder) {
    var packed;
    var val = new JsToBrowserMessaging_SetBrowserToJsMessaging_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.browserToJsMessaging =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  JsToBrowserMessaging_SetBrowserToJsMessaging_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsToBrowserMessaging_SetBrowserToJsMessaging_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.browserToJsMessaging);
  };
  function BrowserToJsMessaging_OnPostMessage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BrowserToJsMessaging_OnPostMessage_Params.prototype.initDefaults_ = function() {
    this.message = null;
  };
  BrowserToJsMessaging_OnPostMessage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BrowserToJsMessaging_OnPostMessage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BrowserToJsMessaging_OnPostMessage_Params.message
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, JsWebMessage, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BrowserToJsMessaging_OnPostMessage_Params.encodedSize = codec.kStructHeaderSize + 16;

  BrowserToJsMessaging_OnPostMessage_Params.decode = function(decoder) {
    var packed;
    var val = new BrowserToJsMessaging_OnPostMessage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message =
        decoder.decodeStruct(JsWebMessage);
    return val;
  };

  BrowserToJsMessaging_OnPostMessage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BrowserToJsMessaging_OnPostMessage_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(JsWebMessage, val.message);
  };
  function JsCommunication_SetJsObjects_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsCommunication_SetJsObjects_Params.prototype.initDefaults_ = function() {
    this.jsObjects = null;
  };
  JsCommunication_SetJsObjects_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsCommunication_SetJsObjects_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsCommunication_SetJsObjects_Params.jsObjects
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(JsObject), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsCommunication_SetJsObjects_Params.encodedSize = codec.kStructHeaderSize + 8;

  JsCommunication_SetJsObjects_Params.decode = function(decoder) {
    var packed;
    var val = new JsCommunication_SetJsObjects_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.jsObjects =
        decoder.decodeArrayPointer(new codec.PointerTo(JsObject));
    return val;
  };

  JsCommunication_SetJsObjects_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsCommunication_SetJsObjects_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(JsObject), val.jsObjects);
  };
  function JsCommunication_AddDocumentStartScript_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsCommunication_AddDocumentStartScript_Params.prototype.initDefaults_ = function() {
    this.script = null;
  };
  JsCommunication_AddDocumentStartScript_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsCommunication_AddDocumentStartScript_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate JsCommunication_AddDocumentStartScript_Params.script
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DocumentStartJavaScript, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  JsCommunication_AddDocumentStartScript_Params.encodedSize = codec.kStructHeaderSize + 8;

  JsCommunication_AddDocumentStartScript_Params.decode = function(decoder) {
    var packed;
    var val = new JsCommunication_AddDocumentStartScript_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.script =
        decoder.decodeStructPointer(DocumentStartJavaScript);
    return val;
  };

  JsCommunication_AddDocumentStartScript_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsCommunication_AddDocumentStartScript_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DocumentStartJavaScript, val.script);
  };
  function JsCommunication_RemoveDocumentStartScript_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  JsCommunication_RemoveDocumentStartScript_Params.prototype.initDefaults_ = function() {
    this.scriptId = 0;
  };
  JsCommunication_RemoveDocumentStartScript_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  JsCommunication_RemoveDocumentStartScript_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  JsCommunication_RemoveDocumentStartScript_Params.encodedSize = codec.kStructHeaderSize + 8;

  JsCommunication_RemoveDocumentStartScript_Params.decode = function(decoder) {
    var packed;
    var val = new JsCommunication_RemoveDocumentStartScript_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.scriptId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  JsCommunication_RemoveDocumentStartScript_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(JsCommunication_RemoveDocumentStartScript_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.scriptId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function JsWebMessage(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  JsWebMessage.Tags = {
    stringValue: 0,
    arrayBufferValue: 1,
  };

  JsWebMessage.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  JsWebMessage.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "stringValue",
        "arrayBufferValue",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a JsWebMessage member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(JsWebMessage.prototype, "stringValue", {
    get: function() {
      if (this.$tag != JsWebMessage.Tags.stringValue) {
        throw new ReferenceError(
            "JsWebMessage.stringValue is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = JsWebMessage.Tags.stringValue;
      this.$data = value;
    }
  });
  Object.defineProperty(JsWebMessage.prototype, "arrayBufferValue", {
    get: function() {
      if (this.$tag != JsWebMessage.Tags.arrayBufferValue) {
        throw new ReferenceError(
            "JsWebMessage.arrayBufferValue is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = JsWebMessage.Tags.arrayBufferValue;
      this.$data = value;
    }
  });


    JsWebMessage.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case JsWebMessage.Tags.stringValue:
          encoder.encodeStructPointer(string16$.String16, val.stringValue);
          break;
        case JsWebMessage.Tags.arrayBufferValue:
          encoder.encodeStructPointer(JsWebMessageArrayBufferValue, val.arrayBufferValue);
          break;
      }
      encoder.align();
    };


    JsWebMessage.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new JsWebMessage();
      var tag = decoder.readUint32();
      switch (tag) {
        case JsWebMessage.Tags.stringValue:
          result.stringValue = decoder.decodeStructPointer(string16$.String16);
          break;
        case JsWebMessage.Tags.arrayBufferValue:
          result.arrayBufferValue = decoder.decodeStructPointer(JsWebMessageArrayBufferValue);
          break;
      }
      decoder.align();

      return result;
    };


    JsWebMessage.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case JsWebMessage.Tags.stringValue:
          

    // validate JsWebMessage.stringValue
    err = messageValidator.validateStructPointer(data_offset, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case JsWebMessage.Tags.arrayBufferValue:
          

    // validate JsWebMessage.arrayBufferValue
    err = messageValidator.validateStructPointer(data_offset, JsWebMessageArrayBufferValue, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  JsWebMessage.encodedSize = 16;
  var kJsToBrowserMessaging_PostMessage_Name = 1974289210;
  var kJsToBrowserMessaging_SetBrowserToJsMessaging_Name = 1886585454;

  function JsToBrowserMessagingPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(JsToBrowserMessaging,
                                                   handleOrPtrInfo);
  }

  function JsToBrowserMessagingAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        JsToBrowserMessaging, associatedInterfacePtrInfo);
  }

  JsToBrowserMessagingAssociatedPtr.prototype =
      Object.create(JsToBrowserMessagingPtr.prototype);
  JsToBrowserMessagingAssociatedPtr.prototype.constructor =
      JsToBrowserMessagingAssociatedPtr;

  function JsToBrowserMessagingProxy(receiver) {
    this.receiver_ = receiver;
  }
  JsToBrowserMessagingPtr.prototype.postMessage = function() {
    return JsToBrowserMessagingProxy.prototype.postMessage
        .apply(this.ptr.getProxy(), arguments);
  };

  JsToBrowserMessagingProxy.prototype.postMessage = function(message, ports) {
    var params_ = new JsToBrowserMessaging_PostMessage_Params();
    params_.message = message;
    params_.ports = ports;
    var builder = new codec.MessageV0Builder(
        kJsToBrowserMessaging_PostMessage_Name,
        codec.align(JsToBrowserMessaging_PostMessage_Params.encodedSize));
    builder.encodeStruct(JsToBrowserMessaging_PostMessage_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  JsToBrowserMessagingPtr.prototype.setBrowserToJsMessaging = function() {
    return JsToBrowserMessagingProxy.prototype.setBrowserToJsMessaging
        .apply(this.ptr.getProxy(), arguments);
  };

  JsToBrowserMessagingProxy.prototype.setBrowserToJsMessaging = function(browserToJsMessaging) {
    var params_ = new JsToBrowserMessaging_SetBrowserToJsMessaging_Params();
    params_.browserToJsMessaging = browserToJsMessaging;
    var builder = new codec.MessageV2Builder(
        kJsToBrowserMessaging_SetBrowserToJsMessaging_Name,
        codec.align(JsToBrowserMessaging_SetBrowserToJsMessaging_Params.encodedSize));
    builder.setPayload(JsToBrowserMessaging_SetBrowserToJsMessaging_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function JsToBrowserMessagingStub(delegate) {
    this.delegate_ = delegate;
  }
  JsToBrowserMessagingStub.prototype.postMessage = function(message, ports) {
    return this.delegate_ && this.delegate_.postMessage && this.delegate_.postMessage(message, ports);
  }
  JsToBrowserMessagingStub.prototype.setBrowserToJsMessaging = function(browserToJsMessaging) {
    return this.delegate_ && this.delegate_.setBrowserToJsMessaging && this.delegate_.setBrowserToJsMessaging(browserToJsMessaging);
  }

  JsToBrowserMessagingStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kJsToBrowserMessaging_PostMessage_Name:
      var params = reader.decodeStruct(JsToBrowserMessaging_PostMessage_Params);
      this.postMessage(params.message, params.ports);
      return true;
    case kJsToBrowserMessaging_SetBrowserToJsMessaging_Name:
      var params = reader.decodeStruct(JsToBrowserMessaging_SetBrowserToJsMessaging_Params);
      this.setBrowserToJsMessaging(params.browserToJsMessaging);
      return true;
    default:
      return false;
    }
  };

  JsToBrowserMessagingStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateJsToBrowserMessagingRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kJsToBrowserMessaging_PostMessage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsToBrowserMessaging_PostMessage_Params;
      break;
      case kJsToBrowserMessaging_SetBrowserToJsMessaging_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsToBrowserMessaging_SetBrowserToJsMessaging_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateJsToBrowserMessagingResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var JsToBrowserMessaging = {
    name: 'js_injection.mojom.JsToBrowserMessaging',
    kVersion: 0,
    ptrClass: JsToBrowserMessagingPtr,
    proxyClass: JsToBrowserMessagingProxy,
    stubClass: JsToBrowserMessagingStub,
    validateRequest: validateJsToBrowserMessagingRequest,
    validateResponse: null,
  };
  JsToBrowserMessagingStub.prototype.validator = validateJsToBrowserMessagingRequest;
  JsToBrowserMessagingProxy.prototype.validator = null;
  var kBrowserToJsMessaging_OnPostMessage_Name = 1283516436;

  function BrowserToJsMessagingPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(BrowserToJsMessaging,
                                                   handleOrPtrInfo);
  }

  function BrowserToJsMessagingAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        BrowserToJsMessaging, associatedInterfacePtrInfo);
  }

  BrowserToJsMessagingAssociatedPtr.prototype =
      Object.create(BrowserToJsMessagingPtr.prototype);
  BrowserToJsMessagingAssociatedPtr.prototype.constructor =
      BrowserToJsMessagingAssociatedPtr;

  function BrowserToJsMessagingProxy(receiver) {
    this.receiver_ = receiver;
  }
  BrowserToJsMessagingPtr.prototype.onPostMessage = function() {
    return BrowserToJsMessagingProxy.prototype.onPostMessage
        .apply(this.ptr.getProxy(), arguments);
  };

  BrowserToJsMessagingProxy.prototype.onPostMessage = function(message) {
    var params_ = new BrowserToJsMessaging_OnPostMessage_Params();
    params_.message = message;
    var builder = new codec.MessageV0Builder(
        kBrowserToJsMessaging_OnPostMessage_Name,
        codec.align(BrowserToJsMessaging_OnPostMessage_Params.encodedSize));
    builder.encodeStruct(BrowserToJsMessaging_OnPostMessage_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function BrowserToJsMessagingStub(delegate) {
    this.delegate_ = delegate;
  }
  BrowserToJsMessagingStub.prototype.onPostMessage = function(message) {
    return this.delegate_ && this.delegate_.onPostMessage && this.delegate_.onPostMessage(message);
  }

  BrowserToJsMessagingStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kBrowserToJsMessaging_OnPostMessage_Name:
      var params = reader.decodeStruct(BrowserToJsMessaging_OnPostMessage_Params);
      this.onPostMessage(params.message);
      return true;
    default:
      return false;
    }
  };

  BrowserToJsMessagingStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateBrowserToJsMessagingRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kBrowserToJsMessaging_OnPostMessage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = BrowserToJsMessaging_OnPostMessage_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateBrowserToJsMessagingResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var BrowserToJsMessaging = {
    name: 'js_injection.mojom.BrowserToJsMessaging',
    kVersion: 0,
    ptrClass: BrowserToJsMessagingPtr,
    proxyClass: BrowserToJsMessagingProxy,
    stubClass: BrowserToJsMessagingStub,
    validateRequest: validateBrowserToJsMessagingRequest,
    validateResponse: null,
  };
  BrowserToJsMessagingStub.prototype.validator = validateBrowserToJsMessagingRequest;
  BrowserToJsMessagingProxy.prototype.validator = null;
  var kJsCommunication_SetJsObjects_Name = 1934358882;
  var kJsCommunication_AddDocumentStartScript_Name = 1008198379;
  var kJsCommunication_RemoveDocumentStartScript_Name = 902920267;

  function JsCommunicationPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(JsCommunication,
                                                   handleOrPtrInfo);
  }

  function JsCommunicationAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        JsCommunication, associatedInterfacePtrInfo);
  }

  JsCommunicationAssociatedPtr.prototype =
      Object.create(JsCommunicationPtr.prototype);
  JsCommunicationAssociatedPtr.prototype.constructor =
      JsCommunicationAssociatedPtr;

  function JsCommunicationProxy(receiver) {
    this.receiver_ = receiver;
  }
  JsCommunicationPtr.prototype.setJsObjects = function() {
    return JsCommunicationProxy.prototype.setJsObjects
        .apply(this.ptr.getProxy(), arguments);
  };

  JsCommunicationProxy.prototype.setJsObjects = function(jsObjects) {
    var params_ = new JsCommunication_SetJsObjects_Params();
    params_.jsObjects = jsObjects;
    var builder = new codec.MessageV2Builder(
        kJsCommunication_SetJsObjects_Name,
        codec.align(JsCommunication_SetJsObjects_Params.encodedSize));
    builder.setPayload(JsCommunication_SetJsObjects_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  JsCommunicationPtr.prototype.addDocumentStartScript = function() {
    return JsCommunicationProxy.prototype.addDocumentStartScript
        .apply(this.ptr.getProxy(), arguments);
  };

  JsCommunicationProxy.prototype.addDocumentStartScript = function(script) {
    var params_ = new JsCommunication_AddDocumentStartScript_Params();
    params_.script = script;
    var builder = new codec.MessageV0Builder(
        kJsCommunication_AddDocumentStartScript_Name,
        codec.align(JsCommunication_AddDocumentStartScript_Params.encodedSize));
    builder.encodeStruct(JsCommunication_AddDocumentStartScript_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  JsCommunicationPtr.prototype.removeDocumentStartScript = function() {
    return JsCommunicationProxy.prototype.removeDocumentStartScript
        .apply(this.ptr.getProxy(), arguments);
  };

  JsCommunicationProxy.prototype.removeDocumentStartScript = function(scriptId) {
    var params_ = new JsCommunication_RemoveDocumentStartScript_Params();
    params_.scriptId = scriptId;
    var builder = new codec.MessageV0Builder(
        kJsCommunication_RemoveDocumentStartScript_Name,
        codec.align(JsCommunication_RemoveDocumentStartScript_Params.encodedSize));
    builder.encodeStruct(JsCommunication_RemoveDocumentStartScript_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function JsCommunicationStub(delegate) {
    this.delegate_ = delegate;
  }
  JsCommunicationStub.prototype.setJsObjects = function(jsObjects) {
    return this.delegate_ && this.delegate_.setJsObjects && this.delegate_.setJsObjects(jsObjects);
  }
  JsCommunicationStub.prototype.addDocumentStartScript = function(script) {
    return this.delegate_ && this.delegate_.addDocumentStartScript && this.delegate_.addDocumentStartScript(script);
  }
  JsCommunicationStub.prototype.removeDocumentStartScript = function(scriptId) {
    return this.delegate_ && this.delegate_.removeDocumentStartScript && this.delegate_.removeDocumentStartScript(scriptId);
  }

  JsCommunicationStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kJsCommunication_SetJsObjects_Name:
      var params = reader.decodeStruct(JsCommunication_SetJsObjects_Params);
      this.setJsObjects(params.jsObjects);
      return true;
    case kJsCommunication_AddDocumentStartScript_Name:
      var params = reader.decodeStruct(JsCommunication_AddDocumentStartScript_Params);
      this.addDocumentStartScript(params.script);
      return true;
    case kJsCommunication_RemoveDocumentStartScript_Name:
      var params = reader.decodeStruct(JsCommunication_RemoveDocumentStartScript_Params);
      this.removeDocumentStartScript(params.scriptId);
      return true;
    default:
      return false;
    }
  };

  JsCommunicationStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateJsCommunicationRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kJsCommunication_SetJsObjects_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsCommunication_SetJsObjects_Params;
      break;
      case kJsCommunication_AddDocumentStartScript_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsCommunication_AddDocumentStartScript_Params;
      break;
      case kJsCommunication_RemoveDocumentStartScript_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = JsCommunication_RemoveDocumentStartScript_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateJsCommunicationResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var JsCommunication = {
    name: 'js_injection.mojom.JsCommunication',
    kVersion: 0,
    ptrClass: JsCommunicationPtr,
    proxyClass: JsCommunicationProxy,
    stubClass: JsCommunicationStub,
    validateRequest: validateJsCommunicationRequest,
    validateResponse: null,
  };
  JsCommunicationStub.prototype.validator = validateJsCommunicationRequest;
  JsCommunicationProxy.prototype.validator = null;
  exports.JsObject = JsObject;
  exports.DocumentStartJavaScript = DocumentStartJavaScript;
  exports.JsWebMessageArrayBufferValue = JsWebMessageArrayBufferValue;
  exports.JsWebMessage = JsWebMessage;
  exports.JsToBrowserMessaging = JsToBrowserMessaging;
  exports.JsToBrowserMessagingPtr = JsToBrowserMessagingPtr;
  exports.JsToBrowserMessagingAssociatedPtr = JsToBrowserMessagingAssociatedPtr;
  exports.BrowserToJsMessaging = BrowserToJsMessaging;
  exports.BrowserToJsMessagingPtr = BrowserToJsMessagingPtr;
  exports.BrowserToJsMessagingAssociatedPtr = BrowserToJsMessagingAssociatedPtr;
  exports.JsCommunication = JsCommunication;
  exports.JsCommunicationPtr = JsCommunicationPtr;
  exports.JsCommunicationAssociatedPtr = JsCommunicationAssociatedPtr;
})();