// components/js_injection/common/origin_matcher.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/js_injection/common/origin_matcher.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('jsInjection.mojom');



  function SubdomainMatchingRule(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SubdomainMatchingRule.prototype.initDefaults_ = function() {
    this.scheme = null;
    this.optionalHost = null;
    this.optionalPort = 0;
  };
  SubdomainMatchingRule.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SubdomainMatchingRule.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SubdomainMatchingRule.scheme
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SubdomainMatchingRule.optionalHost
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SubdomainMatchingRule.encodedSize = codec.kStructHeaderSize + 24;

  SubdomainMatchingRule.decode = function(decoder) {
    var packed;
    var val = new SubdomainMatchingRule();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.scheme =
        decoder.decodeStruct(codec.String);
    val.optionalHost =
        decoder.decodeStruct(codec.String);
    val.optionalPort =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SubdomainMatchingRule.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SubdomainMatchingRule.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.scheme);
    encoder.encodeStruct(codec.String, val.optionalHost);
    encoder.encodeStruct(codec.Int32, val.optionalPort);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function OriginMatcherRule(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  OriginMatcherRule.prototype.initDefaults_ = function() {
    this.subdomainMatchingRule = null;
  };
  OriginMatcherRule.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  OriginMatcherRule.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate OriginMatcherRule.subdomainMatchingRule
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SubdomainMatchingRule, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  OriginMatcherRule.encodedSize = codec.kStructHeaderSize + 8;

  OriginMatcherRule.decode = function(decoder) {
    var packed;
    var val = new OriginMatcherRule();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.subdomainMatchingRule =
        decoder.decodeStructPointer(SubdomainMatchingRule);
    return val;
  };

  OriginMatcherRule.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(OriginMatcherRule.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SubdomainMatchingRule, val.subdomainMatchingRule);
  };
  function OriginMatcher(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  OriginMatcher.prototype.initDefaults_ = function() {
    this.rules = null;
  };
  OriginMatcher.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  OriginMatcher.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate OriginMatcher.rules
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(OriginMatcherRule), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  OriginMatcher.encodedSize = codec.kStructHeaderSize + 8;

  OriginMatcher.decode = function(decoder) {
    var packed;
    var val = new OriginMatcher();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rules =
        decoder.decodeArrayPointer(new codec.PointerTo(OriginMatcherRule));
    return val;
  };

  OriginMatcher.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(OriginMatcher.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(OriginMatcherRule), val.rules);
  };
  exports.SubdomainMatchingRule = SubdomainMatchingRule;
  exports.OriginMatcherRule = OriginMatcherRule;
  exports.OriginMatcher = OriginMatcher;
})();