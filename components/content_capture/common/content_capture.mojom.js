// components/content_capture/common/content_capture.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/content_capture/common/content_capture.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('contentCapture.mojom');
  var content_capture_data$ =
      mojo.internal.exposeNamespace('contentCapture.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/content_capture/common/content_capture_data.mojom', 'content_capture_data.mojom.js');
  }



  function ContentCaptureReceiver_DidCaptureContent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentCaptureReceiver_DidCaptureContent_Params.prototype.initDefaults_ = function() {
    this.data = null;
    this.firstData = false;
  };
  ContentCaptureReceiver_DidCaptureContent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentCaptureReceiver_DidCaptureContent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentCaptureReceiver_DidCaptureContent_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, content_capture_data$.ContentCaptureData, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ContentCaptureReceiver_DidCaptureContent_Params.encodedSize = codec.kStructHeaderSize + 16;

  ContentCaptureReceiver_DidCaptureContent_Params.decode = function(decoder) {
    var packed;
    var val = new ContentCaptureReceiver_DidCaptureContent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStructPointer(content_capture_data$.ContentCaptureData);
    packed = decoder.readUint8();
    val.firstData = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ContentCaptureReceiver_DidCaptureContent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentCaptureReceiver_DidCaptureContent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(content_capture_data$.ContentCaptureData, val.data);
    packed = 0;
    packed |= (val.firstData & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ContentCaptureReceiver_DidUpdateContent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentCaptureReceiver_DidUpdateContent_Params.prototype.initDefaults_ = function() {
    this.data = null;
  };
  ContentCaptureReceiver_DidUpdateContent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentCaptureReceiver_DidUpdateContent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentCaptureReceiver_DidUpdateContent_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, content_capture_data$.ContentCaptureData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ContentCaptureReceiver_DidUpdateContent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ContentCaptureReceiver_DidUpdateContent_Params.decode = function(decoder) {
    var packed;
    var val = new ContentCaptureReceiver_DidUpdateContent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStructPointer(content_capture_data$.ContentCaptureData);
    return val;
  };

  ContentCaptureReceiver_DidUpdateContent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentCaptureReceiver_DidUpdateContent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(content_capture_data$.ContentCaptureData, val.data);
  };
  function ContentCaptureReceiver_DidRemoveContent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentCaptureReceiver_DidRemoveContent_Params.prototype.initDefaults_ = function() {
    this.ids = null;
  };
  ContentCaptureReceiver_DidRemoveContent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentCaptureReceiver_DidRemoveContent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentCaptureReceiver_DidRemoveContent_Params.ids
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.Int64, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ContentCaptureReceiver_DidRemoveContent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ContentCaptureReceiver_DidRemoveContent_Params.decode = function(decoder) {
    var packed;
    var val = new ContentCaptureReceiver_DidRemoveContent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.ids =
        decoder.decodeArrayPointer(codec.Int64);
    return val;
  };

  ContentCaptureReceiver_DidRemoveContent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentCaptureReceiver_DidRemoveContent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Int64, val.ids);
  };
  function ContentCaptureSender_StartCapture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentCaptureSender_StartCapture_Params.prototype.initDefaults_ = function() {
  };
  ContentCaptureSender_StartCapture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentCaptureSender_StartCapture_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ContentCaptureSender_StartCapture_Params.encodedSize = codec.kStructHeaderSize + 0;

  ContentCaptureSender_StartCapture_Params.decode = function(decoder) {
    var packed;
    var val = new ContentCaptureSender_StartCapture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ContentCaptureSender_StartCapture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentCaptureSender_StartCapture_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ContentCaptureSender_StopCapture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentCaptureSender_StopCapture_Params.prototype.initDefaults_ = function() {
  };
  ContentCaptureSender_StopCapture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentCaptureSender_StopCapture_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ContentCaptureSender_StopCapture_Params.encodedSize = codec.kStructHeaderSize + 0;

  ContentCaptureSender_StopCapture_Params.decode = function(decoder) {
    var packed;
    var val = new ContentCaptureSender_StopCapture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ContentCaptureSender_StopCapture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentCaptureSender_StopCapture_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kContentCaptureReceiver_DidCaptureContent_Name = 1199719328;
  var kContentCaptureReceiver_DidUpdateContent_Name = 665900240;
  var kContentCaptureReceiver_DidRemoveContent_Name = 121562978;

  function ContentCaptureReceiverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ContentCaptureReceiver,
                                                   handleOrPtrInfo);
  }

  function ContentCaptureReceiverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ContentCaptureReceiver, associatedInterfacePtrInfo);
  }

  ContentCaptureReceiverAssociatedPtr.prototype =
      Object.create(ContentCaptureReceiverPtr.prototype);
  ContentCaptureReceiverAssociatedPtr.prototype.constructor =
      ContentCaptureReceiverAssociatedPtr;

  function ContentCaptureReceiverProxy(receiver) {
    this.receiver_ = receiver;
  }
  ContentCaptureReceiverPtr.prototype.didCaptureContent = function() {
    return ContentCaptureReceiverProxy.prototype.didCaptureContent
        .apply(this.ptr.getProxy(), arguments);
  };

  ContentCaptureReceiverProxy.prototype.didCaptureContent = function(data, firstData) {
    var params_ = new ContentCaptureReceiver_DidCaptureContent_Params();
    params_.data = data;
    params_.firstData = firstData;
    var builder = new codec.MessageV0Builder(
        kContentCaptureReceiver_DidCaptureContent_Name,
        codec.align(ContentCaptureReceiver_DidCaptureContent_Params.encodedSize));
    builder.encodeStruct(ContentCaptureReceiver_DidCaptureContent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ContentCaptureReceiverPtr.prototype.didUpdateContent = function() {
    return ContentCaptureReceiverProxy.prototype.didUpdateContent
        .apply(this.ptr.getProxy(), arguments);
  };

  ContentCaptureReceiverProxy.prototype.didUpdateContent = function(data) {
    var params_ = new ContentCaptureReceiver_DidUpdateContent_Params();
    params_.data = data;
    var builder = new codec.MessageV0Builder(
        kContentCaptureReceiver_DidUpdateContent_Name,
        codec.align(ContentCaptureReceiver_DidUpdateContent_Params.encodedSize));
    builder.encodeStruct(ContentCaptureReceiver_DidUpdateContent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ContentCaptureReceiverPtr.prototype.didRemoveContent = function() {
    return ContentCaptureReceiverProxy.prototype.didRemoveContent
        .apply(this.ptr.getProxy(), arguments);
  };

  ContentCaptureReceiverProxy.prototype.didRemoveContent = function(ids) {
    var params_ = new ContentCaptureReceiver_DidRemoveContent_Params();
    params_.ids = ids;
    var builder = new codec.MessageV0Builder(
        kContentCaptureReceiver_DidRemoveContent_Name,
        codec.align(ContentCaptureReceiver_DidRemoveContent_Params.encodedSize));
    builder.encodeStruct(ContentCaptureReceiver_DidRemoveContent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ContentCaptureReceiverStub(delegate) {
    this.delegate_ = delegate;
  }
  ContentCaptureReceiverStub.prototype.didCaptureContent = function(data, firstData) {
    return this.delegate_ && this.delegate_.didCaptureContent && this.delegate_.didCaptureContent(data, firstData);
  }
  ContentCaptureReceiverStub.prototype.didUpdateContent = function(data) {
    return this.delegate_ && this.delegate_.didUpdateContent && this.delegate_.didUpdateContent(data);
  }
  ContentCaptureReceiverStub.prototype.didRemoveContent = function(ids) {
    return this.delegate_ && this.delegate_.didRemoveContent && this.delegate_.didRemoveContent(ids);
  }

  ContentCaptureReceiverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kContentCaptureReceiver_DidCaptureContent_Name:
      var params = reader.decodeStruct(ContentCaptureReceiver_DidCaptureContent_Params);
      this.didCaptureContent(params.data, params.firstData);
      return true;
    case kContentCaptureReceiver_DidUpdateContent_Name:
      var params = reader.decodeStruct(ContentCaptureReceiver_DidUpdateContent_Params);
      this.didUpdateContent(params.data);
      return true;
    case kContentCaptureReceiver_DidRemoveContent_Name:
      var params = reader.decodeStruct(ContentCaptureReceiver_DidRemoveContent_Params);
      this.didRemoveContent(params.ids);
      return true;
    default:
      return false;
    }
  };

  ContentCaptureReceiverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateContentCaptureReceiverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kContentCaptureReceiver_DidCaptureContent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ContentCaptureReceiver_DidCaptureContent_Params;
      break;
      case kContentCaptureReceiver_DidUpdateContent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ContentCaptureReceiver_DidUpdateContent_Params;
      break;
      case kContentCaptureReceiver_DidRemoveContent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ContentCaptureReceiver_DidRemoveContent_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateContentCaptureReceiverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ContentCaptureReceiver = {
    name: 'content_capture.mojom.ContentCaptureReceiver',
    kVersion: 0,
    ptrClass: ContentCaptureReceiverPtr,
    proxyClass: ContentCaptureReceiverProxy,
    stubClass: ContentCaptureReceiverStub,
    validateRequest: validateContentCaptureReceiverRequest,
    validateResponse: null,
  };
  ContentCaptureReceiverStub.prototype.validator = validateContentCaptureReceiverRequest;
  ContentCaptureReceiverProxy.prototype.validator = null;
  var kContentCaptureSender_StartCapture_Name = 1920706097;
  var kContentCaptureSender_StopCapture_Name = 134586235;

  function ContentCaptureSenderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ContentCaptureSender,
                                                   handleOrPtrInfo);
  }

  function ContentCaptureSenderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ContentCaptureSender, associatedInterfacePtrInfo);
  }

  ContentCaptureSenderAssociatedPtr.prototype =
      Object.create(ContentCaptureSenderPtr.prototype);
  ContentCaptureSenderAssociatedPtr.prototype.constructor =
      ContentCaptureSenderAssociatedPtr;

  function ContentCaptureSenderProxy(receiver) {
    this.receiver_ = receiver;
  }
  ContentCaptureSenderPtr.prototype.startCapture = function() {
    return ContentCaptureSenderProxy.prototype.startCapture
        .apply(this.ptr.getProxy(), arguments);
  };

  ContentCaptureSenderProxy.prototype.startCapture = function() {
    var params_ = new ContentCaptureSender_StartCapture_Params();
    var builder = new codec.MessageV0Builder(
        kContentCaptureSender_StartCapture_Name,
        codec.align(ContentCaptureSender_StartCapture_Params.encodedSize));
    builder.encodeStruct(ContentCaptureSender_StartCapture_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ContentCaptureSenderPtr.prototype.stopCapture = function() {
    return ContentCaptureSenderProxy.prototype.stopCapture
        .apply(this.ptr.getProxy(), arguments);
  };

  ContentCaptureSenderProxy.prototype.stopCapture = function() {
    var params_ = new ContentCaptureSender_StopCapture_Params();
    var builder = new codec.MessageV0Builder(
        kContentCaptureSender_StopCapture_Name,
        codec.align(ContentCaptureSender_StopCapture_Params.encodedSize));
    builder.encodeStruct(ContentCaptureSender_StopCapture_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ContentCaptureSenderStub(delegate) {
    this.delegate_ = delegate;
  }
  ContentCaptureSenderStub.prototype.startCapture = function() {
    return this.delegate_ && this.delegate_.startCapture && this.delegate_.startCapture();
  }
  ContentCaptureSenderStub.prototype.stopCapture = function() {
    return this.delegate_ && this.delegate_.stopCapture && this.delegate_.stopCapture();
  }

  ContentCaptureSenderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kContentCaptureSender_StartCapture_Name:
      var params = reader.decodeStruct(ContentCaptureSender_StartCapture_Params);
      this.startCapture();
      return true;
    case kContentCaptureSender_StopCapture_Name:
      var params = reader.decodeStruct(ContentCaptureSender_StopCapture_Params);
      this.stopCapture();
      return true;
    default:
      return false;
    }
  };

  ContentCaptureSenderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateContentCaptureSenderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kContentCaptureSender_StartCapture_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ContentCaptureSender_StartCapture_Params;
      break;
      case kContentCaptureSender_StopCapture_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ContentCaptureSender_StopCapture_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateContentCaptureSenderResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ContentCaptureSender = {
    name: 'content_capture.mojom.ContentCaptureSender',
    kVersion: 0,
    ptrClass: ContentCaptureSenderPtr,
    proxyClass: ContentCaptureSenderProxy,
    stubClass: ContentCaptureSenderStub,
    validateRequest: validateContentCaptureSenderRequest,
    validateResponse: null,
  };
  ContentCaptureSenderStub.prototype.validator = validateContentCaptureSenderRequest;
  ContentCaptureSenderProxy.prototype.validator = null;
  exports.ContentCaptureReceiver = ContentCaptureReceiver;
  exports.ContentCaptureReceiverPtr = ContentCaptureReceiverPtr;
  exports.ContentCaptureReceiverAssociatedPtr = ContentCaptureReceiverAssociatedPtr;
  exports.ContentCaptureSender = ContentCaptureSender;
  exports.ContentCaptureSenderPtr = ContentCaptureSenderPtr;
  exports.ContentCaptureSenderAssociatedPtr = ContentCaptureSenderAssociatedPtr;
})();