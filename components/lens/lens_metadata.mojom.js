// components/lens/lens_metadata.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/lens/lens_metadata.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('lens.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../mojo/public/mojom/base/time.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }


  var ImageFormat = {};
  ImageFormat.JPEG = 0;
  ImageFormat.PNG = 1;
  ImageFormat.WEBP = 2;
  ImageFormat.ORIGINAL = 3;
  ImageFormat.MIN_VALUE = 0;
  ImageFormat.MAX_VALUE = 3;

  ImageFormat.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  ImageFormat.toKnownEnumValue = function(value) {
    return value;
  };

  ImageFormat.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var Phase = {};
  Phase.OVERALL_START = 0;
  Phase.DOWNSCALE_START = 1;
  Phase.DOWNSCALE_END = 2;
  Phase.ENCODE_START = 3;
  Phase.ENCODE_END = 4;
  Phase.MIN_VALUE = 0;
  Phase.MAX_VALUE = 4;

  Phase.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  Phase.toKnownEnumValue = function(value) {
    return value;
  };

  Phase.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function LatencyLog(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LatencyLog.prototype.initDefaults_ = function() {
    this.phase = 0;
    this.imageFormat = 0;
    this.originalSize = null;
    this.downscaledSize = null;
    this.time = null;
  };
  LatencyLog.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LatencyLog.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LatencyLog.phase
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, Phase);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LatencyLog.originalSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LatencyLog.downscaledSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LatencyLog.imageFormat
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, ImageFormat);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LatencyLog.time
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LatencyLog.encodedSize = codec.kStructHeaderSize + 32;

  LatencyLog.decode = function(decoder) {
    var packed;
    var val = new LatencyLog();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.phase =
        decoder.decodeStruct(new codec.Enum(Phase));
    val.imageFormat =
        decoder.decodeStruct(new codec.Enum(ImageFormat));
    val.originalSize =
        decoder.decodeStructPointer(geometry$.Size);
    val.downscaledSize =
        decoder.decodeStructPointer(geometry$.Size);
    val.time =
        decoder.decodeStructPointer(time$.Time);
    return val;
  };

  LatencyLog.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LatencyLog.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.phase);
    encoder.encodeStruct(codec.Int32, val.imageFormat);
    encoder.encodeStructPointer(geometry$.Size, val.originalSize);
    encoder.encodeStructPointer(geometry$.Size, val.downscaledSize);
    encoder.encodeStructPointer(time$.Time, val.time);
  };
  exports.ImageFormat = ImageFormat;
  exports.Phase = Phase;
  exports.LatencyLog = LatencyLog;
})();