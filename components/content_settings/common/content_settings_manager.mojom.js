// components/content_settings/common/content_settings_manager.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/content_settings/common/content_settings_manager.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('contentSettings.mojom');
  var content_settings$ =
      mojo.internal.exposeNamespace('contentSettings.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/content_settings/core/common/content_settings.mojom', '../core/common/content_settings.mojom.js');
  }
  var site_for_cookies$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/site_for_cookies.mojom', '../../../services/network/public/mojom/site_for_cookies.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../url/mojom/origin.mojom.js');
  }



  function ContentSettingsManager_Clone_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentSettingsManager_Clone_Params.prototype.initDefaults_ = function() {
    this.clone = new bindings.InterfaceRequest();
  };
  ContentSettingsManager_Clone_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentSettingsManager_Clone_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentSettingsManager_Clone_Params.clone
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ContentSettingsManager_Clone_Params.encodedSize = codec.kStructHeaderSize + 8;

  ContentSettingsManager_Clone_Params.decode = function(decoder) {
    var packed;
    var val = new ContentSettingsManager_Clone_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clone =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ContentSettingsManager_Clone_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentSettingsManager_Clone_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.clone);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ContentSettingsManager_AllowStorageAccess_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentSettingsManager_AllowStorageAccess_Params.prototype.initDefaults_ = function() {
    this.renderFrameId = 0;
    this.storageType = 0;
    this.origin = null;
    this.siteForCookies = null;
    this.topFrameOrigin = null;
  };
  ContentSettingsManager_AllowStorageAccess_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentSettingsManager_AllowStorageAccess_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ContentSettingsManager_AllowStorageAccess_Params.storageType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, ContentSettingsManager.StorageType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentSettingsManager_AllowStorageAccess_Params.origin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentSettingsManager_AllowStorageAccess_Params.siteForCookies
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, site_for_cookies$.SiteForCookies, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ContentSettingsManager_AllowStorageAccess_Params.topFrameOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ContentSettingsManager_AllowStorageAccess_Params.encodedSize = codec.kStructHeaderSize + 32;

  ContentSettingsManager_AllowStorageAccess_Params.decode = function(decoder) {
    var packed;
    var val = new ContentSettingsManager_AllowStorageAccess_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.renderFrameId =
        decoder.decodeStruct(codec.Int32);
    val.storageType =
        decoder.decodeStruct(new codec.Enum(ContentSettingsManager.StorageType));
    val.origin =
        decoder.decodeStructPointer(origin$.Origin);
    val.siteForCookies =
        decoder.decodeStructPointer(site_for_cookies$.SiteForCookies);
    val.topFrameOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    return val;
  };

  ContentSettingsManager_AllowStorageAccess_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentSettingsManager_AllowStorageAccess_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.renderFrameId);
    encoder.encodeStruct(codec.Int32, val.storageType);
    encoder.encodeStructPointer(origin$.Origin, val.origin);
    encoder.encodeStructPointer(site_for_cookies$.SiteForCookies, val.siteForCookies);
    encoder.encodeStructPointer(origin$.Origin, val.topFrameOrigin);
  };
  function ContentSettingsManager_AllowStorageAccess_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentSettingsManager_AllowStorageAccess_ResponseParams.prototype.initDefaults_ = function() {
    this.allowed = false;
  };
  ContentSettingsManager_AllowStorageAccess_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentSettingsManager_AllowStorageAccess_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ContentSettingsManager_AllowStorageAccess_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ContentSettingsManager_AllowStorageAccess_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ContentSettingsManager_AllowStorageAccess_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.allowed = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ContentSettingsManager_AllowStorageAccess_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentSettingsManager_AllowStorageAccess_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.allowed & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ContentSettingsManager_OnContentBlocked_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ContentSettingsManager_OnContentBlocked_Params.prototype.initDefaults_ = function() {
    this.renderFrameId = 0;
    this.type = 0;
  };
  ContentSettingsManager_OnContentBlocked_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ContentSettingsManager_OnContentBlocked_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ContentSettingsManager_OnContentBlocked_Params.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, content_settings$.ContentSettingsType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ContentSettingsManager_OnContentBlocked_Params.encodedSize = codec.kStructHeaderSize + 8;

  ContentSettingsManager_OnContentBlocked_Params.decode = function(decoder) {
    var packed;
    var val = new ContentSettingsManager_OnContentBlocked_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.renderFrameId =
        decoder.decodeStruct(codec.Int32);
    val.type =
        decoder.decodeStruct(new codec.Enum(content_settings$.ContentSettingsType));
    return val;
  };

  ContentSettingsManager_OnContentBlocked_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ContentSettingsManager_OnContentBlocked_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.renderFrameId);
    encoder.encodeStruct(codec.Int32, val.type);
  };
  var kContentSettingsManager_Clone_Name = 125209669;
  var kContentSettingsManager_AllowStorageAccess_Name = 858396391;
  var kContentSettingsManager_OnContentBlocked_Name = 997805657;

  function ContentSettingsManagerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ContentSettingsManager,
                                                   handleOrPtrInfo);
  }

  function ContentSettingsManagerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ContentSettingsManager, associatedInterfacePtrInfo);
  }

  ContentSettingsManagerAssociatedPtr.prototype =
      Object.create(ContentSettingsManagerPtr.prototype);
  ContentSettingsManagerAssociatedPtr.prototype.constructor =
      ContentSettingsManagerAssociatedPtr;

  function ContentSettingsManagerProxy(receiver) {
    this.receiver_ = receiver;
  }
  ContentSettingsManagerPtr.prototype.clone = function() {
    return ContentSettingsManagerProxy.prototype.clone
        .apply(this.ptr.getProxy(), arguments);
  };

  ContentSettingsManagerProxy.prototype.clone = function(clone) {
    var params_ = new ContentSettingsManager_Clone_Params();
    params_.clone = clone;
    var builder = new codec.MessageV0Builder(
        kContentSettingsManager_Clone_Name,
        codec.align(ContentSettingsManager_Clone_Params.encodedSize));
    builder.encodeStruct(ContentSettingsManager_Clone_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ContentSettingsManagerPtr.prototype.allowStorageAccess = function() {
    return ContentSettingsManagerProxy.prototype.allowStorageAccess
        .apply(this.ptr.getProxy(), arguments);
  };

  ContentSettingsManagerProxy.prototype.allowStorageAccess = function(renderFrameId, storageType, origin, siteForCookies, topFrameOrigin) {
    var params_ = new ContentSettingsManager_AllowStorageAccess_Params();
    params_.renderFrameId = renderFrameId;
    params_.storageType = storageType;
    params_.origin = origin;
    params_.siteForCookies = siteForCookies;
    params_.topFrameOrigin = topFrameOrigin;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kContentSettingsManager_AllowStorageAccess_Name,
          codec.align(ContentSettingsManager_AllowStorageAccess_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ContentSettingsManager_AllowStorageAccess_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ContentSettingsManager_AllowStorageAccess_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ContentSettingsManagerPtr.prototype.onContentBlocked = function() {
    return ContentSettingsManagerProxy.prototype.onContentBlocked
        .apply(this.ptr.getProxy(), arguments);
  };

  ContentSettingsManagerProxy.prototype.onContentBlocked = function(renderFrameId, type) {
    var params_ = new ContentSettingsManager_OnContentBlocked_Params();
    params_.renderFrameId = renderFrameId;
    params_.type = type;
    var builder = new codec.MessageV0Builder(
        kContentSettingsManager_OnContentBlocked_Name,
        codec.align(ContentSettingsManager_OnContentBlocked_Params.encodedSize));
    builder.encodeStruct(ContentSettingsManager_OnContentBlocked_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ContentSettingsManagerStub(delegate) {
    this.delegate_ = delegate;
  }
  ContentSettingsManagerStub.prototype.clone = function(clone) {
    return this.delegate_ && this.delegate_.clone && this.delegate_.clone(clone);
  }
  ContentSettingsManagerStub.prototype.allowStorageAccess = function(renderFrameId, storageType, origin, siteForCookies, topFrameOrigin) {
    return this.delegate_ && this.delegate_.allowStorageAccess && this.delegate_.allowStorageAccess(renderFrameId, storageType, origin, siteForCookies, topFrameOrigin);
  }
  ContentSettingsManagerStub.prototype.onContentBlocked = function(renderFrameId, type) {
    return this.delegate_ && this.delegate_.onContentBlocked && this.delegate_.onContentBlocked(renderFrameId, type);
  }

  ContentSettingsManagerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kContentSettingsManager_Clone_Name:
      var params = reader.decodeStruct(ContentSettingsManager_Clone_Params);
      this.clone(params.clone);
      return true;
    case kContentSettingsManager_OnContentBlocked_Name:
      var params = reader.decodeStruct(ContentSettingsManager_OnContentBlocked_Params);
      this.onContentBlocked(params.renderFrameId, params.type);
      return true;
    default:
      return false;
    }
  };

  ContentSettingsManagerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kContentSettingsManager_AllowStorageAccess_Name:
      var params = reader.decodeStruct(ContentSettingsManager_AllowStorageAccess_Params);
      this.allowStorageAccess(params.renderFrameId, params.storageType, params.origin, params.siteForCookies, params.topFrameOrigin).then(function(response) {
        var responseParams =
            new ContentSettingsManager_AllowStorageAccess_ResponseParams();
        responseParams.allowed = response.allowed;
        var builder = new codec.MessageV1Builder(
            kContentSettingsManager_AllowStorageAccess_Name,
            codec.align(ContentSettingsManager_AllowStorageAccess_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ContentSettingsManager_AllowStorageAccess_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateContentSettingsManagerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kContentSettingsManager_Clone_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ContentSettingsManager_Clone_Params;
      break;
      case kContentSettingsManager_AllowStorageAccess_Name:
        if (message.expectsResponse())
          paramsClass = ContentSettingsManager_AllowStorageAccess_Params;
      break;
      case kContentSettingsManager_OnContentBlocked_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ContentSettingsManager_OnContentBlocked_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateContentSettingsManagerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kContentSettingsManager_AllowStorageAccess_Name:
        if (message.isResponse())
          paramsClass = ContentSettingsManager_AllowStorageAccess_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ContentSettingsManager = {
    name: 'content_settings.mojom.ContentSettingsManager',
    kVersion: 0,
    ptrClass: ContentSettingsManagerPtr,
    proxyClass: ContentSettingsManagerProxy,
    stubClass: ContentSettingsManagerStub,
    validateRequest: validateContentSettingsManagerRequest,
    validateResponse: validateContentSettingsManagerResponse,
  };
  ContentSettingsManager.StorageType = {};
  ContentSettingsManager.StorageType.DATABASE = 0;
  ContentSettingsManager.StorageType.LOCAL_STORAGE = 1;
  ContentSettingsManager.StorageType.SESSION_STORAGE = 2;
  ContentSettingsManager.StorageType.FILE_SYSTEM = 3;
  ContentSettingsManager.StorageType.INDEXED_DB = 4;
  ContentSettingsManager.StorageType.CACHE = 5;
  ContentSettingsManager.StorageType.WEB_LOCKS = 6;
  ContentSettingsManager.StorageType.MIN_VALUE = 0;
  ContentSettingsManager.StorageType.MAX_VALUE = 6;

  ContentSettingsManager.StorageType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  ContentSettingsManager.StorageType.toKnownEnumValue = function(value) {
    return value;
  };

  ContentSettingsManager.StorageType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  ContentSettingsManagerStub.prototype.validator = validateContentSettingsManagerRequest;
  ContentSettingsManagerProxy.prototype.validator = validateContentSettingsManagerResponse;
  exports.ContentSettingsManager = ContentSettingsManager;
  exports.ContentSettingsManagerPtr = ContentSettingsManagerPtr;
  exports.ContentSettingsManagerAssociatedPtr = ContentSettingsManagerAssociatedPtr;
})();