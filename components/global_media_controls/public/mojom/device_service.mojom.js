// components/global_media_controls/public/mojom/device_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/global_media_controls/public/mojom/device_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('globalMediaControls.mojom');
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var media_session$ =
      mojo.internal.exposeNamespace('mediaSession.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/media_session/public/mojom/media_session.mojom', '../../../../services/media_session/public/mojom/media_session.mojom.js');
  }
  var image$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/image/mojom/image.mojom', '../../../../ui/gfx/image/mojom/image.mojom.js');
  }


  var IconType = {};
  IconType.kUnknown = 0;
  IconType.kThrobber = 1;
  IconType.kInfo = 2;
  IconType.kTv = 3;
  IconType.kSpeaker = 4;
  IconType.kSpeakerGroup = 5;
  IconType.kInput = 6;
  IconType.MIN_VALUE = 0;
  IconType.MAX_VALUE = 6;
  IconType.DEFAULT_VALUE = 0;

  IconType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  IconType.toKnownEnumValue = function(value) {
    if (this.isKnownEnumValue(value))
      return value;
    return this.DEFAULT_VALUE;
  };

  IconType.validate = function(enumValue) {
    const isExtensible = true;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function Device(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Device.prototype.initDefaults_ = function() {
    this.id = null;
    this.name = null;
    this.statusText = null;
    this.icon = 0;
  };
  Device.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Device.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Device.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Device.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Device.statusText
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Device.icon
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 24, IconType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Device.encodedSize = codec.kStructHeaderSize + 32;

  Device.decode = function(decoder) {
    var packed;
    var val = new Device();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    val.name =
        decoder.decodeStruct(codec.String);
    val.statusText =
        decoder.decodeStruct(codec.String);
    val.icon =
        decoder.decodeStruct(new codec.Enum(IconType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Device.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Device.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.String, val.statusText);
    encoder.encodeStruct(codec.Int32, val.icon);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DeviceListHost_SelectDevice_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DeviceListHost_SelectDevice_Params.prototype.initDefaults_ = function() {
    this.deviceId = null;
  };
  DeviceListHost_SelectDevice_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DeviceListHost_SelectDevice_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DeviceListHost_SelectDevice_Params.deviceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DeviceListHost_SelectDevice_Params.encodedSize = codec.kStructHeaderSize + 8;

  DeviceListHost_SelectDevice_Params.decode = function(decoder) {
    var packed;
    var val = new DeviceListHost_SelectDevice_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  DeviceListHost_SelectDevice_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DeviceListHost_SelectDevice_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.deviceId);
  };
  function DeviceListClient_OnDevicesUpdated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DeviceListClient_OnDevicesUpdated_Params.prototype.initDefaults_ = function() {
    this.devices = null;
  };
  DeviceListClient_OnDevicesUpdated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DeviceListClient_OnDevicesUpdated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DeviceListClient_OnDevicesUpdated_Params.devices
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(Device), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DeviceListClient_OnDevicesUpdated_Params.encodedSize = codec.kStructHeaderSize + 8;

  DeviceListClient_OnDevicesUpdated_Params.decode = function(decoder) {
    var packed;
    var val = new DeviceListClient_OnDevicesUpdated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devices =
        decoder.decodeArrayPointer(new codec.PointerTo(Device));
    return val;
  };

  DeviceListClient_OnDevicesUpdated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DeviceListClient_OnDevicesUpdated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(Device), val.devices);
  };
  function DeviceService_GetDeviceListHostForSession_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DeviceService_GetDeviceListHostForSession_Params.prototype.initDefaults_ = function() {
    this.sessionId = null;
    this.hostReceiver = new bindings.InterfaceRequest();
    this.clientRemote = new DeviceListClientPtr();
  };
  DeviceService_GetDeviceListHostForSession_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DeviceService_GetDeviceListHostForSession_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DeviceService_GetDeviceListHostForSession_Params.sessionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DeviceService_GetDeviceListHostForSession_Params.hostReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DeviceService_GetDeviceListHostForSession_Params.clientRemote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 12, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DeviceService_GetDeviceListHostForSession_Params.encodedSize = codec.kStructHeaderSize + 24;

  DeviceService_GetDeviceListHostForSession_Params.decode = function(decoder) {
    var packed;
    var val = new DeviceService_GetDeviceListHostForSession_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sessionId =
        decoder.decodeStruct(codec.String);
    val.hostReceiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.clientRemote =
        decoder.decodeStruct(new codec.Interface(DeviceListClientPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DeviceService_GetDeviceListHostForSession_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DeviceService_GetDeviceListHostForSession_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.sessionId);
    encoder.encodeStruct(codec.InterfaceRequest, val.hostReceiver);
    encoder.encodeStruct(new codec.Interface(DeviceListClientPtr), val.clientRemote);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DeviceService_GetDeviceListHostForPresentation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DeviceService_GetDeviceListHostForPresentation_Params.prototype.initDefaults_ = function() {
    this.hostReceiver = new bindings.InterfaceRequest();
    this.clientRemote = new DeviceListClientPtr();
  };
  DeviceService_GetDeviceListHostForPresentation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DeviceService_GetDeviceListHostForPresentation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DeviceService_GetDeviceListHostForPresentation_Params.hostReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DeviceService_GetDeviceListHostForPresentation_Params.clientRemote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DeviceService_GetDeviceListHostForPresentation_Params.encodedSize = codec.kStructHeaderSize + 16;

  DeviceService_GetDeviceListHostForPresentation_Params.decode = function(decoder) {
    var packed;
    var val = new DeviceService_GetDeviceListHostForPresentation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.hostReceiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.clientRemote =
        decoder.decodeStruct(new codec.Interface(DeviceListClientPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DeviceService_GetDeviceListHostForPresentation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DeviceService_GetDeviceListHostForPresentation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.hostReceiver);
    encoder.encodeStruct(new codec.Interface(DeviceListClientPtr), val.clientRemote);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DeviceService_SetDevicePickerProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DeviceService_SetDevicePickerProvider_Params.prototype.initDefaults_ = function() {
    this.providerRemote = new DevicePickerProviderPtr();
  };
  DeviceService_SetDevicePickerProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DeviceService_SetDevicePickerProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DeviceService_SetDevicePickerProvider_Params.providerRemote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DeviceService_SetDevicePickerProvider_Params.encodedSize = codec.kStructHeaderSize + 8;

  DeviceService_SetDevicePickerProvider_Params.decode = function(decoder) {
    var packed;
    var val = new DeviceService_SetDevicePickerProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.providerRemote =
        decoder.decodeStruct(new codec.Interface(DevicePickerProviderPtr));
    return val;
  };

  DeviceService_SetDevicePickerProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DeviceService_SetDevicePickerProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(DevicePickerProviderPtr), val.providerRemote);
  };
  function DevicePickerProvider_CreateItem_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerProvider_CreateItem_Params.prototype.initDefaults_ = function() {
    this.sourceId = null;
  };
  DevicePickerProvider_CreateItem_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerProvider_CreateItem_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevicePickerProvider_CreateItem_Params.sourceId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerProvider_CreateItem_Params.encodedSize = codec.kStructHeaderSize + 8;

  DevicePickerProvider_CreateItem_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerProvider_CreateItem_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sourceId =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    return val;
  };

  DevicePickerProvider_CreateItem_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerProvider_CreateItem_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.sourceId);
  };
  function DevicePickerProvider_DeleteItem_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerProvider_DeleteItem_Params.prototype.initDefaults_ = function() {
  };
  DevicePickerProvider_DeleteItem_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerProvider_DeleteItem_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerProvider_DeleteItem_Params.encodedSize = codec.kStructHeaderSize + 0;

  DevicePickerProvider_DeleteItem_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerProvider_DeleteItem_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DevicePickerProvider_DeleteItem_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerProvider_DeleteItem_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DevicePickerProvider_ShowItem_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerProvider_ShowItem_Params.prototype.initDefaults_ = function() {
  };
  DevicePickerProvider_ShowItem_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerProvider_ShowItem_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerProvider_ShowItem_Params.encodedSize = codec.kStructHeaderSize + 0;

  DevicePickerProvider_ShowItem_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerProvider_ShowItem_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DevicePickerProvider_ShowItem_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerProvider_ShowItem_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DevicePickerProvider_HideItem_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerProvider_HideItem_Params.prototype.initDefaults_ = function() {
  };
  DevicePickerProvider_HideItem_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerProvider_HideItem_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerProvider_HideItem_Params.encodedSize = codec.kStructHeaderSize + 0;

  DevicePickerProvider_HideItem_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerProvider_HideItem_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DevicePickerProvider_HideItem_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerProvider_HideItem_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DevicePickerProvider_OnMetadataChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerProvider_OnMetadataChanged_Params.prototype.initDefaults_ = function() {
    this.metadata = null;
  };
  DevicePickerProvider_OnMetadataChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerProvider_OnMetadataChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevicePickerProvider_OnMetadataChanged_Params.metadata
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, media_session$.MediaMetadata, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerProvider_OnMetadataChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  DevicePickerProvider_OnMetadataChanged_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerProvider_OnMetadataChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.metadata =
        decoder.decodeStructPointer(media_session$.MediaMetadata);
    return val;
  };

  DevicePickerProvider_OnMetadataChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerProvider_OnMetadataChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(media_session$.MediaMetadata, val.metadata);
  };
  function DevicePickerProvider_OnArtworkImageChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerProvider_OnArtworkImageChanged_Params.prototype.initDefaults_ = function() {
    this.artworkImage = null;
  };
  DevicePickerProvider_OnArtworkImageChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerProvider_OnArtworkImageChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevicePickerProvider_OnArtworkImageChanged_Params.artworkImage
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, image$.ImageSkia, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerProvider_OnArtworkImageChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  DevicePickerProvider_OnArtworkImageChanged_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerProvider_OnArtworkImageChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.artworkImage =
        decoder.decodeStructPointer(image$.ImageSkia);
    return val;
  };

  DevicePickerProvider_OnArtworkImageChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerProvider_OnArtworkImageChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(image$.ImageSkia, val.artworkImage);
  };
  function DevicePickerProvider_OnFaviconImageChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerProvider_OnFaviconImageChanged_Params.prototype.initDefaults_ = function() {
    this.faviconImage = null;
  };
  DevicePickerProvider_OnFaviconImageChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerProvider_OnFaviconImageChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevicePickerProvider_OnFaviconImageChanged_Params.faviconImage
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, image$.ImageSkia, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerProvider_OnFaviconImageChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  DevicePickerProvider_OnFaviconImageChanged_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerProvider_OnFaviconImageChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.faviconImage =
        decoder.decodeStructPointer(image$.ImageSkia);
    return val;
  };

  DevicePickerProvider_OnFaviconImageChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerProvider_OnFaviconImageChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(image$.ImageSkia, val.faviconImage);
  };
  function DevicePickerProvider_AddObserver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerProvider_AddObserver_Params.prototype.initDefaults_ = function() {
    this.observer = new DevicePickerObserverPtr();
  };
  DevicePickerProvider_AddObserver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerProvider_AddObserver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevicePickerProvider_AddObserver_Params.observer
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerProvider_AddObserver_Params.encodedSize = codec.kStructHeaderSize + 8;

  DevicePickerProvider_AddObserver_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerProvider_AddObserver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.observer =
        decoder.decodeStruct(new codec.Interface(DevicePickerObserverPtr));
    return val;
  };

  DevicePickerProvider_AddObserver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerProvider_AddObserver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(DevicePickerObserverPtr), val.observer);
  };
  function DevicePickerProvider_HideMediaUI_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerProvider_HideMediaUI_Params.prototype.initDefaults_ = function() {
  };
  DevicePickerProvider_HideMediaUI_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerProvider_HideMediaUI_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerProvider_HideMediaUI_Params.encodedSize = codec.kStructHeaderSize + 0;

  DevicePickerProvider_HideMediaUI_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerProvider_HideMediaUI_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DevicePickerProvider_HideMediaUI_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerProvider_HideMediaUI_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DevicePickerObserver_OnMediaUIOpened_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerObserver_OnMediaUIOpened_Params.prototype.initDefaults_ = function() {
  };
  DevicePickerObserver_OnMediaUIOpened_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerObserver_OnMediaUIOpened_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerObserver_OnMediaUIOpened_Params.encodedSize = codec.kStructHeaderSize + 0;

  DevicePickerObserver_OnMediaUIOpened_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerObserver_OnMediaUIOpened_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DevicePickerObserver_OnMediaUIOpened_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerObserver_OnMediaUIOpened_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DevicePickerObserver_OnMediaUIClosed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerObserver_OnMediaUIClosed_Params.prototype.initDefaults_ = function() {
  };
  DevicePickerObserver_OnMediaUIClosed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerObserver_OnMediaUIClosed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerObserver_OnMediaUIClosed_Params.encodedSize = codec.kStructHeaderSize + 0;

  DevicePickerObserver_OnMediaUIClosed_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerObserver_OnMediaUIClosed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DevicePickerObserver_OnMediaUIClosed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerObserver_OnMediaUIClosed_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DevicePickerObserver_OnMediaUIUpdated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerObserver_OnMediaUIUpdated_Params.prototype.initDefaults_ = function() {
  };
  DevicePickerObserver_OnMediaUIUpdated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerObserver_OnMediaUIUpdated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerObserver_OnMediaUIUpdated_Params.encodedSize = codec.kStructHeaderSize + 0;

  DevicePickerObserver_OnMediaUIUpdated_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerObserver_OnMediaUIUpdated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DevicePickerObserver_OnMediaUIUpdated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerObserver_OnMediaUIUpdated_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DevicePickerObserver_OnPickerDismissed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevicePickerObserver_OnPickerDismissed_Params.prototype.initDefaults_ = function() {
  };
  DevicePickerObserver_OnPickerDismissed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevicePickerObserver_OnPickerDismissed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevicePickerObserver_OnPickerDismissed_Params.encodedSize = codec.kStructHeaderSize + 0;

  DevicePickerObserver_OnPickerDismissed_Params.decode = function(decoder) {
    var packed;
    var val = new DevicePickerObserver_OnPickerDismissed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DevicePickerObserver_OnPickerDismissed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevicePickerObserver_OnPickerDismissed_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kDeviceListHost_SelectDevice_Name = 0;

  function DeviceListHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DeviceListHost,
                                                   handleOrPtrInfo);
  }

  function DeviceListHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DeviceListHost, associatedInterfacePtrInfo);
  }

  DeviceListHostAssociatedPtr.prototype =
      Object.create(DeviceListHostPtr.prototype);
  DeviceListHostAssociatedPtr.prototype.constructor =
      DeviceListHostAssociatedPtr;

  function DeviceListHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  DeviceListHostPtr.prototype.selectDevice = function() {
    return DeviceListHostProxy.prototype.selectDevice
        .apply(this.ptr.getProxy(), arguments);
  };

  DeviceListHostProxy.prototype.selectDevice = function(deviceId) {
    var params_ = new DeviceListHost_SelectDevice_Params();
    params_.deviceId = deviceId;
    var builder = new codec.MessageV0Builder(
        kDeviceListHost_SelectDevice_Name,
        codec.align(DeviceListHost_SelectDevice_Params.encodedSize));
    builder.encodeStruct(DeviceListHost_SelectDevice_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DeviceListHostStub(delegate) {
    this.delegate_ = delegate;
  }
  DeviceListHostStub.prototype.selectDevice = function(deviceId) {
    return this.delegate_ && this.delegate_.selectDevice && this.delegate_.selectDevice(deviceId);
  }

  DeviceListHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDeviceListHost_SelectDevice_Name:
      var params = reader.decodeStruct(DeviceListHost_SelectDevice_Params);
      this.selectDevice(params.deviceId);
      return true;
    default:
      return false;
    }
  };

  DeviceListHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDeviceListHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDeviceListHost_SelectDevice_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DeviceListHost_SelectDevice_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDeviceListHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DeviceListHost = {
    name: 'global_media_controls.mojom.DeviceListHost',
    kVersion: 0,
    ptrClass: DeviceListHostPtr,
    proxyClass: DeviceListHostProxy,
    stubClass: DeviceListHostStub,
    validateRequest: validateDeviceListHostRequest,
    validateResponse: null,
  };
  DeviceListHostStub.prototype.validator = validateDeviceListHostRequest;
  DeviceListHostProxy.prototype.validator = null;
  var kDeviceListClient_OnDevicesUpdated_Name = 0;

  function DeviceListClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DeviceListClient,
                                                   handleOrPtrInfo);
  }

  function DeviceListClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DeviceListClient, associatedInterfacePtrInfo);
  }

  DeviceListClientAssociatedPtr.prototype =
      Object.create(DeviceListClientPtr.prototype);
  DeviceListClientAssociatedPtr.prototype.constructor =
      DeviceListClientAssociatedPtr;

  function DeviceListClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  DeviceListClientPtr.prototype.onDevicesUpdated = function() {
    return DeviceListClientProxy.prototype.onDevicesUpdated
        .apply(this.ptr.getProxy(), arguments);
  };

  DeviceListClientProxy.prototype.onDevicesUpdated = function(devices) {
    var params_ = new DeviceListClient_OnDevicesUpdated_Params();
    params_.devices = devices;
    var builder = new codec.MessageV0Builder(
        kDeviceListClient_OnDevicesUpdated_Name,
        codec.align(DeviceListClient_OnDevicesUpdated_Params.encodedSize));
    builder.encodeStruct(DeviceListClient_OnDevicesUpdated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DeviceListClientStub(delegate) {
    this.delegate_ = delegate;
  }
  DeviceListClientStub.prototype.onDevicesUpdated = function(devices) {
    return this.delegate_ && this.delegate_.onDevicesUpdated && this.delegate_.onDevicesUpdated(devices);
  }

  DeviceListClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDeviceListClient_OnDevicesUpdated_Name:
      var params = reader.decodeStruct(DeviceListClient_OnDevicesUpdated_Params);
      this.onDevicesUpdated(params.devices);
      return true;
    default:
      return false;
    }
  };

  DeviceListClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDeviceListClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDeviceListClient_OnDevicesUpdated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DeviceListClient_OnDevicesUpdated_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDeviceListClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DeviceListClient = {
    name: 'global_media_controls.mojom.DeviceListClient',
    kVersion: 0,
    ptrClass: DeviceListClientPtr,
    proxyClass: DeviceListClientProxy,
    stubClass: DeviceListClientStub,
    validateRequest: validateDeviceListClientRequest,
    validateResponse: null,
  };
  DeviceListClientStub.prototype.validator = validateDeviceListClientRequest;
  DeviceListClientProxy.prototype.validator = null;
  var kDeviceService_GetDeviceListHostForSession_Name = 0;
  var kDeviceService_GetDeviceListHostForPresentation_Name = 1;
  var kDeviceService_SetDevicePickerProvider_Name = 2;

  function DeviceServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DeviceService,
                                                   handleOrPtrInfo);
  }

  function DeviceServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DeviceService, associatedInterfacePtrInfo);
  }

  DeviceServiceAssociatedPtr.prototype =
      Object.create(DeviceServicePtr.prototype);
  DeviceServiceAssociatedPtr.prototype.constructor =
      DeviceServiceAssociatedPtr;

  function DeviceServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  DeviceServicePtr.prototype.getDeviceListHostForSession = function() {
    return DeviceServiceProxy.prototype.getDeviceListHostForSession
        .apply(this.ptr.getProxy(), arguments);
  };

  DeviceServiceProxy.prototype.getDeviceListHostForSession = function(sessionId, hostReceiver, clientRemote) {
    var params_ = new DeviceService_GetDeviceListHostForSession_Params();
    params_.sessionId = sessionId;
    params_.hostReceiver = hostReceiver;
    params_.clientRemote = clientRemote;
    var builder = new codec.MessageV0Builder(
        kDeviceService_GetDeviceListHostForSession_Name,
        codec.align(DeviceService_GetDeviceListHostForSession_Params.encodedSize));
    builder.encodeStruct(DeviceService_GetDeviceListHostForSession_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DeviceServicePtr.prototype.getDeviceListHostForPresentation = function() {
    return DeviceServiceProxy.prototype.getDeviceListHostForPresentation
        .apply(this.ptr.getProxy(), arguments);
  };

  DeviceServiceProxy.prototype.getDeviceListHostForPresentation = function(hostReceiver, clientRemote) {
    var params_ = new DeviceService_GetDeviceListHostForPresentation_Params();
    params_.hostReceiver = hostReceiver;
    params_.clientRemote = clientRemote;
    var builder = new codec.MessageV0Builder(
        kDeviceService_GetDeviceListHostForPresentation_Name,
        codec.align(DeviceService_GetDeviceListHostForPresentation_Params.encodedSize));
    builder.encodeStruct(DeviceService_GetDeviceListHostForPresentation_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DeviceServicePtr.prototype.setDevicePickerProvider = function() {
    return DeviceServiceProxy.prototype.setDevicePickerProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  DeviceServiceProxy.prototype.setDevicePickerProvider = function(providerRemote) {
    var params_ = new DeviceService_SetDevicePickerProvider_Params();
    params_.providerRemote = providerRemote;
    var builder = new codec.MessageV0Builder(
        kDeviceService_SetDevicePickerProvider_Name,
        codec.align(DeviceService_SetDevicePickerProvider_Params.encodedSize));
    builder.encodeStruct(DeviceService_SetDevicePickerProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DeviceServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  DeviceServiceStub.prototype.getDeviceListHostForSession = function(sessionId, hostReceiver, clientRemote) {
    return this.delegate_ && this.delegate_.getDeviceListHostForSession && this.delegate_.getDeviceListHostForSession(sessionId, hostReceiver, clientRemote);
  }
  DeviceServiceStub.prototype.getDeviceListHostForPresentation = function(hostReceiver, clientRemote) {
    return this.delegate_ && this.delegate_.getDeviceListHostForPresentation && this.delegate_.getDeviceListHostForPresentation(hostReceiver, clientRemote);
  }
  DeviceServiceStub.prototype.setDevicePickerProvider = function(providerRemote) {
    return this.delegate_ && this.delegate_.setDevicePickerProvider && this.delegate_.setDevicePickerProvider(providerRemote);
  }

  DeviceServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDeviceService_GetDeviceListHostForSession_Name:
      var params = reader.decodeStruct(DeviceService_GetDeviceListHostForSession_Params);
      this.getDeviceListHostForSession(params.sessionId, params.hostReceiver, params.clientRemote);
      return true;
    case kDeviceService_GetDeviceListHostForPresentation_Name:
      var params = reader.decodeStruct(DeviceService_GetDeviceListHostForPresentation_Params);
      this.getDeviceListHostForPresentation(params.hostReceiver, params.clientRemote);
      return true;
    case kDeviceService_SetDevicePickerProvider_Name:
      var params = reader.decodeStruct(DeviceService_SetDevicePickerProvider_Params);
      this.setDevicePickerProvider(params.providerRemote);
      return true;
    default:
      return false;
    }
  };

  DeviceServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDeviceServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDeviceService_GetDeviceListHostForSession_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DeviceService_GetDeviceListHostForSession_Params;
      break;
      case kDeviceService_GetDeviceListHostForPresentation_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DeviceService_GetDeviceListHostForPresentation_Params;
      break;
      case kDeviceService_SetDevicePickerProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DeviceService_SetDevicePickerProvider_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDeviceServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DeviceService = {
    name: 'global_media_controls.mojom.DeviceService',
    kVersion: 1,
    ptrClass: DeviceServicePtr,
    proxyClass: DeviceServiceProxy,
    stubClass: DeviceServiceStub,
    validateRequest: validateDeviceServiceRequest,
    validateResponse: null,
  };
  DeviceServiceStub.prototype.validator = validateDeviceServiceRequest;
  DeviceServiceProxy.prototype.validator = null;
  var kDevicePickerProvider_CreateItem_Name = 0;
  var kDevicePickerProvider_DeleteItem_Name = 1;
  var kDevicePickerProvider_ShowItem_Name = 2;
  var kDevicePickerProvider_HideItem_Name = 3;
  var kDevicePickerProvider_OnMetadataChanged_Name = 4;
  var kDevicePickerProvider_OnArtworkImageChanged_Name = 5;
  var kDevicePickerProvider_OnFaviconImageChanged_Name = 6;
  var kDevicePickerProvider_AddObserver_Name = 7;
  var kDevicePickerProvider_HideMediaUI_Name = 8;

  function DevicePickerProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DevicePickerProvider,
                                                   handleOrPtrInfo);
  }

  function DevicePickerProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DevicePickerProvider, associatedInterfacePtrInfo);
  }

  DevicePickerProviderAssociatedPtr.prototype =
      Object.create(DevicePickerProviderPtr.prototype);
  DevicePickerProviderAssociatedPtr.prototype.constructor =
      DevicePickerProviderAssociatedPtr;

  function DevicePickerProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  DevicePickerProviderPtr.prototype.createItem = function() {
    return DevicePickerProviderProxy.prototype.createItem
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerProviderProxy.prototype.createItem = function(sourceId) {
    var params_ = new DevicePickerProvider_CreateItem_Params();
    params_.sourceId = sourceId;
    var builder = new codec.MessageV0Builder(
        kDevicePickerProvider_CreateItem_Name,
        codec.align(DevicePickerProvider_CreateItem_Params.encodedSize));
    builder.encodeStruct(DevicePickerProvider_CreateItem_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevicePickerProviderPtr.prototype.deleteItem = function() {
    return DevicePickerProviderProxy.prototype.deleteItem
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerProviderProxy.prototype.deleteItem = function() {
    var params_ = new DevicePickerProvider_DeleteItem_Params();
    var builder = new codec.MessageV0Builder(
        kDevicePickerProvider_DeleteItem_Name,
        codec.align(DevicePickerProvider_DeleteItem_Params.encodedSize));
    builder.encodeStruct(DevicePickerProvider_DeleteItem_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevicePickerProviderPtr.prototype.showItem = function() {
    return DevicePickerProviderProxy.prototype.showItem
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerProviderProxy.prototype.showItem = function() {
    var params_ = new DevicePickerProvider_ShowItem_Params();
    var builder = new codec.MessageV0Builder(
        kDevicePickerProvider_ShowItem_Name,
        codec.align(DevicePickerProvider_ShowItem_Params.encodedSize));
    builder.encodeStruct(DevicePickerProvider_ShowItem_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevicePickerProviderPtr.prototype.hideItem = function() {
    return DevicePickerProviderProxy.prototype.hideItem
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerProviderProxy.prototype.hideItem = function() {
    var params_ = new DevicePickerProvider_HideItem_Params();
    var builder = new codec.MessageV0Builder(
        kDevicePickerProvider_HideItem_Name,
        codec.align(DevicePickerProvider_HideItem_Params.encodedSize));
    builder.encodeStruct(DevicePickerProvider_HideItem_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevicePickerProviderPtr.prototype.onMetadataChanged = function() {
    return DevicePickerProviderProxy.prototype.onMetadataChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerProviderProxy.prototype.onMetadataChanged = function(metadata) {
    var params_ = new DevicePickerProvider_OnMetadataChanged_Params();
    params_.metadata = metadata;
    var builder = new codec.MessageV0Builder(
        kDevicePickerProvider_OnMetadataChanged_Name,
        codec.align(DevicePickerProvider_OnMetadataChanged_Params.encodedSize));
    builder.encodeStruct(DevicePickerProvider_OnMetadataChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevicePickerProviderPtr.prototype.onArtworkImageChanged = function() {
    return DevicePickerProviderProxy.prototype.onArtworkImageChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerProviderProxy.prototype.onArtworkImageChanged = function(artworkImage) {
    var params_ = new DevicePickerProvider_OnArtworkImageChanged_Params();
    params_.artworkImage = artworkImage;
    var builder = new codec.MessageV0Builder(
        kDevicePickerProvider_OnArtworkImageChanged_Name,
        codec.align(DevicePickerProvider_OnArtworkImageChanged_Params.encodedSize));
    builder.encodeStruct(DevicePickerProvider_OnArtworkImageChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevicePickerProviderPtr.prototype.onFaviconImageChanged = function() {
    return DevicePickerProviderProxy.prototype.onFaviconImageChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerProviderProxy.prototype.onFaviconImageChanged = function(faviconImage) {
    var params_ = new DevicePickerProvider_OnFaviconImageChanged_Params();
    params_.faviconImage = faviconImage;
    var builder = new codec.MessageV0Builder(
        kDevicePickerProvider_OnFaviconImageChanged_Name,
        codec.align(DevicePickerProvider_OnFaviconImageChanged_Params.encodedSize));
    builder.encodeStruct(DevicePickerProvider_OnFaviconImageChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevicePickerProviderPtr.prototype.addObserver = function() {
    return DevicePickerProviderProxy.prototype.addObserver
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerProviderProxy.prototype.addObserver = function(observer) {
    var params_ = new DevicePickerProvider_AddObserver_Params();
    params_.observer = observer;
    var builder = new codec.MessageV0Builder(
        kDevicePickerProvider_AddObserver_Name,
        codec.align(DevicePickerProvider_AddObserver_Params.encodedSize));
    builder.encodeStruct(DevicePickerProvider_AddObserver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevicePickerProviderPtr.prototype.hideMediaUI = function() {
    return DevicePickerProviderProxy.prototype.hideMediaUI
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerProviderProxy.prototype.hideMediaUI = function() {
    var params_ = new DevicePickerProvider_HideMediaUI_Params();
    var builder = new codec.MessageV0Builder(
        kDevicePickerProvider_HideMediaUI_Name,
        codec.align(DevicePickerProvider_HideMediaUI_Params.encodedSize));
    builder.encodeStruct(DevicePickerProvider_HideMediaUI_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DevicePickerProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  DevicePickerProviderStub.prototype.createItem = function(sourceId) {
    return this.delegate_ && this.delegate_.createItem && this.delegate_.createItem(sourceId);
  }
  DevicePickerProviderStub.prototype.deleteItem = function() {
    return this.delegate_ && this.delegate_.deleteItem && this.delegate_.deleteItem();
  }
  DevicePickerProviderStub.prototype.showItem = function() {
    return this.delegate_ && this.delegate_.showItem && this.delegate_.showItem();
  }
  DevicePickerProviderStub.prototype.hideItem = function() {
    return this.delegate_ && this.delegate_.hideItem && this.delegate_.hideItem();
  }
  DevicePickerProviderStub.prototype.onMetadataChanged = function(metadata) {
    return this.delegate_ && this.delegate_.onMetadataChanged && this.delegate_.onMetadataChanged(metadata);
  }
  DevicePickerProviderStub.prototype.onArtworkImageChanged = function(artworkImage) {
    return this.delegate_ && this.delegate_.onArtworkImageChanged && this.delegate_.onArtworkImageChanged(artworkImage);
  }
  DevicePickerProviderStub.prototype.onFaviconImageChanged = function(faviconImage) {
    return this.delegate_ && this.delegate_.onFaviconImageChanged && this.delegate_.onFaviconImageChanged(faviconImage);
  }
  DevicePickerProviderStub.prototype.addObserver = function(observer) {
    return this.delegate_ && this.delegate_.addObserver && this.delegate_.addObserver(observer);
  }
  DevicePickerProviderStub.prototype.hideMediaUI = function() {
    return this.delegate_ && this.delegate_.hideMediaUI && this.delegate_.hideMediaUI();
  }

  DevicePickerProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDevicePickerProvider_CreateItem_Name:
      var params = reader.decodeStruct(DevicePickerProvider_CreateItem_Params);
      this.createItem(params.sourceId);
      return true;
    case kDevicePickerProvider_DeleteItem_Name:
      var params = reader.decodeStruct(DevicePickerProvider_DeleteItem_Params);
      this.deleteItem();
      return true;
    case kDevicePickerProvider_ShowItem_Name:
      var params = reader.decodeStruct(DevicePickerProvider_ShowItem_Params);
      this.showItem();
      return true;
    case kDevicePickerProvider_HideItem_Name:
      var params = reader.decodeStruct(DevicePickerProvider_HideItem_Params);
      this.hideItem();
      return true;
    case kDevicePickerProvider_OnMetadataChanged_Name:
      var params = reader.decodeStruct(DevicePickerProvider_OnMetadataChanged_Params);
      this.onMetadataChanged(params.metadata);
      return true;
    case kDevicePickerProvider_OnArtworkImageChanged_Name:
      var params = reader.decodeStruct(DevicePickerProvider_OnArtworkImageChanged_Params);
      this.onArtworkImageChanged(params.artworkImage);
      return true;
    case kDevicePickerProvider_OnFaviconImageChanged_Name:
      var params = reader.decodeStruct(DevicePickerProvider_OnFaviconImageChanged_Params);
      this.onFaviconImageChanged(params.faviconImage);
      return true;
    case kDevicePickerProvider_AddObserver_Name:
      var params = reader.decodeStruct(DevicePickerProvider_AddObserver_Params);
      this.addObserver(params.observer);
      return true;
    case kDevicePickerProvider_HideMediaUI_Name:
      var params = reader.decodeStruct(DevicePickerProvider_HideMediaUI_Params);
      this.hideMediaUI();
      return true;
    default:
      return false;
    }
  };

  DevicePickerProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDevicePickerProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDevicePickerProvider_CreateItem_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerProvider_CreateItem_Params;
      break;
      case kDevicePickerProvider_DeleteItem_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerProvider_DeleteItem_Params;
      break;
      case kDevicePickerProvider_ShowItem_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerProvider_ShowItem_Params;
      break;
      case kDevicePickerProvider_HideItem_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerProvider_HideItem_Params;
      break;
      case kDevicePickerProvider_OnMetadataChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerProvider_OnMetadataChanged_Params;
      break;
      case kDevicePickerProvider_OnArtworkImageChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerProvider_OnArtworkImageChanged_Params;
      break;
      case kDevicePickerProvider_OnFaviconImageChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerProvider_OnFaviconImageChanged_Params;
      break;
      case kDevicePickerProvider_AddObserver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerProvider_AddObserver_Params;
      break;
      case kDevicePickerProvider_HideMediaUI_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerProvider_HideMediaUI_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDevicePickerProviderResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DevicePickerProvider = {
    name: 'global_media_controls.mojom.DevicePickerProvider',
    kVersion: 0,
    ptrClass: DevicePickerProviderPtr,
    proxyClass: DevicePickerProviderProxy,
    stubClass: DevicePickerProviderStub,
    validateRequest: validateDevicePickerProviderRequest,
    validateResponse: null,
  };
  DevicePickerProviderStub.prototype.validator = validateDevicePickerProviderRequest;
  DevicePickerProviderProxy.prototype.validator = null;
  var kDevicePickerObserver_OnMediaUIOpened_Name = 0;
  var kDevicePickerObserver_OnMediaUIClosed_Name = 1;
  var kDevicePickerObserver_OnMediaUIUpdated_Name = 2;
  var kDevicePickerObserver_OnPickerDismissed_Name = 3;

  function DevicePickerObserverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DevicePickerObserver,
                                                   handleOrPtrInfo);
  }

  function DevicePickerObserverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DevicePickerObserver, associatedInterfacePtrInfo);
  }

  DevicePickerObserverAssociatedPtr.prototype =
      Object.create(DevicePickerObserverPtr.prototype);
  DevicePickerObserverAssociatedPtr.prototype.constructor =
      DevicePickerObserverAssociatedPtr;

  function DevicePickerObserverProxy(receiver) {
    this.receiver_ = receiver;
  }
  DevicePickerObserverPtr.prototype.onMediaUIOpened = function() {
    return DevicePickerObserverProxy.prototype.onMediaUIOpened
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerObserverProxy.prototype.onMediaUIOpened = function() {
    var params_ = new DevicePickerObserver_OnMediaUIOpened_Params();
    var builder = new codec.MessageV0Builder(
        kDevicePickerObserver_OnMediaUIOpened_Name,
        codec.align(DevicePickerObserver_OnMediaUIOpened_Params.encodedSize));
    builder.encodeStruct(DevicePickerObserver_OnMediaUIOpened_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevicePickerObserverPtr.prototype.onMediaUIClosed = function() {
    return DevicePickerObserverProxy.prototype.onMediaUIClosed
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerObserverProxy.prototype.onMediaUIClosed = function() {
    var params_ = new DevicePickerObserver_OnMediaUIClosed_Params();
    var builder = new codec.MessageV0Builder(
        kDevicePickerObserver_OnMediaUIClosed_Name,
        codec.align(DevicePickerObserver_OnMediaUIClosed_Params.encodedSize));
    builder.encodeStruct(DevicePickerObserver_OnMediaUIClosed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevicePickerObserverPtr.prototype.onMediaUIUpdated = function() {
    return DevicePickerObserverProxy.prototype.onMediaUIUpdated
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerObserverProxy.prototype.onMediaUIUpdated = function() {
    var params_ = new DevicePickerObserver_OnMediaUIUpdated_Params();
    var builder = new codec.MessageV0Builder(
        kDevicePickerObserver_OnMediaUIUpdated_Name,
        codec.align(DevicePickerObserver_OnMediaUIUpdated_Params.encodedSize));
    builder.encodeStruct(DevicePickerObserver_OnMediaUIUpdated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevicePickerObserverPtr.prototype.onPickerDismissed = function() {
    return DevicePickerObserverProxy.prototype.onPickerDismissed
        .apply(this.ptr.getProxy(), arguments);
  };

  DevicePickerObserverProxy.prototype.onPickerDismissed = function() {
    var params_ = new DevicePickerObserver_OnPickerDismissed_Params();
    var builder = new codec.MessageV0Builder(
        kDevicePickerObserver_OnPickerDismissed_Name,
        codec.align(DevicePickerObserver_OnPickerDismissed_Params.encodedSize));
    builder.encodeStruct(DevicePickerObserver_OnPickerDismissed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DevicePickerObserverStub(delegate) {
    this.delegate_ = delegate;
  }
  DevicePickerObserverStub.prototype.onMediaUIOpened = function() {
    return this.delegate_ && this.delegate_.onMediaUIOpened && this.delegate_.onMediaUIOpened();
  }
  DevicePickerObserverStub.prototype.onMediaUIClosed = function() {
    return this.delegate_ && this.delegate_.onMediaUIClosed && this.delegate_.onMediaUIClosed();
  }
  DevicePickerObserverStub.prototype.onMediaUIUpdated = function() {
    return this.delegate_ && this.delegate_.onMediaUIUpdated && this.delegate_.onMediaUIUpdated();
  }
  DevicePickerObserverStub.prototype.onPickerDismissed = function() {
    return this.delegate_ && this.delegate_.onPickerDismissed && this.delegate_.onPickerDismissed();
  }

  DevicePickerObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDevicePickerObserver_OnMediaUIOpened_Name:
      var params = reader.decodeStruct(DevicePickerObserver_OnMediaUIOpened_Params);
      this.onMediaUIOpened();
      return true;
    case kDevicePickerObserver_OnMediaUIClosed_Name:
      var params = reader.decodeStruct(DevicePickerObserver_OnMediaUIClosed_Params);
      this.onMediaUIClosed();
      return true;
    case kDevicePickerObserver_OnMediaUIUpdated_Name:
      var params = reader.decodeStruct(DevicePickerObserver_OnMediaUIUpdated_Params);
      this.onMediaUIUpdated();
      return true;
    case kDevicePickerObserver_OnPickerDismissed_Name:
      var params = reader.decodeStruct(DevicePickerObserver_OnPickerDismissed_Params);
      this.onPickerDismissed();
      return true;
    default:
      return false;
    }
  };

  DevicePickerObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDevicePickerObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDevicePickerObserver_OnMediaUIOpened_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerObserver_OnMediaUIOpened_Params;
      break;
      case kDevicePickerObserver_OnMediaUIClosed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerObserver_OnMediaUIClosed_Params;
      break;
      case kDevicePickerObserver_OnMediaUIUpdated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerObserver_OnMediaUIUpdated_Params;
      break;
      case kDevicePickerObserver_OnPickerDismissed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevicePickerObserver_OnPickerDismissed_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDevicePickerObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DevicePickerObserver = {
    name: 'global_media_controls.mojom.DevicePickerObserver',
    kVersion: 0,
    ptrClass: DevicePickerObserverPtr,
    proxyClass: DevicePickerObserverProxy,
    stubClass: DevicePickerObserverStub,
    validateRequest: validateDevicePickerObserverRequest,
    validateResponse: null,
  };
  DevicePickerObserverStub.prototype.validator = validateDevicePickerObserverRequest;
  DevicePickerObserverProxy.prototype.validator = null;
  exports.IconType = IconType;
  exports.Device = Device;
  exports.DeviceListHost = DeviceListHost;
  exports.DeviceListHostPtr = DeviceListHostPtr;
  exports.DeviceListHostAssociatedPtr = DeviceListHostAssociatedPtr;
  exports.DeviceListClient = DeviceListClient;
  exports.DeviceListClientPtr = DeviceListClientPtr;
  exports.DeviceListClientAssociatedPtr = DeviceListClientAssociatedPtr;
  exports.DeviceService = DeviceService;
  exports.DeviceServicePtr = DeviceServicePtr;
  exports.DeviceServiceAssociatedPtr = DeviceServiceAssociatedPtr;
  exports.DevicePickerProvider = DevicePickerProvider;
  exports.DevicePickerProviderPtr = DevicePickerProviderPtr;
  exports.DevicePickerProviderAssociatedPtr = DevicePickerProviderAssociatedPtr;
  exports.DevicePickerObserver = DevicePickerObserver;
  exports.DevicePickerObserverPtr = DevicePickerObserverPtr;
  exports.DevicePickerObserverAssociatedPtr = DevicePickerObserverAssociatedPtr;
})();