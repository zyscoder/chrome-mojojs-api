// components/schema_org/common/improved_metadata.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'components/schema_org/common/improved_metadata.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('schemaOrg.improved.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../mojo/public/mojom/base/time.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../url/mojom/url.mojom.js');
  }



  function Values(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Values.prototype.initDefaults_ = function() {
    this.boolValues = null;
    this.longValues = null;
    this.stringValues = null;
    this.doubleValues = null;
    this.dateTimeValues = null;
    this.timeValues = null;
    this.urlValues = null;
    this.entityValues = null;
  };
  Values.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Values.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 72}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Values.boolValues
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.PackedBool, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Values.longValues
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.Int64, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Values.stringValues
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Values.doubleValues
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 8, codec.Double, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Values.dateTimeValues
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(time$.Time), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Values.timeValues
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 40, 8, new codec.PointerTo(time$.TimeDelta), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Values.urlValues
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 8, new codec.PointerTo(url$.Url), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Values.entityValues
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 56, 8, new codec.PointerTo(Entity), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Values.encodedSize = codec.kStructHeaderSize + 64;

  Values.decode = function(decoder) {
    var packed;
    var val = new Values();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.boolValues =
        decoder.decodeArrayPointer(codec.PackedBool);
    val.longValues =
        decoder.decodeArrayPointer(codec.Int64);
    val.stringValues =
        decoder.decodeArrayPointer(codec.String);
    val.doubleValues =
        decoder.decodeArrayPointer(codec.Double);
    val.dateTimeValues =
        decoder.decodeArrayPointer(new codec.PointerTo(time$.Time));
    val.timeValues =
        decoder.decodeArrayPointer(new codec.PointerTo(time$.TimeDelta));
    val.urlValues =
        decoder.decodeArrayPointer(new codec.PointerTo(url$.Url));
    val.entityValues =
        decoder.decodeArrayPointer(new codec.PointerTo(Entity));
    return val;
  };

  Values.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Values.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.PackedBool, val.boolValues);
    encoder.encodeArrayPointer(codec.Int64, val.longValues);
    encoder.encodeArrayPointer(codec.String, val.stringValues);
    encoder.encodeArrayPointer(codec.Double, val.doubleValues);
    encoder.encodeArrayPointer(new codec.PointerTo(time$.Time), val.dateTimeValues);
    encoder.encodeArrayPointer(new codec.PointerTo(time$.TimeDelta), val.timeValues);
    encoder.encodeArrayPointer(new codec.PointerTo(url$.Url), val.urlValues);
    encoder.encodeArrayPointer(new codec.PointerTo(Entity), val.entityValues);
  };
  function Property(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Property.prototype.initDefaults_ = function() {
    this.name = null;
    this.values = null;
  };
  Property.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Property.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Property.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Property.values
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, Values, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Property.encodedSize = codec.kStructHeaderSize + 16;

  Property.decode = function(decoder) {
    var packed;
    var val = new Property();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.values =
        decoder.decodeStructPointer(Values);
    return val;
  };

  Property.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Property.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStructPointer(Values, val.values);
  };
  function Entity(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Entity.prototype.initDefaults_ = function() {
    this.type = null;
    this.id = null;
    this.properties = null;
  };
  Entity.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Entity.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Entity.type
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Entity.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Entity.properties
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(Property), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Entity.encodedSize = codec.kStructHeaderSize + 24;

  Entity.decode = function(decoder) {
    var packed;
    var val = new Entity();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(codec.String);
    val.id =
        decoder.decodeStruct(codec.String);
    val.properties =
        decoder.decodeArrayPointer(new codec.PointerTo(Property));
    return val;
  };

  Entity.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Entity.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.type);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeArrayPointer(new codec.PointerTo(Property), val.properties);
  };
  exports.Values = Values;
  exports.Property = Property;
  exports.Entity = Entity;
})();