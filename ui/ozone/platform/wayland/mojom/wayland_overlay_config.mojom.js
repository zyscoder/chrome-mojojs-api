// ui/ozone/platform/wayland/mojom/wayland_overlay_config.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/ozone/platform/wayland/mojom/wayland_overlay_config.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('wl.mojom');
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../gfx/geometry/mojom/geometry.mojom.js');
  }
  var color_space$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/color_space.mojom', '../../../../gfx/mojom/color_space.mojom.js');
  }
  var gpu_fence_handle$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/gpu_fence_handle.mojom', '../../../../gfx/mojom/gpu_fence_handle.mojom.js');
  }
  var overlay_transform$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/overlay_transform.mojom', '../../../../gfx/mojom/overlay_transform.mojom.js');
  }
  var overlay_priority_hint$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/overlay_priority_hint.mojom', '../../../../gfx/mojom/overlay_priority_hint.mojom.js');
  }
  var rrect_f$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/rrect_f.mojom', '../../../../gfx/mojom/rrect_f.mojom.js');
  }
  var transform$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/transform.mojom', '../../../../gfx/mojom/transform.mojom.js');
  }
  var skcolor4f$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/skcolor4f.mojom', '../../../../../skia/public/mojom/skcolor4f.mojom.js');
  }



  function WaylandOverlayConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WaylandOverlayConfig.prototype.initDefaults_ = function() {
    this.zOrder = 0;
    this.bufferId = 0;
    this.colorSpace = null;
    this.transform = null;
    this.surfaceScaleFactor = 0;
    this.enableBlend = false;
    this.boundsRect = null;
    this.cropRect = null;
    this.damageRegion = null;
    this.opacity = 0;
    this.priorityHint = 0;
    this.accessFenceHandle = null;
    this.roundedClipBounds = null;
    this.backgroundColor = null;
    this.clipRect = null;
  };
  WaylandOverlayConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WaylandOverlayConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 112}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WaylandOverlayConfig.colorSpace
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, color_space$.ColorSpace, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandOverlayConfig.transform
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 16, TransformUnion, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate WaylandOverlayConfig.boundsRect
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandOverlayConfig.cropRect
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandOverlayConfig.damageRegion
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate WaylandOverlayConfig.accessFenceHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, gpu_fence_handle$.GpuFenceHandle, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandOverlayConfig.priorityHint
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 68, overlay_priority_hint$.OverlayPriorityHint);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandOverlayConfig.roundedClipBounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, rrect_f$.RRectF, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandOverlayConfig.backgroundColor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, skcolor4f$.SkColor4f, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandOverlayConfig.clipRect
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, geometry$.Rect, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WaylandOverlayConfig.encodedSize = codec.kStructHeaderSize + 104;

  WaylandOverlayConfig.decode = function(decoder) {
    var packed;
    var val = new WaylandOverlayConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.zOrder =
        decoder.decodeStruct(codec.Int32);
    val.bufferId =
        decoder.decodeStruct(codec.Uint32);
    val.colorSpace =
        decoder.decodeStructPointer(color_space$.ColorSpace);
    val.transform =
        decoder.decodeStruct(TransformUnion);
    val.surfaceScaleFactor =
        decoder.decodeStruct(codec.Float);
    packed = decoder.readUint8();
    val.enableBlend = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.boundsRect =
        decoder.decodeStructPointer(geometry$.RectF);
    val.cropRect =
        decoder.decodeStructPointer(geometry$.RectF);
    val.damageRegion =
        decoder.decodeStructPointer(geometry$.Rect);
    val.opacity =
        decoder.decodeStruct(codec.Float);
    val.priorityHint =
        decoder.decodeStruct(new codec.Enum(overlay_priority_hint$.OverlayPriorityHint));
    val.accessFenceHandle =
        decoder.decodeStructPointer(gpu_fence_handle$.GpuFenceHandle);
    val.roundedClipBounds =
        decoder.decodeStructPointer(rrect_f$.RRectF);
    val.backgroundColor =
        decoder.decodeStructPointer(skcolor4f$.SkColor4f);
    val.clipRect =
        decoder.decodeStructPointer(geometry$.Rect);
    return val;
  };

  WaylandOverlayConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WaylandOverlayConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.zOrder);
    encoder.encodeStruct(codec.Uint32, val.bufferId);
    encoder.encodeStructPointer(color_space$.ColorSpace, val.colorSpace);
    encoder.encodeStruct(TransformUnion, val.transform);
    encoder.encodeStruct(codec.Float, val.surfaceScaleFactor);
    packed = 0;
    packed |= (val.enableBlend & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(geometry$.RectF, val.boundsRect);
    encoder.encodeStructPointer(geometry$.RectF, val.cropRect);
    encoder.encodeStructPointer(geometry$.Rect, val.damageRegion);
    encoder.encodeStruct(codec.Float, val.opacity);
    encoder.encodeStruct(codec.Int32, val.priorityHint);
    encoder.encodeStructPointer(gpu_fence_handle$.GpuFenceHandle, val.accessFenceHandle);
    encoder.encodeStructPointer(rrect_f$.RRectF, val.roundedClipBounds);
    encoder.encodeStructPointer(skcolor4f$.SkColor4f, val.backgroundColor);
    encoder.encodeStructPointer(geometry$.Rect, val.clipRect);
  };

  function TransformUnion(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  TransformUnion.Tags = {
    overlayTransform: 0,
    matrixTransform: 1,
  };

  TransformUnion.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  TransformUnion.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "overlayTransform",
        "matrixTransform",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a TransformUnion member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(TransformUnion.prototype, "overlayTransform", {
    get: function() {
      if (this.$tag != TransformUnion.Tags.overlayTransform) {
        throw new ReferenceError(
            "TransformUnion.overlayTransform is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = TransformUnion.Tags.overlayTransform;
      this.$data = value;
    }
  });
  Object.defineProperty(TransformUnion.prototype, "matrixTransform", {
    get: function() {
      if (this.$tag != TransformUnion.Tags.matrixTransform) {
        throw new ReferenceError(
            "TransformUnion.matrixTransform is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = TransformUnion.Tags.matrixTransform;
      this.$data = value;
    }
  });


    TransformUnion.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case TransformUnion.Tags.overlayTransform:
          encoder.encodeStruct(codec.Int32, val.overlayTransform);
          break;
        case TransformUnion.Tags.matrixTransform:
          encoder.encodeStructPointer(transform$.Transform, val.matrixTransform);
          break;
      }
      encoder.align();
    };


    TransformUnion.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new TransformUnion();
      var tag = decoder.readUint32();
      switch (tag) {
        case TransformUnion.Tags.overlayTransform:
          result.overlayTransform = decoder.decodeStruct(new codec.Enum(overlay_transform$.OverlayTransform));
          break;
        case TransformUnion.Tags.matrixTransform:
          result.matrixTransform = decoder.decodeStructPointer(transform$.Transform);
          break;
      }
      decoder.align();

      return result;
    };


    TransformUnion.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case TransformUnion.Tags.overlayTransform:
          

    // validate TransformUnion.overlayTransform
    err = messageValidator.validateEnum(data_offset, overlay_transform$.OverlayTransform);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case TransformUnion.Tags.matrixTransform:
          

    // validate TransformUnion.matrixTransform
    err = messageValidator.validateStructPointer(data_offset, transform$.Transform, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  TransformUnion.encodedSize = 16;
  exports.WaylandOverlayConfig = WaylandOverlayConfig;
  exports.TransformUnion = TransformUnion;
})();