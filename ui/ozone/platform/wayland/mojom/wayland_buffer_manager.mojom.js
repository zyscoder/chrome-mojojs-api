// ui/ozone/platform/wayland/mojom/wayland_buffer_manager.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/ozone/platform/wayland/mojom/wayland_buffer_manager.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('ui.ozone.mojom');
  var skcolor4f$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/skcolor4f.mojom', '../../../../../skia/public/mojom/skcolor4f.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../gfx/geometry/mojom/geometry.mojom.js');
  }
  var accelerated_widget$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/accelerated_widget.mojom', '../../../../gfx/mojom/accelerated_widget.mojom.js');
  }
  var buffer_types$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/buffer_types.mojom', '../../../../gfx/mojom/buffer_types.mojom.js');
  }
  var gpu_fence_handle$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/gpu_fence_handle.mojom', '../../../../gfx/mojom/gpu_fence_handle.mojom.js');
  }
  var swap_result$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/swap_result.mojom', '../../../../gfx/mojom/swap_result.mojom.js');
  }
  var frame_data$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/frame_data.mojom', '../../../../gfx/mojom/frame_data.mojom.js');
  }
  var wayland_overlay_config$ =
      mojo.internal.exposeNamespace('wl.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/ozone/platform/wayland/mojom/wayland_overlay_config.mojom', 'wayland_overlay_config.mojom.js');
  }
  var wayland_presentation_info$ =
      mojo.internal.exposeNamespace('wl.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/ozone/platform/wayland/mojom/wayland_presentation_info.mojom', 'wayland_presentation_info.mojom.js');
  }



  function WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params.prototype.initDefaults_ = function() {
    this.bufferManagerGpuAssociated = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params.bufferManagerGpuAssociated
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params.encodedSize = codec.kStructHeaderSize + 8;

  WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params.decode = function(decoder) {
    var packed;
    var val = new WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferManagerGpuAssociated =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.bufferManagerGpuAssociated);
  };
  function WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.prototype.initDefaults_ = function() {
    this.dmabufFd = null;
    this.format = 0;
    this.size = null;
    this.strides = null;
    this.offsets = null;
    this.modifiers = null;
    this.planesCount = 0;
    this.bufferId = 0;
  };
  WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.dmabufFd
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.strides
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 4, codec.Uint32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.offsets
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 4, codec.Uint32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.modifiers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, codec.Uint64, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.encodedSize = codec.kStructHeaderSize + 48;

  WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dmabufFd =
        decoder.decodeStruct(codec.Handle);
    val.format =
        decoder.decodeStruct(codec.Uint32);
    val.size =
        decoder.decodeStructPointer(geometry$.Size);
    val.strides =
        decoder.decodeArrayPointer(codec.Uint32);
    val.offsets =
        decoder.decodeArrayPointer(codec.Uint32);
    val.modifiers =
        decoder.decodeArrayPointer(codec.Uint64);
    val.planesCount =
        decoder.decodeStruct(codec.Uint32);
    val.bufferId =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Handle, val.dmabufFd);
    encoder.encodeStruct(codec.Uint32, val.format);
    encoder.encodeStructPointer(geometry$.Size, val.size);
    encoder.encodeArrayPointer(codec.Uint32, val.strides);
    encoder.encodeArrayPointer(codec.Uint32, val.offsets);
    encoder.encodeArrayPointer(codec.Uint64, val.modifiers);
    encoder.encodeStruct(codec.Uint32, val.planesCount);
    encoder.encodeStruct(codec.Uint32, val.bufferId);
  };
  function WaylandBufferManagerHost_CreateShmBasedBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WaylandBufferManagerHost_CreateShmBasedBuffer_Params.prototype.initDefaults_ = function() {
    this.shmFd = null;
    this.bufferId = 0;
    this.length = 0;
    this.size = null;
  };
  WaylandBufferManagerHost_CreateShmBasedBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WaylandBufferManagerHost_CreateShmBasedBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_CreateShmBasedBuffer_Params.shmFd
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate WaylandBufferManagerHost_CreateShmBasedBuffer_Params.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  WaylandBufferManagerHost_CreateShmBasedBuffer_Params.encodedSize = codec.kStructHeaderSize + 24;

  WaylandBufferManagerHost_CreateShmBasedBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new WaylandBufferManagerHost_CreateShmBasedBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.shmFd =
        decoder.decodeStruct(codec.Handle);
    val.bufferId =
        decoder.decodeStruct(codec.Uint32);
    val.length =
        decoder.decodeStruct(codec.Uint64);
    val.size =
        decoder.decodeStructPointer(geometry$.Size);
    return val;
  };

  WaylandBufferManagerHost_CreateShmBasedBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WaylandBufferManagerHost_CreateShmBasedBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Handle, val.shmFd);
    encoder.encodeStruct(codec.Uint32, val.bufferId);
    encoder.encodeStruct(codec.Uint64, val.length);
    encoder.encodeStructPointer(geometry$.Size, val.size);
  };
  function WaylandBufferManagerHost_CreateSolidColorBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WaylandBufferManagerHost_CreateSolidColorBuffer_Params.prototype.initDefaults_ = function() {
    this.size = null;
    this.color = null;
    this.bufferId = 0;
  };
  WaylandBufferManagerHost_CreateSolidColorBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WaylandBufferManagerHost_CreateSolidColorBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_CreateSolidColorBuffer_Params.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_CreateSolidColorBuffer_Params.color
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, skcolor4f$.SkColor4f, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  WaylandBufferManagerHost_CreateSolidColorBuffer_Params.encodedSize = codec.kStructHeaderSize + 24;

  WaylandBufferManagerHost_CreateSolidColorBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new WaylandBufferManagerHost_CreateSolidColorBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.size =
        decoder.decodeStructPointer(geometry$.Size);
    val.color =
        decoder.decodeStructPointer(skcolor4f$.SkColor4f);
    val.bufferId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WaylandBufferManagerHost_CreateSolidColorBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WaylandBufferManagerHost_CreateSolidColorBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Size, val.size);
    encoder.encodeStructPointer(skcolor4f$.SkColor4f, val.color);
    encoder.encodeStruct(codec.Uint32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WaylandBufferManagerHost_CreateSinglePixelBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WaylandBufferManagerHost_CreateSinglePixelBuffer_Params.prototype.initDefaults_ = function() {
    this.color = null;
    this.bufferId = 0;
  };
  WaylandBufferManagerHost_CreateSinglePixelBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WaylandBufferManagerHost_CreateSinglePixelBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_CreateSinglePixelBuffer_Params.color
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, skcolor4f$.SkColor4f, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  WaylandBufferManagerHost_CreateSinglePixelBuffer_Params.encodedSize = codec.kStructHeaderSize + 16;

  WaylandBufferManagerHost_CreateSinglePixelBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new WaylandBufferManagerHost_CreateSinglePixelBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.color =
        decoder.decodeStructPointer(skcolor4f$.SkColor4f);
    val.bufferId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WaylandBufferManagerHost_CreateSinglePixelBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WaylandBufferManagerHost_CreateSinglePixelBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(skcolor4f$.SkColor4f, val.color);
    encoder.encodeStruct(codec.Uint32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WaylandBufferManagerHost_DestroyBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WaylandBufferManagerHost_DestroyBuffer_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
  };
  WaylandBufferManagerHost_DestroyBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WaylandBufferManagerHost_DestroyBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  WaylandBufferManagerHost_DestroyBuffer_Params.encodedSize = codec.kStructHeaderSize + 8;

  WaylandBufferManagerHost_DestroyBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new WaylandBufferManagerHost_DestroyBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WaylandBufferManagerHost_DestroyBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WaylandBufferManagerHost_DestroyBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WaylandBufferManagerHost_CommitOverlays_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WaylandBufferManagerHost_CommitOverlays_Params.prototype.initDefaults_ = function() {
    this.widget = null;
    this.frameId = 0;
    this.data = null;
    this.overlays = null;
  };
  WaylandBufferManagerHost_CommitOverlays_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WaylandBufferManagerHost_CommitOverlays_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_CommitOverlays_Params.widget
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, accelerated_widget$.AcceleratedWidget, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WaylandBufferManagerHost_CommitOverlays_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, frame_data$.FrameData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerHost_CommitOverlays_Params.overlays
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 8, new codec.PointerTo(wayland_overlay_config$.WaylandOverlayConfig), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WaylandBufferManagerHost_CommitOverlays_Params.encodedSize = codec.kStructHeaderSize + 32;

  WaylandBufferManagerHost_CommitOverlays_Params.decode = function(decoder) {
    var packed;
    var val = new WaylandBufferManagerHost_CommitOverlays_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.widget =
        decoder.decodeStructPointer(accelerated_widget$.AcceleratedWidget);
    val.frameId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.data =
        decoder.decodeStructPointer(frame_data$.FrameData);
    val.overlays =
        decoder.decodeArrayPointer(new codec.PointerTo(wayland_overlay_config$.WaylandOverlayConfig));
    return val;
  };

  WaylandBufferManagerHost_CommitOverlays_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WaylandBufferManagerHost_CommitOverlays_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(accelerated_widget$.AcceleratedWidget, val.widget);
    encoder.encodeStruct(codec.Uint32, val.frameId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(frame_data$.FrameData, val.data);
    encoder.encodeArrayPointer(new codec.PointerTo(wayland_overlay_config$.WaylandOverlayConfig), val.overlays);
  };
  function WaylandBufferManagerGpu_Initialize_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WaylandBufferManagerGpu_Initialize_Params.prototype.initDefaults_ = function() {
    this.remoteHost = new WaylandBufferManagerHostPtr();
    this.bufferFormatsWithModifiers = null;
    this.supportsDmaBuf = false;
    this.supportsViewporter = false;
    this.supportsAcquireFence = false;
    this.supportsOverlays = false;
    this.supportsSinglePixelBuffer = false;
    this.supportedSurfaceAugmentorVersion = 0;
    this.bugFixIds = null;
  };
  WaylandBufferManagerGpu_Initialize_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WaylandBufferManagerGpu_Initialize_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerGpu_Initialize_Params.remoteHost
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerGpu_Initialize_Params.bufferFormatsWithModifiers
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, new codec.Enum(buffer_types$.BufferFormat), new codec.ArrayOf(codec.Uint64), false);
    if (err !== validator.validationError.NONE)
        return err;








    // validate WaylandBufferManagerGpu_Initialize_Params.bugFixIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 4, codec.Uint32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WaylandBufferManagerGpu_Initialize_Params.encodedSize = codec.kStructHeaderSize + 32;

  WaylandBufferManagerGpu_Initialize_Params.decode = function(decoder) {
    var packed;
    var val = new WaylandBufferManagerGpu_Initialize_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remoteHost =
        decoder.decodeStruct(new codec.Interface(WaylandBufferManagerHostPtr));
    val.bufferFormatsWithModifiers =
        decoder.decodeMapPointer(new codec.Enum(buffer_types$.BufferFormat), new codec.ArrayOf(codec.Uint64));
    packed = decoder.readUint8();
    val.supportsDmaBuf = (packed >> 0) & 1 ? true : false;
    val.supportsViewporter = (packed >> 1) & 1 ? true : false;
    val.supportsAcquireFence = (packed >> 2) & 1 ? true : false;
    val.supportsOverlays = (packed >> 3) & 1 ? true : false;
    val.supportsSinglePixelBuffer = (packed >> 4) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.supportedSurfaceAugmentorVersion =
        decoder.decodeStruct(codec.Uint32);
    val.bugFixIds =
        decoder.decodeArrayPointer(codec.Uint32);
    return val;
  };

  WaylandBufferManagerGpu_Initialize_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WaylandBufferManagerGpu_Initialize_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(WaylandBufferManagerHostPtr), val.remoteHost);
    encoder.encodeMapPointer(new codec.Enum(buffer_types$.BufferFormat), new codec.ArrayOf(codec.Uint64), val.bufferFormatsWithModifiers);
    packed = 0;
    packed |= (val.supportsDmaBuf & 1) << 0
    packed |= (val.supportsViewporter & 1) << 1
    packed |= (val.supportsAcquireFence & 1) << 2
    packed |= (val.supportsOverlays & 1) << 3
    packed |= (val.supportsSinglePixelBuffer & 1) << 4
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint32, val.supportedSurfaceAugmentorVersion);
    encoder.encodeArrayPointer(codec.Uint32, val.bugFixIds);
  };
  function WaylandBufferManagerGpu_OnSubmission_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WaylandBufferManagerGpu_OnSubmission_Params.prototype.initDefaults_ = function() {
    this.widget = null;
    this.frameId = 0;
    this.swapResult = 0;
    this.releaseFenceHandle = null;
    this.presentationInfos = null;
  };
  WaylandBufferManagerGpu_OnSubmission_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WaylandBufferManagerGpu_OnSubmission_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerGpu_OnSubmission_Params.widget
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, accelerated_widget$.AcceleratedWidget, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate WaylandBufferManagerGpu_OnSubmission_Params.swapResult
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 12, swap_result$.SwapResult);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerGpu_OnSubmission_Params.releaseFenceHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, gpu_fence_handle$.GpuFenceHandle, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerGpu_OnSubmission_Params.presentationInfos
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 8, new codec.PointerTo(wayland_presentation_info$.WaylandPresentationInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WaylandBufferManagerGpu_OnSubmission_Params.encodedSize = codec.kStructHeaderSize + 32;

  WaylandBufferManagerGpu_OnSubmission_Params.decode = function(decoder) {
    var packed;
    var val = new WaylandBufferManagerGpu_OnSubmission_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.widget =
        decoder.decodeStructPointer(accelerated_widget$.AcceleratedWidget);
    val.frameId =
        decoder.decodeStruct(codec.Uint32);
    val.swapResult =
        decoder.decodeStruct(new codec.Enum(swap_result$.SwapResult));
    val.releaseFenceHandle =
        decoder.decodeStructPointer(gpu_fence_handle$.GpuFenceHandle);
    val.presentationInfos =
        decoder.decodeArrayPointer(new codec.PointerTo(wayland_presentation_info$.WaylandPresentationInfo));
    return val;
  };

  WaylandBufferManagerGpu_OnSubmission_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WaylandBufferManagerGpu_OnSubmission_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(accelerated_widget$.AcceleratedWidget, val.widget);
    encoder.encodeStruct(codec.Uint32, val.frameId);
    encoder.encodeStruct(codec.Int32, val.swapResult);
    encoder.encodeStructPointer(gpu_fence_handle$.GpuFenceHandle, val.releaseFenceHandle);
    encoder.encodeArrayPointer(new codec.PointerTo(wayland_presentation_info$.WaylandPresentationInfo), val.presentationInfos);
  };
  function WaylandBufferManagerGpu_OnPresentation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WaylandBufferManagerGpu_OnPresentation_Params.prototype.initDefaults_ = function() {
    this.widget = null;
    this.presentationInfos = null;
  };
  WaylandBufferManagerGpu_OnPresentation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WaylandBufferManagerGpu_OnPresentation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerGpu_OnPresentation_Params.widget
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, accelerated_widget$.AcceleratedWidget, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WaylandBufferManagerGpu_OnPresentation_Params.presentationInfos
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(wayland_presentation_info$.WaylandPresentationInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WaylandBufferManagerGpu_OnPresentation_Params.encodedSize = codec.kStructHeaderSize + 16;

  WaylandBufferManagerGpu_OnPresentation_Params.decode = function(decoder) {
    var packed;
    var val = new WaylandBufferManagerGpu_OnPresentation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.widget =
        decoder.decodeStructPointer(accelerated_widget$.AcceleratedWidget);
    val.presentationInfos =
        decoder.decodeArrayPointer(new codec.PointerTo(wayland_presentation_info$.WaylandPresentationInfo));
    return val;
  };

  WaylandBufferManagerGpu_OnPresentation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WaylandBufferManagerGpu_OnPresentation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(accelerated_widget$.AcceleratedWidget, val.widget);
    encoder.encodeArrayPointer(new codec.PointerTo(wayland_presentation_info$.WaylandPresentationInfo), val.presentationInfos);
  };
  var kWaylandBufferManagerHost_SetWaylandBufferManagerGpu_Name = 1902979455;
  var kWaylandBufferManagerHost_CreateDmabufBasedBuffer_Name = 1037950427;
  var kWaylandBufferManagerHost_CreateShmBasedBuffer_Name = 1601180707;
  var kWaylandBufferManagerHost_CreateSolidColorBuffer_Name = 369531389;
  var kWaylandBufferManagerHost_CreateSinglePixelBuffer_Name = 287742610;
  var kWaylandBufferManagerHost_DestroyBuffer_Name = 619623745;
  var kWaylandBufferManagerHost_CommitOverlays_Name = 2005746292;

  function WaylandBufferManagerHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WaylandBufferManagerHost,
                                                   handleOrPtrInfo);
  }

  function WaylandBufferManagerHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WaylandBufferManagerHost, associatedInterfacePtrInfo);
  }

  WaylandBufferManagerHostAssociatedPtr.prototype =
      Object.create(WaylandBufferManagerHostPtr.prototype);
  WaylandBufferManagerHostAssociatedPtr.prototype.constructor =
      WaylandBufferManagerHostAssociatedPtr;

  function WaylandBufferManagerHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  WaylandBufferManagerHostPtr.prototype.setWaylandBufferManagerGpu = function() {
    return WaylandBufferManagerHostProxy.prototype.setWaylandBufferManagerGpu
        .apply(this.ptr.getProxy(), arguments);
  };

  WaylandBufferManagerHostProxy.prototype.setWaylandBufferManagerGpu = function(bufferManagerGpuAssociated) {
    var params_ = new WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params();
    params_.bufferManagerGpuAssociated = bufferManagerGpuAssociated;
    var builder = new codec.MessageV2Builder(
        kWaylandBufferManagerHost_SetWaylandBufferManagerGpu_Name,
        codec.align(WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params.encodedSize));
    builder.setPayload(WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WaylandBufferManagerHostPtr.prototype.createDmabufBasedBuffer = function() {
    return WaylandBufferManagerHostProxy.prototype.createDmabufBasedBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  WaylandBufferManagerHostProxy.prototype.createDmabufBasedBuffer = function(dmabufFd, size, strides, offsets, modifiers, format, planesCount, bufferId) {
    var params_ = new WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params();
    params_.dmabufFd = dmabufFd;
    params_.size = size;
    params_.strides = strides;
    params_.offsets = offsets;
    params_.modifiers = modifiers;
    params_.format = format;
    params_.planesCount = planesCount;
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kWaylandBufferManagerHost_CreateDmabufBasedBuffer_Name,
        codec.align(WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params.encodedSize));
    builder.encodeStruct(WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WaylandBufferManagerHostPtr.prototype.createShmBasedBuffer = function() {
    return WaylandBufferManagerHostProxy.prototype.createShmBasedBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  WaylandBufferManagerHostProxy.prototype.createShmBasedBuffer = function(shmFd, length, size, bufferId) {
    var params_ = new WaylandBufferManagerHost_CreateShmBasedBuffer_Params();
    params_.shmFd = shmFd;
    params_.length = length;
    params_.size = size;
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kWaylandBufferManagerHost_CreateShmBasedBuffer_Name,
        codec.align(WaylandBufferManagerHost_CreateShmBasedBuffer_Params.encodedSize));
    builder.encodeStruct(WaylandBufferManagerHost_CreateShmBasedBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WaylandBufferManagerHostPtr.prototype.createSolidColorBuffer = function() {
    return WaylandBufferManagerHostProxy.prototype.createSolidColorBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  WaylandBufferManagerHostProxy.prototype.createSolidColorBuffer = function(size, color, bufferId) {
    var params_ = new WaylandBufferManagerHost_CreateSolidColorBuffer_Params();
    params_.size = size;
    params_.color = color;
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kWaylandBufferManagerHost_CreateSolidColorBuffer_Name,
        codec.align(WaylandBufferManagerHost_CreateSolidColorBuffer_Params.encodedSize));
    builder.encodeStruct(WaylandBufferManagerHost_CreateSolidColorBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WaylandBufferManagerHostPtr.prototype.createSinglePixelBuffer = function() {
    return WaylandBufferManagerHostProxy.prototype.createSinglePixelBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  WaylandBufferManagerHostProxy.prototype.createSinglePixelBuffer = function(color, bufferId) {
    var params_ = new WaylandBufferManagerHost_CreateSinglePixelBuffer_Params();
    params_.color = color;
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kWaylandBufferManagerHost_CreateSinglePixelBuffer_Name,
        codec.align(WaylandBufferManagerHost_CreateSinglePixelBuffer_Params.encodedSize));
    builder.encodeStruct(WaylandBufferManagerHost_CreateSinglePixelBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WaylandBufferManagerHostPtr.prototype.destroyBuffer = function() {
    return WaylandBufferManagerHostProxy.prototype.destroyBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  WaylandBufferManagerHostProxy.prototype.destroyBuffer = function(bufferId) {
    var params_ = new WaylandBufferManagerHost_DestroyBuffer_Params();
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kWaylandBufferManagerHost_DestroyBuffer_Name,
        codec.align(WaylandBufferManagerHost_DestroyBuffer_Params.encodedSize));
    builder.encodeStruct(WaylandBufferManagerHost_DestroyBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WaylandBufferManagerHostPtr.prototype.commitOverlays = function() {
    return WaylandBufferManagerHostProxy.prototype.commitOverlays
        .apply(this.ptr.getProxy(), arguments);
  };

  WaylandBufferManagerHostProxy.prototype.commitOverlays = function(widget, frameId, data, overlays) {
    var params_ = new WaylandBufferManagerHost_CommitOverlays_Params();
    params_.widget = widget;
    params_.frameId = frameId;
    params_.data = data;
    params_.overlays = overlays;
    var builder = new codec.MessageV0Builder(
        kWaylandBufferManagerHost_CommitOverlays_Name,
        codec.align(WaylandBufferManagerHost_CommitOverlays_Params.encodedSize));
    builder.encodeStruct(WaylandBufferManagerHost_CommitOverlays_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function WaylandBufferManagerHostStub(delegate) {
    this.delegate_ = delegate;
  }
  WaylandBufferManagerHostStub.prototype.setWaylandBufferManagerGpu = function(bufferManagerGpuAssociated) {
    return this.delegate_ && this.delegate_.setWaylandBufferManagerGpu && this.delegate_.setWaylandBufferManagerGpu(bufferManagerGpuAssociated);
  }
  WaylandBufferManagerHostStub.prototype.createDmabufBasedBuffer = function(dmabufFd, size, strides, offsets, modifiers, format, planesCount, bufferId) {
    return this.delegate_ && this.delegate_.createDmabufBasedBuffer && this.delegate_.createDmabufBasedBuffer(dmabufFd, size, strides, offsets, modifiers, format, planesCount, bufferId);
  }
  WaylandBufferManagerHostStub.prototype.createShmBasedBuffer = function(shmFd, length, size, bufferId) {
    return this.delegate_ && this.delegate_.createShmBasedBuffer && this.delegate_.createShmBasedBuffer(shmFd, length, size, bufferId);
  }
  WaylandBufferManagerHostStub.prototype.createSolidColorBuffer = function(size, color, bufferId) {
    return this.delegate_ && this.delegate_.createSolidColorBuffer && this.delegate_.createSolidColorBuffer(size, color, bufferId);
  }
  WaylandBufferManagerHostStub.prototype.createSinglePixelBuffer = function(color, bufferId) {
    return this.delegate_ && this.delegate_.createSinglePixelBuffer && this.delegate_.createSinglePixelBuffer(color, bufferId);
  }
  WaylandBufferManagerHostStub.prototype.destroyBuffer = function(bufferId) {
    return this.delegate_ && this.delegate_.destroyBuffer && this.delegate_.destroyBuffer(bufferId);
  }
  WaylandBufferManagerHostStub.prototype.commitOverlays = function(widget, frameId, data, overlays) {
    return this.delegate_ && this.delegate_.commitOverlays && this.delegate_.commitOverlays(widget, frameId, data, overlays);
  }

  WaylandBufferManagerHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWaylandBufferManagerHost_SetWaylandBufferManagerGpu_Name:
      var params = reader.decodeStruct(WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params);
      this.setWaylandBufferManagerGpu(params.bufferManagerGpuAssociated);
      return true;
    case kWaylandBufferManagerHost_CreateDmabufBasedBuffer_Name:
      var params = reader.decodeStruct(WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params);
      this.createDmabufBasedBuffer(params.dmabufFd, params.size, params.strides, params.offsets, params.modifiers, params.format, params.planesCount, params.bufferId);
      return true;
    case kWaylandBufferManagerHost_CreateShmBasedBuffer_Name:
      var params = reader.decodeStruct(WaylandBufferManagerHost_CreateShmBasedBuffer_Params);
      this.createShmBasedBuffer(params.shmFd, params.length, params.size, params.bufferId);
      return true;
    case kWaylandBufferManagerHost_CreateSolidColorBuffer_Name:
      var params = reader.decodeStruct(WaylandBufferManagerHost_CreateSolidColorBuffer_Params);
      this.createSolidColorBuffer(params.size, params.color, params.bufferId);
      return true;
    case kWaylandBufferManagerHost_CreateSinglePixelBuffer_Name:
      var params = reader.decodeStruct(WaylandBufferManagerHost_CreateSinglePixelBuffer_Params);
      this.createSinglePixelBuffer(params.color, params.bufferId);
      return true;
    case kWaylandBufferManagerHost_DestroyBuffer_Name:
      var params = reader.decodeStruct(WaylandBufferManagerHost_DestroyBuffer_Params);
      this.destroyBuffer(params.bufferId);
      return true;
    case kWaylandBufferManagerHost_CommitOverlays_Name:
      var params = reader.decodeStruct(WaylandBufferManagerHost_CommitOverlays_Params);
      this.commitOverlays(params.widget, params.frameId, params.data, params.overlays);
      return true;
    default:
      return false;
    }
  };

  WaylandBufferManagerHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateWaylandBufferManagerHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWaylandBufferManagerHost_SetWaylandBufferManagerGpu_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WaylandBufferManagerHost_SetWaylandBufferManagerGpu_Params;
      break;
      case kWaylandBufferManagerHost_CreateDmabufBasedBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WaylandBufferManagerHost_CreateDmabufBasedBuffer_Params;
      break;
      case kWaylandBufferManagerHost_CreateShmBasedBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WaylandBufferManagerHost_CreateShmBasedBuffer_Params;
      break;
      case kWaylandBufferManagerHost_CreateSolidColorBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WaylandBufferManagerHost_CreateSolidColorBuffer_Params;
      break;
      case kWaylandBufferManagerHost_CreateSinglePixelBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WaylandBufferManagerHost_CreateSinglePixelBuffer_Params;
      break;
      case kWaylandBufferManagerHost_DestroyBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WaylandBufferManagerHost_DestroyBuffer_Params;
      break;
      case kWaylandBufferManagerHost_CommitOverlays_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WaylandBufferManagerHost_CommitOverlays_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWaylandBufferManagerHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var WaylandBufferManagerHost = {
    name: 'ui.ozone.mojom.WaylandBufferManagerHost',
    kVersion: 0,
    ptrClass: WaylandBufferManagerHostPtr,
    proxyClass: WaylandBufferManagerHostProxy,
    stubClass: WaylandBufferManagerHostStub,
    validateRequest: validateWaylandBufferManagerHostRequest,
    validateResponse: null,
  };
  WaylandBufferManagerHostStub.prototype.validator = validateWaylandBufferManagerHostRequest;
  WaylandBufferManagerHostProxy.prototype.validator = null;
  var kWaylandBufferManagerGpu_Initialize_Name = 20619362;
  var kWaylandBufferManagerGpu_OnSubmission_Name = 617304131;
  var kWaylandBufferManagerGpu_OnPresentation_Name = 1674333724;

  function WaylandBufferManagerGpuPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WaylandBufferManagerGpu,
                                                   handleOrPtrInfo);
  }

  function WaylandBufferManagerGpuAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WaylandBufferManagerGpu, associatedInterfacePtrInfo);
  }

  WaylandBufferManagerGpuAssociatedPtr.prototype =
      Object.create(WaylandBufferManagerGpuPtr.prototype);
  WaylandBufferManagerGpuAssociatedPtr.prototype.constructor =
      WaylandBufferManagerGpuAssociatedPtr;

  function WaylandBufferManagerGpuProxy(receiver) {
    this.receiver_ = receiver;
  }
  WaylandBufferManagerGpuPtr.prototype.initialize = function() {
    return WaylandBufferManagerGpuProxy.prototype.initialize
        .apply(this.ptr.getProxy(), arguments);
  };

  WaylandBufferManagerGpuProxy.prototype.initialize = function(remoteHost, bufferFormatsWithModifiers, supportsDmaBuf, supportsViewporter, supportsAcquireFence, supportsOverlays, supportedSurfaceAugmentorVersion, supportsSinglePixelBuffer, bugFixIds) {
    var params_ = new WaylandBufferManagerGpu_Initialize_Params();
    params_.remoteHost = remoteHost;
    params_.bufferFormatsWithModifiers = bufferFormatsWithModifiers;
    params_.supportsDmaBuf = supportsDmaBuf;
    params_.supportsViewporter = supportsViewporter;
    params_.supportsAcquireFence = supportsAcquireFence;
    params_.supportsOverlays = supportsOverlays;
    params_.supportedSurfaceAugmentorVersion = supportedSurfaceAugmentorVersion;
    params_.supportsSinglePixelBuffer = supportsSinglePixelBuffer;
    params_.bugFixIds = bugFixIds;
    var builder = new codec.MessageV0Builder(
        kWaylandBufferManagerGpu_Initialize_Name,
        codec.align(WaylandBufferManagerGpu_Initialize_Params.encodedSize));
    builder.encodeStruct(WaylandBufferManagerGpu_Initialize_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WaylandBufferManagerGpuPtr.prototype.onSubmission = function() {
    return WaylandBufferManagerGpuProxy.prototype.onSubmission
        .apply(this.ptr.getProxy(), arguments);
  };

  WaylandBufferManagerGpuProxy.prototype.onSubmission = function(widget, frameId, swapResult, releaseFenceHandle, presentationInfos) {
    var params_ = new WaylandBufferManagerGpu_OnSubmission_Params();
    params_.widget = widget;
    params_.frameId = frameId;
    params_.swapResult = swapResult;
    params_.releaseFenceHandle = releaseFenceHandle;
    params_.presentationInfos = presentationInfos;
    var builder = new codec.MessageV0Builder(
        kWaylandBufferManagerGpu_OnSubmission_Name,
        codec.align(WaylandBufferManagerGpu_OnSubmission_Params.encodedSize));
    builder.encodeStruct(WaylandBufferManagerGpu_OnSubmission_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WaylandBufferManagerGpuPtr.prototype.onPresentation = function() {
    return WaylandBufferManagerGpuProxy.prototype.onPresentation
        .apply(this.ptr.getProxy(), arguments);
  };

  WaylandBufferManagerGpuProxy.prototype.onPresentation = function(widget, presentationInfos) {
    var params_ = new WaylandBufferManagerGpu_OnPresentation_Params();
    params_.widget = widget;
    params_.presentationInfos = presentationInfos;
    var builder = new codec.MessageV0Builder(
        kWaylandBufferManagerGpu_OnPresentation_Name,
        codec.align(WaylandBufferManagerGpu_OnPresentation_Params.encodedSize));
    builder.encodeStruct(WaylandBufferManagerGpu_OnPresentation_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function WaylandBufferManagerGpuStub(delegate) {
    this.delegate_ = delegate;
  }
  WaylandBufferManagerGpuStub.prototype.initialize = function(remoteHost, bufferFormatsWithModifiers, supportsDmaBuf, supportsViewporter, supportsAcquireFence, supportsOverlays, supportedSurfaceAugmentorVersion, supportsSinglePixelBuffer, bugFixIds) {
    return this.delegate_ && this.delegate_.initialize && this.delegate_.initialize(remoteHost, bufferFormatsWithModifiers, supportsDmaBuf, supportsViewporter, supportsAcquireFence, supportsOverlays, supportedSurfaceAugmentorVersion, supportsSinglePixelBuffer, bugFixIds);
  }
  WaylandBufferManagerGpuStub.prototype.onSubmission = function(widget, frameId, swapResult, releaseFenceHandle, presentationInfos) {
    return this.delegate_ && this.delegate_.onSubmission && this.delegate_.onSubmission(widget, frameId, swapResult, releaseFenceHandle, presentationInfos);
  }
  WaylandBufferManagerGpuStub.prototype.onPresentation = function(widget, presentationInfos) {
    return this.delegate_ && this.delegate_.onPresentation && this.delegate_.onPresentation(widget, presentationInfos);
  }

  WaylandBufferManagerGpuStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWaylandBufferManagerGpu_Initialize_Name:
      var params = reader.decodeStruct(WaylandBufferManagerGpu_Initialize_Params);
      this.initialize(params.remoteHost, params.bufferFormatsWithModifiers, params.supportsDmaBuf, params.supportsViewporter, params.supportsAcquireFence, params.supportsOverlays, params.supportedSurfaceAugmentorVersion, params.supportsSinglePixelBuffer, params.bugFixIds);
      return true;
    case kWaylandBufferManagerGpu_OnSubmission_Name:
      var params = reader.decodeStruct(WaylandBufferManagerGpu_OnSubmission_Params);
      this.onSubmission(params.widget, params.frameId, params.swapResult, params.releaseFenceHandle, params.presentationInfos);
      return true;
    case kWaylandBufferManagerGpu_OnPresentation_Name:
      var params = reader.decodeStruct(WaylandBufferManagerGpu_OnPresentation_Params);
      this.onPresentation(params.widget, params.presentationInfos);
      return true;
    default:
      return false;
    }
  };

  WaylandBufferManagerGpuStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateWaylandBufferManagerGpuRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWaylandBufferManagerGpu_Initialize_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WaylandBufferManagerGpu_Initialize_Params;
      break;
      case kWaylandBufferManagerGpu_OnSubmission_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WaylandBufferManagerGpu_OnSubmission_Params;
      break;
      case kWaylandBufferManagerGpu_OnPresentation_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WaylandBufferManagerGpu_OnPresentation_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWaylandBufferManagerGpuResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var WaylandBufferManagerGpu = {
    name: 'ui.ozone.mojom.WaylandBufferManagerGpu',
    kVersion: 0,
    ptrClass: WaylandBufferManagerGpuPtr,
    proxyClass: WaylandBufferManagerGpuProxy,
    stubClass: WaylandBufferManagerGpuStub,
    validateRequest: validateWaylandBufferManagerGpuRequest,
    validateResponse: null,
  };
  WaylandBufferManagerGpuStub.prototype.validator = validateWaylandBufferManagerGpuRequest;
  WaylandBufferManagerGpuProxy.prototype.validator = null;
  exports.WaylandBufferManagerHost = WaylandBufferManagerHost;
  exports.WaylandBufferManagerHostPtr = WaylandBufferManagerHostPtr;
  exports.WaylandBufferManagerHostAssociatedPtr = WaylandBufferManagerHostAssociatedPtr;
  exports.WaylandBufferManagerGpu = WaylandBufferManagerGpu;
  exports.WaylandBufferManagerGpuPtr = WaylandBufferManagerGpuPtr;
  exports.WaylandBufferManagerGpuAssociatedPtr = WaylandBufferManagerGpuAssociatedPtr;
})();