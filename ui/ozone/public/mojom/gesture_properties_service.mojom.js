// ui/ozone/public/mojom/gesture_properties_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/ozone/public/mojom/gesture_properties_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('ui.ozone.mojom');


  var SetGesturePropErrorCode = {};
  SetGesturePropErrorCode.SUCCESS = 0;
  SetGesturePropErrorCode.UNKNOWN_ERROR = 1;
  SetGesturePropErrorCode.NOT_FOUND = 2;
  SetGesturePropErrorCode.READ_ONLY = 3;
  SetGesturePropErrorCode.TYPE_MISMATCH = 4;
  SetGesturePropErrorCode.SIZE_MISMATCH = 5;
  SetGesturePropErrorCode.MIN_VALUE = 0;
  SetGesturePropErrorCode.MAX_VALUE = 5;

  SetGesturePropErrorCode.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    }
    return false;
  };

  SetGesturePropErrorCode.toKnownEnumValue = function(value) {
    return value;
  };

  SetGesturePropErrorCode.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function GesturePropertiesService_ListDevices_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GesturePropertiesService_ListDevices_Params.prototype.initDefaults_ = function() {
  };
  GesturePropertiesService_ListDevices_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GesturePropertiesService_ListDevices_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GesturePropertiesService_ListDevices_Params.encodedSize = codec.kStructHeaderSize + 0;

  GesturePropertiesService_ListDevices_Params.decode = function(decoder) {
    var packed;
    var val = new GesturePropertiesService_ListDevices_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GesturePropertiesService_ListDevices_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GesturePropertiesService_ListDevices_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GesturePropertiesService_ListDevices_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GesturePropertiesService_ListDevices_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  GesturePropertiesService_ListDevices_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GesturePropertiesService_ListDevices_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GesturePropertiesService_ListDevices_ResponseParams.result
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, codec.Int32, codec.String, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GesturePropertiesService_ListDevices_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  GesturePropertiesService_ListDevices_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GesturePropertiesService_ListDevices_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeMapPointer(codec.Int32, codec.String);
    return val;
  };

  GesturePropertiesService_ListDevices_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GesturePropertiesService_ListDevices_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(codec.Int32, codec.String, val.result);
  };
  function GesturePropertiesService_ListProperties_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GesturePropertiesService_ListProperties_Params.prototype.initDefaults_ = function() {
    this.deviceId = 0;
  };
  GesturePropertiesService_ListProperties_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GesturePropertiesService_ListProperties_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GesturePropertiesService_ListProperties_Params.encodedSize = codec.kStructHeaderSize + 8;

  GesturePropertiesService_ListProperties_Params.decode = function(decoder) {
    var packed;
    var val = new GesturePropertiesService_ListProperties_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GesturePropertiesService_ListProperties_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GesturePropertiesService_ListProperties_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.deviceId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GesturePropertiesService_ListProperties_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GesturePropertiesService_ListProperties_ResponseParams.prototype.initDefaults_ = function() {
    this.properties = null;
  };
  GesturePropertiesService_ListProperties_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GesturePropertiesService_ListProperties_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GesturePropertiesService_ListProperties_ResponseParams.properties
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GesturePropertiesService_ListProperties_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  GesturePropertiesService_ListProperties_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GesturePropertiesService_ListProperties_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.properties =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  GesturePropertiesService_ListProperties_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GesturePropertiesService_ListProperties_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.String, val.properties);
  };
  function GesturePropertiesService_GetProperty_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GesturePropertiesService_GetProperty_Params.prototype.initDefaults_ = function() {
    this.deviceId = 0;
    this.name = null;
  };
  GesturePropertiesService_GetProperty_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GesturePropertiesService_GetProperty_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate GesturePropertiesService_GetProperty_Params.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GesturePropertiesService_GetProperty_Params.encodedSize = codec.kStructHeaderSize + 16;

  GesturePropertiesService_GetProperty_Params.decode = function(decoder) {
    var packed;
    var val = new GesturePropertiesService_GetProperty_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.name =
        decoder.decodeStruct(codec.String);
    return val;
  };

  GesturePropertiesService_GetProperty_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GesturePropertiesService_GetProperty_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.deviceId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.name);
  };
  function GesturePropertiesService_GetProperty_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GesturePropertiesService_GetProperty_ResponseParams.prototype.initDefaults_ = function() {
    this.isReadOnly = false;
    this.value = null;
  };
  GesturePropertiesService_GetProperty_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GesturePropertiesService_GetProperty_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate GesturePropertiesService_GetProperty_ResponseParams.value
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 8, GesturePropValue, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GesturePropertiesService_GetProperty_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  GesturePropertiesService_GetProperty_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GesturePropertiesService_GetProperty_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isReadOnly = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.value =
        decoder.decodeStruct(GesturePropValue);
    return val;
  };

  GesturePropertiesService_GetProperty_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GesturePropertiesService_GetProperty_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isReadOnly & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(GesturePropValue, val.value);
  };
  function GesturePropertiesService_SetProperty_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GesturePropertiesService_SetProperty_Params.prototype.initDefaults_ = function() {
    this.deviceId = 0;
    this.name = null;
    this.value = null;
  };
  GesturePropertiesService_SetProperty_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GesturePropertiesService_SetProperty_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate GesturePropertiesService_SetProperty_Params.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate GesturePropertiesService_SetProperty_Params.value
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 16, GesturePropValue, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GesturePropertiesService_SetProperty_Params.encodedSize = codec.kStructHeaderSize + 32;

  GesturePropertiesService_SetProperty_Params.decode = function(decoder) {
    var packed;
    var val = new GesturePropertiesService_SetProperty_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.name =
        decoder.decodeStruct(codec.String);
    val.value =
        decoder.decodeStruct(GesturePropValue);
    return val;
  };

  GesturePropertiesService_SetProperty_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GesturePropertiesService_SetProperty_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.deviceId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(GesturePropValue, val.value);
  };
  function GesturePropertiesService_SetProperty_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GesturePropertiesService_SetProperty_ResponseParams.prototype.initDefaults_ = function() {
    this.error = 0;
  };
  GesturePropertiesService_SetProperty_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GesturePropertiesService_SetProperty_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GesturePropertiesService_SetProperty_ResponseParams.error
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, SetGesturePropErrorCode);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GesturePropertiesService_SetProperty_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  GesturePropertiesService_SetProperty_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GesturePropertiesService_SetProperty_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.error =
        decoder.decodeStruct(new codec.Enum(SetGesturePropErrorCode));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GesturePropertiesService_SetProperty_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GesturePropertiesService_SetProperty_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.error);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function GesturePropValue(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  GesturePropValue.Tags = {
    ints: 0,
    shorts: 1,
    bools: 2,
    str: 3,
    reals: 4,
  };

  GesturePropValue.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  GesturePropValue.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "ints",
        "shorts",
        "bools",
        "str",
        "reals",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a GesturePropValue member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(GesturePropValue.prototype, "ints", {
    get: function() {
      if (this.$tag != GesturePropValue.Tags.ints) {
        throw new ReferenceError(
            "GesturePropValue.ints is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = GesturePropValue.Tags.ints;
      this.$data = value;
    }
  });
  Object.defineProperty(GesturePropValue.prototype, "shorts", {
    get: function() {
      if (this.$tag != GesturePropValue.Tags.shorts) {
        throw new ReferenceError(
            "GesturePropValue.shorts is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = GesturePropValue.Tags.shorts;
      this.$data = value;
    }
  });
  Object.defineProperty(GesturePropValue.prototype, "bools", {
    get: function() {
      if (this.$tag != GesturePropValue.Tags.bools) {
        throw new ReferenceError(
            "GesturePropValue.bools is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = GesturePropValue.Tags.bools;
      this.$data = value;
    }
  });
  Object.defineProperty(GesturePropValue.prototype, "str", {
    get: function() {
      if (this.$tag != GesturePropValue.Tags.str) {
        throw new ReferenceError(
            "GesturePropValue.str is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = GesturePropValue.Tags.str;
      this.$data = value;
    }
  });
  Object.defineProperty(GesturePropValue.prototype, "reals", {
    get: function() {
      if (this.$tag != GesturePropValue.Tags.reals) {
        throw new ReferenceError(
            "GesturePropValue.reals is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = GesturePropValue.Tags.reals;
      this.$data = value;
    }
  });


    GesturePropValue.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case GesturePropValue.Tags.ints:
          encoder.encodeArrayPointer(codec.Int32, val.ints);
          break;
        case GesturePropValue.Tags.shorts:
          encoder.encodeArrayPointer(codec.Int16, val.shorts);
          break;
        case GesturePropValue.Tags.bools:
          encoder.encodeArrayPointer(codec.PackedBool, val.bools);
          break;
        case GesturePropValue.Tags.str:
          encoder.encodeStruct(codec.String, val.str);
          break;
        case GesturePropValue.Tags.reals:
          encoder.encodeArrayPointer(codec.Double, val.reals);
          break;
      }
      encoder.align();
    };


    GesturePropValue.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new GesturePropValue();
      var tag = decoder.readUint32();
      switch (tag) {
        case GesturePropValue.Tags.ints:
          result.ints = decoder.decodeArrayPointer(codec.Int32);
          break;
        case GesturePropValue.Tags.shorts:
          result.shorts = decoder.decodeArrayPointer(codec.Int16);
          break;
        case GesturePropValue.Tags.bools:
          result.bools = decoder.decodeArrayPointer(codec.PackedBool);
          break;
        case GesturePropValue.Tags.str:
          result.str = decoder.decodeStruct(codec.String);
          break;
        case GesturePropValue.Tags.reals:
          result.reals = decoder.decodeArrayPointer(codec.Double);
          break;
      }
      decoder.align();

      return result;
    };


    GesturePropValue.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case GesturePropValue.Tags.ints:
          

    // validate GesturePropValue.ints
    err = messageValidator.validateArrayPointer(data_offset, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case GesturePropValue.Tags.shorts:
          

    // validate GesturePropValue.shorts
    err = messageValidator.validateArrayPointer(data_offset, 2, codec.Int16, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case GesturePropValue.Tags.bools:
          

    // validate GesturePropValue.bools
    err = messageValidator.validateArrayPointer(data_offset, 1, codec.PackedBool, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case GesturePropValue.Tags.str:
          

    // validate GesturePropValue.str
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case GesturePropValue.Tags.reals:
          

    // validate GesturePropValue.reals
    err = messageValidator.validateArrayPointer(data_offset, 8, codec.Double, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  GesturePropValue.encodedSize = 16;
  var kGesturePropertiesService_ListDevices_Name = 201183540;
  var kGesturePropertiesService_ListProperties_Name = 1997523613;
  var kGesturePropertiesService_GetProperty_Name = 1969427238;
  var kGesturePropertiesService_SetProperty_Name = 1470698710;

  function GesturePropertiesServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(GesturePropertiesService,
                                                   handleOrPtrInfo);
  }

  function GesturePropertiesServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        GesturePropertiesService, associatedInterfacePtrInfo);
  }

  GesturePropertiesServiceAssociatedPtr.prototype =
      Object.create(GesturePropertiesServicePtr.prototype);
  GesturePropertiesServiceAssociatedPtr.prototype.constructor =
      GesturePropertiesServiceAssociatedPtr;

  function GesturePropertiesServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  GesturePropertiesServicePtr.prototype.listDevices = function() {
    return GesturePropertiesServiceProxy.prototype.listDevices
        .apply(this.ptr.getProxy(), arguments);
  };

  GesturePropertiesServiceProxy.prototype.listDevices = function() {
    var params_ = new GesturePropertiesService_ListDevices_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGesturePropertiesService_ListDevices_Name,
          codec.align(GesturePropertiesService_ListDevices_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GesturePropertiesService_ListDevices_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GesturePropertiesService_ListDevices_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  GesturePropertiesServicePtr.prototype.listProperties = function() {
    return GesturePropertiesServiceProxy.prototype.listProperties
        .apply(this.ptr.getProxy(), arguments);
  };

  GesturePropertiesServiceProxy.prototype.listProperties = function(deviceId) {
    var params_ = new GesturePropertiesService_ListProperties_Params();
    params_.deviceId = deviceId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGesturePropertiesService_ListProperties_Name,
          codec.align(GesturePropertiesService_ListProperties_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GesturePropertiesService_ListProperties_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GesturePropertiesService_ListProperties_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  GesturePropertiesServicePtr.prototype.getProperty = function() {
    return GesturePropertiesServiceProxy.prototype.getProperty
        .apply(this.ptr.getProxy(), arguments);
  };

  GesturePropertiesServiceProxy.prototype.getProperty = function(deviceId, name) {
    var params_ = new GesturePropertiesService_GetProperty_Params();
    params_.deviceId = deviceId;
    params_.name = name;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGesturePropertiesService_GetProperty_Name,
          codec.align(GesturePropertiesService_GetProperty_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GesturePropertiesService_GetProperty_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GesturePropertiesService_GetProperty_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  GesturePropertiesServicePtr.prototype.setProperty = function() {
    return GesturePropertiesServiceProxy.prototype.setProperty
        .apply(this.ptr.getProxy(), arguments);
  };

  GesturePropertiesServiceProxy.prototype.setProperty = function(deviceId, name, value) {
    var params_ = new GesturePropertiesService_SetProperty_Params();
    params_.deviceId = deviceId;
    params_.name = name;
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGesturePropertiesService_SetProperty_Name,
          codec.align(GesturePropertiesService_SetProperty_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GesturePropertiesService_SetProperty_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GesturePropertiesService_SetProperty_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function GesturePropertiesServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  GesturePropertiesServiceStub.prototype.listDevices = function() {
    return this.delegate_ && this.delegate_.listDevices && this.delegate_.listDevices();
  }
  GesturePropertiesServiceStub.prototype.listProperties = function(deviceId) {
    return this.delegate_ && this.delegate_.listProperties && this.delegate_.listProperties(deviceId);
  }
  GesturePropertiesServiceStub.prototype.getProperty = function(deviceId, name) {
    return this.delegate_ && this.delegate_.getProperty && this.delegate_.getProperty(deviceId, name);
  }
  GesturePropertiesServiceStub.prototype.setProperty = function(deviceId, name, value) {
    return this.delegate_ && this.delegate_.setProperty && this.delegate_.setProperty(deviceId, name, value);
  }

  GesturePropertiesServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  GesturePropertiesServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGesturePropertiesService_ListDevices_Name:
      var params = reader.decodeStruct(GesturePropertiesService_ListDevices_Params);
      this.listDevices().then(function(response) {
        var responseParams =
            new GesturePropertiesService_ListDevices_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kGesturePropertiesService_ListDevices_Name,
            codec.align(GesturePropertiesService_ListDevices_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GesturePropertiesService_ListDevices_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kGesturePropertiesService_ListProperties_Name:
      var params = reader.decodeStruct(GesturePropertiesService_ListProperties_Params);
      this.listProperties(params.deviceId).then(function(response) {
        var responseParams =
            new GesturePropertiesService_ListProperties_ResponseParams();
        responseParams.properties = response.properties;
        var builder = new codec.MessageV1Builder(
            kGesturePropertiesService_ListProperties_Name,
            codec.align(GesturePropertiesService_ListProperties_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GesturePropertiesService_ListProperties_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kGesturePropertiesService_GetProperty_Name:
      var params = reader.decodeStruct(GesturePropertiesService_GetProperty_Params);
      this.getProperty(params.deviceId, params.name).then(function(response) {
        var responseParams =
            new GesturePropertiesService_GetProperty_ResponseParams();
        responseParams.isReadOnly = response.isReadOnly;
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kGesturePropertiesService_GetProperty_Name,
            codec.align(GesturePropertiesService_GetProperty_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GesturePropertiesService_GetProperty_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kGesturePropertiesService_SetProperty_Name:
      var params = reader.decodeStruct(GesturePropertiesService_SetProperty_Params);
      this.setProperty(params.deviceId, params.name, params.value).then(function(response) {
        var responseParams =
            new GesturePropertiesService_SetProperty_ResponseParams();
        responseParams.error = response.error;
        var builder = new codec.MessageV1Builder(
            kGesturePropertiesService_SetProperty_Name,
            codec.align(GesturePropertiesService_SetProperty_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GesturePropertiesService_SetProperty_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateGesturePropertiesServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kGesturePropertiesService_ListDevices_Name:
        if (message.expectsResponse())
          paramsClass = GesturePropertiesService_ListDevices_Params;
      break;
      case kGesturePropertiesService_ListProperties_Name:
        if (message.expectsResponse())
          paramsClass = GesturePropertiesService_ListProperties_Params;
      break;
      case kGesturePropertiesService_GetProperty_Name:
        if (message.expectsResponse())
          paramsClass = GesturePropertiesService_GetProperty_Params;
      break;
      case kGesturePropertiesService_SetProperty_Name:
        if (message.expectsResponse())
          paramsClass = GesturePropertiesService_SetProperty_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateGesturePropertiesServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kGesturePropertiesService_ListDevices_Name:
        if (message.isResponse())
          paramsClass = GesturePropertiesService_ListDevices_ResponseParams;
        break;
      case kGesturePropertiesService_ListProperties_Name:
        if (message.isResponse())
          paramsClass = GesturePropertiesService_ListProperties_ResponseParams;
        break;
      case kGesturePropertiesService_GetProperty_Name:
        if (message.isResponse())
          paramsClass = GesturePropertiesService_GetProperty_ResponseParams;
        break;
      case kGesturePropertiesService_SetProperty_Name:
        if (message.isResponse())
          paramsClass = GesturePropertiesService_SetProperty_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var GesturePropertiesService = {
    name: 'ui.ozone.mojom.GesturePropertiesService',
    kVersion: 0,
    ptrClass: GesturePropertiesServicePtr,
    proxyClass: GesturePropertiesServiceProxy,
    stubClass: GesturePropertiesServiceStub,
    validateRequest: validateGesturePropertiesServiceRequest,
    validateResponse: validateGesturePropertiesServiceResponse,
  };
  GesturePropertiesServiceStub.prototype.validator = validateGesturePropertiesServiceRequest;
  GesturePropertiesServiceProxy.prototype.validator = validateGesturePropertiesServiceResponse;
  exports.SetGesturePropErrorCode = SetGesturePropErrorCode;
  exports.GesturePropValue = GesturePropValue;
  exports.GesturePropertiesService = GesturePropertiesService;
  exports.GesturePropertiesServicePtr = GesturePropertiesServicePtr;
  exports.GesturePropertiesServiceAssociatedPtr = GesturePropertiesServiceAssociatedPtr;
})();