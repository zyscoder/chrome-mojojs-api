// ui/gfx/mojom/traits_test_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/gfx/mojom/traits_test_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('gfx.mojom');
  var buffer_types$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/buffer_types.mojom', 'buffer_types.mojom.js');
  }
  var rrect_f$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/rrect_f.mojom', 'rrect_f.mojom.js');
  }
  var selection_bound$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/selection_bound.mojom', 'selection_bound.mojom.js');
  }
  var transform$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/transform.mojom', 'transform.mojom.js');
  }



  function TraitsTestService_EchoSelectionBound_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoSelectionBound_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  TraitsTestService_EchoSelectionBound_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoSelectionBound_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoSelectionBound_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, selection_bound$.SelectionBound, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoSelectionBound_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoSelectionBound_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoSelectionBound_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(selection_bound$.SelectionBound);
    return val;
  };

  TraitsTestService_EchoSelectionBound_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoSelectionBound_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(selection_bound$.SelectionBound, val.s);
  };
  function TraitsTestService_EchoSelectionBound_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoSelectionBound_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoSelectionBound_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoSelectionBound_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoSelectionBound_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, selection_bound$.SelectionBound, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoSelectionBound_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoSelectionBound_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoSelectionBound_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(selection_bound$.SelectionBound);
    return val;
  };

  TraitsTestService_EchoSelectionBound_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoSelectionBound_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(selection_bound$.SelectionBound, val.pass);
  };
  function TraitsTestService_EchoTransform_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoTransform_Params.prototype.initDefaults_ = function() {
    this.t = null;
  };
  TraitsTestService_EchoTransform_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoTransform_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoTransform_Params.t
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, transform$.Transform, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoTransform_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoTransform_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoTransform_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.t =
        decoder.decodeStructPointer(transform$.Transform);
    return val;
  };

  TraitsTestService_EchoTransform_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoTransform_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(transform$.Transform, val.t);
  };
  function TraitsTestService_EchoTransform_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoTransform_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoTransform_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoTransform_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoTransform_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, transform$.Transform, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoTransform_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoTransform_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoTransform_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(transform$.Transform);
    return val;
  };

  TraitsTestService_EchoTransform_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoTransform_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(transform$.Transform, val.pass);
  };
  function TraitsTestService_EchoGpuMemoryBufferHandle_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoGpuMemoryBufferHandle_Params.prototype.initDefaults_ = function() {
    this.g = null;
  };
  TraitsTestService_EchoGpuMemoryBufferHandle_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoGpuMemoryBufferHandle_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoGpuMemoryBufferHandle_Params.g
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, buffer_types$.GpuMemoryBufferHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoGpuMemoryBufferHandle_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoGpuMemoryBufferHandle_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoGpuMemoryBufferHandle_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.g =
        decoder.decodeStructPointer(buffer_types$.GpuMemoryBufferHandle);
    return val;
  };

  TraitsTestService_EchoGpuMemoryBufferHandle_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoGpuMemoryBufferHandle_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(buffer_types$.GpuMemoryBufferHandle, val.g);
  };
  function TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, buffer_types$.GpuMemoryBufferHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(buffer_types$.GpuMemoryBufferHandle);
    return val;
  };

  TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(buffer_types$.GpuMemoryBufferHandle, val.pass);
  };
  function TraitsTestService_EchoRRectF_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoRRectF_Params.prototype.initDefaults_ = function() {
    this.t = null;
  };
  TraitsTestService_EchoRRectF_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoRRectF_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoRRectF_Params.t
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, rrect_f$.RRectF, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoRRectF_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoRRectF_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoRRectF_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.t =
        decoder.decodeStructPointer(rrect_f$.RRectF);
    return val;
  };

  TraitsTestService_EchoRRectF_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoRRectF_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(rrect_f$.RRectF, val.t);
  };
  function TraitsTestService_EchoRRectF_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoRRectF_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoRRectF_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoRRectF_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoRRectF_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, rrect_f$.RRectF, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoRRectF_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoRRectF_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoRRectF_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(rrect_f$.RRectF);
    return val;
  };

  TraitsTestService_EchoRRectF_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoRRectF_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(rrect_f$.RRectF, val.pass);
  };
  var kTraitsTestService_EchoSelectionBound_Name = 1884410484;
  var kTraitsTestService_EchoTransform_Name = 1120651378;
  var kTraitsTestService_EchoGpuMemoryBufferHandle_Name = 927279594;
  var kTraitsTestService_EchoRRectF_Name = 1729487730;

  function TraitsTestServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TraitsTestService,
                                                   handleOrPtrInfo);
  }

  function TraitsTestServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TraitsTestService, associatedInterfacePtrInfo);
  }

  TraitsTestServiceAssociatedPtr.prototype =
      Object.create(TraitsTestServicePtr.prototype);
  TraitsTestServiceAssociatedPtr.prototype.constructor =
      TraitsTestServiceAssociatedPtr;

  function TraitsTestServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  TraitsTestServicePtr.prototype.echoSelectionBound = function() {
    return TraitsTestServiceProxy.prototype.echoSelectionBound
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoSelectionBound = function(s) {
    var params_ = new TraitsTestService_EchoSelectionBound_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoSelectionBound_Name,
          codec.align(TraitsTestService_EchoSelectionBound_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoSelectionBound_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoSelectionBound_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoTransform = function() {
    return TraitsTestServiceProxy.prototype.echoTransform
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoTransform = function(t) {
    var params_ = new TraitsTestService_EchoTransform_Params();
    params_.t = t;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoTransform_Name,
          codec.align(TraitsTestService_EchoTransform_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoTransform_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoTransform_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoGpuMemoryBufferHandle = function() {
    return TraitsTestServiceProxy.prototype.echoGpuMemoryBufferHandle
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoGpuMemoryBufferHandle = function(g) {
    var params_ = new TraitsTestService_EchoGpuMemoryBufferHandle_Params();
    params_.g = g;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoGpuMemoryBufferHandle_Name,
          codec.align(TraitsTestService_EchoGpuMemoryBufferHandle_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoGpuMemoryBufferHandle_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoRRectF = function() {
    return TraitsTestServiceProxy.prototype.echoRRectF
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoRRectF = function(t) {
    var params_ = new TraitsTestService_EchoRRectF_Params();
    params_.t = t;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoRRectF_Name,
          codec.align(TraitsTestService_EchoRRectF_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoRRectF_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoRRectF_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TraitsTestServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  TraitsTestServiceStub.prototype.echoSelectionBound = function(s) {
    return this.delegate_ && this.delegate_.echoSelectionBound && this.delegate_.echoSelectionBound(s);
  }
  TraitsTestServiceStub.prototype.echoTransform = function(t) {
    return this.delegate_ && this.delegate_.echoTransform && this.delegate_.echoTransform(t);
  }
  TraitsTestServiceStub.prototype.echoGpuMemoryBufferHandle = function(g) {
    return this.delegate_ && this.delegate_.echoGpuMemoryBufferHandle && this.delegate_.echoGpuMemoryBufferHandle(g);
  }
  TraitsTestServiceStub.prototype.echoRRectF = function(t) {
    return this.delegate_ && this.delegate_.echoRRectF && this.delegate_.echoRRectF(t);
  }

  TraitsTestServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TraitsTestServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTraitsTestService_EchoSelectionBound_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoSelectionBound_Params);
      this.echoSelectionBound(params.s).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoSelectionBound_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoSelectionBound_Name,
            codec.align(TraitsTestService_EchoSelectionBound_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoSelectionBound_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoTransform_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoTransform_Params);
      this.echoTransform(params.t).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoTransform_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoTransform_Name,
            codec.align(TraitsTestService_EchoTransform_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoTransform_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoGpuMemoryBufferHandle_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoGpuMemoryBufferHandle_Params);
      this.echoGpuMemoryBufferHandle(params.g).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoGpuMemoryBufferHandle_Name,
            codec.align(TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoRRectF_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoRRectF_Params);
      this.echoRRectF(params.t).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoRRectF_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoRRectF_Name,
            codec.align(TraitsTestService_EchoRRectF_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoRRectF_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTraitsTestServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTraitsTestService_EchoSelectionBound_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoSelectionBound_Params;
      break;
      case kTraitsTestService_EchoTransform_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoTransform_Params;
      break;
      case kTraitsTestService_EchoGpuMemoryBufferHandle_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoGpuMemoryBufferHandle_Params;
      break;
      case kTraitsTestService_EchoRRectF_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoRRectF_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTraitsTestServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTraitsTestService_EchoSelectionBound_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoSelectionBound_ResponseParams;
        break;
      case kTraitsTestService_EchoTransform_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoTransform_ResponseParams;
        break;
      case kTraitsTestService_EchoGpuMemoryBufferHandle_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoGpuMemoryBufferHandle_ResponseParams;
        break;
      case kTraitsTestService_EchoRRectF_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoRRectF_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TraitsTestService = {
    name: 'gfx.mojom.TraitsTestService',
    kVersion: 0,
    ptrClass: TraitsTestServicePtr,
    proxyClass: TraitsTestServiceProxy,
    stubClass: TraitsTestServiceStub,
    validateRequest: validateTraitsTestServiceRequest,
    validateResponse: validateTraitsTestServiceResponse,
  };
  TraitsTestServiceStub.prototype.validator = validateTraitsTestServiceRequest;
  TraitsTestServiceProxy.prototype.validator = validateTraitsTestServiceResponse;
  exports.TraitsTestService = TraitsTestService;
  exports.TraitsTestServicePtr = TraitsTestServicePtr;
  exports.TraitsTestServiceAssociatedPtr = TraitsTestServiceAssociatedPtr;
})();