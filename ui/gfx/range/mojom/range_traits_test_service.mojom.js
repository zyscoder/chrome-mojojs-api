// ui/gfx/range/mojom/range_traits_test_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/gfx/range/mojom/range_traits_test_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('gfx.mojom');
  var range$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/range/mojom/range.mojom', 'range.mojom.js');
  }



  function RangeTraitsTestService_EchoRange_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RangeTraitsTestService_EchoRange_Params.prototype.initDefaults_ = function() {
    this.p = null;
  };
  RangeTraitsTestService_EchoRange_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RangeTraitsTestService_EchoRange_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RangeTraitsTestService_EchoRange_Params.p
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, range$.Range, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RangeTraitsTestService_EchoRange_Params.encodedSize = codec.kStructHeaderSize + 8;

  RangeTraitsTestService_EchoRange_Params.decode = function(decoder) {
    var packed;
    var val = new RangeTraitsTestService_EchoRange_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.p =
        decoder.decodeStructPointer(range$.Range);
    return val;
  };

  RangeTraitsTestService_EchoRange_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RangeTraitsTestService_EchoRange_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(range$.Range, val.p);
  };
  function RangeTraitsTestService_EchoRange_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RangeTraitsTestService_EchoRange_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  RangeTraitsTestService_EchoRange_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RangeTraitsTestService_EchoRange_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RangeTraitsTestService_EchoRange_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, range$.Range, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RangeTraitsTestService_EchoRange_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  RangeTraitsTestService_EchoRange_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new RangeTraitsTestService_EchoRange_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(range$.Range);
    return val;
  };

  RangeTraitsTestService_EchoRange_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RangeTraitsTestService_EchoRange_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(range$.Range, val.pass);
  };
  function RangeTraitsTestService_EchoRangeF_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RangeTraitsTestService_EchoRangeF_Params.prototype.initDefaults_ = function() {
    this.p = null;
  };
  RangeTraitsTestService_EchoRangeF_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RangeTraitsTestService_EchoRangeF_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RangeTraitsTestService_EchoRangeF_Params.p
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, range$.RangeF, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RangeTraitsTestService_EchoRangeF_Params.encodedSize = codec.kStructHeaderSize + 8;

  RangeTraitsTestService_EchoRangeF_Params.decode = function(decoder) {
    var packed;
    var val = new RangeTraitsTestService_EchoRangeF_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.p =
        decoder.decodeStructPointer(range$.RangeF);
    return val;
  };

  RangeTraitsTestService_EchoRangeF_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RangeTraitsTestService_EchoRangeF_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(range$.RangeF, val.p);
  };
  function RangeTraitsTestService_EchoRangeF_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RangeTraitsTestService_EchoRangeF_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  RangeTraitsTestService_EchoRangeF_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RangeTraitsTestService_EchoRangeF_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RangeTraitsTestService_EchoRangeF_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, range$.RangeF, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RangeTraitsTestService_EchoRangeF_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  RangeTraitsTestService_EchoRangeF_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new RangeTraitsTestService_EchoRangeF_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(range$.RangeF);
    return val;
  };

  RangeTraitsTestService_EchoRangeF_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RangeTraitsTestService_EchoRangeF_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(range$.RangeF, val.pass);
  };
  var kRangeTraitsTestService_EchoRange_Name = 1384699051;
  var kRangeTraitsTestService_EchoRangeF_Name = 1619419631;

  function RangeTraitsTestServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(RangeTraitsTestService,
                                                   handleOrPtrInfo);
  }

  function RangeTraitsTestServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        RangeTraitsTestService, associatedInterfacePtrInfo);
  }

  RangeTraitsTestServiceAssociatedPtr.prototype =
      Object.create(RangeTraitsTestServicePtr.prototype);
  RangeTraitsTestServiceAssociatedPtr.prototype.constructor =
      RangeTraitsTestServiceAssociatedPtr;

  function RangeTraitsTestServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  RangeTraitsTestServicePtr.prototype.echoRange = function() {
    return RangeTraitsTestServiceProxy.prototype.echoRange
        .apply(this.ptr.getProxy(), arguments);
  };

  RangeTraitsTestServiceProxy.prototype.echoRange = function(p) {
    var params_ = new RangeTraitsTestService_EchoRange_Params();
    params_.p = p;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kRangeTraitsTestService_EchoRange_Name,
          codec.align(RangeTraitsTestService_EchoRange_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(RangeTraitsTestService_EchoRange_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(RangeTraitsTestService_EchoRange_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  RangeTraitsTestServicePtr.prototype.echoRangeF = function() {
    return RangeTraitsTestServiceProxy.prototype.echoRangeF
        .apply(this.ptr.getProxy(), arguments);
  };

  RangeTraitsTestServiceProxy.prototype.echoRangeF = function(p) {
    var params_ = new RangeTraitsTestService_EchoRangeF_Params();
    params_.p = p;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kRangeTraitsTestService_EchoRangeF_Name,
          codec.align(RangeTraitsTestService_EchoRangeF_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(RangeTraitsTestService_EchoRangeF_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(RangeTraitsTestService_EchoRangeF_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function RangeTraitsTestServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  RangeTraitsTestServiceStub.prototype.echoRange = function(p) {
    return this.delegate_ && this.delegate_.echoRange && this.delegate_.echoRange(p);
  }
  RangeTraitsTestServiceStub.prototype.echoRangeF = function(p) {
    return this.delegate_ && this.delegate_.echoRangeF && this.delegate_.echoRangeF(p);
  }

  RangeTraitsTestServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  RangeTraitsTestServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRangeTraitsTestService_EchoRange_Name:
      var params = reader.decodeStruct(RangeTraitsTestService_EchoRange_Params);
      this.echoRange(params.p).then(function(response) {
        var responseParams =
            new RangeTraitsTestService_EchoRange_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kRangeTraitsTestService_EchoRange_Name,
            codec.align(RangeTraitsTestService_EchoRange_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(RangeTraitsTestService_EchoRange_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kRangeTraitsTestService_EchoRangeF_Name:
      var params = reader.decodeStruct(RangeTraitsTestService_EchoRangeF_Params);
      this.echoRangeF(params.p).then(function(response) {
        var responseParams =
            new RangeTraitsTestService_EchoRangeF_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kRangeTraitsTestService_EchoRangeF_Name,
            codec.align(RangeTraitsTestService_EchoRangeF_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(RangeTraitsTestService_EchoRangeF_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateRangeTraitsTestServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kRangeTraitsTestService_EchoRange_Name:
        if (message.expectsResponse())
          paramsClass = RangeTraitsTestService_EchoRange_Params;
      break;
      case kRangeTraitsTestService_EchoRangeF_Name:
        if (message.expectsResponse())
          paramsClass = RangeTraitsTestService_EchoRangeF_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateRangeTraitsTestServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kRangeTraitsTestService_EchoRange_Name:
        if (message.isResponse())
          paramsClass = RangeTraitsTestService_EchoRange_ResponseParams;
        break;
      case kRangeTraitsTestService_EchoRangeF_Name:
        if (message.isResponse())
          paramsClass = RangeTraitsTestService_EchoRangeF_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var RangeTraitsTestService = {
    name: 'gfx.mojom.RangeTraitsTestService',
    kVersion: 0,
    ptrClass: RangeTraitsTestServicePtr,
    proxyClass: RangeTraitsTestServiceProxy,
    stubClass: RangeTraitsTestServiceStub,
    validateRequest: validateRangeTraitsTestServiceRequest,
    validateResponse: validateRangeTraitsTestServiceResponse,
  };
  RangeTraitsTestServiceStub.prototype.validator = validateRangeTraitsTestServiceRequest;
  RangeTraitsTestServiceProxy.prototype.validator = validateRangeTraitsTestServiceResponse;
  exports.RangeTraitsTestService = RangeTraitsTestService;
  exports.RangeTraitsTestServicePtr = RangeTraitsTestServicePtr;
  exports.RangeTraitsTestServiceAssociatedPtr = RangeTraitsTestServiceAssociatedPtr;
})();