// ui/base/ime/mojom/ime_mojom_traits_test.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/base/ime/mojom/ime_mojom_traits_test.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('ui.mojom');
  var ime_types$ =
      mojo.internal.exposeNamespace('ui.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/base/ime/mojom/ime_types.mojom', 'ime_types.mojom.js');
  }



  function IMEStructTraitsTest_EchoTextInputType_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IMEStructTraitsTest_EchoTextInputType_Params.prototype.initDefaults_ = function() {
    this.in = 0;
  };
  IMEStructTraitsTest_EchoTextInputType_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IMEStructTraitsTest_EchoTextInputType_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IMEStructTraitsTest_EchoTextInputType_Params.in
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ime_types$.TextInputType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IMEStructTraitsTest_EchoTextInputType_Params.encodedSize = codec.kStructHeaderSize + 8;

  IMEStructTraitsTest_EchoTextInputType_Params.decode = function(decoder) {
    var packed;
    var val = new IMEStructTraitsTest_EchoTextInputType_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.in =
        decoder.decodeStruct(new codec.Enum(ime_types$.TextInputType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IMEStructTraitsTest_EchoTextInputType_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IMEStructTraitsTest_EchoTextInputType_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.in);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function IMEStructTraitsTest_EchoTextInputType_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IMEStructTraitsTest_EchoTextInputType_ResponseParams.prototype.initDefaults_ = function() {
    this.out = 0;
  };
  IMEStructTraitsTest_EchoTextInputType_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IMEStructTraitsTest_EchoTextInputType_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IMEStructTraitsTest_EchoTextInputType_ResponseParams.out
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ime_types$.TextInputType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IMEStructTraitsTest_EchoTextInputType_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  IMEStructTraitsTest_EchoTextInputType_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new IMEStructTraitsTest_EchoTextInputType_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.out =
        decoder.decodeStruct(new codec.Enum(ime_types$.TextInputType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IMEStructTraitsTest_EchoTextInputType_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IMEStructTraitsTest_EchoTextInputType_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.out);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kIMEStructTraitsTest_EchoTextInputType_Name = 1433343827;

  function IMEStructTraitsTestPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(IMEStructTraitsTest,
                                                   handleOrPtrInfo);
  }

  function IMEStructTraitsTestAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        IMEStructTraitsTest, associatedInterfacePtrInfo);
  }

  IMEStructTraitsTestAssociatedPtr.prototype =
      Object.create(IMEStructTraitsTestPtr.prototype);
  IMEStructTraitsTestAssociatedPtr.prototype.constructor =
      IMEStructTraitsTestAssociatedPtr;

  function IMEStructTraitsTestProxy(receiver) {
    this.receiver_ = receiver;
  }
  IMEStructTraitsTestPtr.prototype.echoTextInputType = function() {
    return IMEStructTraitsTestProxy.prototype.echoTextInputType
        .apply(this.ptr.getProxy(), arguments);
  };

  IMEStructTraitsTestProxy.prototype.echoTextInputType = function(in_) {
    var params_ = new IMEStructTraitsTest_EchoTextInputType_Params();
    params_.in = in_;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kIMEStructTraitsTest_EchoTextInputType_Name,
          codec.align(IMEStructTraitsTest_EchoTextInputType_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(IMEStructTraitsTest_EchoTextInputType_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(IMEStructTraitsTest_EchoTextInputType_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function IMEStructTraitsTestStub(delegate) {
    this.delegate_ = delegate;
  }
  IMEStructTraitsTestStub.prototype.echoTextInputType = function(in_) {
    return this.delegate_ && this.delegate_.echoTextInputType && this.delegate_.echoTextInputType(in_);
  }

  IMEStructTraitsTestStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  IMEStructTraitsTestStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kIMEStructTraitsTest_EchoTextInputType_Name:
      var params = reader.decodeStruct(IMEStructTraitsTest_EchoTextInputType_Params);
      this.echoTextInputType(params.in).then(function(response) {
        var responseParams =
            new IMEStructTraitsTest_EchoTextInputType_ResponseParams();
        responseParams.out = response.out;
        var builder = new codec.MessageV1Builder(
            kIMEStructTraitsTest_EchoTextInputType_Name,
            codec.align(IMEStructTraitsTest_EchoTextInputType_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(IMEStructTraitsTest_EchoTextInputType_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateIMEStructTraitsTestRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kIMEStructTraitsTest_EchoTextInputType_Name:
        if (message.expectsResponse())
          paramsClass = IMEStructTraitsTest_EchoTextInputType_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateIMEStructTraitsTestResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kIMEStructTraitsTest_EchoTextInputType_Name:
        if (message.isResponse())
          paramsClass = IMEStructTraitsTest_EchoTextInputType_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var IMEStructTraitsTest = {
    name: 'ui.mojom.IMEStructTraitsTest',
    kVersion: 0,
    ptrClass: IMEStructTraitsTestPtr,
    proxyClass: IMEStructTraitsTestProxy,
    stubClass: IMEStructTraitsTestStub,
    validateRequest: validateIMEStructTraitsTestRequest,
    validateResponse: validateIMEStructTraitsTestResponse,
  };
  IMEStructTraitsTestStub.prototype.validator = validateIMEStructTraitsTestRequest;
  IMEStructTraitsTestProxy.prototype.validator = validateIMEStructTraitsTestResponse;
  exports.IMEStructTraitsTest = IMEStructTraitsTest;
  exports.IMEStructTraitsTestPtr = IMEStructTraitsTestPtr;
  exports.IMEStructTraitsTestAssociatedPtr = IMEStructTraitsTestAssociatedPtr;
})();