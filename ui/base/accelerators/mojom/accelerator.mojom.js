// ui/base/accelerators/mojom/accelerator.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'ui/base/accelerators/mojom/accelerator.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('ui.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var event_constants$ =
      mojo.internal.exposeNamespace('ui.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/events/mojom/event_constants.mojom', '../../../events/mojom/event_constants.mojom.js');
  }
  var keyboard_codes$ =
      mojo.internal.exposeNamespace('ui.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/events/mojom/keyboard_codes.mojom', '../../../events/mojom/keyboard_codes.mojom.js');
  }


  var AcceleratorKeyState = {};
  AcceleratorKeyState.PRESSED = 0;
  AcceleratorKeyState.RELEASED = 1;
  AcceleratorKeyState.MIN_VALUE = 0;
  AcceleratorKeyState.MAX_VALUE = 1;

  AcceleratorKeyState.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  AcceleratorKeyState.toKnownEnumValue = function(value) {
    return value;
  };

  AcceleratorKeyState.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function Accelerator(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Accelerator.prototype.initDefaults_ = function() {
    this.keyCode = 0;
    this.keyState = 0;
    this.modifiers = 0;
    this.timeStamp = null;
  };
  Accelerator.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Accelerator.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Accelerator.keyState
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, AcceleratorKeyState);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Accelerator.timeStamp
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Accelerator.encodedSize = codec.kStructHeaderSize + 24;

  Accelerator.decode = function(decoder) {
    var packed;
    var val = new Accelerator();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.keyCode =
        decoder.decodeStruct(codec.Int32);
    val.keyState =
        decoder.decodeStruct(new codec.Enum(AcceleratorKeyState));
    val.modifiers =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.timeStamp =
        decoder.decodeStructPointer(time$.TimeTicks);
    return val;
  };

  Accelerator.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Accelerator.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.keyCode);
    encoder.encodeStruct(codec.Int32, val.keyState);
    encoder.encodeStruct(codec.Int32, val.modifiers);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(time$.TimeTicks, val.timeStamp);
  };
  exports.AcceleratorKeyState = AcceleratorKeyState;
  exports.Accelerator = Accelerator;
})();