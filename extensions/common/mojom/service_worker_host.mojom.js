// extensions/common/mojom/service_worker_host.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'extensions/common/mojom/service_worker_host.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('extensions.mojom');
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var uuid$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/uuid.mojom', '../../../mojo/public/mojom/base/uuid.mojom.js');
  }
  var event_dispatcher$ =
      mojo.internal.exposeNamespace('extensions.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'extensions/common/mojom/event_dispatcher.mojom', 'event_dispatcher.mojom.js');
  }
  var frame$ =
      mojo.internal.exposeNamespace('extensions.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'extensions/common/mojom/frame.mojom', 'frame.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../url/mojom/url.mojom.js');
  }



  function ServiceWorkerHost_DidInitializeServiceWorkerContext_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_DidInitializeServiceWorkerContext_Params.prototype.initDefaults_ = function() {
    this.extensionId = null;
    this.serviceWorkerVersionId = 0;
    this.workerThreadId = 0;
    this.eventDispatcher = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  ServiceWorkerHost_DidInitializeServiceWorkerContext_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_DidInitializeServiceWorkerContext_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_DidInitializeServiceWorkerContext_Params.extensionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;




    // validate ServiceWorkerHost_DidInitializeServiceWorkerContext_Params.eventDispatcher
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 20, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_DidInitializeServiceWorkerContext_Params.encodedSize = codec.kStructHeaderSize + 32;

  ServiceWorkerHost_DidInitializeServiceWorkerContext_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_DidInitializeServiceWorkerContext_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.extensionId =
        decoder.decodeStruct(codec.String);
    val.serviceWorkerVersionId =
        decoder.decodeStruct(codec.Int64);
    val.workerThreadId =
        decoder.decodeStruct(codec.Int32);
    val.eventDispatcher =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorkerHost_DidInitializeServiceWorkerContext_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_DidInitializeServiceWorkerContext_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.extensionId);
    encoder.encodeStruct(codec.Int64, val.serviceWorkerVersionId);
    encoder.encodeStruct(codec.Int32, val.workerThreadId);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.eventDispatcher);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorkerHost_DidStartServiceWorkerContext_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_DidStartServiceWorkerContext_Params.prototype.initDefaults_ = function() {
    this.extensionId = null;
    this.activationToken = null;
    this.serviceWorkerScope = null;
    this.serviceWorkerVersionId = 0;
    this.workerThreadId = 0;
  };
  ServiceWorkerHost_DidStartServiceWorkerContext_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_DidStartServiceWorkerContext_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_DidStartServiceWorkerContext_Params.extensionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_DidStartServiceWorkerContext_Params.activationToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_DidStartServiceWorkerContext_Params.serviceWorkerScope
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ServiceWorkerHost_DidStartServiceWorkerContext_Params.encodedSize = codec.kStructHeaderSize + 40;

  ServiceWorkerHost_DidStartServiceWorkerContext_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_DidStartServiceWorkerContext_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.extensionId =
        decoder.decodeStruct(codec.String);
    val.activationToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.serviceWorkerScope =
        decoder.decodeStructPointer(url$.Url);
    val.serviceWorkerVersionId =
        decoder.decodeStruct(codec.Int64);
    val.workerThreadId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorkerHost_DidStartServiceWorkerContext_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_DidStartServiceWorkerContext_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.extensionId);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.activationToken);
    encoder.encodeStructPointer(url$.Url, val.serviceWorkerScope);
    encoder.encodeStruct(codec.Int64, val.serviceWorkerVersionId);
    encoder.encodeStruct(codec.Int32, val.workerThreadId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorkerHost_DidStopServiceWorkerContext_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_DidStopServiceWorkerContext_Params.prototype.initDefaults_ = function() {
    this.extensionId = null;
    this.activationToken = null;
    this.serviceWorkerScope = null;
    this.serviceWorkerVersionId = 0;
    this.workerThreadId = 0;
  };
  ServiceWorkerHost_DidStopServiceWorkerContext_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_DidStopServiceWorkerContext_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_DidStopServiceWorkerContext_Params.extensionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_DidStopServiceWorkerContext_Params.activationToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_DidStopServiceWorkerContext_Params.serviceWorkerScope
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ServiceWorkerHost_DidStopServiceWorkerContext_Params.encodedSize = codec.kStructHeaderSize + 40;

  ServiceWorkerHost_DidStopServiceWorkerContext_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_DidStopServiceWorkerContext_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.extensionId =
        decoder.decodeStruct(codec.String);
    val.activationToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.serviceWorkerScope =
        decoder.decodeStructPointer(url$.Url);
    val.serviceWorkerVersionId =
        decoder.decodeStruct(codec.Int64);
    val.workerThreadId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorkerHost_DidStopServiceWorkerContext_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_DidStopServiceWorkerContext_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.extensionId);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.activationToken);
    encoder.encodeStructPointer(url$.Url, val.serviceWorkerScope);
    encoder.encodeStruct(codec.Int64, val.serviceWorkerVersionId);
    encoder.encodeStruct(codec.Int32, val.workerThreadId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorkerHost_RequestWorker_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_RequestWorker_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  ServiceWorkerHost_RequestWorker_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_RequestWorker_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_RequestWorker_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, frame$.RequestParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_RequestWorker_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_RequestWorker_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_RequestWorker_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(frame$.RequestParams);
    return val;
  };

  ServiceWorkerHost_RequestWorker_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_RequestWorker_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(frame$.RequestParams, val.params);
  };
  function ServiceWorkerHost_WorkerResponseAck_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_WorkerResponseAck_Params.prototype.initDefaults_ = function() {
    this.requestUuid = null;
  };
  ServiceWorkerHost_WorkerResponseAck_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_WorkerResponseAck_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_WorkerResponseAck_Params.requestUuid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, uuid$.Uuid, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_WorkerResponseAck_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_WorkerResponseAck_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_WorkerResponseAck_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.requestUuid =
        decoder.decodeStructPointer(uuid$.Uuid);
    return val;
  };

  ServiceWorkerHost_WorkerResponseAck_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_WorkerResponseAck_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(uuid$.Uuid, val.requestUuid);
  };
  var kServiceWorkerHost_DidInitializeServiceWorkerContext_Name = 1688870336;
  var kServiceWorkerHost_DidStartServiceWorkerContext_Name = 1555662715;
  var kServiceWorkerHost_DidStopServiceWorkerContext_Name = 2134943875;
  var kServiceWorkerHost_RequestWorker_Name = 1269080370;
  var kServiceWorkerHost_WorkerResponseAck_Name = 18118702;

  function ServiceWorkerHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ServiceWorkerHost,
                                                   handleOrPtrInfo);
  }

  function ServiceWorkerHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ServiceWorkerHost, associatedInterfacePtrInfo);
  }

  ServiceWorkerHostAssociatedPtr.prototype =
      Object.create(ServiceWorkerHostPtr.prototype);
  ServiceWorkerHostAssociatedPtr.prototype.constructor =
      ServiceWorkerHostAssociatedPtr;

  function ServiceWorkerHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  ServiceWorkerHostPtr.prototype.didInitializeServiceWorkerContext = function() {
    return ServiceWorkerHostProxy.prototype.didInitializeServiceWorkerContext
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.didInitializeServiceWorkerContext = function(extensionId, serviceWorkerVersionId, workerThreadId, eventDispatcher) {
    var params_ = new ServiceWorkerHost_DidInitializeServiceWorkerContext_Params();
    params_.extensionId = extensionId;
    params_.serviceWorkerVersionId = serviceWorkerVersionId;
    params_.workerThreadId = workerThreadId;
    params_.eventDispatcher = eventDispatcher;
    var builder = new codec.MessageV2Builder(
        kServiceWorkerHost_DidInitializeServiceWorkerContext_Name,
        codec.align(ServiceWorkerHost_DidInitializeServiceWorkerContext_Params.encodedSize));
    builder.setPayload(ServiceWorkerHost_DidInitializeServiceWorkerContext_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerHostPtr.prototype.didStartServiceWorkerContext = function() {
    return ServiceWorkerHostProxy.prototype.didStartServiceWorkerContext
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.didStartServiceWorkerContext = function(extensionId, activationToken, serviceWorkerScope, serviceWorkerVersionId, workerThreadId) {
    var params_ = new ServiceWorkerHost_DidStartServiceWorkerContext_Params();
    params_.extensionId = extensionId;
    params_.activationToken = activationToken;
    params_.serviceWorkerScope = serviceWorkerScope;
    params_.serviceWorkerVersionId = serviceWorkerVersionId;
    params_.workerThreadId = workerThreadId;
    var builder = new codec.MessageV0Builder(
        kServiceWorkerHost_DidStartServiceWorkerContext_Name,
        codec.align(ServiceWorkerHost_DidStartServiceWorkerContext_Params.encodedSize));
    builder.encodeStruct(ServiceWorkerHost_DidStartServiceWorkerContext_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerHostPtr.prototype.didStopServiceWorkerContext = function() {
    return ServiceWorkerHostProxy.prototype.didStopServiceWorkerContext
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.didStopServiceWorkerContext = function(extensionId, activationToken, serviceWorkerScope, serviceWorkerVersionId, workerThreadId) {
    var params_ = new ServiceWorkerHost_DidStopServiceWorkerContext_Params();
    params_.extensionId = extensionId;
    params_.activationToken = activationToken;
    params_.serviceWorkerScope = serviceWorkerScope;
    params_.serviceWorkerVersionId = serviceWorkerVersionId;
    params_.workerThreadId = workerThreadId;
    var builder = new codec.MessageV0Builder(
        kServiceWorkerHost_DidStopServiceWorkerContext_Name,
        codec.align(ServiceWorkerHost_DidStopServiceWorkerContext_Params.encodedSize));
    builder.encodeStruct(ServiceWorkerHost_DidStopServiceWorkerContext_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerHostPtr.prototype.requestWorker = function() {
    return ServiceWorkerHostProxy.prototype.requestWorker
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.requestWorker = function(params) {
    var params_ = new ServiceWorkerHost_RequestWorker_Params();
    params_.params = params;
    var builder = new codec.MessageV0Builder(
        kServiceWorkerHost_RequestWorker_Name,
        codec.align(ServiceWorkerHost_RequestWorker_Params.encodedSize));
    builder.encodeStruct(ServiceWorkerHost_RequestWorker_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerHostPtr.prototype.workerResponseAck = function() {
    return ServiceWorkerHostProxy.prototype.workerResponseAck
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.workerResponseAck = function(requestUuid) {
    var params_ = new ServiceWorkerHost_WorkerResponseAck_Params();
    params_.requestUuid = requestUuid;
    var builder = new codec.MessageV0Builder(
        kServiceWorkerHost_WorkerResponseAck_Name,
        codec.align(ServiceWorkerHost_WorkerResponseAck_Params.encodedSize));
    builder.encodeStruct(ServiceWorkerHost_WorkerResponseAck_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ServiceWorkerHostStub(delegate) {
    this.delegate_ = delegate;
  }
  ServiceWorkerHostStub.prototype.didInitializeServiceWorkerContext = function(extensionId, serviceWorkerVersionId, workerThreadId, eventDispatcher) {
    return this.delegate_ && this.delegate_.didInitializeServiceWorkerContext && this.delegate_.didInitializeServiceWorkerContext(extensionId, serviceWorkerVersionId, workerThreadId, eventDispatcher);
  }
  ServiceWorkerHostStub.prototype.didStartServiceWorkerContext = function(extensionId, activationToken, serviceWorkerScope, serviceWorkerVersionId, workerThreadId) {
    return this.delegate_ && this.delegate_.didStartServiceWorkerContext && this.delegate_.didStartServiceWorkerContext(extensionId, activationToken, serviceWorkerScope, serviceWorkerVersionId, workerThreadId);
  }
  ServiceWorkerHostStub.prototype.didStopServiceWorkerContext = function(extensionId, activationToken, serviceWorkerScope, serviceWorkerVersionId, workerThreadId) {
    return this.delegate_ && this.delegate_.didStopServiceWorkerContext && this.delegate_.didStopServiceWorkerContext(extensionId, activationToken, serviceWorkerScope, serviceWorkerVersionId, workerThreadId);
  }
  ServiceWorkerHostStub.prototype.requestWorker = function(params) {
    return this.delegate_ && this.delegate_.requestWorker && this.delegate_.requestWorker(params);
  }
  ServiceWorkerHostStub.prototype.workerResponseAck = function(requestUuid) {
    return this.delegate_ && this.delegate_.workerResponseAck && this.delegate_.workerResponseAck(requestUuid);
  }

  ServiceWorkerHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kServiceWorkerHost_DidInitializeServiceWorkerContext_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_DidInitializeServiceWorkerContext_Params);
      this.didInitializeServiceWorkerContext(params.extensionId, params.serviceWorkerVersionId, params.workerThreadId, params.eventDispatcher);
      return true;
    case kServiceWorkerHost_DidStartServiceWorkerContext_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_DidStartServiceWorkerContext_Params);
      this.didStartServiceWorkerContext(params.extensionId, params.activationToken, params.serviceWorkerScope, params.serviceWorkerVersionId, params.workerThreadId);
      return true;
    case kServiceWorkerHost_DidStopServiceWorkerContext_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_DidStopServiceWorkerContext_Params);
      this.didStopServiceWorkerContext(params.extensionId, params.activationToken, params.serviceWorkerScope, params.serviceWorkerVersionId, params.workerThreadId);
      return true;
    case kServiceWorkerHost_RequestWorker_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_RequestWorker_Params);
      this.requestWorker(params.params);
      return true;
    case kServiceWorkerHost_WorkerResponseAck_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_WorkerResponseAck_Params);
      this.workerResponseAck(params.requestUuid);
      return true;
    default:
      return false;
    }
  };

  ServiceWorkerHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateServiceWorkerHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kServiceWorkerHost_DidInitializeServiceWorkerContext_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorkerHost_DidInitializeServiceWorkerContext_Params;
      break;
      case kServiceWorkerHost_DidStartServiceWorkerContext_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorkerHost_DidStartServiceWorkerContext_Params;
      break;
      case kServiceWorkerHost_DidStopServiceWorkerContext_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorkerHost_DidStopServiceWorkerContext_Params;
      break;
      case kServiceWorkerHost_RequestWorker_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorkerHost_RequestWorker_Params;
      break;
      case kServiceWorkerHost_WorkerResponseAck_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorkerHost_WorkerResponseAck_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateServiceWorkerHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ServiceWorkerHost = {
    name: 'extensions.mojom.ServiceWorkerHost',
    kVersion: 0,
    ptrClass: ServiceWorkerHostPtr,
    proxyClass: ServiceWorkerHostProxy,
    stubClass: ServiceWorkerHostStub,
    validateRequest: validateServiceWorkerHostRequest,
    validateResponse: null,
  };
  ServiceWorkerHostStub.prototype.validator = validateServiceWorkerHostRequest;
  ServiceWorkerHostProxy.prototype.validator = null;
  exports.ServiceWorkerHost = ServiceWorkerHost;
  exports.ServiceWorkerHostPtr = ServiceWorkerHostPtr;
  exports.ServiceWorkerHostAssociatedPtr = ServiceWorkerHostAssociatedPtr;
})();