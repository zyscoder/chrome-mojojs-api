// gpu/ipc/common/traits_test_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'gpu/ipc/common/traits_test_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('gpu.mojom');
  var dx_diag_node$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/dx_diag_node.mojom', 'dx_diag_node.mojom.js');
  }
  var gpu_info$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/gpu_info.mojom', 'gpu_info.mojom.js');
  }
  var gpu_preferences$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/gpu_preferences.mojom', 'gpu_preferences.mojom.js');
  }
  var mailbox$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/mailbox.mojom', 'mailbox.mojom.js');
  }
  var mailbox_holder$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/mailbox_holder.mojom', 'mailbox_holder.mojom.js');
  }
  var sync_token$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/sync_token.mojom', 'sync_token.mojom.js');
  }



  function TraitsTestService_EchoDxDiagNode_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoDxDiagNode_Params.prototype.initDefaults_ = function() {
    this.d = null;
  };
  TraitsTestService_EchoDxDiagNode_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoDxDiagNode_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoDxDiagNode_Params.d
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, dx_diag_node$.DxDiagNode, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoDxDiagNode_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoDxDiagNode_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoDxDiagNode_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.d =
        decoder.decodeStructPointer(dx_diag_node$.DxDiagNode);
    return val;
  };

  TraitsTestService_EchoDxDiagNode_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoDxDiagNode_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(dx_diag_node$.DxDiagNode, val.d);
  };
  function TraitsTestService_EchoDxDiagNode_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoDxDiagNode_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoDxDiagNode_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoDxDiagNode_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoDxDiagNode_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, dx_diag_node$.DxDiagNode, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoDxDiagNode_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoDxDiagNode_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoDxDiagNode_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(dx_diag_node$.DxDiagNode);
    return val;
  };

  TraitsTestService_EchoDxDiagNode_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoDxDiagNode_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(dx_diag_node$.DxDiagNode, val.pass);
  };
  function TraitsTestService_EchoGpuDevice_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoGpuDevice_Params.prototype.initDefaults_ = function() {
    this.g = null;
  };
  TraitsTestService_EchoGpuDevice_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoGpuDevice_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoGpuDevice_Params.g
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_info$.GpuDevice, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoGpuDevice_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoGpuDevice_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoGpuDevice_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.g =
        decoder.decodeStructPointer(gpu_info$.GpuDevice);
    return val;
  };

  TraitsTestService_EchoGpuDevice_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoGpuDevice_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_info$.GpuDevice, val.g);
  };
  function TraitsTestService_EchoGpuDevice_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoGpuDevice_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoGpuDevice_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoGpuDevice_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoGpuDevice_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_info$.GpuDevice, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoGpuDevice_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoGpuDevice_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoGpuDevice_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(gpu_info$.GpuDevice);
    return val;
  };

  TraitsTestService_EchoGpuDevice_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoGpuDevice_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_info$.GpuDevice, val.pass);
  };
  function TraitsTestService_EchoGpuInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoGpuInfo_Params.prototype.initDefaults_ = function() {
    this.g = null;
  };
  TraitsTestService_EchoGpuInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoGpuInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoGpuInfo_Params.g
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_info$.GpuInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoGpuInfo_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoGpuInfo_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoGpuInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.g =
        decoder.decodeStructPointer(gpu_info$.GpuInfo);
    return val;
  };

  TraitsTestService_EchoGpuInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoGpuInfo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_info$.GpuInfo, val.g);
  };
  function TraitsTestService_EchoGpuInfo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoGpuInfo_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoGpuInfo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoGpuInfo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoGpuInfo_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_info$.GpuInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoGpuInfo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoGpuInfo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoGpuInfo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(gpu_info$.GpuInfo);
    return val;
  };

  TraitsTestService_EchoGpuInfo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoGpuInfo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_info$.GpuInfo, val.pass);
  };
  function TraitsTestService_EchoMailbox_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoMailbox_Params.prototype.initDefaults_ = function() {
    this.m = null;
  };
  TraitsTestService_EchoMailbox_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoMailbox_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoMailbox_Params.m
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, mailbox$.Mailbox, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoMailbox_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoMailbox_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoMailbox_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.m =
        decoder.decodeStructPointer(mailbox$.Mailbox);
    return val;
  };

  TraitsTestService_EchoMailbox_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoMailbox_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(mailbox$.Mailbox, val.m);
  };
  function TraitsTestService_EchoMailbox_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoMailbox_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoMailbox_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoMailbox_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoMailbox_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, mailbox$.Mailbox, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoMailbox_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoMailbox_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoMailbox_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(mailbox$.Mailbox);
    return val;
  };

  TraitsTestService_EchoMailbox_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoMailbox_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(mailbox$.Mailbox, val.pass);
  };
  function TraitsTestService_EchoMailboxHolder_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoMailboxHolder_Params.prototype.initDefaults_ = function() {
    this.m = null;
  };
  TraitsTestService_EchoMailboxHolder_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoMailboxHolder_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoMailboxHolder_Params.m
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, mailbox_holder$.MailboxHolder, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoMailboxHolder_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoMailboxHolder_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoMailboxHolder_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.m =
        decoder.decodeStructPointer(mailbox_holder$.MailboxHolder);
    return val;
  };

  TraitsTestService_EchoMailboxHolder_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoMailboxHolder_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(mailbox_holder$.MailboxHolder, val.m);
  };
  function TraitsTestService_EchoMailboxHolder_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoMailboxHolder_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoMailboxHolder_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoMailboxHolder_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoMailboxHolder_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, mailbox_holder$.MailboxHolder, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoMailboxHolder_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoMailboxHolder_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoMailboxHolder_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(mailbox_holder$.MailboxHolder);
    return val;
  };

  TraitsTestService_EchoMailboxHolder_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoMailboxHolder_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(mailbox_holder$.MailboxHolder, val.pass);
  };
  function TraitsTestService_EchoSyncToken_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoSyncToken_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  TraitsTestService_EchoSyncToken_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoSyncToken_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoSyncToken_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, sync_token$.SyncToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoSyncToken_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoSyncToken_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoSyncToken_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(sync_token$.SyncToken);
    return val;
  };

  TraitsTestService_EchoSyncToken_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoSyncToken_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(sync_token$.SyncToken, val.s);
  };
  function TraitsTestService_EchoSyncToken_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoSyncToken_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoSyncToken_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoSyncToken_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoSyncToken_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, sync_token$.SyncToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoSyncToken_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoSyncToken_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoSyncToken_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(sync_token$.SyncToken);
    return val;
  };

  TraitsTestService_EchoSyncToken_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoSyncToken_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(sync_token$.SyncToken, val.pass);
  };
  function TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params.prototype.initDefaults_ = function() {
    this.v = null;
  };
  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params.v
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_info$.VideoDecodeAcceleratorSupportedProfile, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.v =
        decoder.decodeStructPointer(gpu_info$.VideoDecodeAcceleratorSupportedProfile);
    return val;
  };

  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_info$.VideoDecodeAcceleratorSupportedProfile, val.v);
  };
  function TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_info$.VideoDecodeAcceleratorSupportedProfile, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(gpu_info$.VideoDecodeAcceleratorSupportedProfile);
    return val;
  };

  TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_info$.VideoDecodeAcceleratorSupportedProfile, val.pass);
  };
  function TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params.prototype.initDefaults_ = function() {
    this.v = null;
  };
  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params.v
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_info$.VideoDecodeAcceleratorCapabilities, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.v =
        decoder.decodeStructPointer(gpu_info$.VideoDecodeAcceleratorCapabilities);
    return val;
  };

  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_info$.VideoDecodeAcceleratorCapabilities, val.v);
  };
  function TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_info$.VideoDecodeAcceleratorCapabilities, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(gpu_info$.VideoDecodeAcceleratorCapabilities);
    return val;
  };

  TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_info$.VideoDecodeAcceleratorCapabilities, val.pass);
  };
  function TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params.prototype.initDefaults_ = function() {
    this.v = null;
  };
  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params.v
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_info$.VideoEncodeAcceleratorSupportedProfile, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.v =
        decoder.decodeStructPointer(gpu_info$.VideoEncodeAcceleratorSupportedProfile);
    return val;
  };

  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_info$.VideoEncodeAcceleratorSupportedProfile, val.v);
  };
  function TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_info$.VideoEncodeAcceleratorSupportedProfile, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(gpu_info$.VideoEncodeAcceleratorSupportedProfile);
    return val;
  };

  TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_info$.VideoEncodeAcceleratorSupportedProfile, val.pass);
  };
  function TraitsTestService_EchoGpuPreferences_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoGpuPreferences_Params.prototype.initDefaults_ = function() {
    this.prefs = null;
  };
  TraitsTestService_EchoGpuPreferences_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoGpuPreferences_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoGpuPreferences_Params.prefs
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_preferences$.GpuPreferences, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoGpuPreferences_Params.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoGpuPreferences_Params.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoGpuPreferences_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.prefs =
        decoder.decodeStructPointer(gpu_preferences$.GpuPreferences);
    return val;
  };

  TraitsTestService_EchoGpuPreferences_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoGpuPreferences_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_preferences$.GpuPreferences, val.prefs);
  };
  function TraitsTestService_EchoGpuPreferences_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraitsTestService_EchoGpuPreferences_ResponseParams.prototype.initDefaults_ = function() {
    this.pass = null;
  };
  TraitsTestService_EchoGpuPreferences_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraitsTestService_EchoGpuPreferences_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraitsTestService_EchoGpuPreferences_ResponseParams.pass
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, gpu_preferences$.GpuPreferences, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TraitsTestService_EchoGpuPreferences_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TraitsTestService_EchoGpuPreferences_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TraitsTestService_EchoGpuPreferences_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pass =
        decoder.decodeStructPointer(gpu_preferences$.GpuPreferences);
    return val;
  };

  TraitsTestService_EchoGpuPreferences_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraitsTestService_EchoGpuPreferences_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(gpu_preferences$.GpuPreferences, val.pass);
  };
  var kTraitsTestService_EchoDxDiagNode_Name = 1884410484;
  var kTraitsTestService_EchoGpuDevice_Name = 1120651378;
  var kTraitsTestService_EchoGpuInfo_Name = 927279594;
  var kTraitsTestService_EchoMailbox_Name = 1729487730;
  var kTraitsTestService_EchoMailboxHolder_Name = 1542430552;
  var kTraitsTestService_EchoSyncToken_Name = 2127155761;
  var kTraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Name = 803285091;
  var kTraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Name = 1455590614;
  var kTraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Name = 1223805742;
  var kTraitsTestService_EchoGpuPreferences_Name = 1551229044;

  function TraitsTestServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TraitsTestService,
                                                   handleOrPtrInfo);
  }

  function TraitsTestServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TraitsTestService, associatedInterfacePtrInfo);
  }

  TraitsTestServiceAssociatedPtr.prototype =
      Object.create(TraitsTestServicePtr.prototype);
  TraitsTestServiceAssociatedPtr.prototype.constructor =
      TraitsTestServiceAssociatedPtr;

  function TraitsTestServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  TraitsTestServicePtr.prototype.echoDxDiagNode = function() {
    return TraitsTestServiceProxy.prototype.echoDxDiagNode
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoDxDiagNode = function(d) {
    var params_ = new TraitsTestService_EchoDxDiagNode_Params();
    params_.d = d;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoDxDiagNode_Name,
          codec.align(TraitsTestService_EchoDxDiagNode_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoDxDiagNode_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoDxDiagNode_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoGpuDevice = function() {
    return TraitsTestServiceProxy.prototype.echoGpuDevice
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoGpuDevice = function(g) {
    var params_ = new TraitsTestService_EchoGpuDevice_Params();
    params_.g = g;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoGpuDevice_Name,
          codec.align(TraitsTestService_EchoGpuDevice_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoGpuDevice_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoGpuDevice_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoGpuInfo = function() {
    return TraitsTestServiceProxy.prototype.echoGpuInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoGpuInfo = function(g) {
    var params_ = new TraitsTestService_EchoGpuInfo_Params();
    params_.g = g;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoGpuInfo_Name,
          codec.align(TraitsTestService_EchoGpuInfo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoGpuInfo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoGpuInfo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoMailbox = function() {
    return TraitsTestServiceProxy.prototype.echoMailbox
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoMailbox = function(m) {
    var params_ = new TraitsTestService_EchoMailbox_Params();
    params_.m = m;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoMailbox_Name,
          codec.align(TraitsTestService_EchoMailbox_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoMailbox_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoMailbox_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoMailboxHolder = function() {
    return TraitsTestServiceProxy.prototype.echoMailboxHolder
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoMailboxHolder = function(m) {
    var params_ = new TraitsTestService_EchoMailboxHolder_Params();
    params_.m = m;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoMailboxHolder_Name,
          codec.align(TraitsTestService_EchoMailboxHolder_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoMailboxHolder_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoMailboxHolder_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoSyncToken = function() {
    return TraitsTestServiceProxy.prototype.echoSyncToken
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoSyncToken = function(s) {
    var params_ = new TraitsTestService_EchoSyncToken_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoSyncToken_Name,
          codec.align(TraitsTestService_EchoSyncToken_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoSyncToken_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoSyncToken_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoVideoDecodeAcceleratorSupportedProfile = function() {
    return TraitsTestServiceProxy.prototype.echoVideoDecodeAcceleratorSupportedProfile
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoVideoDecodeAcceleratorSupportedProfile = function(v) {
    var params_ = new TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params();
    params_.v = v;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Name,
          codec.align(TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoVideoDecodeAcceleratorCapabilities = function() {
    return TraitsTestServiceProxy.prototype.echoVideoDecodeAcceleratorCapabilities
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoVideoDecodeAcceleratorCapabilities = function(v) {
    var params_ = new TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params();
    params_.v = v;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Name,
          codec.align(TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoVideoEncodeAcceleratorSupportedProfile = function() {
    return TraitsTestServiceProxy.prototype.echoVideoEncodeAcceleratorSupportedProfile
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoVideoEncodeAcceleratorSupportedProfile = function(v) {
    var params_ = new TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params();
    params_.v = v;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Name,
          codec.align(TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TraitsTestServicePtr.prototype.echoGpuPreferences = function() {
    return TraitsTestServiceProxy.prototype.echoGpuPreferences
        .apply(this.ptr.getProxy(), arguments);
  };

  TraitsTestServiceProxy.prototype.echoGpuPreferences = function(prefs) {
    var params_ = new TraitsTestService_EchoGpuPreferences_Params();
    params_.prefs = prefs;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTraitsTestService_EchoGpuPreferences_Name,
          codec.align(TraitsTestService_EchoGpuPreferences_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TraitsTestService_EchoGpuPreferences_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TraitsTestService_EchoGpuPreferences_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TraitsTestServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  TraitsTestServiceStub.prototype.echoDxDiagNode = function(d) {
    return this.delegate_ && this.delegate_.echoDxDiagNode && this.delegate_.echoDxDiagNode(d);
  }
  TraitsTestServiceStub.prototype.echoGpuDevice = function(g) {
    return this.delegate_ && this.delegate_.echoGpuDevice && this.delegate_.echoGpuDevice(g);
  }
  TraitsTestServiceStub.prototype.echoGpuInfo = function(g) {
    return this.delegate_ && this.delegate_.echoGpuInfo && this.delegate_.echoGpuInfo(g);
  }
  TraitsTestServiceStub.prototype.echoMailbox = function(m) {
    return this.delegate_ && this.delegate_.echoMailbox && this.delegate_.echoMailbox(m);
  }
  TraitsTestServiceStub.prototype.echoMailboxHolder = function(m) {
    return this.delegate_ && this.delegate_.echoMailboxHolder && this.delegate_.echoMailboxHolder(m);
  }
  TraitsTestServiceStub.prototype.echoSyncToken = function(s) {
    return this.delegate_ && this.delegate_.echoSyncToken && this.delegate_.echoSyncToken(s);
  }
  TraitsTestServiceStub.prototype.echoVideoDecodeAcceleratorSupportedProfile = function(v) {
    return this.delegate_ && this.delegate_.echoVideoDecodeAcceleratorSupportedProfile && this.delegate_.echoVideoDecodeAcceleratorSupportedProfile(v);
  }
  TraitsTestServiceStub.prototype.echoVideoDecodeAcceleratorCapabilities = function(v) {
    return this.delegate_ && this.delegate_.echoVideoDecodeAcceleratorCapabilities && this.delegate_.echoVideoDecodeAcceleratorCapabilities(v);
  }
  TraitsTestServiceStub.prototype.echoVideoEncodeAcceleratorSupportedProfile = function(v) {
    return this.delegate_ && this.delegate_.echoVideoEncodeAcceleratorSupportedProfile && this.delegate_.echoVideoEncodeAcceleratorSupportedProfile(v);
  }
  TraitsTestServiceStub.prototype.echoGpuPreferences = function(prefs) {
    return this.delegate_ && this.delegate_.echoGpuPreferences && this.delegate_.echoGpuPreferences(prefs);
  }

  TraitsTestServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TraitsTestServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTraitsTestService_EchoDxDiagNode_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoDxDiagNode_Params);
      this.echoDxDiagNode(params.d).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoDxDiagNode_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoDxDiagNode_Name,
            codec.align(TraitsTestService_EchoDxDiagNode_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoDxDiagNode_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoGpuDevice_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoGpuDevice_Params);
      this.echoGpuDevice(params.g).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoGpuDevice_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoGpuDevice_Name,
            codec.align(TraitsTestService_EchoGpuDevice_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoGpuDevice_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoGpuInfo_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoGpuInfo_Params);
      this.echoGpuInfo(params.g).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoGpuInfo_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoGpuInfo_Name,
            codec.align(TraitsTestService_EchoGpuInfo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoGpuInfo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoMailbox_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoMailbox_Params);
      this.echoMailbox(params.m).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoMailbox_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoMailbox_Name,
            codec.align(TraitsTestService_EchoMailbox_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoMailbox_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoMailboxHolder_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoMailboxHolder_Params);
      this.echoMailboxHolder(params.m).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoMailboxHolder_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoMailboxHolder_Name,
            codec.align(TraitsTestService_EchoMailboxHolder_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoMailboxHolder_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoSyncToken_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoSyncToken_Params);
      this.echoSyncToken(params.s).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoSyncToken_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoSyncToken_Name,
            codec.align(TraitsTestService_EchoSyncToken_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoSyncToken_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params);
      this.echoVideoDecodeAcceleratorSupportedProfile(params.v).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Name,
            codec.align(TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params);
      this.echoVideoDecodeAcceleratorCapabilities(params.v).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Name,
            codec.align(TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params);
      this.echoVideoEncodeAcceleratorSupportedProfile(params.v).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Name,
            codec.align(TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTraitsTestService_EchoGpuPreferences_Name:
      var params = reader.decodeStruct(TraitsTestService_EchoGpuPreferences_Params);
      this.echoGpuPreferences(params.prefs).then(function(response) {
        var responseParams =
            new TraitsTestService_EchoGpuPreferences_ResponseParams();
        responseParams.pass = response.pass;
        var builder = new codec.MessageV1Builder(
            kTraitsTestService_EchoGpuPreferences_Name,
            codec.align(TraitsTestService_EchoGpuPreferences_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TraitsTestService_EchoGpuPreferences_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTraitsTestServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTraitsTestService_EchoDxDiagNode_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoDxDiagNode_Params;
      break;
      case kTraitsTestService_EchoGpuDevice_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoGpuDevice_Params;
      break;
      case kTraitsTestService_EchoGpuInfo_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoGpuInfo_Params;
      break;
      case kTraitsTestService_EchoMailbox_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoMailbox_Params;
      break;
      case kTraitsTestService_EchoMailboxHolder_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoMailboxHolder_Params;
      break;
      case kTraitsTestService_EchoSyncToken_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoSyncToken_Params;
      break;
      case kTraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Params;
      break;
      case kTraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Params;
      break;
      case kTraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Params;
      break;
      case kTraitsTestService_EchoGpuPreferences_Name:
        if (message.expectsResponse())
          paramsClass = TraitsTestService_EchoGpuPreferences_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTraitsTestServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTraitsTestService_EchoDxDiagNode_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoDxDiagNode_ResponseParams;
        break;
      case kTraitsTestService_EchoGpuDevice_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoGpuDevice_ResponseParams;
        break;
      case kTraitsTestService_EchoGpuInfo_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoGpuInfo_ResponseParams;
        break;
      case kTraitsTestService_EchoMailbox_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoMailbox_ResponseParams;
        break;
      case kTraitsTestService_EchoMailboxHolder_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoMailboxHolder_ResponseParams;
        break;
      case kTraitsTestService_EchoSyncToken_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoSyncToken_ResponseParams;
        break;
      case kTraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoVideoDecodeAcceleratorSupportedProfile_ResponseParams;
        break;
      case kTraitsTestService_EchoVideoDecodeAcceleratorCapabilities_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoVideoDecodeAcceleratorCapabilities_ResponseParams;
        break;
      case kTraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoVideoEncodeAcceleratorSupportedProfile_ResponseParams;
        break;
      case kTraitsTestService_EchoGpuPreferences_Name:
        if (message.isResponse())
          paramsClass = TraitsTestService_EchoGpuPreferences_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TraitsTestService = {
    name: 'gpu.mojom.TraitsTestService',
    kVersion: 0,
    ptrClass: TraitsTestServicePtr,
    proxyClass: TraitsTestServiceProxy,
    stubClass: TraitsTestServiceStub,
    validateRequest: validateTraitsTestServiceRequest,
    validateResponse: validateTraitsTestServiceResponse,
  };
  TraitsTestServiceStub.prototype.validator = validateTraitsTestServiceRequest;
  TraitsTestServiceProxy.prototype.validator = validateTraitsTestServiceResponse;
  exports.TraitsTestService = TraitsTestService;
  exports.TraitsTestServicePtr = TraitsTestServicePtr;
  exports.TraitsTestServiceAssociatedPtr = TraitsTestServiceAssociatedPtr;
})();