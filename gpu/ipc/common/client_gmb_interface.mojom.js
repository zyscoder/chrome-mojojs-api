// gpu/ipc/common/client_gmb_interface.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'gpu/ipc/common/client_gmb_interface.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('gpu.mojom');
  var buffer_types$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/buffer_types.mojom', '../../../ui/gfx/mojom/buffer_types.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var surface_handle$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/surface_handle.mojom', 'surface_handle.mojom.js');
  }
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }



  function ClientGmbInterface_CreateGpuMemoryBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ClientGmbInterface_CreateGpuMemoryBuffer_Params.prototype.initDefaults_ = function() {
    this.id = null;
    this.size = null;
    this.format = 0;
    this.usage = 0;
    this.surfaceHandle = null;
  };
  ClientGmbInterface_CreateGpuMemoryBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ClientGmbInterface_CreateGpuMemoryBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ClientGmbInterface_CreateGpuMemoryBuffer_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, buffer_types$.GpuMemoryBufferId, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ClientGmbInterface_CreateGpuMemoryBuffer_Params.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ClientGmbInterface_CreateGpuMemoryBuffer_Params.format
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, buffer_types$.BufferFormat);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ClientGmbInterface_CreateGpuMemoryBuffer_Params.usage
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 20, buffer_types$.BufferUsage);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ClientGmbInterface_CreateGpuMemoryBuffer_Params.surfaceHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, surface_handle$.SurfaceHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ClientGmbInterface_CreateGpuMemoryBuffer_Params.encodedSize = codec.kStructHeaderSize + 32;

  ClientGmbInterface_CreateGpuMemoryBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new ClientGmbInterface_CreateGpuMemoryBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(buffer_types$.GpuMemoryBufferId);
    val.size =
        decoder.decodeStructPointer(geometry$.Size);
    val.format =
        decoder.decodeStruct(new codec.Enum(buffer_types$.BufferFormat));
    val.usage =
        decoder.decodeStruct(new codec.Enum(buffer_types$.BufferUsage));
    val.surfaceHandle =
        decoder.decodeStructPointer(surface_handle$.SurfaceHandle);
    return val;
  };

  ClientGmbInterface_CreateGpuMemoryBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ClientGmbInterface_CreateGpuMemoryBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(buffer_types$.GpuMemoryBufferId, val.id);
    encoder.encodeStructPointer(geometry$.Size, val.size);
    encoder.encodeStruct(codec.Int32, val.format);
    encoder.encodeStruct(codec.Int32, val.usage);
    encoder.encodeStructPointer(surface_handle$.SurfaceHandle, val.surfaceHandle);
  };
  function ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams.prototype.initDefaults_ = function() {
    this.bufferHandle = null;
  };
  ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams.bufferHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, buffer_types$.GpuMemoryBufferHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferHandle =
        decoder.decodeStructPointer(buffer_types$.GpuMemoryBufferHandle);
    return val;
  };

  ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(buffer_types$.GpuMemoryBufferHandle, val.bufferHandle);
  };
  function ClientGmbInterface_DestroyGpuMemoryBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ClientGmbInterface_DestroyGpuMemoryBuffer_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  ClientGmbInterface_DestroyGpuMemoryBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ClientGmbInterface_DestroyGpuMemoryBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ClientGmbInterface_DestroyGpuMemoryBuffer_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, buffer_types$.GpuMemoryBufferId, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ClientGmbInterface_DestroyGpuMemoryBuffer_Params.encodedSize = codec.kStructHeaderSize + 8;

  ClientGmbInterface_DestroyGpuMemoryBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new ClientGmbInterface_DestroyGpuMemoryBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(buffer_types$.GpuMemoryBufferId);
    return val;
  };

  ClientGmbInterface_DestroyGpuMemoryBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ClientGmbInterface_DestroyGpuMemoryBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(buffer_types$.GpuMemoryBufferId, val.id);
  };
  function ClientGmbInterface_CopyGpuMemoryBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ClientGmbInterface_CopyGpuMemoryBuffer_Params.prototype.initDefaults_ = function() {
    this.bufferHandle = null;
    this.sharedMemory = null;
  };
  ClientGmbInterface_CopyGpuMemoryBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ClientGmbInterface_CopyGpuMemoryBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ClientGmbInterface_CopyGpuMemoryBuffer_Params.bufferHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, buffer_types$.GpuMemoryBufferHandle, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ClientGmbInterface_CopyGpuMemoryBuffer_Params.sharedMemory
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.UnsafeSharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ClientGmbInterface_CopyGpuMemoryBuffer_Params.encodedSize = codec.kStructHeaderSize + 16;

  ClientGmbInterface_CopyGpuMemoryBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new ClientGmbInterface_CopyGpuMemoryBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferHandle =
        decoder.decodeStructPointer(buffer_types$.GpuMemoryBufferHandle);
    val.sharedMemory =
        decoder.decodeStructPointer(shared_memory$.UnsafeSharedMemoryRegion);
    return val;
  };

  ClientGmbInterface_CopyGpuMemoryBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ClientGmbInterface_CopyGpuMemoryBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(buffer_types$.GpuMemoryBufferHandle, val.bufferHandle);
    encoder.encodeStructPointer(shared_memory$.UnsafeSharedMemoryRegion, val.sharedMemory);
  };
  function ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kClientGmbInterface_CreateGpuMemoryBuffer_Name = 831033291;
  var kClientGmbInterface_DestroyGpuMemoryBuffer_Name = 866528479;
  var kClientGmbInterface_CopyGpuMemoryBuffer_Name = 1726659844;

  function ClientGmbInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ClientGmbInterface,
                                                   handleOrPtrInfo);
  }

  function ClientGmbInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ClientGmbInterface, associatedInterfacePtrInfo);
  }

  ClientGmbInterfaceAssociatedPtr.prototype =
      Object.create(ClientGmbInterfacePtr.prototype);
  ClientGmbInterfaceAssociatedPtr.prototype.constructor =
      ClientGmbInterfaceAssociatedPtr;

  function ClientGmbInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  ClientGmbInterfacePtr.prototype.createGpuMemoryBuffer = function() {
    return ClientGmbInterfaceProxy.prototype.createGpuMemoryBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  ClientGmbInterfaceProxy.prototype.createGpuMemoryBuffer = function(id, size, format, usage, surfaceHandle) {
    var params_ = new ClientGmbInterface_CreateGpuMemoryBuffer_Params();
    params_.id = id;
    params_.size = size;
    params_.format = format;
    params_.usage = usage;
    params_.surfaceHandle = surfaceHandle;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kClientGmbInterface_CreateGpuMemoryBuffer_Name,
          codec.align(ClientGmbInterface_CreateGpuMemoryBuffer_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ClientGmbInterface_CreateGpuMemoryBuffer_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ClientGmbInterfacePtr.prototype.destroyGpuMemoryBuffer = function() {
    return ClientGmbInterfaceProxy.prototype.destroyGpuMemoryBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  ClientGmbInterfaceProxy.prototype.destroyGpuMemoryBuffer = function(id) {
    var params_ = new ClientGmbInterface_DestroyGpuMemoryBuffer_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kClientGmbInterface_DestroyGpuMemoryBuffer_Name,
        codec.align(ClientGmbInterface_DestroyGpuMemoryBuffer_Params.encodedSize));
    builder.encodeStruct(ClientGmbInterface_DestroyGpuMemoryBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ClientGmbInterfacePtr.prototype.copyGpuMemoryBuffer = function() {
    return ClientGmbInterfaceProxy.prototype.copyGpuMemoryBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  ClientGmbInterfaceProxy.prototype.copyGpuMemoryBuffer = function(bufferHandle, sharedMemory) {
    var params_ = new ClientGmbInterface_CopyGpuMemoryBuffer_Params();
    params_.bufferHandle = bufferHandle;
    params_.sharedMemory = sharedMemory;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kClientGmbInterface_CopyGpuMemoryBuffer_Name,
          codec.align(ClientGmbInterface_CopyGpuMemoryBuffer_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ClientGmbInterface_CopyGpuMemoryBuffer_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ClientGmbInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  ClientGmbInterfaceStub.prototype.createGpuMemoryBuffer = function(id, size, format, usage, surfaceHandle) {
    return this.delegate_ && this.delegate_.createGpuMemoryBuffer && this.delegate_.createGpuMemoryBuffer(id, size, format, usage, surfaceHandle);
  }
  ClientGmbInterfaceStub.prototype.destroyGpuMemoryBuffer = function(id) {
    return this.delegate_ && this.delegate_.destroyGpuMemoryBuffer && this.delegate_.destroyGpuMemoryBuffer(id);
  }
  ClientGmbInterfaceStub.prototype.copyGpuMemoryBuffer = function(bufferHandle, sharedMemory) {
    return this.delegate_ && this.delegate_.copyGpuMemoryBuffer && this.delegate_.copyGpuMemoryBuffer(bufferHandle, sharedMemory);
  }

  ClientGmbInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kClientGmbInterface_DestroyGpuMemoryBuffer_Name:
      var params = reader.decodeStruct(ClientGmbInterface_DestroyGpuMemoryBuffer_Params);
      this.destroyGpuMemoryBuffer(params.id);
      return true;
    default:
      return false;
    }
  };

  ClientGmbInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kClientGmbInterface_CreateGpuMemoryBuffer_Name:
      var params = reader.decodeStruct(ClientGmbInterface_CreateGpuMemoryBuffer_Params);
      this.createGpuMemoryBuffer(params.id, params.size, params.format, params.usage, params.surfaceHandle).then(function(response) {
        var responseParams =
            new ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams();
        responseParams.bufferHandle = response.bufferHandle;
        var builder = new codec.MessageV1Builder(
            kClientGmbInterface_CreateGpuMemoryBuffer_Name,
            codec.align(ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kClientGmbInterface_CopyGpuMemoryBuffer_Name:
      var params = reader.decodeStruct(ClientGmbInterface_CopyGpuMemoryBuffer_Params);
      this.copyGpuMemoryBuffer(params.bufferHandle, params.sharedMemory).then(function(response) {
        var responseParams =
            new ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kClientGmbInterface_CopyGpuMemoryBuffer_Name,
            codec.align(ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateClientGmbInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kClientGmbInterface_CreateGpuMemoryBuffer_Name:
        if (message.expectsResponse())
          paramsClass = ClientGmbInterface_CreateGpuMemoryBuffer_Params;
      break;
      case kClientGmbInterface_DestroyGpuMemoryBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ClientGmbInterface_DestroyGpuMemoryBuffer_Params;
      break;
      case kClientGmbInterface_CopyGpuMemoryBuffer_Name:
        if (message.expectsResponse())
          paramsClass = ClientGmbInterface_CopyGpuMemoryBuffer_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateClientGmbInterfaceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kClientGmbInterface_CreateGpuMemoryBuffer_Name:
        if (message.isResponse())
          paramsClass = ClientGmbInterface_CreateGpuMemoryBuffer_ResponseParams;
        break;
      case kClientGmbInterface_CopyGpuMemoryBuffer_Name:
        if (message.isResponse())
          paramsClass = ClientGmbInterface_CopyGpuMemoryBuffer_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ClientGmbInterface = {
    name: 'gpu.mojom.ClientGmbInterface',
    kVersion: 0,
    ptrClass: ClientGmbInterfacePtr,
    proxyClass: ClientGmbInterfaceProxy,
    stubClass: ClientGmbInterfaceStub,
    validateRequest: validateClientGmbInterfaceRequest,
    validateResponse: validateClientGmbInterfaceResponse,
  };
  ClientGmbInterfaceStub.prototype.validator = validateClientGmbInterfaceRequest;
  ClientGmbInterfaceProxy.prototype.validator = validateClientGmbInterfaceResponse;
  exports.ClientGmbInterface = ClientGmbInterface;
  exports.ClientGmbInterfacePtr = ClientGmbInterfacePtr;
  exports.ClientGmbInterfaceAssociatedPtr = ClientGmbInterfaceAssociatedPtr;
})();