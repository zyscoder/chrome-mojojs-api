// device/vr/public/mojom/isolated_xr_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'device/vr/public/mojom/isolated_xr_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('device.mojom');
  var browser_test_interfaces$ =
      mojo.internal.exposeNamespace('deviceTest.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'device/vr/public/mojom/browser_test_interfaces.mojom', 'browser_test_interfaces.mojom.js');
  }
  var vr_service$ =
      mojo.internal.exposeNamespace('device.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'device/vr/public/mojom/vr_service.mojom', 'vr_service.mojom.js');
  }
  var xr_device$ =
      mojo.internal.exposeNamespace('device.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'device/vr/public/mojom/xr_device.mojom', 'xr_device.mojom.js');
  }
  var xr_session$ =
      mojo.internal.exposeNamespace('device.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'device/vr/public/mojom/xr_session.mojom', 'xr_session.mojom.js');
  }
  var sync_token$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/sync_token.mojom', '../../../../gpu/ipc/common/sync_token.mojom.js');
  }
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var frame_sink_id$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/public/mojom/compositing/frame_sink_id.mojom', '../../../../services/viz/public/mojom/compositing/frame_sink_id.mojom.js');
  }
  var gpu$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/public/mojom/gpu.mojom', '../../../../services/viz/public/mojom/gpu.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }


  var XR_SANDBOX = sandbox$.Sandbox.kUtility;

  function XRRuntimeSessionOptions(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRRuntimeSessionOptions.prototype.initDefaults_ = function() {
    this.mode = 0;
    this.renderProcessId = 0;
    this.requiredFeatures = null;
    this.optionalFeatures = null;
    this.renderFrameId = 0;
    this.trackedImages = null;
    this.depthOptions = null;
    this.traceId = 0;
  };
  XRRuntimeSessionOptions.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRRuntimeSessionOptions.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRuntimeSessionOptions.mode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, xr_session$.XRSessionMode);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRuntimeSessionOptions.requiredFeatures
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 4, new codec.Enum(xr_session$.XRSessionFeature), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRuntimeSessionOptions.optionalFeatures
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 4, new codec.Enum(xr_session$.XRSessionFeature), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;




    // validate XRRuntimeSessionOptions.trackedImages
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(xr_session$.XRTrackedImage), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRuntimeSessionOptions.depthOptions
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, xr_session$.XRDepthOptions, true);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XRRuntimeSessionOptions.encodedSize = codec.kStructHeaderSize + 56;

  XRRuntimeSessionOptions.decode = function(decoder) {
    var packed;
    var val = new XRRuntimeSessionOptions();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.mode =
        decoder.decodeStruct(new codec.Enum(xr_session$.XRSessionMode));
    val.renderProcessId =
        decoder.decodeStruct(codec.Int32);
    val.requiredFeatures =
        decoder.decodeArrayPointer(new codec.Enum(xr_session$.XRSessionFeature));
    val.optionalFeatures =
        decoder.decodeArrayPointer(new codec.Enum(xr_session$.XRSessionFeature));
    val.renderFrameId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.trackedImages =
        decoder.decodeArrayPointer(new codec.PointerTo(xr_session$.XRTrackedImage));
    val.depthOptions =
        decoder.decodeStructPointer(xr_session$.XRDepthOptions);
    val.traceId =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  XRRuntimeSessionOptions.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRRuntimeSessionOptions.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.mode);
    encoder.encodeStruct(codec.Int32, val.renderProcessId);
    encoder.encodeArrayPointer(new codec.Enum(xr_session$.XRSessionFeature), val.requiredFeatures);
    encoder.encodeArrayPointer(new codec.Enum(xr_session$.XRSessionFeature), val.optionalFeatures);
    encoder.encodeStruct(codec.Int32, val.renderFrameId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(xr_session$.XRTrackedImage), val.trackedImages);
    encoder.encodeStructPointer(xr_session$.XRDepthOptions, val.depthOptions);
    encoder.encodeStruct(codec.Uint64, val.traceId);
  };
  function XRRuntimeSessionResult(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRRuntimeSessionResult.prototype.initDefaults_ = function() {
    this.controller = new XRSessionControllerPtr();
    this.session = null;
    this.frameSinkId = null;
  };
  XRRuntimeSessionResult.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRRuntimeSessionResult.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRuntimeSessionResult.controller
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRuntimeSessionResult.session
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, vr_service$.XRSession, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRuntimeSessionResult.frameSinkId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, frame_sink_id$.FrameSinkId, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRRuntimeSessionResult.encodedSize = codec.kStructHeaderSize + 24;

  XRRuntimeSessionResult.decode = function(decoder) {
    var packed;
    var val = new XRRuntimeSessionResult();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.controller =
        decoder.decodeStruct(new codec.Interface(XRSessionControllerPtr));
    val.session =
        decoder.decodeStructPointer(vr_service$.XRSession);
    val.frameSinkId =
        decoder.decodeStructPointer(frame_sink_id$.FrameSinkId);
    return val;
  };

  XRRuntimeSessionResult.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRRuntimeSessionResult.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(XRSessionControllerPtr), val.controller);
    encoder.encodeStructPointer(vr_service$.XRSession, val.session);
    encoder.encodeStructPointer(frame_sink_id$.FrameSinkId, val.frameSinkId);
  };
  function XRRenderInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRRenderInfo.prototype.initDefaults_ = function() {
    this.frameId = 0;
    this.mojoFromViewer = null;
    this.views = null;
  };
  XRRenderInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRRenderInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate XRRenderInfo.mojoFromViewer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, vr_service$.VRPose, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRenderInfo.views
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(vr_service$.XRView), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRRenderInfo.encodedSize = codec.kStructHeaderSize + 24;

  XRRenderInfo.decode = function(decoder) {
    var packed;
    var val = new XRRenderInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameId =
        decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.mojoFromViewer =
        decoder.decodeStructPointer(vr_service$.VRPose);
    val.views =
        decoder.decodeArrayPointer(new codec.PointerTo(vr_service$.XRView));
    return val;
  };

  XRRenderInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRRenderInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int16, val.frameId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(vr_service$.VRPose, val.mojoFromViewer);
    encoder.encodeArrayPointer(new codec.PointerTo(vr_service$.XRView), val.views);
  };
  function XRDeviceData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRDeviceData.prototype.initDefaults_ = function() {
    this.supportedFeatures = null;
    this.isArBlendModeSupported = false;
  };
  XRDeviceData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRDeviceData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRDeviceData.supportedFeatures
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, new codec.Enum(xr_session$.XRSessionFeature), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XRDeviceData.encodedSize = codec.kStructHeaderSize + 16;

  XRDeviceData.decode = function(decoder) {
    var packed;
    var val = new XRDeviceData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.supportedFeatures =
        decoder.decodeArrayPointer(new codec.Enum(xr_session$.XRSessionFeature));
    packed = decoder.readUint8();
    val.isArBlendModeSupported = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRDeviceData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRDeviceData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.Enum(xr_session$.XRSessionFeature), val.supportedFeatures);
    packed = 0;
    packed |= (val.isArBlendModeSupported & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XRSessionController_SetFrameDataRestricted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRSessionController_SetFrameDataRestricted_Params.prototype.initDefaults_ = function() {
    this.restricted = false;
  };
  XRSessionController_SetFrameDataRestricted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRSessionController_SetFrameDataRestricted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  XRSessionController_SetFrameDataRestricted_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRSessionController_SetFrameDataRestricted_Params.decode = function(decoder) {
    var packed;
    var val = new XRSessionController_SetFrameDataRestricted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.restricted = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRSessionController_SetFrameDataRestricted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRSessionController_SetFrameDataRestricted_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.restricted & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XRRuntimeEventListener_OnVisibilityStateChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRRuntimeEventListener_OnVisibilityStateChanged_Params.prototype.initDefaults_ = function() {
    this.visibilityState = 0;
  };
  XRRuntimeEventListener_OnVisibilityStateChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRRuntimeEventListener_OnVisibilityStateChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRuntimeEventListener_OnVisibilityStateChanged_Params.visibilityState
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, vr_service$.XRVisibilityState);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRRuntimeEventListener_OnVisibilityStateChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRRuntimeEventListener_OnVisibilityStateChanged_Params.decode = function(decoder) {
    var packed;
    var val = new XRRuntimeEventListener_OnVisibilityStateChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.visibilityState =
        decoder.decodeStruct(new codec.Enum(vr_service$.XRVisibilityState));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRRuntimeEventListener_OnVisibilityStateChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRRuntimeEventListener_OnVisibilityStateChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.visibilityState);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XRRuntimeEventListener_OnExitPresent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRRuntimeEventListener_OnExitPresent_Params.prototype.initDefaults_ = function() {
  };
  XRRuntimeEventListener_OnExitPresent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRRuntimeEventListener_OnExitPresent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRRuntimeEventListener_OnExitPresent_Params.encodedSize = codec.kStructHeaderSize + 0;

  XRRuntimeEventListener_OnExitPresent_Params.decode = function(decoder) {
    var packed;
    var val = new XRRuntimeEventListener_OnExitPresent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  XRRuntimeEventListener_OnExitPresent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRRuntimeEventListener_OnExitPresent_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function XRRuntime_RequestSession_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRRuntime_RequestSession_Params.prototype.initDefaults_ = function() {
    this.options = null;
  };
  XRRuntime_RequestSession_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRRuntime_RequestSession_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRuntime_RequestSession_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, XRRuntimeSessionOptions, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRRuntime_RequestSession_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRRuntime_RequestSession_Params.decode = function(decoder) {
    var packed;
    var val = new XRRuntime_RequestSession_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.options =
        decoder.decodeStructPointer(XRRuntimeSessionOptions);
    return val;
  };

  XRRuntime_RequestSession_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRRuntime_RequestSession_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(XRRuntimeSessionOptions, val.options);
  };
  function XRRuntime_RequestSession_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRRuntime_RequestSession_ResponseParams.prototype.initDefaults_ = function() {
    this.session = null;
  };
  XRRuntime_RequestSession_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRRuntime_RequestSession_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRuntime_RequestSession_ResponseParams.session
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, XRRuntimeSessionResult, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRRuntime_RequestSession_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  XRRuntime_RequestSession_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new XRRuntime_RequestSession_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.session =
        decoder.decodeStructPointer(XRRuntimeSessionResult);
    return val;
  };

  XRRuntime_RequestSession_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRRuntime_RequestSession_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(XRRuntimeSessionResult, val.session);
  };
  function XRRuntime_ShutdownSession_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRRuntime_ShutdownSession_Params.prototype.initDefaults_ = function() {
  };
  XRRuntime_ShutdownSession_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRRuntime_ShutdownSession_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRRuntime_ShutdownSession_Params.encodedSize = codec.kStructHeaderSize + 0;

  XRRuntime_ShutdownSession_Params.decode = function(decoder) {
    var packed;
    var val = new XRRuntime_ShutdownSession_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  XRRuntime_ShutdownSession_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRRuntime_ShutdownSession_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function XRRuntime_ShutdownSession_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRRuntime_ShutdownSession_ResponseParams.prototype.initDefaults_ = function() {
  };
  XRRuntime_ShutdownSession_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRRuntime_ShutdownSession_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRRuntime_ShutdownSession_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  XRRuntime_ShutdownSession_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new XRRuntime_ShutdownSession_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  XRRuntime_ShutdownSession_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRRuntime_ShutdownSession_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function XRRuntime_ListenToDeviceChanges_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRRuntime_ListenToDeviceChanges_Params.prototype.initDefaults_ = function() {
    this.listener = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  XRRuntime_ListenToDeviceChanges_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRRuntime_ListenToDeviceChanges_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRRuntime_ListenToDeviceChanges_Params.listener
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRRuntime_ListenToDeviceChanges_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRRuntime_ListenToDeviceChanges_Params.decode = function(decoder) {
    var packed;
    var val = new XRRuntime_ListenToDeviceChanges_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.listener =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  XRRuntime_ListenToDeviceChanges_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRRuntime_ListenToDeviceChanges_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.listener);
  };
  function ImmersiveOverlay_RequestNextOverlayPose_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImmersiveOverlay_RequestNextOverlayPose_Params.prototype.initDefaults_ = function() {
  };
  ImmersiveOverlay_RequestNextOverlayPose_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImmersiveOverlay_RequestNextOverlayPose_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ImmersiveOverlay_RequestNextOverlayPose_Params.encodedSize = codec.kStructHeaderSize + 0;

  ImmersiveOverlay_RequestNextOverlayPose_Params.decode = function(decoder) {
    var packed;
    var val = new ImmersiveOverlay_RequestNextOverlayPose_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ImmersiveOverlay_RequestNextOverlayPose_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImmersiveOverlay_RequestNextOverlayPose_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ImmersiveOverlay_RequestNextOverlayPose_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImmersiveOverlay_RequestNextOverlayPose_ResponseParams.prototype.initDefaults_ = function() {
    this.renderInfo = null;
  };
  ImmersiveOverlay_RequestNextOverlayPose_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImmersiveOverlay_RequestNextOverlayPose_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImmersiveOverlay_RequestNextOverlayPose_ResponseParams.renderInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, XRRenderInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ImmersiveOverlay_RequestNextOverlayPose_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ImmersiveOverlay_RequestNextOverlayPose_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ImmersiveOverlay_RequestNextOverlayPose_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.renderInfo =
        decoder.decodeStructPointer(XRRenderInfo);
    return val;
  };

  ImmersiveOverlay_RequestNextOverlayPose_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImmersiveOverlay_RequestNextOverlayPose_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(XRRenderInfo, val.renderInfo);
  };
  function ImmersiveOverlay_SubmitOverlayTexture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImmersiveOverlay_SubmitOverlayTexture_Params.prototype.initDefaults_ = function() {
    this.frameId = 0;
    this.texture = null;
    this.syncToken = null;
    this.leftBounds = null;
    this.rightBounds = null;
  };
  ImmersiveOverlay_SubmitOverlayTexture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImmersiveOverlay_SubmitOverlayTexture_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ImmersiveOverlay_SubmitOverlayTexture_Params.texture
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 4, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImmersiveOverlay_SubmitOverlayTexture_Params.syncToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, sync_token$.SyncToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImmersiveOverlay_SubmitOverlayTexture_Params.leftBounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImmersiveOverlay_SubmitOverlayTexture_Params.rightBounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ImmersiveOverlay_SubmitOverlayTexture_Params.encodedSize = codec.kStructHeaderSize + 32;

  ImmersiveOverlay_SubmitOverlayTexture_Params.decode = function(decoder) {
    var packed;
    var val = new ImmersiveOverlay_SubmitOverlayTexture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameId =
        decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    val.texture =
        decoder.decodeStruct(codec.Handle);
    val.syncToken =
        decoder.decodeStructPointer(sync_token$.SyncToken);
    val.leftBounds =
        decoder.decodeStructPointer(geometry$.RectF);
    val.rightBounds =
        decoder.decodeStructPointer(geometry$.RectF);
    return val;
  };

  ImmersiveOverlay_SubmitOverlayTexture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImmersiveOverlay_SubmitOverlayTexture_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int16, val.frameId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Handle, val.texture);
    encoder.encodeStructPointer(sync_token$.SyncToken, val.syncToken);
    encoder.encodeStructPointer(geometry$.RectF, val.leftBounds);
    encoder.encodeStructPointer(geometry$.RectF, val.rightBounds);
  };
  function ImmersiveOverlay_SubmitOverlayTexture_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImmersiveOverlay_SubmitOverlayTexture_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ImmersiveOverlay_SubmitOverlayTexture_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImmersiveOverlay_SubmitOverlayTexture_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ImmersiveOverlay_SubmitOverlayTexture_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ImmersiveOverlay_SubmitOverlayTexture_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ImmersiveOverlay_SubmitOverlayTexture_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ImmersiveOverlay_SubmitOverlayTexture_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImmersiveOverlay_SubmitOverlayTexture_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params.prototype.initDefaults_ = function() {
    this.overlayVisible = false;
    this.webxrVisible = false;
  };
  ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params.encodedSize = codec.kStructHeaderSize + 8;

  ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params.decode = function(decoder) {
    var packed;
    var val = new ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.overlayVisible = (packed >> 0) & 1 ? true : false;
    val.webxrVisible = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.overlayVisible & 1) << 0
    packed |= (val.webxrVisible & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params.prototype.initDefaults_ = function() {
  };
  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params.encodedSize = codec.kStructHeaderSize + 0;

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params.decode = function(decoder) {
    var packed;
    var val = new ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams.prototype.initDefaults_ = function() {
  };
  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function XRCompositorHost_CreateImmersiveOverlay_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRCompositorHost_CreateImmersiveOverlay_Params.prototype.initDefaults_ = function() {
    this.overlay = new bindings.InterfaceRequest();
  };
  XRCompositorHost_CreateImmersiveOverlay_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRCompositorHost_CreateImmersiveOverlay_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRCompositorHost_CreateImmersiveOverlay_Params.overlay
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRCompositorHost_CreateImmersiveOverlay_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRCompositorHost_CreateImmersiveOverlay_Params.decode = function(decoder) {
    var packed;
    var val = new XRCompositorHost_CreateImmersiveOverlay_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.overlay =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRCompositorHost_CreateImmersiveOverlay_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRCompositorHost_CreateImmersiveOverlay_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.overlay);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.prototype.initDefaults_ = function() {
    this.runtime = new XRRuntimePtr();
    this.compositorHost = new XRCompositorHostPtr();
    this.deviceData = null;
    this.deviceId = 0;
  };
  IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.runtime
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.compositorHost
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.deviceData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, XRDeviceData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.deviceId
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 24, xr_device$.XRDeviceId);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.encodedSize = codec.kStructHeaderSize + 32;

  IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.decode = function(decoder) {
    var packed;
    var val = new IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.runtime =
        decoder.decodeStruct(new codec.Interface(XRRuntimePtr));
    val.compositorHost =
        decoder.decodeStruct(new codec.Interface(XRCompositorHostPtr));
    val.deviceData =
        decoder.decodeStructPointer(XRDeviceData);
    val.deviceId =
        decoder.decodeStruct(new codec.Enum(xr_device$.XRDeviceId));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(XRRuntimePtr), val.runtime);
    encoder.encodeStruct(new codec.Interface(XRCompositorHostPtr), val.compositorHost);
    encoder.encodeStructPointer(XRDeviceData, val.deviceData);
    encoder.encodeStruct(codec.Int32, val.deviceId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params.prototype.initDefaults_ = function() {
    this.deviceIndex = 0;
  };
  IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params.deviceIndex
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, xr_device$.XRDeviceId);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params.encodedSize = codec.kStructHeaderSize + 8;

  IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params.decode = function(decoder) {
    var packed;
    var val = new IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceIndex =
        decoder.decodeStruct(new codec.Enum(xr_device$.XRDeviceId));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.deviceIndex);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params.prototype.initDefaults_ = function() {
  };
  IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params.encodedSize = codec.kStructHeaderSize + 0;

  IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params.decode = function(decoder) {
    var packed;
    var val = new IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function IsolatedXRRuntimeProvider_RequestDevices_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IsolatedXRRuntimeProvider_RequestDevices_Params.prototype.initDefaults_ = function() {
    this.client = new IsolatedXRRuntimeProviderClientPtr();
  };
  IsolatedXRRuntimeProvider_RequestDevices_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IsolatedXRRuntimeProvider_RequestDevices_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IsolatedXRRuntimeProvider_RequestDevices_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IsolatedXRRuntimeProvider_RequestDevices_Params.encodedSize = codec.kStructHeaderSize + 8;

  IsolatedXRRuntimeProvider_RequestDevices_Params.decode = function(decoder) {
    var packed;
    var val = new IsolatedXRRuntimeProvider_RequestDevices_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client =
        decoder.decodeStruct(new codec.Interface(IsolatedXRRuntimeProviderClientPtr));
    return val;
  };

  IsolatedXRRuntimeProvider_RequestDevices_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IsolatedXRRuntimeProvider_RequestDevices_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(IsolatedXRRuntimeProviderClientPtr), val.client);
  };
  function XRDeviceService_BindRuntimeProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRDeviceService_BindRuntimeProvider_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
    this.host = new XRDeviceServiceHostPtr();
  };
  XRDeviceService_BindRuntimeProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRDeviceService_BindRuntimeProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRDeviceService_BindRuntimeProvider_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRDeviceService_BindRuntimeProvider_Params.host
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRDeviceService_BindRuntimeProvider_Params.encodedSize = codec.kStructHeaderSize + 16;

  XRDeviceService_BindRuntimeProvider_Params.decode = function(decoder) {
    var packed;
    var val = new XRDeviceService_BindRuntimeProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.host =
        decoder.decodeStruct(new codec.Interface(XRDeviceServiceHostPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRDeviceService_BindRuntimeProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRDeviceService_BindRuntimeProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(new codec.Interface(XRDeviceServiceHostPtr), val.host);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XRDeviceService_BindTestHook_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRDeviceService_BindTestHook_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  XRDeviceService_BindTestHook_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRDeviceService_BindTestHook_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRDeviceService_BindTestHook_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRDeviceService_BindTestHook_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRDeviceService_BindTestHook_Params.decode = function(decoder) {
    var packed;
    var val = new XRDeviceService_BindTestHook_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRDeviceService_BindTestHook_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRDeviceService_BindTestHook_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function XRDeviceServiceHost_BindGpu_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  XRDeviceServiceHost_BindGpu_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  XRDeviceServiceHost_BindGpu_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  XRDeviceServiceHost_BindGpu_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate XRDeviceServiceHost_BindGpu_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  XRDeviceServiceHost_BindGpu_Params.encodedSize = codec.kStructHeaderSize + 8;

  XRDeviceServiceHost_BindGpu_Params.decode = function(decoder) {
    var packed;
    var val = new XRDeviceServiceHost_BindGpu_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  XRDeviceServiceHost_BindGpu_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(XRDeviceServiceHost_BindGpu_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kXRSessionController_SetFrameDataRestricted_Name = 135329742;

  function XRSessionControllerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XRSessionController,
                                                   handleOrPtrInfo);
  }

  function XRSessionControllerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XRSessionController, associatedInterfacePtrInfo);
  }

  XRSessionControllerAssociatedPtr.prototype =
      Object.create(XRSessionControllerPtr.prototype);
  XRSessionControllerAssociatedPtr.prototype.constructor =
      XRSessionControllerAssociatedPtr;

  function XRSessionControllerProxy(receiver) {
    this.receiver_ = receiver;
  }
  XRSessionControllerPtr.prototype.setFrameDataRestricted = function() {
    return XRSessionControllerProxy.prototype.setFrameDataRestricted
        .apply(this.ptr.getProxy(), arguments);
  };

  XRSessionControllerProxy.prototype.setFrameDataRestricted = function(restricted) {
    var params_ = new XRSessionController_SetFrameDataRestricted_Params();
    params_.restricted = restricted;
    var builder = new codec.MessageV0Builder(
        kXRSessionController_SetFrameDataRestricted_Name,
        codec.align(XRSessionController_SetFrameDataRestricted_Params.encodedSize));
    builder.encodeStruct(XRSessionController_SetFrameDataRestricted_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XRSessionControllerStub(delegate) {
    this.delegate_ = delegate;
  }
  XRSessionControllerStub.prototype.setFrameDataRestricted = function(restricted) {
    return this.delegate_ && this.delegate_.setFrameDataRestricted && this.delegate_.setFrameDataRestricted(restricted);
  }

  XRSessionControllerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRSessionController_SetFrameDataRestricted_Name:
      var params = reader.decodeStruct(XRSessionController_SetFrameDataRestricted_Params);
      this.setFrameDataRestricted(params.restricted);
      return true;
    default:
      return false;
    }
  };

  XRSessionControllerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateXRSessionControllerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXRSessionController_SetFrameDataRestricted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRSessionController_SetFrameDataRestricted_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXRSessionControllerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var XRSessionController = {
    name: 'device.mojom.XRSessionController',
    kVersion: 0,
    ptrClass: XRSessionControllerPtr,
    proxyClass: XRSessionControllerProxy,
    stubClass: XRSessionControllerStub,
    validateRequest: validateXRSessionControllerRequest,
    validateResponse: null,
  };
  XRSessionControllerStub.prototype.validator = validateXRSessionControllerRequest;
  XRSessionControllerProxy.prototype.validator = null;
  var kXRRuntimeEventListener_OnVisibilityStateChanged_Name = 1632732928;
  var kXRRuntimeEventListener_OnExitPresent_Name = 352385418;

  function XRRuntimeEventListenerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XRRuntimeEventListener,
                                                   handleOrPtrInfo);
  }

  function XRRuntimeEventListenerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XRRuntimeEventListener, associatedInterfacePtrInfo);
  }

  XRRuntimeEventListenerAssociatedPtr.prototype =
      Object.create(XRRuntimeEventListenerPtr.prototype);
  XRRuntimeEventListenerAssociatedPtr.prototype.constructor =
      XRRuntimeEventListenerAssociatedPtr;

  function XRRuntimeEventListenerProxy(receiver) {
    this.receiver_ = receiver;
  }
  XRRuntimeEventListenerPtr.prototype.onVisibilityStateChanged = function() {
    return XRRuntimeEventListenerProxy.prototype.onVisibilityStateChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  XRRuntimeEventListenerProxy.prototype.onVisibilityStateChanged = function(visibilityState) {
    var params_ = new XRRuntimeEventListener_OnVisibilityStateChanged_Params();
    params_.visibilityState = visibilityState;
    var builder = new codec.MessageV0Builder(
        kXRRuntimeEventListener_OnVisibilityStateChanged_Name,
        codec.align(XRRuntimeEventListener_OnVisibilityStateChanged_Params.encodedSize));
    builder.encodeStruct(XRRuntimeEventListener_OnVisibilityStateChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XRRuntimeEventListenerPtr.prototype.onExitPresent = function() {
    return XRRuntimeEventListenerProxy.prototype.onExitPresent
        .apply(this.ptr.getProxy(), arguments);
  };

  XRRuntimeEventListenerProxy.prototype.onExitPresent = function() {
    var params_ = new XRRuntimeEventListener_OnExitPresent_Params();
    var builder = new codec.MessageV0Builder(
        kXRRuntimeEventListener_OnExitPresent_Name,
        codec.align(XRRuntimeEventListener_OnExitPresent_Params.encodedSize));
    builder.encodeStruct(XRRuntimeEventListener_OnExitPresent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XRRuntimeEventListenerStub(delegate) {
    this.delegate_ = delegate;
  }
  XRRuntimeEventListenerStub.prototype.onVisibilityStateChanged = function(visibilityState) {
    return this.delegate_ && this.delegate_.onVisibilityStateChanged && this.delegate_.onVisibilityStateChanged(visibilityState);
  }
  XRRuntimeEventListenerStub.prototype.onExitPresent = function() {
    return this.delegate_ && this.delegate_.onExitPresent && this.delegate_.onExitPresent();
  }

  XRRuntimeEventListenerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRRuntimeEventListener_OnVisibilityStateChanged_Name:
      var params = reader.decodeStruct(XRRuntimeEventListener_OnVisibilityStateChanged_Params);
      this.onVisibilityStateChanged(params.visibilityState);
      return true;
    case kXRRuntimeEventListener_OnExitPresent_Name:
      var params = reader.decodeStruct(XRRuntimeEventListener_OnExitPresent_Params);
      this.onExitPresent();
      return true;
    default:
      return false;
    }
  };

  XRRuntimeEventListenerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateXRRuntimeEventListenerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXRRuntimeEventListener_OnVisibilityStateChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRRuntimeEventListener_OnVisibilityStateChanged_Params;
      break;
      case kXRRuntimeEventListener_OnExitPresent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRRuntimeEventListener_OnExitPresent_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXRRuntimeEventListenerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var XRRuntimeEventListener = {
    name: 'device.mojom.XRRuntimeEventListener',
    kVersion: 0,
    ptrClass: XRRuntimeEventListenerPtr,
    proxyClass: XRRuntimeEventListenerProxy,
    stubClass: XRRuntimeEventListenerStub,
    validateRequest: validateXRRuntimeEventListenerRequest,
    validateResponse: null,
  };
  XRRuntimeEventListenerStub.prototype.validator = validateXRRuntimeEventListenerRequest;
  XRRuntimeEventListenerProxy.prototype.validator = null;
  var kXRRuntime_RequestSession_Name = 1531363525;
  var kXRRuntime_ShutdownSession_Name = 1964886462;
  var kXRRuntime_ListenToDeviceChanges_Name = 1128151074;

  function XRRuntimePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XRRuntime,
                                                   handleOrPtrInfo);
  }

  function XRRuntimeAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XRRuntime, associatedInterfacePtrInfo);
  }

  XRRuntimeAssociatedPtr.prototype =
      Object.create(XRRuntimePtr.prototype);
  XRRuntimeAssociatedPtr.prototype.constructor =
      XRRuntimeAssociatedPtr;

  function XRRuntimeProxy(receiver) {
    this.receiver_ = receiver;
  }
  XRRuntimePtr.prototype.requestSession = function() {
    return XRRuntimeProxy.prototype.requestSession
        .apply(this.ptr.getProxy(), arguments);
  };

  XRRuntimeProxy.prototype.requestSession = function(options) {
    var params_ = new XRRuntime_RequestSession_Params();
    params_.options = options;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kXRRuntime_RequestSession_Name,
          codec.align(XRRuntime_RequestSession_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(XRRuntime_RequestSession_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(XRRuntime_RequestSession_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  XRRuntimePtr.prototype.shutdownSession = function() {
    return XRRuntimeProxy.prototype.shutdownSession
        .apply(this.ptr.getProxy(), arguments);
  };

  XRRuntimeProxy.prototype.shutdownSession = function() {
    var params_ = new XRRuntime_ShutdownSession_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kXRRuntime_ShutdownSession_Name,
          codec.align(XRRuntime_ShutdownSession_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(XRRuntime_ShutdownSession_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(XRRuntime_ShutdownSession_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  XRRuntimePtr.prototype.listenToDeviceChanges = function() {
    return XRRuntimeProxy.prototype.listenToDeviceChanges
        .apply(this.ptr.getProxy(), arguments);
  };

  XRRuntimeProxy.prototype.listenToDeviceChanges = function(listener) {
    var params_ = new XRRuntime_ListenToDeviceChanges_Params();
    params_.listener = listener;
    var builder = new codec.MessageV2Builder(
        kXRRuntime_ListenToDeviceChanges_Name,
        codec.align(XRRuntime_ListenToDeviceChanges_Params.encodedSize));
    builder.setPayload(XRRuntime_ListenToDeviceChanges_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XRRuntimeStub(delegate) {
    this.delegate_ = delegate;
  }
  XRRuntimeStub.prototype.requestSession = function(options) {
    return this.delegate_ && this.delegate_.requestSession && this.delegate_.requestSession(options);
  }
  XRRuntimeStub.prototype.shutdownSession = function() {
    return this.delegate_ && this.delegate_.shutdownSession && this.delegate_.shutdownSession();
  }
  XRRuntimeStub.prototype.listenToDeviceChanges = function(listener) {
    return this.delegate_ && this.delegate_.listenToDeviceChanges && this.delegate_.listenToDeviceChanges(listener);
  }

  XRRuntimeStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRRuntime_ListenToDeviceChanges_Name:
      var params = reader.decodeStruct(XRRuntime_ListenToDeviceChanges_Params);
      this.listenToDeviceChanges(params.listener);
      return true;
    default:
      return false;
    }
  };

  XRRuntimeStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRRuntime_RequestSession_Name:
      var params = reader.decodeStruct(XRRuntime_RequestSession_Params);
      this.requestSession(params.options).then(function(response) {
        var responseParams =
            new XRRuntime_RequestSession_ResponseParams();
        responseParams.session = response.session;
        var builder = new codec.MessageV1Builder(
            kXRRuntime_RequestSession_Name,
            codec.align(XRRuntime_RequestSession_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(XRRuntime_RequestSession_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kXRRuntime_ShutdownSession_Name:
      var params = reader.decodeStruct(XRRuntime_ShutdownSession_Params);
      this.shutdownSession().then(function(response) {
        var responseParams =
            new XRRuntime_ShutdownSession_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kXRRuntime_ShutdownSession_Name,
            codec.align(XRRuntime_ShutdownSession_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(XRRuntime_ShutdownSession_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateXRRuntimeRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXRRuntime_RequestSession_Name:
        if (message.expectsResponse())
          paramsClass = XRRuntime_RequestSession_Params;
      break;
      case kXRRuntime_ShutdownSession_Name:
        if (message.expectsResponse())
          paramsClass = XRRuntime_ShutdownSession_Params;
      break;
      case kXRRuntime_ListenToDeviceChanges_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRRuntime_ListenToDeviceChanges_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXRRuntimeResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kXRRuntime_RequestSession_Name:
        if (message.isResponse())
          paramsClass = XRRuntime_RequestSession_ResponseParams;
        break;
      case kXRRuntime_ShutdownSession_Name:
        if (message.isResponse())
          paramsClass = XRRuntime_ShutdownSession_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var XRRuntime = {
    name: 'device.mojom.XRRuntime',
    kVersion: 0,
    ptrClass: XRRuntimePtr,
    proxyClass: XRRuntimeProxy,
    stubClass: XRRuntimeStub,
    validateRequest: validateXRRuntimeRequest,
    validateResponse: validateXRRuntimeResponse,
  };
  XRRuntimeStub.prototype.validator = validateXRRuntimeRequest;
  XRRuntimeProxy.prototype.validator = validateXRRuntimeResponse;
  var kImmersiveOverlay_RequestNextOverlayPose_Name = 101918504;
  var kImmersiveOverlay_SubmitOverlayTexture_Name = 856138114;
  var kImmersiveOverlay_SetOverlayAndWebXRVisibility_Name = 2022075189;
  var kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name = 1144011997;

  function ImmersiveOverlayPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ImmersiveOverlay,
                                                   handleOrPtrInfo);
  }

  function ImmersiveOverlayAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ImmersiveOverlay, associatedInterfacePtrInfo);
  }

  ImmersiveOverlayAssociatedPtr.prototype =
      Object.create(ImmersiveOverlayPtr.prototype);
  ImmersiveOverlayAssociatedPtr.prototype.constructor =
      ImmersiveOverlayAssociatedPtr;

  function ImmersiveOverlayProxy(receiver) {
    this.receiver_ = receiver;
  }
  ImmersiveOverlayPtr.prototype.requestNextOverlayPose = function() {
    return ImmersiveOverlayProxy.prototype.requestNextOverlayPose
        .apply(this.ptr.getProxy(), arguments);
  };

  ImmersiveOverlayProxy.prototype.requestNextOverlayPose = function() {
    var params_ = new ImmersiveOverlay_RequestNextOverlayPose_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kImmersiveOverlay_RequestNextOverlayPose_Name,
          codec.align(ImmersiveOverlay_RequestNextOverlayPose_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ImmersiveOverlay_RequestNextOverlayPose_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ImmersiveOverlay_RequestNextOverlayPose_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ImmersiveOverlayPtr.prototype.submitOverlayTexture = function() {
    return ImmersiveOverlayProxy.prototype.submitOverlayTexture
        .apply(this.ptr.getProxy(), arguments);
  };

  ImmersiveOverlayProxy.prototype.submitOverlayTexture = function(frameId, texture, syncToken, leftBounds, rightBounds) {
    var params_ = new ImmersiveOverlay_SubmitOverlayTexture_Params();
    params_.frameId = frameId;
    params_.texture = texture;
    params_.syncToken = syncToken;
    params_.leftBounds = leftBounds;
    params_.rightBounds = rightBounds;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kImmersiveOverlay_SubmitOverlayTexture_Name,
          codec.align(ImmersiveOverlay_SubmitOverlayTexture_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ImmersiveOverlay_SubmitOverlayTexture_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ImmersiveOverlay_SubmitOverlayTexture_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ImmersiveOverlayPtr.prototype.setOverlayAndWebXRVisibility = function() {
    return ImmersiveOverlayProxy.prototype.setOverlayAndWebXRVisibility
        .apply(this.ptr.getProxy(), arguments);
  };

  ImmersiveOverlayProxy.prototype.setOverlayAndWebXRVisibility = function(overlayVisible, webxrVisible) {
    var params_ = new ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params();
    params_.overlayVisible = overlayVisible;
    params_.webxrVisible = webxrVisible;
    var builder = new codec.MessageV0Builder(
        kImmersiveOverlay_SetOverlayAndWebXRVisibility_Name,
        codec.align(ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params.encodedSize));
    builder.encodeStruct(ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ImmersiveOverlayPtr.prototype.requestNotificationOnWebXrSubmitted = function() {
    return ImmersiveOverlayProxy.prototype.requestNotificationOnWebXrSubmitted
        .apply(this.ptr.getProxy(), arguments);
  };

  ImmersiveOverlayProxy.prototype.requestNotificationOnWebXrSubmitted = function() {
    var params_ = new ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name,
          codec.align(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ImmersiveOverlayStub(delegate) {
    this.delegate_ = delegate;
  }
  ImmersiveOverlayStub.prototype.requestNextOverlayPose = function() {
    return this.delegate_ && this.delegate_.requestNextOverlayPose && this.delegate_.requestNextOverlayPose();
  }
  ImmersiveOverlayStub.prototype.submitOverlayTexture = function(frameId, texture, syncToken, leftBounds, rightBounds) {
    return this.delegate_ && this.delegate_.submitOverlayTexture && this.delegate_.submitOverlayTexture(frameId, texture, syncToken, leftBounds, rightBounds);
  }
  ImmersiveOverlayStub.prototype.setOverlayAndWebXRVisibility = function(overlayVisible, webxrVisible) {
    return this.delegate_ && this.delegate_.setOverlayAndWebXRVisibility && this.delegate_.setOverlayAndWebXRVisibility(overlayVisible, webxrVisible);
  }
  ImmersiveOverlayStub.prototype.requestNotificationOnWebXrSubmitted = function() {
    return this.delegate_ && this.delegate_.requestNotificationOnWebXrSubmitted && this.delegate_.requestNotificationOnWebXrSubmitted();
  }

  ImmersiveOverlayStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kImmersiveOverlay_SetOverlayAndWebXRVisibility_Name:
      var params = reader.decodeStruct(ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params);
      this.setOverlayAndWebXRVisibility(params.overlayVisible, params.webxrVisible);
      return true;
    default:
      return false;
    }
  };

  ImmersiveOverlayStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kImmersiveOverlay_RequestNextOverlayPose_Name:
      var params = reader.decodeStruct(ImmersiveOverlay_RequestNextOverlayPose_Params);
      this.requestNextOverlayPose().then(function(response) {
        var responseParams =
            new ImmersiveOverlay_RequestNextOverlayPose_ResponseParams();
        responseParams.renderInfo = response.renderInfo;
        var builder = new codec.MessageV1Builder(
            kImmersiveOverlay_RequestNextOverlayPose_Name,
            codec.align(ImmersiveOverlay_RequestNextOverlayPose_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ImmersiveOverlay_RequestNextOverlayPose_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kImmersiveOverlay_SubmitOverlayTexture_Name:
      var params = reader.decodeStruct(ImmersiveOverlay_SubmitOverlayTexture_Params);
      this.submitOverlayTexture(params.frameId, params.texture, params.syncToken, params.leftBounds, params.rightBounds).then(function(response) {
        var responseParams =
            new ImmersiveOverlay_SubmitOverlayTexture_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kImmersiveOverlay_SubmitOverlayTexture_Name,
            codec.align(ImmersiveOverlay_SubmitOverlayTexture_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ImmersiveOverlay_SubmitOverlayTexture_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name:
      var params = reader.decodeStruct(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params);
      this.requestNotificationOnWebXrSubmitted().then(function(response) {
        var responseParams =
            new ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name,
            codec.align(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateImmersiveOverlayRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kImmersiveOverlay_RequestNextOverlayPose_Name:
        if (message.expectsResponse())
          paramsClass = ImmersiveOverlay_RequestNextOverlayPose_Params;
      break;
      case kImmersiveOverlay_SubmitOverlayTexture_Name:
        if (message.expectsResponse())
          paramsClass = ImmersiveOverlay_SubmitOverlayTexture_Params;
      break;
      case kImmersiveOverlay_SetOverlayAndWebXRVisibility_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ImmersiveOverlay_SetOverlayAndWebXRVisibility_Params;
      break;
      case kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name:
        if (message.expectsResponse())
          paramsClass = ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateImmersiveOverlayResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kImmersiveOverlay_RequestNextOverlayPose_Name:
        if (message.isResponse())
          paramsClass = ImmersiveOverlay_RequestNextOverlayPose_ResponseParams;
        break;
      case kImmersiveOverlay_SubmitOverlayTexture_Name:
        if (message.isResponse())
          paramsClass = ImmersiveOverlay_SubmitOverlayTexture_ResponseParams;
        break;
      case kImmersiveOverlay_RequestNotificationOnWebXrSubmitted_Name:
        if (message.isResponse())
          paramsClass = ImmersiveOverlay_RequestNotificationOnWebXrSubmitted_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ImmersiveOverlay = {
    name: 'device.mojom.ImmersiveOverlay',
    kVersion: 0,
    ptrClass: ImmersiveOverlayPtr,
    proxyClass: ImmersiveOverlayProxy,
    stubClass: ImmersiveOverlayStub,
    validateRequest: validateImmersiveOverlayRequest,
    validateResponse: validateImmersiveOverlayResponse,
  };
  ImmersiveOverlayStub.prototype.validator = validateImmersiveOverlayRequest;
  ImmersiveOverlayProxy.prototype.validator = validateImmersiveOverlayResponse;
  var kXRCompositorHost_CreateImmersiveOverlay_Name = 182781507;

  function XRCompositorHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XRCompositorHost,
                                                   handleOrPtrInfo);
  }

  function XRCompositorHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XRCompositorHost, associatedInterfacePtrInfo);
  }

  XRCompositorHostAssociatedPtr.prototype =
      Object.create(XRCompositorHostPtr.prototype);
  XRCompositorHostAssociatedPtr.prototype.constructor =
      XRCompositorHostAssociatedPtr;

  function XRCompositorHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  XRCompositorHostPtr.prototype.createImmersiveOverlay = function() {
    return XRCompositorHostProxy.prototype.createImmersiveOverlay
        .apply(this.ptr.getProxy(), arguments);
  };

  XRCompositorHostProxy.prototype.createImmersiveOverlay = function(overlay) {
    var params_ = new XRCompositorHost_CreateImmersiveOverlay_Params();
    params_.overlay = overlay;
    var builder = new codec.MessageV0Builder(
        kXRCompositorHost_CreateImmersiveOverlay_Name,
        codec.align(XRCompositorHost_CreateImmersiveOverlay_Params.encodedSize));
    builder.encodeStruct(XRCompositorHost_CreateImmersiveOverlay_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XRCompositorHostStub(delegate) {
    this.delegate_ = delegate;
  }
  XRCompositorHostStub.prototype.createImmersiveOverlay = function(overlay) {
    return this.delegate_ && this.delegate_.createImmersiveOverlay && this.delegate_.createImmersiveOverlay(overlay);
  }

  XRCompositorHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRCompositorHost_CreateImmersiveOverlay_Name:
      var params = reader.decodeStruct(XRCompositorHost_CreateImmersiveOverlay_Params);
      this.createImmersiveOverlay(params.overlay);
      return true;
    default:
      return false;
    }
  };

  XRCompositorHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateXRCompositorHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXRCompositorHost_CreateImmersiveOverlay_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRCompositorHost_CreateImmersiveOverlay_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXRCompositorHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var XRCompositorHost = {
    name: 'device.mojom.XRCompositorHost',
    kVersion: 0,
    ptrClass: XRCompositorHostPtr,
    proxyClass: XRCompositorHostProxy,
    stubClass: XRCompositorHostStub,
    validateRequest: validateXRCompositorHostRequest,
    validateResponse: null,
  };
  XRCompositorHostStub.prototype.validator = validateXRCompositorHostRequest;
  XRCompositorHostProxy.prototype.validator = null;
  var kIsolatedXRRuntimeProviderClient_OnDeviceAdded_Name = 1265513915;
  var kIsolatedXRRuntimeProviderClient_OnDeviceRemoved_Name = 1552069916;
  var kIsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Name = 1680494769;

  function IsolatedXRRuntimeProviderClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(IsolatedXRRuntimeProviderClient,
                                                   handleOrPtrInfo);
  }

  function IsolatedXRRuntimeProviderClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        IsolatedXRRuntimeProviderClient, associatedInterfacePtrInfo);
  }

  IsolatedXRRuntimeProviderClientAssociatedPtr.prototype =
      Object.create(IsolatedXRRuntimeProviderClientPtr.prototype);
  IsolatedXRRuntimeProviderClientAssociatedPtr.prototype.constructor =
      IsolatedXRRuntimeProviderClientAssociatedPtr;

  function IsolatedXRRuntimeProviderClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  IsolatedXRRuntimeProviderClientPtr.prototype.onDeviceAdded = function() {
    return IsolatedXRRuntimeProviderClientProxy.prototype.onDeviceAdded
        .apply(this.ptr.getProxy(), arguments);
  };

  IsolatedXRRuntimeProviderClientProxy.prototype.onDeviceAdded = function(runtime, compositorHost, deviceData, deviceId) {
    var params_ = new IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params();
    params_.runtime = runtime;
    params_.compositorHost = compositorHost;
    params_.deviceData = deviceData;
    params_.deviceId = deviceId;
    var builder = new codec.MessageV0Builder(
        kIsolatedXRRuntimeProviderClient_OnDeviceAdded_Name,
        codec.align(IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params.encodedSize));
    builder.encodeStruct(IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  IsolatedXRRuntimeProviderClientPtr.prototype.onDeviceRemoved = function() {
    return IsolatedXRRuntimeProviderClientProxy.prototype.onDeviceRemoved
        .apply(this.ptr.getProxy(), arguments);
  };

  IsolatedXRRuntimeProviderClientProxy.prototype.onDeviceRemoved = function(deviceIndex) {
    var params_ = new IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params();
    params_.deviceIndex = deviceIndex;
    var builder = new codec.MessageV0Builder(
        kIsolatedXRRuntimeProviderClient_OnDeviceRemoved_Name,
        codec.align(IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params.encodedSize));
    builder.encodeStruct(IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  IsolatedXRRuntimeProviderClientPtr.prototype.onDevicesEnumerated = function() {
    return IsolatedXRRuntimeProviderClientProxy.prototype.onDevicesEnumerated
        .apply(this.ptr.getProxy(), arguments);
  };

  IsolatedXRRuntimeProviderClientProxy.prototype.onDevicesEnumerated = function() {
    var params_ = new IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params();
    var builder = new codec.MessageV0Builder(
        kIsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Name,
        codec.align(IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params.encodedSize));
    builder.encodeStruct(IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function IsolatedXRRuntimeProviderClientStub(delegate) {
    this.delegate_ = delegate;
  }
  IsolatedXRRuntimeProviderClientStub.prototype.onDeviceAdded = function(runtime, compositorHost, deviceData, deviceId) {
    return this.delegate_ && this.delegate_.onDeviceAdded && this.delegate_.onDeviceAdded(runtime, compositorHost, deviceData, deviceId);
  }
  IsolatedXRRuntimeProviderClientStub.prototype.onDeviceRemoved = function(deviceIndex) {
    return this.delegate_ && this.delegate_.onDeviceRemoved && this.delegate_.onDeviceRemoved(deviceIndex);
  }
  IsolatedXRRuntimeProviderClientStub.prototype.onDevicesEnumerated = function() {
    return this.delegate_ && this.delegate_.onDevicesEnumerated && this.delegate_.onDevicesEnumerated();
  }

  IsolatedXRRuntimeProviderClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kIsolatedXRRuntimeProviderClient_OnDeviceAdded_Name:
      var params = reader.decodeStruct(IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params);
      this.onDeviceAdded(params.runtime, params.compositorHost, params.deviceData, params.deviceId);
      return true;
    case kIsolatedXRRuntimeProviderClient_OnDeviceRemoved_Name:
      var params = reader.decodeStruct(IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params);
      this.onDeviceRemoved(params.deviceIndex);
      return true;
    case kIsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Name:
      var params = reader.decodeStruct(IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params);
      this.onDevicesEnumerated();
      return true;
    default:
      return false;
    }
  };

  IsolatedXRRuntimeProviderClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateIsolatedXRRuntimeProviderClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kIsolatedXRRuntimeProviderClient_OnDeviceAdded_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = IsolatedXRRuntimeProviderClient_OnDeviceAdded_Params;
      break;
      case kIsolatedXRRuntimeProviderClient_OnDeviceRemoved_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = IsolatedXRRuntimeProviderClient_OnDeviceRemoved_Params;
      break;
      case kIsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = IsolatedXRRuntimeProviderClient_OnDevicesEnumerated_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateIsolatedXRRuntimeProviderClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var IsolatedXRRuntimeProviderClient = {
    name: 'device.mojom.IsolatedXRRuntimeProviderClient',
    kVersion: 0,
    ptrClass: IsolatedXRRuntimeProviderClientPtr,
    proxyClass: IsolatedXRRuntimeProviderClientProxy,
    stubClass: IsolatedXRRuntimeProviderClientStub,
    validateRequest: validateIsolatedXRRuntimeProviderClientRequest,
    validateResponse: null,
  };
  IsolatedXRRuntimeProviderClientStub.prototype.validator = validateIsolatedXRRuntimeProviderClientRequest;
  IsolatedXRRuntimeProviderClientProxy.prototype.validator = null;
  var kIsolatedXRRuntimeProvider_RequestDevices_Name = 47945964;

  function IsolatedXRRuntimeProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(IsolatedXRRuntimeProvider,
                                                   handleOrPtrInfo);
  }

  function IsolatedXRRuntimeProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        IsolatedXRRuntimeProvider, associatedInterfacePtrInfo);
  }

  IsolatedXRRuntimeProviderAssociatedPtr.prototype =
      Object.create(IsolatedXRRuntimeProviderPtr.prototype);
  IsolatedXRRuntimeProviderAssociatedPtr.prototype.constructor =
      IsolatedXRRuntimeProviderAssociatedPtr;

  function IsolatedXRRuntimeProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  IsolatedXRRuntimeProviderPtr.prototype.requestDevices = function() {
    return IsolatedXRRuntimeProviderProxy.prototype.requestDevices
        .apply(this.ptr.getProxy(), arguments);
  };

  IsolatedXRRuntimeProviderProxy.prototype.requestDevices = function(client) {
    var params_ = new IsolatedXRRuntimeProvider_RequestDevices_Params();
    params_.client = client;
    var builder = new codec.MessageV0Builder(
        kIsolatedXRRuntimeProvider_RequestDevices_Name,
        codec.align(IsolatedXRRuntimeProvider_RequestDevices_Params.encodedSize));
    builder.encodeStruct(IsolatedXRRuntimeProvider_RequestDevices_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function IsolatedXRRuntimeProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  IsolatedXRRuntimeProviderStub.prototype.requestDevices = function(client) {
    return this.delegate_ && this.delegate_.requestDevices && this.delegate_.requestDevices(client);
  }

  IsolatedXRRuntimeProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kIsolatedXRRuntimeProvider_RequestDevices_Name:
      var params = reader.decodeStruct(IsolatedXRRuntimeProvider_RequestDevices_Params);
      this.requestDevices(params.client);
      return true;
    default:
      return false;
    }
  };

  IsolatedXRRuntimeProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateIsolatedXRRuntimeProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kIsolatedXRRuntimeProvider_RequestDevices_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = IsolatedXRRuntimeProvider_RequestDevices_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateIsolatedXRRuntimeProviderResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var IsolatedXRRuntimeProvider = {
    name: 'device.mojom.IsolatedXRRuntimeProvider',
    kVersion: 0,
    ptrClass: IsolatedXRRuntimeProviderPtr,
    proxyClass: IsolatedXRRuntimeProviderProxy,
    stubClass: IsolatedXRRuntimeProviderStub,
    validateRequest: validateIsolatedXRRuntimeProviderRequest,
    validateResponse: null,
  };
  IsolatedXRRuntimeProviderStub.prototype.validator = validateIsolatedXRRuntimeProviderRequest;
  IsolatedXRRuntimeProviderProxy.prototype.validator = null;
  var kXRDeviceService_BindRuntimeProvider_Name = 629849652;
  var kXRDeviceService_BindTestHook_Name = 1281767428;

  function XRDeviceServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XRDeviceService,
                                                   handleOrPtrInfo);
  }

  function XRDeviceServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XRDeviceService, associatedInterfacePtrInfo);
  }

  XRDeviceServiceAssociatedPtr.prototype =
      Object.create(XRDeviceServicePtr.prototype);
  XRDeviceServiceAssociatedPtr.prototype.constructor =
      XRDeviceServiceAssociatedPtr;

  function XRDeviceServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  XRDeviceServicePtr.prototype.bindRuntimeProvider = function() {
    return XRDeviceServiceProxy.prototype.bindRuntimeProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  XRDeviceServiceProxy.prototype.bindRuntimeProvider = function(receiver, host) {
    var params_ = new XRDeviceService_BindRuntimeProvider_Params();
    params_.receiver = receiver;
    params_.host = host;
    var builder = new codec.MessageV0Builder(
        kXRDeviceService_BindRuntimeProvider_Name,
        codec.align(XRDeviceService_BindRuntimeProvider_Params.encodedSize));
    builder.encodeStruct(XRDeviceService_BindRuntimeProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  XRDeviceServicePtr.prototype.bindTestHook = function() {
    return XRDeviceServiceProxy.prototype.bindTestHook
        .apply(this.ptr.getProxy(), arguments);
  };

  XRDeviceServiceProxy.prototype.bindTestHook = function(receiver) {
    var params_ = new XRDeviceService_BindTestHook_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kXRDeviceService_BindTestHook_Name,
        codec.align(XRDeviceService_BindTestHook_Params.encodedSize));
    builder.encodeStruct(XRDeviceService_BindTestHook_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XRDeviceServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  XRDeviceServiceStub.prototype.bindRuntimeProvider = function(receiver, host) {
    return this.delegate_ && this.delegate_.bindRuntimeProvider && this.delegate_.bindRuntimeProvider(receiver, host);
  }
  XRDeviceServiceStub.prototype.bindTestHook = function(receiver) {
    return this.delegate_ && this.delegate_.bindTestHook && this.delegate_.bindTestHook(receiver);
  }

  XRDeviceServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRDeviceService_BindRuntimeProvider_Name:
      var params = reader.decodeStruct(XRDeviceService_BindRuntimeProvider_Params);
      this.bindRuntimeProvider(params.receiver, params.host);
      return true;
    case kXRDeviceService_BindTestHook_Name:
      var params = reader.decodeStruct(XRDeviceService_BindTestHook_Params);
      this.bindTestHook(params.receiver);
      return true;
    default:
      return false;
    }
  };

  XRDeviceServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateXRDeviceServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXRDeviceService_BindRuntimeProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRDeviceService_BindRuntimeProvider_Params;
      break;
      case kXRDeviceService_BindTestHook_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRDeviceService_BindTestHook_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXRDeviceServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var XRDeviceService = {
    name: 'device.mojom.XRDeviceService',
    kVersion: 0,
    ptrClass: XRDeviceServicePtr,
    proxyClass: XRDeviceServiceProxy,
    stubClass: XRDeviceServiceStub,
    validateRequest: validateXRDeviceServiceRequest,
    validateResponse: null,
  };
  XRDeviceServiceStub.prototype.validator = validateXRDeviceServiceRequest;
  XRDeviceServiceProxy.prototype.validator = null;
  var kXRDeviceServiceHost_BindGpu_Name = 701747645;

  function XRDeviceServiceHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(XRDeviceServiceHost,
                                                   handleOrPtrInfo);
  }

  function XRDeviceServiceHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        XRDeviceServiceHost, associatedInterfacePtrInfo);
  }

  XRDeviceServiceHostAssociatedPtr.prototype =
      Object.create(XRDeviceServiceHostPtr.prototype);
  XRDeviceServiceHostAssociatedPtr.prototype.constructor =
      XRDeviceServiceHostAssociatedPtr;

  function XRDeviceServiceHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  XRDeviceServiceHostPtr.prototype.bindGpu = function() {
    return XRDeviceServiceHostProxy.prototype.bindGpu
        .apply(this.ptr.getProxy(), arguments);
  };

  XRDeviceServiceHostProxy.prototype.bindGpu = function(receiver) {
    var params_ = new XRDeviceServiceHost_BindGpu_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kXRDeviceServiceHost_BindGpu_Name,
        codec.align(XRDeviceServiceHost_BindGpu_Params.encodedSize));
    builder.encodeStruct(XRDeviceServiceHost_BindGpu_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function XRDeviceServiceHostStub(delegate) {
    this.delegate_ = delegate;
  }
  XRDeviceServiceHostStub.prototype.bindGpu = function(receiver) {
    return this.delegate_ && this.delegate_.bindGpu && this.delegate_.bindGpu(receiver);
  }

  XRDeviceServiceHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kXRDeviceServiceHost_BindGpu_Name:
      var params = reader.decodeStruct(XRDeviceServiceHost_BindGpu_Params);
      this.bindGpu(params.receiver);
      return true;
    default:
      return false;
    }
  };

  XRDeviceServiceHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateXRDeviceServiceHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kXRDeviceServiceHost_BindGpu_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = XRDeviceServiceHost_BindGpu_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateXRDeviceServiceHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var XRDeviceServiceHost = {
    name: 'device.mojom.XRDeviceServiceHost',
    kVersion: 0,
    ptrClass: XRDeviceServiceHostPtr,
    proxyClass: XRDeviceServiceHostProxy,
    stubClass: XRDeviceServiceHostStub,
    validateRequest: validateXRDeviceServiceHostRequest,
    validateResponse: null,
  };
  XRDeviceServiceHostStub.prototype.validator = validateXRDeviceServiceHostRequest;
  XRDeviceServiceHostProxy.prototype.validator = null;
  exports.XR_SANDBOX = XR_SANDBOX;
  exports.XRRuntimeSessionOptions = XRRuntimeSessionOptions;
  exports.XRRuntimeSessionResult = XRRuntimeSessionResult;
  exports.XRRenderInfo = XRRenderInfo;
  exports.XRDeviceData = XRDeviceData;
  exports.XRSessionController = XRSessionController;
  exports.XRSessionControllerPtr = XRSessionControllerPtr;
  exports.XRSessionControllerAssociatedPtr = XRSessionControllerAssociatedPtr;
  exports.XRRuntimeEventListener = XRRuntimeEventListener;
  exports.XRRuntimeEventListenerPtr = XRRuntimeEventListenerPtr;
  exports.XRRuntimeEventListenerAssociatedPtr = XRRuntimeEventListenerAssociatedPtr;
  exports.XRRuntime = XRRuntime;
  exports.XRRuntimePtr = XRRuntimePtr;
  exports.XRRuntimeAssociatedPtr = XRRuntimeAssociatedPtr;
  exports.ImmersiveOverlay = ImmersiveOverlay;
  exports.ImmersiveOverlayPtr = ImmersiveOverlayPtr;
  exports.ImmersiveOverlayAssociatedPtr = ImmersiveOverlayAssociatedPtr;
  exports.XRCompositorHost = XRCompositorHost;
  exports.XRCompositorHostPtr = XRCompositorHostPtr;
  exports.XRCompositorHostAssociatedPtr = XRCompositorHostAssociatedPtr;
  exports.IsolatedXRRuntimeProviderClient = IsolatedXRRuntimeProviderClient;
  exports.IsolatedXRRuntimeProviderClientPtr = IsolatedXRRuntimeProviderClientPtr;
  exports.IsolatedXRRuntimeProviderClientAssociatedPtr = IsolatedXRRuntimeProviderClientAssociatedPtr;
  exports.IsolatedXRRuntimeProvider = IsolatedXRRuntimeProvider;
  exports.IsolatedXRRuntimeProviderPtr = IsolatedXRRuntimeProviderPtr;
  exports.IsolatedXRRuntimeProviderAssociatedPtr = IsolatedXRRuntimeProviderAssociatedPtr;
  exports.XRDeviceService = XRDeviceService;
  exports.XRDeviceServicePtr = XRDeviceServicePtr;
  exports.XRDeviceServiceAssociatedPtr = XRDeviceServiceAssociatedPtr;
  exports.XRDeviceServiceHost = XRDeviceServiceHost;
  exports.XRDeviceServiceHostPtr = XRDeviceServiceHostPtr;
  exports.XRDeviceServiceHostAssociatedPtr = XRDeviceServiceHostAssociatedPtr;
})();