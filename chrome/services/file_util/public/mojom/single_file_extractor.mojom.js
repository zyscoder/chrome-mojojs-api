// chrome/services/file_util/public/mojom/single_file_extractor.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/services/file_util/public/mojom/single_file_extractor.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('chrome.mojom');
  var constants$ =
      mojo.internal.exposeNamespace('chrome.fileUtil.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'chrome/services/file_util/public/mojom/constants.mojom', 'constants.mojom.js');
  }
  var file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file.mojom', '../../../../../mojo/public/mojom/base/file.mojom.js');
  }
  var read_only_file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_file.mojom', '../../../../../mojo/public/mojom/base/read_only_file.mojom.js');
  }



  function SingleFileExtractor_Extract_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SingleFileExtractor_Extract_Params.prototype.initDefaults_ = function() {
    this.srcFile = null;
    this.dstFile = null;
    this.listener = new SingleFileExtractorListenerPtr();
  };
  SingleFileExtractor_Extract_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SingleFileExtractor_Extract_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SingleFileExtractor_Extract_Params.srcFile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, read_only_file$.ReadOnlyFile, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SingleFileExtractor_Extract_Params.dstFile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, file$.File, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SingleFileExtractor_Extract_Params.listener
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SingleFileExtractor_Extract_Params.encodedSize = codec.kStructHeaderSize + 24;

  SingleFileExtractor_Extract_Params.decode = function(decoder) {
    var packed;
    var val = new SingleFileExtractor_Extract_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.srcFile =
        decoder.decodeStructPointer(read_only_file$.ReadOnlyFile);
    val.dstFile =
        decoder.decodeStructPointer(file$.File);
    val.listener =
        decoder.decodeStruct(new codec.Interface(SingleFileExtractorListenerPtr));
    return val;
  };

  SingleFileExtractor_Extract_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SingleFileExtractor_Extract_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(read_only_file$.ReadOnlyFile, val.srcFile);
    encoder.encodeStructPointer(file$.File, val.dstFile);
    encoder.encodeStruct(new codec.Interface(SingleFileExtractorListenerPtr), val.listener);
  };
  function SingleFileExtractor_Extract_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SingleFileExtractor_Extract_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  SingleFileExtractor_Extract_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SingleFileExtractor_Extract_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SingleFileExtractor_Extract_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, constants$.ExtractionResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SingleFileExtractor_Extract_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SingleFileExtractor_Extract_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SingleFileExtractor_Extract_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(constants$.ExtractionResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SingleFileExtractor_Extract_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SingleFileExtractor_Extract_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SingleFileExtractorListener_OnProgress_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SingleFileExtractorListener_OnProgress_Params.prototype.initDefaults_ = function() {
    this.totalBytes = 0;
    this.progressBytes = 0;
  };
  SingleFileExtractorListener_OnProgress_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SingleFileExtractorListener_OnProgress_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  SingleFileExtractorListener_OnProgress_Params.encodedSize = codec.kStructHeaderSize + 16;

  SingleFileExtractorListener_OnProgress_Params.decode = function(decoder) {
    var packed;
    var val = new SingleFileExtractorListener_OnProgress_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.totalBytes =
        decoder.decodeStruct(codec.Uint64);
    val.progressBytes =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  SingleFileExtractorListener_OnProgress_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SingleFileExtractorListener_OnProgress_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.totalBytes);
    encoder.encodeStruct(codec.Uint64, val.progressBytes);
  };
  var kSingleFileExtractor_Extract_Name = 856705956;

  function SingleFileExtractorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SingleFileExtractor,
                                                   handleOrPtrInfo);
  }

  function SingleFileExtractorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SingleFileExtractor, associatedInterfacePtrInfo);
  }

  SingleFileExtractorAssociatedPtr.prototype =
      Object.create(SingleFileExtractorPtr.prototype);
  SingleFileExtractorAssociatedPtr.prototype.constructor =
      SingleFileExtractorAssociatedPtr;

  function SingleFileExtractorProxy(receiver) {
    this.receiver_ = receiver;
  }
  SingleFileExtractorPtr.prototype.extract = function() {
    return SingleFileExtractorProxy.prototype.extract
        .apply(this.ptr.getProxy(), arguments);
  };

  SingleFileExtractorProxy.prototype.extract = function(srcFile, dstFile, listener) {
    var params_ = new SingleFileExtractor_Extract_Params();
    params_.srcFile = srcFile;
    params_.dstFile = dstFile;
    params_.listener = listener;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSingleFileExtractor_Extract_Name,
          codec.align(SingleFileExtractor_Extract_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SingleFileExtractor_Extract_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SingleFileExtractor_Extract_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SingleFileExtractorStub(delegate) {
    this.delegate_ = delegate;
  }
  SingleFileExtractorStub.prototype.extract = function(srcFile, dstFile, listener) {
    return this.delegate_ && this.delegate_.extract && this.delegate_.extract(srcFile, dstFile, listener);
  }

  SingleFileExtractorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  SingleFileExtractorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSingleFileExtractor_Extract_Name:
      var params = reader.decodeStruct(SingleFileExtractor_Extract_Params);
      this.extract(params.srcFile, params.dstFile, params.listener).then(function(response) {
        var responseParams =
            new SingleFileExtractor_Extract_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kSingleFileExtractor_Extract_Name,
            codec.align(SingleFileExtractor_Extract_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SingleFileExtractor_Extract_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSingleFileExtractorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSingleFileExtractor_Extract_Name:
        if (message.expectsResponse())
          paramsClass = SingleFileExtractor_Extract_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSingleFileExtractorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSingleFileExtractor_Extract_Name:
        if (message.isResponse())
          paramsClass = SingleFileExtractor_Extract_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SingleFileExtractor = {
    name: 'chrome.mojom.SingleFileExtractor',
    kVersion: 0,
    ptrClass: SingleFileExtractorPtr,
    proxyClass: SingleFileExtractorProxy,
    stubClass: SingleFileExtractorStub,
    validateRequest: validateSingleFileExtractorRequest,
    validateResponse: validateSingleFileExtractorResponse,
  };
  SingleFileExtractorStub.prototype.validator = validateSingleFileExtractorRequest;
  SingleFileExtractorProxy.prototype.validator = validateSingleFileExtractorResponse;
  var kSingleFileExtractorListener_OnProgress_Name = 13064555;

  function SingleFileExtractorListenerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SingleFileExtractorListener,
                                                   handleOrPtrInfo);
  }

  function SingleFileExtractorListenerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SingleFileExtractorListener, associatedInterfacePtrInfo);
  }

  SingleFileExtractorListenerAssociatedPtr.prototype =
      Object.create(SingleFileExtractorListenerPtr.prototype);
  SingleFileExtractorListenerAssociatedPtr.prototype.constructor =
      SingleFileExtractorListenerAssociatedPtr;

  function SingleFileExtractorListenerProxy(receiver) {
    this.receiver_ = receiver;
  }
  SingleFileExtractorListenerPtr.prototype.onProgress = function() {
    return SingleFileExtractorListenerProxy.prototype.onProgress
        .apply(this.ptr.getProxy(), arguments);
  };

  SingleFileExtractorListenerProxy.prototype.onProgress = function(totalBytes, progressBytes) {
    var params_ = new SingleFileExtractorListener_OnProgress_Params();
    params_.totalBytes = totalBytes;
    params_.progressBytes = progressBytes;
    var builder = new codec.MessageV0Builder(
        kSingleFileExtractorListener_OnProgress_Name,
        codec.align(SingleFileExtractorListener_OnProgress_Params.encodedSize));
    builder.encodeStruct(SingleFileExtractorListener_OnProgress_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function SingleFileExtractorListenerStub(delegate) {
    this.delegate_ = delegate;
  }
  SingleFileExtractorListenerStub.prototype.onProgress = function(totalBytes, progressBytes) {
    return this.delegate_ && this.delegate_.onProgress && this.delegate_.onProgress(totalBytes, progressBytes);
  }

  SingleFileExtractorListenerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSingleFileExtractorListener_OnProgress_Name:
      var params = reader.decodeStruct(SingleFileExtractorListener_OnProgress_Params);
      this.onProgress(params.totalBytes, params.progressBytes);
      return true;
    default:
      return false;
    }
  };

  SingleFileExtractorListenerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateSingleFileExtractorListenerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSingleFileExtractorListener_OnProgress_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SingleFileExtractorListener_OnProgress_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSingleFileExtractorListenerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var SingleFileExtractorListener = {
    name: 'chrome.mojom.SingleFileExtractorListener',
    kVersion: 0,
    ptrClass: SingleFileExtractorListenerPtr,
    proxyClass: SingleFileExtractorListenerProxy,
    stubClass: SingleFileExtractorListenerStub,
    validateRequest: validateSingleFileExtractorListenerRequest,
    validateResponse: null,
  };
  SingleFileExtractorListenerStub.prototype.validator = validateSingleFileExtractorListenerRequest;
  SingleFileExtractorListenerProxy.prototype.validator = null;
  exports.SingleFileExtractor = SingleFileExtractor;
  exports.SingleFileExtractorPtr = SingleFileExtractorPtr;
  exports.SingleFileExtractorAssociatedPtr = SingleFileExtractorAssociatedPtr;
  exports.SingleFileExtractorListener = SingleFileExtractorListener;
  exports.SingleFileExtractorListenerPtr = SingleFileExtractorListenerPtr;
  exports.SingleFileExtractorListenerAssociatedPtr = SingleFileExtractorListenerAssociatedPtr;
})();