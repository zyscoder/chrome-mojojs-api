// chrome/services/file_util/public/mojom/safe_document_analyzer.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/services/file_util/public/mojom/safe_document_analyzer.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('chrome.mojom');
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../../../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var read_only_file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_file.mojom', '../../../../../mojo/public/mojom/base/read_only_file.mojom.js');
  }


  var MaldocaErrorType = {};
  MaldocaErrorType.kOk = 0;
  MaldocaErrorType.kCancelled = 1;
  MaldocaErrorType.kUnknown = 2;
  MaldocaErrorType.kInvalidArgument = 3;
  MaldocaErrorType.kDeadlineExceeded = 4;
  MaldocaErrorType.kNotFound = 5;
  MaldocaErrorType.kAlreadyExists = 6;
  MaldocaErrorType.kPermissionDenied = 7;
  MaldocaErrorType.kResourceExhausted = 8;
  MaldocaErrorType.kFailedPrecondition = 9;
  MaldocaErrorType.kAborted = 10;
  MaldocaErrorType.kOutOfRange = 11;
  MaldocaErrorType.kUnimplemented = 12;
  MaldocaErrorType.kInternal = 13;
  MaldocaErrorType.kUnavailable = 14;
  MaldocaErrorType.kDataLoss = 15;
  MaldocaErrorType.kUnauthenticated = 16;
  MaldocaErrorType.kDocTypeInferenceFailed = 1000;
  MaldocaErrorType.kUnsupportedDocType = 1001;
  MaldocaErrorType.kSandboxError = 1002;
  MaldocaErrorType.kArchiveCorrupted = 1003;
  MaldocaErrorType.kOLEDirParsingFailed = 1004;
  MaldocaErrorType.kOLEFatHeaderParsingFailed = 1005;
  MaldocaErrorType.kPrefixedANSIStringHeaderTooShort = 1006;
  MaldocaErrorType.kPrefixedANSIStringContentTooShort = 1007;
  MaldocaErrorType.kClipboardFormatOrANSIStringTooShort = 1008;
  MaldocaErrorType.kBOFHeaderTooShort = 1009;
  MaldocaErrorType.kNotBIFFFromat = 1010;
  MaldocaErrorType.kFailParseBIFFVersion = 1011;
  MaldocaErrorType.kInvalidDDEOLELink = 1012;
  MaldocaErrorType.kOLENativeEmbeddedParseSizeFail = 1013;
  MaldocaErrorType.kOLENativeEmbeddedSizeMismatch = 1014;
  MaldocaErrorType.kOLENativeEmbeddedParseTypeFail = 1015;
  MaldocaErrorType.kOLENativeEmbeddedParseFilenameFail = 1016;
  MaldocaErrorType.kOLENativeEmbeddedParseFilepathFail = 1017;
  MaldocaErrorType.kOLENativeEmbeddedParseReservedFail = 1018;
  MaldocaErrorType.kOLENativeEmbeddedParseTemppathFail = 1019;
  MaldocaErrorType.kOLENativeEmbeddedParseFilesizeFail = 1020;
  MaldocaErrorType.kOLENativeEmbeddedFilesizeMismatch = 1021;
  MaldocaErrorType.kOLENativeEmbeddedParseContentFail = 1022;
  MaldocaErrorType.kInvalidOLE2Header = 1023;
  MaldocaErrorType.kInvalidFatHeader = 1024;
  MaldocaErrorType.kEmptyFatHeader = 1025;
  MaldocaErrorType.kInvalidRootDir = 1026;
  MaldocaErrorType.kMissingFileInArchive = 1027;
  MaldocaErrorType.kInvalidXMLDoc = 1028;
  MaldocaErrorType.kMissingProperties = 1029;
  MaldocaErrorType.kNotImplementedForChrome = 1030;
  MaldocaErrorType.kNotImplemented = 1031;
  MaldocaErrorType.kMissingEncoding = 1032;
  MaldocaErrorType.MIN_VALUE = 0;
  MaldocaErrorType.MAX_VALUE = 1032;

  MaldocaErrorType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
      return true;
    }
    return false;
  };

  MaldocaErrorType.toKnownEnumValue = function(value) {
    return value;
  };

  MaldocaErrorType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function SafeDocumentAnalyzerResults(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeDocumentAnalyzerResults.prototype.initDefaults_ = function() {
    this.success = false;
    this.hasMacros = false;
    this.errorCode = 0;
    this.errorMessage = null;
  };
  SafeDocumentAnalyzerResults.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeDocumentAnalyzerResults.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SafeDocumentAnalyzerResults.errorCode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, MaldocaErrorType);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SafeDocumentAnalyzerResults.errorMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SafeDocumentAnalyzerResults.encodedSize = codec.kStructHeaderSize + 16;

  SafeDocumentAnalyzerResults.decode = function(decoder) {
    var packed;
    var val = new SafeDocumentAnalyzerResults();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    val.hasMacros = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.errorCode =
        decoder.decodeStruct(new codec.Enum(MaldocaErrorType));
    val.errorMessage =
        decoder.decodeStruct(codec.String);
    return val;
  };

  SafeDocumentAnalyzerResults.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeDocumentAnalyzerResults.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    packed |= (val.hasMacros & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.errorCode);
    encoder.encodeStruct(codec.String, val.errorMessage);
  };
  function SafeDocumentAnalyzer_AnalyzeDocument_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeDocumentAnalyzer_AnalyzeDocument_Params.prototype.initDefaults_ = function() {
    this.officeFile = null;
    this.filePath = null;
  };
  SafeDocumentAnalyzer_AnalyzeDocument_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeDocumentAnalyzer_AnalyzeDocument_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeDocumentAnalyzer_AnalyzeDocument_Params.officeFile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, read_only_file$.ReadOnlyFile, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeDocumentAnalyzer_AnalyzeDocument_Params.filePath
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SafeDocumentAnalyzer_AnalyzeDocument_Params.encodedSize = codec.kStructHeaderSize + 16;

  SafeDocumentAnalyzer_AnalyzeDocument_Params.decode = function(decoder) {
    var packed;
    var val = new SafeDocumentAnalyzer_AnalyzeDocument_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.officeFile =
        decoder.decodeStructPointer(read_only_file$.ReadOnlyFile);
    val.filePath =
        decoder.decodeStructPointer(file_path$.FilePath);
    return val;
  };

  SafeDocumentAnalyzer_AnalyzeDocument_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeDocumentAnalyzer_AnalyzeDocument_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(read_only_file$.ReadOnlyFile, val.officeFile);
    encoder.encodeStructPointer(file_path$.FilePath, val.filePath);
  };
  function SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams.prototype.initDefaults_ = function() {
    this.results = null;
  };
  SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams.results
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SafeDocumentAnalyzerResults, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.results =
        decoder.decodeStructPointer(SafeDocumentAnalyzerResults);
    return val;
  };

  SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SafeDocumentAnalyzerResults, val.results);
  };
  var kSafeDocumentAnalyzer_AnalyzeDocument_Name = 719921952;

  function SafeDocumentAnalyzerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SafeDocumentAnalyzer,
                                                   handleOrPtrInfo);
  }

  function SafeDocumentAnalyzerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SafeDocumentAnalyzer, associatedInterfacePtrInfo);
  }

  SafeDocumentAnalyzerAssociatedPtr.prototype =
      Object.create(SafeDocumentAnalyzerPtr.prototype);
  SafeDocumentAnalyzerAssociatedPtr.prototype.constructor =
      SafeDocumentAnalyzerAssociatedPtr;

  function SafeDocumentAnalyzerProxy(receiver) {
    this.receiver_ = receiver;
  }
  SafeDocumentAnalyzerPtr.prototype.analyzeDocument = function() {
    return SafeDocumentAnalyzerProxy.prototype.analyzeDocument
        .apply(this.ptr.getProxy(), arguments);
  };

  SafeDocumentAnalyzerProxy.prototype.analyzeDocument = function(officeFile, filePath) {
    var params_ = new SafeDocumentAnalyzer_AnalyzeDocument_Params();
    params_.officeFile = officeFile;
    params_.filePath = filePath;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSafeDocumentAnalyzer_AnalyzeDocument_Name,
          codec.align(SafeDocumentAnalyzer_AnalyzeDocument_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SafeDocumentAnalyzer_AnalyzeDocument_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SafeDocumentAnalyzerStub(delegate) {
    this.delegate_ = delegate;
  }
  SafeDocumentAnalyzerStub.prototype.analyzeDocument = function(officeFile, filePath) {
    return this.delegate_ && this.delegate_.analyzeDocument && this.delegate_.analyzeDocument(officeFile, filePath);
  }

  SafeDocumentAnalyzerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  SafeDocumentAnalyzerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSafeDocumentAnalyzer_AnalyzeDocument_Name:
      var params = reader.decodeStruct(SafeDocumentAnalyzer_AnalyzeDocument_Params);
      this.analyzeDocument(params.officeFile, params.filePath).then(function(response) {
        var responseParams =
            new SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams();
        responseParams.results = response.results;
        var builder = new codec.MessageV1Builder(
            kSafeDocumentAnalyzer_AnalyzeDocument_Name,
            codec.align(SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSafeDocumentAnalyzerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSafeDocumentAnalyzer_AnalyzeDocument_Name:
        if (message.expectsResponse())
          paramsClass = SafeDocumentAnalyzer_AnalyzeDocument_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSafeDocumentAnalyzerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSafeDocumentAnalyzer_AnalyzeDocument_Name:
        if (message.isResponse())
          paramsClass = SafeDocumentAnalyzer_AnalyzeDocument_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SafeDocumentAnalyzer = {
    name: 'chrome.mojom.SafeDocumentAnalyzer',
    kVersion: 0,
    ptrClass: SafeDocumentAnalyzerPtr,
    proxyClass: SafeDocumentAnalyzerProxy,
    stubClass: SafeDocumentAnalyzerStub,
    validateRequest: validateSafeDocumentAnalyzerRequest,
    validateResponse: validateSafeDocumentAnalyzerResponse,
  };
  SafeDocumentAnalyzerStub.prototype.validator = validateSafeDocumentAnalyzerRequest;
  SafeDocumentAnalyzerProxy.prototype.validator = validateSafeDocumentAnalyzerResponse;
  exports.MaldocaErrorType = MaldocaErrorType;
  exports.SafeDocumentAnalyzerResults = SafeDocumentAnalyzerResults;
  exports.SafeDocumentAnalyzer = SafeDocumentAnalyzer;
  exports.SafeDocumentAnalyzerPtr = SafeDocumentAnalyzerPtr;
  exports.SafeDocumentAnalyzerAssociatedPtr = SafeDocumentAnalyzerAssociatedPtr;
})();