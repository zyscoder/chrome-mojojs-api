// chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('qrcodeGenerator.mojom');
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var bitmap$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/bitmap.mojom', '../../../../../skia/public/mojom/bitmap.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }


  var QRCodeGeneratorError = {};
  QRCodeGeneratorError.NONE = 0;
  QRCodeGeneratorError.INPUT_TOO_LONG = 1;
  QRCodeGeneratorError.UNKNOWN_ERROR = 2;
  QRCodeGeneratorError.MIN_VALUE = 0;
  QRCodeGeneratorError.MAX_VALUE = 2;

  QRCodeGeneratorError.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  QRCodeGeneratorError.toKnownEnumValue = function(value) {
    return value;
  };

  QRCodeGeneratorError.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var ModuleStyle = {};
  ModuleStyle.DEFAULT_SQUARES = 0;
  ModuleStyle.CIRCLES = 1;
  ModuleStyle.MIN_VALUE = 0;
  ModuleStyle.MAX_VALUE = 1;

  ModuleStyle.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  ModuleStyle.toKnownEnumValue = function(value) {
    return value;
  };

  ModuleStyle.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var LocatorStyle = {};
  LocatorStyle.DEFAULT_SQUARE = 0;
  LocatorStyle.ROUNDED = 1;
  LocatorStyle.MIN_VALUE = 0;
  LocatorStyle.MAX_VALUE = 1;

  LocatorStyle.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  LocatorStyle.toKnownEnumValue = function(value) {
    return value;
  };

  LocatorStyle.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var CenterImage = {};
  CenterImage.DEFAULT_NONE = 0;
  CenterImage.CHROME_DINO = 1;
  CenterImage.PASSKEY_ICON = 2;
  CenterImage.MIN_VALUE = 0;
  CenterImage.MAX_VALUE = 2;

  CenterImage.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  CenterImage.toKnownEnumValue = function(value) {
    return value;
  };

  CenterImage.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function GenerateQRCodeRequest(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GenerateQRCodeRequest.prototype.initDefaults_ = function() {
    this.data = null;
    this.renderModuleStyle = 0;
    this.renderLocatorStyle = 0;
    this.centerImage = 0;
  };
  GenerateQRCodeRequest.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GenerateQRCodeRequest.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GenerateQRCodeRequest.data
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate GenerateQRCodeRequest.renderModuleStyle
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, ModuleStyle);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GenerateQRCodeRequest.renderLocatorStyle
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 12, LocatorStyle);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GenerateQRCodeRequest.centerImage
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, CenterImage);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GenerateQRCodeRequest.encodedSize = codec.kStructHeaderSize + 24;

  GenerateQRCodeRequest.decode = function(decoder) {
    var packed;
    var val = new GenerateQRCodeRequest();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStruct(codec.String);
    val.renderModuleStyle =
        decoder.decodeStruct(new codec.Enum(ModuleStyle));
    val.renderLocatorStyle =
        decoder.decodeStruct(new codec.Enum(LocatorStyle));
    val.centerImage =
        decoder.decodeStruct(new codec.Enum(CenterImage));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GenerateQRCodeRequest.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GenerateQRCodeRequest.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.data);
    encoder.encodeStruct(codec.Int32, val.renderModuleStyle);
    encoder.encodeStruct(codec.Int32, val.renderLocatorStyle);
    encoder.encodeStruct(codec.Int32, val.centerImage);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GenerateQRCodeResponse(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GenerateQRCodeResponse.prototype.initDefaults_ = function() {
    this.errorCode = 0;
    this.bitmap = null;
    this.dataSize = null;
  };
  GenerateQRCodeResponse.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GenerateQRCodeResponse.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GenerateQRCodeResponse.errorCode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, QRCodeGeneratorError);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GenerateQRCodeResponse.bitmap
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, bitmap$.BitmapN32, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GenerateQRCodeResponse.dataSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GenerateQRCodeResponse.encodedSize = codec.kStructHeaderSize + 24;

  GenerateQRCodeResponse.decode = function(decoder) {
    var packed;
    var val = new GenerateQRCodeResponse();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.errorCode =
        decoder.decodeStruct(new codec.Enum(QRCodeGeneratorError));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.bitmap =
        decoder.decodeStructPointer(bitmap$.BitmapN32);
    val.dataSize =
        decoder.decodeStructPointer(geometry$.Size);
    return val;
  };

  GenerateQRCodeResponse.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GenerateQRCodeResponse.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.errorCode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(bitmap$.BitmapN32, val.bitmap);
    encoder.encodeStructPointer(geometry$.Size, val.dataSize);
  };
  function QRCodeGeneratorService_GenerateQRCode_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QRCodeGeneratorService_GenerateQRCode_Params.prototype.initDefaults_ = function() {
    this.request = null;
  };
  QRCodeGeneratorService_GenerateQRCode_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QRCodeGeneratorService_GenerateQRCode_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QRCodeGeneratorService_GenerateQRCode_Params.request
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, GenerateQRCodeRequest, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QRCodeGeneratorService_GenerateQRCode_Params.encodedSize = codec.kStructHeaderSize + 8;

  QRCodeGeneratorService_GenerateQRCode_Params.decode = function(decoder) {
    var packed;
    var val = new QRCodeGeneratorService_GenerateQRCode_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.request =
        decoder.decodeStructPointer(GenerateQRCodeRequest);
    return val;
  };

  QRCodeGeneratorService_GenerateQRCode_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QRCodeGeneratorService_GenerateQRCode_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(GenerateQRCodeRequest, val.request);
  };
  function QRCodeGeneratorService_GenerateQRCode_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  QRCodeGeneratorService_GenerateQRCode_ResponseParams.prototype.initDefaults_ = function() {
    this.response = null;
  };
  QRCodeGeneratorService_GenerateQRCode_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  QRCodeGeneratorService_GenerateQRCode_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate QRCodeGeneratorService_GenerateQRCode_ResponseParams.response
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, GenerateQRCodeResponse, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  QRCodeGeneratorService_GenerateQRCode_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  QRCodeGeneratorService_GenerateQRCode_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new QRCodeGeneratorService_GenerateQRCode_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.response =
        decoder.decodeStructPointer(GenerateQRCodeResponse);
    return val;
  };

  QRCodeGeneratorService_GenerateQRCode_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(QRCodeGeneratorService_GenerateQRCode_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(GenerateQRCodeResponse, val.response);
  };
  var kQRCodeGeneratorService_GenerateQRCode_Name = 1932761314;

  function QRCodeGeneratorServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(QRCodeGeneratorService,
                                                   handleOrPtrInfo);
  }

  function QRCodeGeneratorServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        QRCodeGeneratorService, associatedInterfacePtrInfo);
  }

  QRCodeGeneratorServiceAssociatedPtr.prototype =
      Object.create(QRCodeGeneratorServicePtr.prototype);
  QRCodeGeneratorServiceAssociatedPtr.prototype.constructor =
      QRCodeGeneratorServiceAssociatedPtr;

  function QRCodeGeneratorServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  QRCodeGeneratorServicePtr.prototype.generateQRCode = function() {
    return QRCodeGeneratorServiceProxy.prototype.generateQRCode
        .apply(this.ptr.getProxy(), arguments);
  };

  QRCodeGeneratorServiceProxy.prototype.generateQRCode = function(request) {
    var params_ = new QRCodeGeneratorService_GenerateQRCode_Params();
    params_.request = request;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kQRCodeGeneratorService_GenerateQRCode_Name,
          codec.align(QRCodeGeneratorService_GenerateQRCode_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(QRCodeGeneratorService_GenerateQRCode_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(QRCodeGeneratorService_GenerateQRCode_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function QRCodeGeneratorServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  QRCodeGeneratorServiceStub.prototype.generateQRCode = function(request) {
    return this.delegate_ && this.delegate_.generateQRCode && this.delegate_.generateQRCode(request);
  }

  QRCodeGeneratorServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  QRCodeGeneratorServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kQRCodeGeneratorService_GenerateQRCode_Name:
      var params = reader.decodeStruct(QRCodeGeneratorService_GenerateQRCode_Params);
      this.generateQRCode(params.request).then(function(response) {
        var responseParams =
            new QRCodeGeneratorService_GenerateQRCode_ResponseParams();
        responseParams.response = response.response;
        var builder = new codec.MessageV1Builder(
            kQRCodeGeneratorService_GenerateQRCode_Name,
            codec.align(QRCodeGeneratorService_GenerateQRCode_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(QRCodeGeneratorService_GenerateQRCode_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateQRCodeGeneratorServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kQRCodeGeneratorService_GenerateQRCode_Name:
        if (message.expectsResponse())
          paramsClass = QRCodeGeneratorService_GenerateQRCode_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateQRCodeGeneratorServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kQRCodeGeneratorService_GenerateQRCode_Name:
        if (message.isResponse())
          paramsClass = QRCodeGeneratorService_GenerateQRCode_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var QRCodeGeneratorService = {
    name: 'qrcode_generator.mojom.QRCodeGeneratorService',
    kVersion: 0,
    ptrClass: QRCodeGeneratorServicePtr,
    proxyClass: QRCodeGeneratorServiceProxy,
    stubClass: QRCodeGeneratorServiceStub,
    validateRequest: validateQRCodeGeneratorServiceRequest,
    validateResponse: validateQRCodeGeneratorServiceResponse,
  };
  QRCodeGeneratorServiceStub.prototype.validator = validateQRCodeGeneratorServiceRequest;
  QRCodeGeneratorServiceProxy.prototype.validator = validateQRCodeGeneratorServiceResponse;
  exports.QRCodeGeneratorError = QRCodeGeneratorError;
  exports.ModuleStyle = ModuleStyle;
  exports.LocatorStyle = LocatorStyle;
  exports.CenterImage = CenterImage;
  exports.GenerateQRCodeRequest = GenerateQRCodeRequest;
  exports.GenerateQRCodeResponse = GenerateQRCodeResponse;
  exports.QRCodeGeneratorService = QRCodeGeneratorService;
  exports.QRCodeGeneratorServicePtr = QRCodeGeneratorServicePtr;
  exports.QRCodeGeneratorServiceAssociatedPtr = QRCodeGeneratorServiceAssociatedPtr;
})();