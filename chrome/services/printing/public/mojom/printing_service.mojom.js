// chrome/services/printing/public/mojom/printing_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/services/printing/public/mojom/printing_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('printing.mojom');
  var pdf_nup_converter$ =
      mojo.internal.exposeNamespace('printing.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'chrome/services/printing/public/mojom/pdf_nup_converter.mojom', 'pdf_nup_converter.mojom.js');
  }
  var pdf_to_pwg_raster_converter$ =
      mojo.internal.exposeNamespace('printing.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'chrome/services/printing/public/mojom/pdf_to_pwg_raster_converter.mojom', 'pdf_to_pwg_raster_converter.mojom.js');
  }
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }


  var PRINTING_SERVICE_SANDBOX = sandbox$.Sandbox.kUtility;

  function PrintingService_BindPdfNupConverter_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintingService_BindPdfNupConverter_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  PrintingService_BindPdfNupConverter_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintingService_BindPdfNupConverter_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintingService_BindPdfNupConverter_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintingService_BindPdfNupConverter_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintingService_BindPdfNupConverter_Params.decode = function(decoder) {
    var packed;
    var val = new PrintingService_BindPdfNupConverter_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintingService_BindPdfNupConverter_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintingService_BindPdfNupConverter_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintingService_BindPdfToPwgRasterConverter_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintingService_BindPdfToPwgRasterConverter_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  PrintingService_BindPdfToPwgRasterConverter_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintingService_BindPdfToPwgRasterConverter_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintingService_BindPdfToPwgRasterConverter_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintingService_BindPdfToPwgRasterConverter_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintingService_BindPdfToPwgRasterConverter_Params.decode = function(decoder) {
    var packed;
    var val = new PrintingService_BindPdfToPwgRasterConverter_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintingService_BindPdfToPwgRasterConverter_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintingService_BindPdfToPwgRasterConverter_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kPrintingService_BindPdfNupConverter_Name = 600085258;
  var kPrintingService_BindPdfToPwgRasterConverter_Name = 675402564;

  function PrintingServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrintingService,
                                                   handleOrPtrInfo);
  }

  function PrintingServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrintingService, associatedInterfacePtrInfo);
  }

  PrintingServiceAssociatedPtr.prototype =
      Object.create(PrintingServicePtr.prototype);
  PrintingServiceAssociatedPtr.prototype.constructor =
      PrintingServiceAssociatedPtr;

  function PrintingServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrintingServicePtr.prototype.bindPdfNupConverter = function() {
    return PrintingServiceProxy.prototype.bindPdfNupConverter
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintingServiceProxy.prototype.bindPdfNupConverter = function(receiver) {
    var params_ = new PrintingService_BindPdfNupConverter_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kPrintingService_BindPdfNupConverter_Name,
        codec.align(PrintingService_BindPdfNupConverter_Params.encodedSize));
    builder.encodeStruct(PrintingService_BindPdfNupConverter_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintingServicePtr.prototype.bindPdfToPwgRasterConverter = function() {
    return PrintingServiceProxy.prototype.bindPdfToPwgRasterConverter
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintingServiceProxy.prototype.bindPdfToPwgRasterConverter = function(receiver) {
    var params_ = new PrintingService_BindPdfToPwgRasterConverter_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kPrintingService_BindPdfToPwgRasterConverter_Name,
        codec.align(PrintingService_BindPdfToPwgRasterConverter_Params.encodedSize));
    builder.encodeStruct(PrintingService_BindPdfToPwgRasterConverter_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PrintingServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  PrintingServiceStub.prototype.bindPdfNupConverter = function(receiver) {
    return this.delegate_ && this.delegate_.bindPdfNupConverter && this.delegate_.bindPdfNupConverter(receiver);
  }
  PrintingServiceStub.prototype.bindPdfToPwgRasterConverter = function(receiver) {
    return this.delegate_ && this.delegate_.bindPdfToPwgRasterConverter && this.delegate_.bindPdfToPwgRasterConverter(receiver);
  }

  PrintingServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrintingService_BindPdfNupConverter_Name:
      var params = reader.decodeStruct(PrintingService_BindPdfNupConverter_Params);
      this.bindPdfNupConverter(params.receiver);
      return true;
    case kPrintingService_BindPdfToPwgRasterConverter_Name:
      var params = reader.decodeStruct(PrintingService_BindPdfToPwgRasterConverter_Params);
      this.bindPdfToPwgRasterConverter(params.receiver);
      return true;
    default:
      return false;
    }
  };

  PrintingServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePrintingServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrintingService_BindPdfNupConverter_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintingService_BindPdfNupConverter_Params;
      break;
      case kPrintingService_BindPdfToPwgRasterConverter_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintingService_BindPdfToPwgRasterConverter_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrintingServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PrintingService = {
    name: 'printing.mojom.PrintingService',
    kVersion: 0,
    ptrClass: PrintingServicePtr,
    proxyClass: PrintingServiceProxy,
    stubClass: PrintingServiceStub,
    validateRequest: validatePrintingServiceRequest,
    validateResponse: null,
  };
  PrintingServiceStub.prototype.validator = validatePrintingServiceRequest;
  PrintingServiceProxy.prototype.validator = null;
  exports.PRINTING_SERVICE_SANDBOX = PRINTING_SERVICE_SANDBOX;
  exports.PrintingService = PrintingService;
  exports.PrintingServicePtr = PrintingServicePtr;
  exports.PrintingServiceAssociatedPtr = PrintingServiceAssociatedPtr;
})();