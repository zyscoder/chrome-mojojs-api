// chrome/services/printing/public/mojom/pdf_nup_converter.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/services/printing/public/mojom/pdf_nup_converter.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('printing.mojom');
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function PdfNupConverter_NupPageConvert_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PdfNupConverter_NupPageConvert_Params.prototype.initDefaults_ = function() {
    this.pagesPerSheet = 0;
    this.pageSize = null;
    this.printableArea = null;
    this.pdfPageRegions = null;
  };
  PdfNupConverter_NupPageConvert_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PdfNupConverter_NupPageConvert_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PdfNupConverter_NupPageConvert_Params.pageSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PdfNupConverter_NupPageConvert_Params.printableArea
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PdfNupConverter_NupPageConvert_Params.pdfPageRegions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 8, new codec.PointerTo(shared_memory$.ReadOnlySharedMemoryRegion), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PdfNupConverter_NupPageConvert_Params.encodedSize = codec.kStructHeaderSize + 32;

  PdfNupConverter_NupPageConvert_Params.decode = function(decoder) {
    var packed;
    var val = new PdfNupConverter_NupPageConvert_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pagesPerSheet =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.pageSize =
        decoder.decodeStructPointer(geometry$.Size);
    val.printableArea =
        decoder.decodeStructPointer(geometry$.Rect);
    val.pdfPageRegions =
        decoder.decodeArrayPointer(new codec.PointerTo(shared_memory$.ReadOnlySharedMemoryRegion));
    return val;
  };

  PdfNupConverter_NupPageConvert_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PdfNupConverter_NupPageConvert_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.pagesPerSheet);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(geometry$.Size, val.pageSize);
    encoder.encodeStructPointer(geometry$.Rect, val.printableArea);
    encoder.encodeArrayPointer(new codec.PointerTo(shared_memory$.ReadOnlySharedMemoryRegion), val.pdfPageRegions);
  };
  function PdfNupConverter_NupPageConvert_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PdfNupConverter_NupPageConvert_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.pdfRegion = null;
  };
  PdfNupConverter_NupPageConvert_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PdfNupConverter_NupPageConvert_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PdfNupConverter_NupPageConvert_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PdfNupConverter.Status);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PdfNupConverter_NupPageConvert_ResponseParams.pdfRegion
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.ReadOnlySharedMemoryRegion, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PdfNupConverter_NupPageConvert_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PdfNupConverter_NupPageConvert_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PdfNupConverter_NupPageConvert_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PdfNupConverter.Status));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.pdfRegion =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    return val;
  };

  PdfNupConverter_NupPageConvert_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PdfNupConverter_NupPageConvert_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.pdfRegion);
  };
  function PdfNupConverter_NupDocumentConvert_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PdfNupConverter_NupDocumentConvert_Params.prototype.initDefaults_ = function() {
    this.pagesPerSheet = 0;
    this.pageSize = null;
    this.printableArea = null;
    this.srcPdfRegion = null;
  };
  PdfNupConverter_NupDocumentConvert_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PdfNupConverter_NupDocumentConvert_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PdfNupConverter_NupDocumentConvert_Params.pageSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PdfNupConverter_NupDocumentConvert_Params.printableArea
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PdfNupConverter_NupDocumentConvert_Params.srcPdfRegion
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, shared_memory$.ReadOnlySharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PdfNupConverter_NupDocumentConvert_Params.encodedSize = codec.kStructHeaderSize + 32;

  PdfNupConverter_NupDocumentConvert_Params.decode = function(decoder) {
    var packed;
    var val = new PdfNupConverter_NupDocumentConvert_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pagesPerSheet =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.pageSize =
        decoder.decodeStructPointer(geometry$.Size);
    val.printableArea =
        decoder.decodeStructPointer(geometry$.Rect);
    val.srcPdfRegion =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    return val;
  };

  PdfNupConverter_NupDocumentConvert_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PdfNupConverter_NupDocumentConvert_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.pagesPerSheet);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(geometry$.Size, val.pageSize);
    encoder.encodeStructPointer(geometry$.Rect, val.printableArea);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.srcPdfRegion);
  };
  function PdfNupConverter_NupDocumentConvert_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PdfNupConverter_NupDocumentConvert_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.pdfRegion = null;
  };
  PdfNupConverter_NupDocumentConvert_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PdfNupConverter_NupDocumentConvert_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PdfNupConverter_NupDocumentConvert_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PdfNupConverter.Status);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PdfNupConverter_NupDocumentConvert_ResponseParams.pdfRegion
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.ReadOnlySharedMemoryRegion, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PdfNupConverter_NupDocumentConvert_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PdfNupConverter_NupDocumentConvert_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PdfNupConverter_NupDocumentConvert_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PdfNupConverter.Status));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.pdfRegion =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    return val;
  };

  PdfNupConverter_NupDocumentConvert_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PdfNupConverter_NupDocumentConvert_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.pdfRegion);
  };
  function PdfNupConverter_SetWebContentsURL_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PdfNupConverter_SetWebContentsURL_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  PdfNupConverter_SetWebContentsURL_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PdfNupConverter_SetWebContentsURL_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PdfNupConverter_SetWebContentsURL_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PdfNupConverter_SetWebContentsURL_Params.encodedSize = codec.kStructHeaderSize + 8;

  PdfNupConverter_SetWebContentsURL_Params.decode = function(decoder) {
    var packed;
    var val = new PdfNupConverter_SetWebContentsURL_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PdfNupConverter_SetWebContentsURL_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PdfNupConverter_SetWebContentsURL_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function PdfNupConverter_SetUseSkiaRendererPolicy_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PdfNupConverter_SetUseSkiaRendererPolicy_Params.prototype.initDefaults_ = function() {
    this.useSkia = false;
  };
  PdfNupConverter_SetUseSkiaRendererPolicy_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PdfNupConverter_SetUseSkiaRendererPolicy_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PdfNupConverter_SetUseSkiaRendererPolicy_Params.encodedSize = codec.kStructHeaderSize + 8;

  PdfNupConverter_SetUseSkiaRendererPolicy_Params.decode = function(decoder) {
    var packed;
    var val = new PdfNupConverter_SetUseSkiaRendererPolicy_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.useSkia = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PdfNupConverter_SetUseSkiaRendererPolicy_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PdfNupConverter_SetUseSkiaRendererPolicy_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.useSkia & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kPdfNupConverter_NupPageConvert_Name = 1664871142;
  var kPdfNupConverter_NupDocumentConvert_Name = 807174821;
  var kPdfNupConverter_SetWebContentsURL_Name = 1029656356;
  var kPdfNupConverter_SetUseSkiaRendererPolicy_Name = 253220435;

  function PdfNupConverterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PdfNupConverter,
                                                   handleOrPtrInfo);
  }

  function PdfNupConverterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PdfNupConverter, associatedInterfacePtrInfo);
  }

  PdfNupConverterAssociatedPtr.prototype =
      Object.create(PdfNupConverterPtr.prototype);
  PdfNupConverterAssociatedPtr.prototype.constructor =
      PdfNupConverterAssociatedPtr;

  function PdfNupConverterProxy(receiver) {
    this.receiver_ = receiver;
  }
  PdfNupConverterPtr.prototype.nupPageConvert = function() {
    return PdfNupConverterProxy.prototype.nupPageConvert
        .apply(this.ptr.getProxy(), arguments);
  };

  PdfNupConverterProxy.prototype.nupPageConvert = function(pagesPerSheet, pageSize, printableArea, pdfPageRegions) {
    var params_ = new PdfNupConverter_NupPageConvert_Params();
    params_.pagesPerSheet = pagesPerSheet;
    params_.pageSize = pageSize;
    params_.printableArea = printableArea;
    params_.pdfPageRegions = pdfPageRegions;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPdfNupConverter_NupPageConvert_Name,
          codec.align(PdfNupConverter_NupPageConvert_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PdfNupConverter_NupPageConvert_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PdfNupConverter_NupPageConvert_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PdfNupConverterPtr.prototype.nupDocumentConvert = function() {
    return PdfNupConverterProxy.prototype.nupDocumentConvert
        .apply(this.ptr.getProxy(), arguments);
  };

  PdfNupConverterProxy.prototype.nupDocumentConvert = function(pagesPerSheet, pageSize, printableArea, srcPdfRegion) {
    var params_ = new PdfNupConverter_NupDocumentConvert_Params();
    params_.pagesPerSheet = pagesPerSheet;
    params_.pageSize = pageSize;
    params_.printableArea = printableArea;
    params_.srcPdfRegion = srcPdfRegion;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPdfNupConverter_NupDocumentConvert_Name,
          codec.align(PdfNupConverter_NupDocumentConvert_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PdfNupConverter_NupDocumentConvert_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PdfNupConverter_NupDocumentConvert_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PdfNupConverterPtr.prototype.setWebContentsURL = function() {
    return PdfNupConverterProxy.prototype.setWebContentsURL
        .apply(this.ptr.getProxy(), arguments);
  };

  PdfNupConverterProxy.prototype.setWebContentsURL = function(url) {
    var params_ = new PdfNupConverter_SetWebContentsURL_Params();
    params_.url = url;
    var builder = new codec.MessageV0Builder(
        kPdfNupConverter_SetWebContentsURL_Name,
        codec.align(PdfNupConverter_SetWebContentsURL_Params.encodedSize));
    builder.encodeStruct(PdfNupConverter_SetWebContentsURL_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PdfNupConverterPtr.prototype.setUseSkiaRendererPolicy = function() {
    return PdfNupConverterProxy.prototype.setUseSkiaRendererPolicy
        .apply(this.ptr.getProxy(), arguments);
  };

  PdfNupConverterProxy.prototype.setUseSkiaRendererPolicy = function(useSkia) {
    var params_ = new PdfNupConverter_SetUseSkiaRendererPolicy_Params();
    params_.useSkia = useSkia;
    var builder = new codec.MessageV0Builder(
        kPdfNupConverter_SetUseSkiaRendererPolicy_Name,
        codec.align(PdfNupConverter_SetUseSkiaRendererPolicy_Params.encodedSize));
    builder.encodeStruct(PdfNupConverter_SetUseSkiaRendererPolicy_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PdfNupConverterStub(delegate) {
    this.delegate_ = delegate;
  }
  PdfNupConverterStub.prototype.nupPageConvert = function(pagesPerSheet, pageSize, printableArea, pdfPageRegions) {
    return this.delegate_ && this.delegate_.nupPageConvert && this.delegate_.nupPageConvert(pagesPerSheet, pageSize, printableArea, pdfPageRegions);
  }
  PdfNupConverterStub.prototype.nupDocumentConvert = function(pagesPerSheet, pageSize, printableArea, srcPdfRegion) {
    return this.delegate_ && this.delegate_.nupDocumentConvert && this.delegate_.nupDocumentConvert(pagesPerSheet, pageSize, printableArea, srcPdfRegion);
  }
  PdfNupConverterStub.prototype.setWebContentsURL = function(url) {
    return this.delegate_ && this.delegate_.setWebContentsURL && this.delegate_.setWebContentsURL(url);
  }
  PdfNupConverterStub.prototype.setUseSkiaRendererPolicy = function(useSkia) {
    return this.delegate_ && this.delegate_.setUseSkiaRendererPolicy && this.delegate_.setUseSkiaRendererPolicy(useSkia);
  }

  PdfNupConverterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPdfNupConverter_SetWebContentsURL_Name:
      var params = reader.decodeStruct(PdfNupConverter_SetWebContentsURL_Params);
      this.setWebContentsURL(params.url);
      return true;
    case kPdfNupConverter_SetUseSkiaRendererPolicy_Name:
      var params = reader.decodeStruct(PdfNupConverter_SetUseSkiaRendererPolicy_Params);
      this.setUseSkiaRendererPolicy(params.useSkia);
      return true;
    default:
      return false;
    }
  };

  PdfNupConverterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPdfNupConverter_NupPageConvert_Name:
      var params = reader.decodeStruct(PdfNupConverter_NupPageConvert_Params);
      this.nupPageConvert(params.pagesPerSheet, params.pageSize, params.printableArea, params.pdfPageRegions).then(function(response) {
        var responseParams =
            new PdfNupConverter_NupPageConvert_ResponseParams();
        responseParams.status = response.status;
        responseParams.pdfRegion = response.pdfRegion;
        var builder = new codec.MessageV1Builder(
            kPdfNupConverter_NupPageConvert_Name,
            codec.align(PdfNupConverter_NupPageConvert_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PdfNupConverter_NupPageConvert_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPdfNupConverter_NupDocumentConvert_Name:
      var params = reader.decodeStruct(PdfNupConverter_NupDocumentConvert_Params);
      this.nupDocumentConvert(params.pagesPerSheet, params.pageSize, params.printableArea, params.srcPdfRegion).then(function(response) {
        var responseParams =
            new PdfNupConverter_NupDocumentConvert_ResponseParams();
        responseParams.status = response.status;
        responseParams.pdfRegion = response.pdfRegion;
        var builder = new codec.MessageV1Builder(
            kPdfNupConverter_NupDocumentConvert_Name,
            codec.align(PdfNupConverter_NupDocumentConvert_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PdfNupConverter_NupDocumentConvert_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePdfNupConverterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPdfNupConverter_NupPageConvert_Name:
        if (message.expectsResponse())
          paramsClass = PdfNupConverter_NupPageConvert_Params;
      break;
      case kPdfNupConverter_NupDocumentConvert_Name:
        if (message.expectsResponse())
          paramsClass = PdfNupConverter_NupDocumentConvert_Params;
      break;
      case kPdfNupConverter_SetWebContentsURL_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PdfNupConverter_SetWebContentsURL_Params;
      break;
      case kPdfNupConverter_SetUseSkiaRendererPolicy_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PdfNupConverter_SetUseSkiaRendererPolicy_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePdfNupConverterResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPdfNupConverter_NupPageConvert_Name:
        if (message.isResponse())
          paramsClass = PdfNupConverter_NupPageConvert_ResponseParams;
        break;
      case kPdfNupConverter_NupDocumentConvert_Name:
        if (message.isResponse())
          paramsClass = PdfNupConverter_NupDocumentConvert_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PdfNupConverter = {
    name: 'printing.mojom.PdfNupConverter',
    kVersion: 0,
    ptrClass: PdfNupConverterPtr,
    proxyClass: PdfNupConverterProxy,
    stubClass: PdfNupConverterStub,
    validateRequest: validatePdfNupConverterRequest,
    validateResponse: validatePdfNupConverterResponse,
  };
  PdfNupConverter.Status = {};
  PdfNupConverter.Status.SUCCESS = 0;
  PdfNupConverter.Status.CONVERSION_FAILURE = 1;
  PdfNupConverter.Status.HANDLE_MAP_ERROR = 2;
  PdfNupConverter.Status.MIN_VALUE = 0;
  PdfNupConverter.Status.MAX_VALUE = 2;

  PdfNupConverter.Status.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  PdfNupConverter.Status.toKnownEnumValue = function(value) {
    return value;
  };

  PdfNupConverter.Status.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  PdfNupConverterStub.prototype.validator = validatePdfNupConverterRequest;
  PdfNupConverterProxy.prototype.validator = validatePdfNupConverterResponse;
  exports.PdfNupConverter = PdfNupConverter;
  exports.PdfNupConverterPtr = PdfNupConverterPtr;
  exports.PdfNupConverterAssociatedPtr = PdfNupConverterAssociatedPtr;
})();