// chrome/services/printing/public/mojom/print_backend_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/services/printing/public/mojom/print_backend_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('printing.mojom');
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var values$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/values.mojom', '../../../../../mojo/public/mojom/base/values.mojom.js');
  }
  var print_backend$ =
      mojo.internal.exposeNamespace('printing.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'printing/backend/mojom/print_backend.mojom', '../../../../../printing/backend/mojom/print_backend.mojom.js');
  }
  var print$ =
      mojo.internal.exposeNamespace('printing.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'printing/mojom/print.mojom', '../../../../../printing/mojom/print.mojom.js');
  }
  var printing_context$ =
      mojo.internal.exposeNamespace('printing.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'printing/mojom/printing_context.mojom', '../../../../../printing/mojom/printing_context.mojom.js');
  }
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }



  function PrinterCapsAndInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrinterCapsAndInfo.prototype.initDefaults_ = function() {
    this.printerInfo = null;
    this.printerCaps = null;
  };
  PrinterCapsAndInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrinterCapsAndInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrinterCapsAndInfo.printerInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, print_backend$.PrinterBasicInfo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrinterCapsAndInfo.printerCaps
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, print_backend$.PrinterSemanticCapsAndDefaults, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrinterCapsAndInfo.encodedSize = codec.kStructHeaderSize + 16;

  PrinterCapsAndInfo.decode = function(decoder) {
    var packed;
    var val = new PrinterCapsAndInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.printerInfo =
        decoder.decodeStructPointer(print_backend$.PrinterBasicInfo);
    val.printerCaps =
        decoder.decodeStructPointer(print_backend$.PrinterSemanticCapsAndDefaults);
    return val;
  };

  PrinterCapsAndInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrinterCapsAndInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(print_backend$.PrinterBasicInfo, val.printerInfo);
    encoder.encodeStructPointer(print_backend$.PrinterSemanticCapsAndDefaults, val.printerCaps);
  };
  function UnsandboxedPrintBackendHost_BindBackend_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UnsandboxedPrintBackendHost_BindBackend_Params.prototype.initDefaults_ = function() {
    this.service = new bindings.InterfaceRequest();
  };
  UnsandboxedPrintBackendHost_BindBackend_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UnsandboxedPrintBackendHost_BindBackend_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate UnsandboxedPrintBackendHost_BindBackend_Params.service
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  UnsandboxedPrintBackendHost_BindBackend_Params.encodedSize = codec.kStructHeaderSize + 8;

  UnsandboxedPrintBackendHost_BindBackend_Params.decode = function(decoder) {
    var packed;
    var val = new UnsandboxedPrintBackendHost_BindBackend_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.service =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  UnsandboxedPrintBackendHost_BindBackend_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UnsandboxedPrintBackendHost_BindBackend_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.service);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SandboxedPrintBackendHost_BindBackend_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SandboxedPrintBackendHost_BindBackend_Params.prototype.initDefaults_ = function() {
    this.service = new bindings.InterfaceRequest();
  };
  SandboxedPrintBackendHost_BindBackend_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SandboxedPrintBackendHost_BindBackend_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SandboxedPrintBackendHost_BindBackend_Params.service
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SandboxedPrintBackendHost_BindBackend_Params.encodedSize = codec.kStructHeaderSize + 8;

  SandboxedPrintBackendHost_BindBackend_Params.decode = function(decoder) {
    var packed;
    var val = new SandboxedPrintBackendHost_BindBackend_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.service =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SandboxedPrintBackendHost_BindBackend_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SandboxedPrintBackendHost_BindBackend_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.service);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintBackendService_Init_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_Init_Params.prototype.initDefaults_ = function() {
    this.locale = null;
  };
  PrintBackendService_Init_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_Init_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_Init_Params.locale
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_Init_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintBackendService_Init_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_Init_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.locale =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PrintBackendService_Init_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_Init_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.locale);
  };
  function PrintBackendService_Poke_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_Poke_Params.prototype.initDefaults_ = function() {
  };
  PrintBackendService_Poke_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_Poke_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_Poke_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintBackendService_Poke_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_Poke_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintBackendService_Poke_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_Poke_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintBackendService_EnumeratePrinters_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_EnumeratePrinters_Params.prototype.initDefaults_ = function() {
  };
  PrintBackendService_EnumeratePrinters_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_EnumeratePrinters_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_EnumeratePrinters_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintBackendService_EnumeratePrinters_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_EnumeratePrinters_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintBackendService_EnumeratePrinters_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_EnumeratePrinters_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintBackendService_EnumeratePrinters_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_EnumeratePrinters_ResponseParams.prototype.initDefaults_ = function() {
    this.printerList = null;
  };
  PrintBackendService_EnumeratePrinters_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_EnumeratePrinters_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_EnumeratePrinters_ResponseParams.printerList
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, PrinterListResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_EnumeratePrinters_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintBackendService_EnumeratePrinters_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_EnumeratePrinters_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.printerList =
        decoder.decodeStruct(PrinterListResult);
    return val;
  };

  PrintBackendService_EnumeratePrinters_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_EnumeratePrinters_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(PrinterListResult, val.printerList);
  };
  function PrintBackendService_GetDefaultPrinterName_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_GetDefaultPrinterName_Params.prototype.initDefaults_ = function() {
  };
  PrintBackendService_GetDefaultPrinterName_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_GetDefaultPrinterName_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_GetDefaultPrinterName_Params.encodedSize = codec.kStructHeaderSize + 0;

  PrintBackendService_GetDefaultPrinterName_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_GetDefaultPrinterName_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintBackendService_GetDefaultPrinterName_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_GetDefaultPrinterName_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PrintBackendService_GetDefaultPrinterName_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_GetDefaultPrinterName_ResponseParams.prototype.initDefaults_ = function() {
    this.printerName = null;
  };
  PrintBackendService_GetDefaultPrinterName_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_GetDefaultPrinterName_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_GetDefaultPrinterName_ResponseParams.printerName
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, DefaultPrinterNameResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_GetDefaultPrinterName_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintBackendService_GetDefaultPrinterName_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_GetDefaultPrinterName_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.printerName =
        decoder.decodeStruct(DefaultPrinterNameResult);
    return val;
  };

  PrintBackendService_GetDefaultPrinterName_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_GetDefaultPrinterName_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(DefaultPrinterNameResult, val.printerName);
  };
  function PrintBackendService_FetchCapabilities_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_FetchCapabilities_Params.prototype.initDefaults_ = function() {
    this.printerName = null;
  };
  PrintBackendService_FetchCapabilities_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_FetchCapabilities_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_FetchCapabilities_Params.printerName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_FetchCapabilities_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintBackendService_FetchCapabilities_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_FetchCapabilities_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.printerName =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PrintBackendService_FetchCapabilities_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_FetchCapabilities_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.printerName);
  };
  function PrintBackendService_FetchCapabilities_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_FetchCapabilities_ResponseParams.prototype.initDefaults_ = function() {
    this.printerCapsAndInfo = null;
  };
  PrintBackendService_FetchCapabilities_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_FetchCapabilities_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_FetchCapabilities_ResponseParams.printerCapsAndInfo
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, PrinterCapsAndInfoResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_FetchCapabilities_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintBackendService_FetchCapabilities_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_FetchCapabilities_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.printerCapsAndInfo =
        decoder.decodeStruct(PrinterCapsAndInfoResult);
    return val;
  };

  PrintBackendService_FetchCapabilities_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_FetchCapabilities_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(PrinterCapsAndInfoResult, val.printerCapsAndInfo);
  };
  function PrintBackendService_EstablishPrintingContext_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_EstablishPrintingContext_Params.prototype.initDefaults_ = function() {
    this.contextId = 0;
  };
  PrintBackendService_EstablishPrintingContext_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_EstablishPrintingContext_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintBackendService_EstablishPrintingContext_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintBackendService_EstablishPrintingContext_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_EstablishPrintingContext_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.contextId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintBackendService_EstablishPrintingContext_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_EstablishPrintingContext_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.contextId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintBackendService_UseDefaultSettings_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_UseDefaultSettings_Params.prototype.initDefaults_ = function() {
    this.contextId = 0;
  };
  PrintBackendService_UseDefaultSettings_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_UseDefaultSettings_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintBackendService_UseDefaultSettings_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintBackendService_UseDefaultSettings_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_UseDefaultSettings_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.contextId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintBackendService_UseDefaultSettings_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_UseDefaultSettings_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.contextId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintBackendService_UseDefaultSettings_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_UseDefaultSettings_ResponseParams.prototype.initDefaults_ = function() {
    this.settings = null;
  };
  PrintBackendService_UseDefaultSettings_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_UseDefaultSettings_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_UseDefaultSettings_ResponseParams.settings
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, PrintSettingsResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_UseDefaultSettings_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintBackendService_UseDefaultSettings_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_UseDefaultSettings_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.settings =
        decoder.decodeStruct(PrintSettingsResult);
    return val;
  };

  PrintBackendService_UseDefaultSettings_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_UseDefaultSettings_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(PrintSettingsResult, val.settings);
  };
  function PrintBackendService_UpdatePrintSettings_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_UpdatePrintSettings_Params.prototype.initDefaults_ = function() {
    this.contextId = 0;
    this.jobSettings = null;
  };
  PrintBackendService_UpdatePrintSettings_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_UpdatePrintSettings_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PrintBackendService_UpdatePrintSettings_Params.jobSettings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, values$.DictionaryValue, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_UpdatePrintSettings_Params.encodedSize = codec.kStructHeaderSize + 16;

  PrintBackendService_UpdatePrintSettings_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_UpdatePrintSettings_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.contextId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.jobSettings =
        decoder.decodeStructPointer(values$.DictionaryValue);
    return val;
  };

  PrintBackendService_UpdatePrintSettings_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_UpdatePrintSettings_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.contextId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(values$.DictionaryValue, val.jobSettings);
  };
  function PrintBackendService_UpdatePrintSettings_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_UpdatePrintSettings_ResponseParams.prototype.initDefaults_ = function() {
    this.settings = null;
  };
  PrintBackendService_UpdatePrintSettings_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_UpdatePrintSettings_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_UpdatePrintSettings_ResponseParams.settings
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, PrintSettingsResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_UpdatePrintSettings_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PrintBackendService_UpdatePrintSettings_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_UpdatePrintSettings_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.settings =
        decoder.decodeStruct(PrintSettingsResult);
    return val;
  };

  PrintBackendService_UpdatePrintSettings_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_UpdatePrintSettings_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(PrintSettingsResult, val.settings);
  };
  function PrintBackendService_StartPrinting_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_StartPrinting_Params.prototype.initDefaults_ = function() {
    this.contextId = 0;
    this.documentCookie = 0;
    this.documentName = null;
    this.settings = null;
  };
  PrintBackendService_StartPrinting_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_StartPrinting_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate PrintBackendService_StartPrinting_Params.documentName
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_StartPrinting_Params.settings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, printing_context$.PrintSettings, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_StartPrinting_Params.encodedSize = codec.kStructHeaderSize + 24;

  PrintBackendService_StartPrinting_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_StartPrinting_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.contextId =
        decoder.decodeStruct(codec.Uint32);
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    val.documentName =
        decoder.decodeStructPointer(string16$.String16);
    val.settings =
        decoder.decodeStructPointer(printing_context$.PrintSettings);
    return val;
  };

  PrintBackendService_StartPrinting_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_StartPrinting_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.contextId);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.encodeStructPointer(string16$.String16, val.documentName);
    encoder.encodeStructPointer(printing_context$.PrintSettings, val.settings);
  };
  function PrintBackendService_StartPrinting_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_StartPrinting_ResponseParams.prototype.initDefaults_ = function() {
    this.resultCode = 0;
  };
  PrintBackendService_StartPrinting_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_StartPrinting_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_StartPrinting_ResponseParams.resultCode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, print$.ResultCode);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_StartPrinting_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PrintBackendService_StartPrinting_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_StartPrinting_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.resultCode =
        decoder.decodeStruct(new codec.Enum(print$.ResultCode));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintBackendService_StartPrinting_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_StartPrinting_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.resultCode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintBackendService_RenderPrintedDocument_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_RenderPrintedDocument_Params.prototype.initDefaults_ = function() {
    this.documentCookie = 0;
    this.pageCount = 0;
    this.dataType = 0;
    this.serializedDoc = null;
  };
  PrintBackendService_RenderPrintedDocument_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_RenderPrintedDocument_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate PrintBackendService_RenderPrintedDocument_Params.dataType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, print$.MetafileDataType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_RenderPrintedDocument_Params.serializedDoc
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, shared_memory$.ReadOnlySharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_RenderPrintedDocument_Params.encodedSize = codec.kStructHeaderSize + 24;

  PrintBackendService_RenderPrintedDocument_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_RenderPrintedDocument_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    val.pageCount =
        decoder.decodeStruct(codec.Uint32);
    val.dataType =
        decoder.decodeStruct(new codec.Enum(print$.MetafileDataType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.serializedDoc =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    return val;
  };

  PrintBackendService_RenderPrintedDocument_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_RenderPrintedDocument_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.encodeStruct(codec.Uint32, val.pageCount);
    encoder.encodeStruct(codec.Int32, val.dataType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.serializedDoc);
  };
  function PrintBackendService_RenderPrintedDocument_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_RenderPrintedDocument_ResponseParams.prototype.initDefaults_ = function() {
    this.resultCode = 0;
  };
  PrintBackendService_RenderPrintedDocument_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_RenderPrintedDocument_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_RenderPrintedDocument_ResponseParams.resultCode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, print$.ResultCode);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_RenderPrintedDocument_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PrintBackendService_RenderPrintedDocument_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_RenderPrintedDocument_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.resultCode =
        decoder.decodeStruct(new codec.Enum(print$.ResultCode));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintBackendService_RenderPrintedDocument_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_RenderPrintedDocument_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.resultCode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintBackendService_DocumentDone_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_DocumentDone_Params.prototype.initDefaults_ = function() {
    this.documentCookie = 0;
  };
  PrintBackendService_DocumentDone_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_DocumentDone_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintBackendService_DocumentDone_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintBackendService_DocumentDone_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_DocumentDone_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintBackendService_DocumentDone_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_DocumentDone_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintBackendService_DocumentDone_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_DocumentDone_ResponseParams.prototype.initDefaults_ = function() {
    this.resultCode = 0;
  };
  PrintBackendService_DocumentDone_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_DocumentDone_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PrintBackendService_DocumentDone_ResponseParams.resultCode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, print$.ResultCode);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_DocumentDone_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PrintBackendService_DocumentDone_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_DocumentDone_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.resultCode =
        decoder.decodeStruct(new codec.Enum(print$.ResultCode));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintBackendService_DocumentDone_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_DocumentDone_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.resultCode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintBackendService_Cancel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_Cancel_Params.prototype.initDefaults_ = function() {
    this.documentCookie = 0;
  };
  PrintBackendService_Cancel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_Cancel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PrintBackendService_Cancel_Params.encodedSize = codec.kStructHeaderSize + 8;

  PrintBackendService_Cancel_Params.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_Cancel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.documentCookie =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PrintBackendService_Cancel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_Cancel_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.documentCookie);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PrintBackendService_Cancel_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PrintBackendService_Cancel_ResponseParams.prototype.initDefaults_ = function() {
  };
  PrintBackendService_Cancel_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PrintBackendService_Cancel_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PrintBackendService_Cancel_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  PrintBackendService_Cancel_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PrintBackendService_Cancel_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PrintBackendService_Cancel_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PrintBackendService_Cancel_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };

  function DefaultPrinterNameResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  DefaultPrinterNameResult.Tags = {
    defaultPrinterName: 0,
    resultCode: 1,
  };

  DefaultPrinterNameResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  DefaultPrinterNameResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "defaultPrinterName",
        "resultCode",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a DefaultPrinterNameResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(DefaultPrinterNameResult.prototype, "defaultPrinterName", {
    get: function() {
      if (this.$tag != DefaultPrinterNameResult.Tags.defaultPrinterName) {
        throw new ReferenceError(
            "DefaultPrinterNameResult.defaultPrinterName is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = DefaultPrinterNameResult.Tags.defaultPrinterName;
      this.$data = value;
    }
  });
  Object.defineProperty(DefaultPrinterNameResult.prototype, "resultCode", {
    get: function() {
      if (this.$tag != DefaultPrinterNameResult.Tags.resultCode) {
        throw new ReferenceError(
            "DefaultPrinterNameResult.resultCode is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = DefaultPrinterNameResult.Tags.resultCode;
      this.$data = value;
    }
  });


    DefaultPrinterNameResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case DefaultPrinterNameResult.Tags.defaultPrinterName:
          encoder.encodeStruct(codec.String, val.defaultPrinterName);
          break;
        case DefaultPrinterNameResult.Tags.resultCode:
          encoder.encodeStruct(codec.Int32, val.resultCode);
          break;
      }
      encoder.align();
    };


    DefaultPrinterNameResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new DefaultPrinterNameResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case DefaultPrinterNameResult.Tags.defaultPrinterName:
          result.defaultPrinterName = decoder.decodeStruct(codec.String);
          break;
        case DefaultPrinterNameResult.Tags.resultCode:
          result.resultCode = decoder.decodeStruct(new codec.Enum(print$.ResultCode));
          break;
      }
      decoder.align();

      return result;
    };


    DefaultPrinterNameResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case DefaultPrinterNameResult.Tags.defaultPrinterName:
          

    // validate DefaultPrinterNameResult.defaultPrinterName
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case DefaultPrinterNameResult.Tags.resultCode:
          

    // validate DefaultPrinterNameResult.resultCode
    err = messageValidator.validateEnum(data_offset, print$.ResultCode);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  DefaultPrinterNameResult.encodedSize = 16;

  function PrinterListResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  PrinterListResult.Tags = {
    printerList: 0,
    resultCode: 1,
  };

  PrinterListResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  PrinterListResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "printerList",
        "resultCode",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a PrinterListResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(PrinterListResult.prototype, "printerList", {
    get: function() {
      if (this.$tag != PrinterListResult.Tags.printerList) {
        throw new ReferenceError(
            "PrinterListResult.printerList is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PrinterListResult.Tags.printerList;
      this.$data = value;
    }
  });
  Object.defineProperty(PrinterListResult.prototype, "resultCode", {
    get: function() {
      if (this.$tag != PrinterListResult.Tags.resultCode) {
        throw new ReferenceError(
            "PrinterListResult.resultCode is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PrinterListResult.Tags.resultCode;
      this.$data = value;
    }
  });


    PrinterListResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case PrinterListResult.Tags.printerList:
          encoder.encodeArrayPointer(new codec.PointerTo(print_backend$.PrinterBasicInfo), val.printerList);
          break;
        case PrinterListResult.Tags.resultCode:
          encoder.encodeStruct(codec.Int32, val.resultCode);
          break;
      }
      encoder.align();
    };


    PrinterListResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new PrinterListResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case PrinterListResult.Tags.printerList:
          result.printerList = decoder.decodeArrayPointer(new codec.PointerTo(print_backend$.PrinterBasicInfo));
          break;
        case PrinterListResult.Tags.resultCode:
          result.resultCode = decoder.decodeStruct(new codec.Enum(print$.ResultCode));
          break;
      }
      decoder.align();

      return result;
    };


    PrinterListResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case PrinterListResult.Tags.printerList:
          

    // validate PrinterListResult.printerList
    err = messageValidator.validateArrayPointer(data_offset, 8, new codec.PointerTo(print_backend$.PrinterBasicInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case PrinterListResult.Tags.resultCode:
          

    // validate PrinterListResult.resultCode
    err = messageValidator.validateEnum(data_offset, print$.ResultCode);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  PrinterListResult.encodedSize = 16;

  function PrinterSemanticCapsAndDefaultsResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  PrinterSemanticCapsAndDefaultsResult.Tags = {
    printerCaps: 0,
    resultCode: 1,
  };

  PrinterSemanticCapsAndDefaultsResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  PrinterSemanticCapsAndDefaultsResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "printerCaps",
        "resultCode",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a PrinterSemanticCapsAndDefaultsResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(PrinterSemanticCapsAndDefaultsResult.prototype, "printerCaps", {
    get: function() {
      if (this.$tag != PrinterSemanticCapsAndDefaultsResult.Tags.printerCaps) {
        throw new ReferenceError(
            "PrinterSemanticCapsAndDefaultsResult.printerCaps is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PrinterSemanticCapsAndDefaultsResult.Tags.printerCaps;
      this.$data = value;
    }
  });
  Object.defineProperty(PrinterSemanticCapsAndDefaultsResult.prototype, "resultCode", {
    get: function() {
      if (this.$tag != PrinterSemanticCapsAndDefaultsResult.Tags.resultCode) {
        throw new ReferenceError(
            "PrinterSemanticCapsAndDefaultsResult.resultCode is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PrinterSemanticCapsAndDefaultsResult.Tags.resultCode;
      this.$data = value;
    }
  });


    PrinterSemanticCapsAndDefaultsResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case PrinterSemanticCapsAndDefaultsResult.Tags.printerCaps:
          encoder.encodeStructPointer(print_backend$.PrinterSemanticCapsAndDefaults, val.printerCaps);
          break;
        case PrinterSemanticCapsAndDefaultsResult.Tags.resultCode:
          encoder.encodeStruct(codec.Int32, val.resultCode);
          break;
      }
      encoder.align();
    };


    PrinterSemanticCapsAndDefaultsResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new PrinterSemanticCapsAndDefaultsResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case PrinterSemanticCapsAndDefaultsResult.Tags.printerCaps:
          result.printerCaps = decoder.decodeStructPointer(print_backend$.PrinterSemanticCapsAndDefaults);
          break;
        case PrinterSemanticCapsAndDefaultsResult.Tags.resultCode:
          result.resultCode = decoder.decodeStruct(new codec.Enum(print$.ResultCode));
          break;
      }
      decoder.align();

      return result;
    };


    PrinterSemanticCapsAndDefaultsResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case PrinterSemanticCapsAndDefaultsResult.Tags.printerCaps:
          

    // validate PrinterSemanticCapsAndDefaultsResult.printerCaps
    err = messageValidator.validateStructPointer(data_offset, print_backend$.PrinterSemanticCapsAndDefaults, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case PrinterSemanticCapsAndDefaultsResult.Tags.resultCode:
          

    // validate PrinterSemanticCapsAndDefaultsResult.resultCode
    err = messageValidator.validateEnum(data_offset, print$.ResultCode);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  PrinterSemanticCapsAndDefaultsResult.encodedSize = 16;

  function PrinterCapsAndInfoResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  PrinterCapsAndInfoResult.Tags = {
    printerCapsAndInfo: 0,
    resultCode: 1,
  };

  PrinterCapsAndInfoResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  PrinterCapsAndInfoResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "printerCapsAndInfo",
        "resultCode",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a PrinterCapsAndInfoResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(PrinterCapsAndInfoResult.prototype, "printerCapsAndInfo", {
    get: function() {
      if (this.$tag != PrinterCapsAndInfoResult.Tags.printerCapsAndInfo) {
        throw new ReferenceError(
            "PrinterCapsAndInfoResult.printerCapsAndInfo is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PrinterCapsAndInfoResult.Tags.printerCapsAndInfo;
      this.$data = value;
    }
  });
  Object.defineProperty(PrinterCapsAndInfoResult.prototype, "resultCode", {
    get: function() {
      if (this.$tag != PrinterCapsAndInfoResult.Tags.resultCode) {
        throw new ReferenceError(
            "PrinterCapsAndInfoResult.resultCode is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PrinterCapsAndInfoResult.Tags.resultCode;
      this.$data = value;
    }
  });


    PrinterCapsAndInfoResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case PrinterCapsAndInfoResult.Tags.printerCapsAndInfo:
          encoder.encodeStructPointer(PrinterCapsAndInfo, val.printerCapsAndInfo);
          break;
        case PrinterCapsAndInfoResult.Tags.resultCode:
          encoder.encodeStruct(codec.Int32, val.resultCode);
          break;
      }
      encoder.align();
    };


    PrinterCapsAndInfoResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new PrinterCapsAndInfoResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case PrinterCapsAndInfoResult.Tags.printerCapsAndInfo:
          result.printerCapsAndInfo = decoder.decodeStructPointer(PrinterCapsAndInfo);
          break;
        case PrinterCapsAndInfoResult.Tags.resultCode:
          result.resultCode = decoder.decodeStruct(new codec.Enum(print$.ResultCode));
          break;
      }
      decoder.align();

      return result;
    };


    PrinterCapsAndInfoResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case PrinterCapsAndInfoResult.Tags.printerCapsAndInfo:
          

    // validate PrinterCapsAndInfoResult.printerCapsAndInfo
    err = messageValidator.validateStructPointer(data_offset, PrinterCapsAndInfo, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case PrinterCapsAndInfoResult.Tags.resultCode:
          

    // validate PrinterCapsAndInfoResult.resultCode
    err = messageValidator.validateEnum(data_offset, print$.ResultCode);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  PrinterCapsAndInfoResult.encodedSize = 16;

  function PrintSettingsResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  PrintSettingsResult.Tags = {
    settings: 0,
    resultCode: 1,
  };

  PrintSettingsResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  PrintSettingsResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "settings",
        "resultCode",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a PrintSettingsResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(PrintSettingsResult.prototype, "settings", {
    get: function() {
      if (this.$tag != PrintSettingsResult.Tags.settings) {
        throw new ReferenceError(
            "PrintSettingsResult.settings is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PrintSettingsResult.Tags.settings;
      this.$data = value;
    }
  });
  Object.defineProperty(PrintSettingsResult.prototype, "resultCode", {
    get: function() {
      if (this.$tag != PrintSettingsResult.Tags.resultCode) {
        throw new ReferenceError(
            "PrintSettingsResult.resultCode is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = PrintSettingsResult.Tags.resultCode;
      this.$data = value;
    }
  });


    PrintSettingsResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case PrintSettingsResult.Tags.settings:
          encoder.encodeStructPointer(printing_context$.PrintSettings, val.settings);
          break;
        case PrintSettingsResult.Tags.resultCode:
          encoder.encodeStruct(codec.Int32, val.resultCode);
          break;
      }
      encoder.align();
    };


    PrintSettingsResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new PrintSettingsResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case PrintSettingsResult.Tags.settings:
          result.settings = decoder.decodeStructPointer(printing_context$.PrintSettings);
          break;
        case PrintSettingsResult.Tags.resultCode:
          result.resultCode = decoder.decodeStruct(new codec.Enum(print$.ResultCode));
          break;
      }
      decoder.align();

      return result;
    };


    PrintSettingsResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case PrintSettingsResult.Tags.settings:
          

    // validate PrintSettingsResult.settings
    err = messageValidator.validateStructPointer(data_offset, printing_context$.PrintSettings, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case PrintSettingsResult.Tags.resultCode:
          

    // validate PrintSettingsResult.resultCode
    err = messageValidator.validateEnum(data_offset, print$.ResultCode);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  PrintSettingsResult.encodedSize = 16;
  var kUnsandboxedPrintBackendHost_BindBackend_Name = 558945265;

  function UnsandboxedPrintBackendHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(UnsandboxedPrintBackendHost,
                                                   handleOrPtrInfo);
  }

  function UnsandboxedPrintBackendHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        UnsandboxedPrintBackendHost, associatedInterfacePtrInfo);
  }

  UnsandboxedPrintBackendHostAssociatedPtr.prototype =
      Object.create(UnsandboxedPrintBackendHostPtr.prototype);
  UnsandboxedPrintBackendHostAssociatedPtr.prototype.constructor =
      UnsandboxedPrintBackendHostAssociatedPtr;

  function UnsandboxedPrintBackendHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  UnsandboxedPrintBackendHostPtr.prototype.bindBackend = function() {
    return UnsandboxedPrintBackendHostProxy.prototype.bindBackend
        .apply(this.ptr.getProxy(), arguments);
  };

  UnsandboxedPrintBackendHostProxy.prototype.bindBackend = function(service) {
    var params_ = new UnsandboxedPrintBackendHost_BindBackend_Params();
    params_.service = service;
    var builder = new codec.MessageV0Builder(
        kUnsandboxedPrintBackendHost_BindBackend_Name,
        codec.align(UnsandboxedPrintBackendHost_BindBackend_Params.encodedSize));
    builder.encodeStruct(UnsandboxedPrintBackendHost_BindBackend_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function UnsandboxedPrintBackendHostStub(delegate) {
    this.delegate_ = delegate;
  }
  UnsandboxedPrintBackendHostStub.prototype.bindBackend = function(service) {
    return this.delegate_ && this.delegate_.bindBackend && this.delegate_.bindBackend(service);
  }

  UnsandboxedPrintBackendHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kUnsandboxedPrintBackendHost_BindBackend_Name:
      var params = reader.decodeStruct(UnsandboxedPrintBackendHost_BindBackend_Params);
      this.bindBackend(params.service);
      return true;
    default:
      return false;
    }
  };

  UnsandboxedPrintBackendHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateUnsandboxedPrintBackendHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kUnsandboxedPrintBackendHost_BindBackend_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = UnsandboxedPrintBackendHost_BindBackend_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateUnsandboxedPrintBackendHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var UnsandboxedPrintBackendHost = {
    name: 'printing.mojom.UnsandboxedPrintBackendHost',
    kVersion: 0,
    ptrClass: UnsandboxedPrintBackendHostPtr,
    proxyClass: UnsandboxedPrintBackendHostProxy,
    stubClass: UnsandboxedPrintBackendHostStub,
    validateRequest: validateUnsandboxedPrintBackendHostRequest,
    validateResponse: null,
  };
  UnsandboxedPrintBackendHostStub.prototype.validator = validateUnsandboxedPrintBackendHostRequest;
  UnsandboxedPrintBackendHostProxy.prototype.validator = null;
  var kSandboxedPrintBackendHost_BindBackend_Name = 1049611783;

  function SandboxedPrintBackendHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SandboxedPrintBackendHost,
                                                   handleOrPtrInfo);
  }

  function SandboxedPrintBackendHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SandboxedPrintBackendHost, associatedInterfacePtrInfo);
  }

  SandboxedPrintBackendHostAssociatedPtr.prototype =
      Object.create(SandboxedPrintBackendHostPtr.prototype);
  SandboxedPrintBackendHostAssociatedPtr.prototype.constructor =
      SandboxedPrintBackendHostAssociatedPtr;

  function SandboxedPrintBackendHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  SandboxedPrintBackendHostPtr.prototype.bindBackend = function() {
    return SandboxedPrintBackendHostProxy.prototype.bindBackend
        .apply(this.ptr.getProxy(), arguments);
  };

  SandboxedPrintBackendHostProxy.prototype.bindBackend = function(service) {
    var params_ = new SandboxedPrintBackendHost_BindBackend_Params();
    params_.service = service;
    var builder = new codec.MessageV0Builder(
        kSandboxedPrintBackendHost_BindBackend_Name,
        codec.align(SandboxedPrintBackendHost_BindBackend_Params.encodedSize));
    builder.encodeStruct(SandboxedPrintBackendHost_BindBackend_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function SandboxedPrintBackendHostStub(delegate) {
    this.delegate_ = delegate;
  }
  SandboxedPrintBackendHostStub.prototype.bindBackend = function(service) {
    return this.delegate_ && this.delegate_.bindBackend && this.delegate_.bindBackend(service);
  }

  SandboxedPrintBackendHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSandboxedPrintBackendHost_BindBackend_Name:
      var params = reader.decodeStruct(SandboxedPrintBackendHost_BindBackend_Params);
      this.bindBackend(params.service);
      return true;
    default:
      return false;
    }
  };

  SandboxedPrintBackendHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateSandboxedPrintBackendHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSandboxedPrintBackendHost_BindBackend_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SandboxedPrintBackendHost_BindBackend_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSandboxedPrintBackendHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var SandboxedPrintBackendHost = {
    name: 'printing.mojom.SandboxedPrintBackendHost',
    kVersion: 0,
    ptrClass: SandboxedPrintBackendHostPtr,
    proxyClass: SandboxedPrintBackendHostProxy,
    stubClass: SandboxedPrintBackendHostStub,
    validateRequest: validateSandboxedPrintBackendHostRequest,
    validateResponse: null,
  };
  SandboxedPrintBackendHostStub.prototype.validator = validateSandboxedPrintBackendHostRequest;
  SandboxedPrintBackendHostProxy.prototype.validator = null;
  var kPrintBackendService_Init_Name = 455311073;
  var kPrintBackendService_Poke_Name = 1849670142;
  var kPrintBackendService_EnumeratePrinters_Name = 1589347493;
  var kPrintBackendService_GetDefaultPrinterName_Name = 11067219;
  var kPrintBackendService_FetchCapabilities_Name = 111365477;
  var kPrintBackendService_EstablishPrintingContext_Name = 272760146;
  var kPrintBackendService_UseDefaultSettings_Name = 1892201795;
  var kPrintBackendService_UpdatePrintSettings_Name = 2141947070;
  var kPrintBackendService_StartPrinting_Name = 1416491553;
  var kPrintBackendService_RenderPrintedDocument_Name = 489544160;
  var kPrintBackendService_DocumentDone_Name = 1296090863;
  var kPrintBackendService_Cancel_Name = 429705931;

  function PrintBackendServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PrintBackendService,
                                                   handleOrPtrInfo);
  }

  function PrintBackendServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PrintBackendService, associatedInterfacePtrInfo);
  }

  PrintBackendServiceAssociatedPtr.prototype =
      Object.create(PrintBackendServicePtr.prototype);
  PrintBackendServiceAssociatedPtr.prototype.constructor =
      PrintBackendServiceAssociatedPtr;

  function PrintBackendServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  PrintBackendServicePtr.prototype.init = function() {
    return PrintBackendServiceProxy.prototype.init
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.init = function(locale) {
    var params_ = new PrintBackendService_Init_Params();
    params_.locale = locale;
    var builder = new codec.MessageV0Builder(
        kPrintBackendService_Init_Name,
        codec.align(PrintBackendService_Init_Params.encodedSize));
    builder.encodeStruct(PrintBackendService_Init_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintBackendServicePtr.prototype.poke = function() {
    return PrintBackendServiceProxy.prototype.poke
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.poke = function() {
    var params_ = new PrintBackendService_Poke_Params();
    var builder = new codec.MessageV0Builder(
        kPrintBackendService_Poke_Name,
        codec.align(PrintBackendService_Poke_Params.encodedSize));
    builder.encodeStruct(PrintBackendService_Poke_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintBackendServicePtr.prototype.enumeratePrinters = function() {
    return PrintBackendServiceProxy.prototype.enumeratePrinters
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.enumeratePrinters = function() {
    var params_ = new PrintBackendService_EnumeratePrinters_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintBackendService_EnumeratePrinters_Name,
          codec.align(PrintBackendService_EnumeratePrinters_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintBackendService_EnumeratePrinters_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintBackendService_EnumeratePrinters_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintBackendServicePtr.prototype.getDefaultPrinterName = function() {
    return PrintBackendServiceProxy.prototype.getDefaultPrinterName
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.getDefaultPrinterName = function() {
    var params_ = new PrintBackendService_GetDefaultPrinterName_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintBackendService_GetDefaultPrinterName_Name,
          codec.align(PrintBackendService_GetDefaultPrinterName_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintBackendService_GetDefaultPrinterName_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintBackendService_GetDefaultPrinterName_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintBackendServicePtr.prototype.fetchCapabilities = function() {
    return PrintBackendServiceProxy.prototype.fetchCapabilities
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.fetchCapabilities = function(printerName) {
    var params_ = new PrintBackendService_FetchCapabilities_Params();
    params_.printerName = printerName;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintBackendService_FetchCapabilities_Name,
          codec.align(PrintBackendService_FetchCapabilities_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintBackendService_FetchCapabilities_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintBackendService_FetchCapabilities_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintBackendServicePtr.prototype.establishPrintingContext = function() {
    return PrintBackendServiceProxy.prototype.establishPrintingContext
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.establishPrintingContext = function(contextId) {
    var params_ = new PrintBackendService_EstablishPrintingContext_Params();
    params_.contextId = contextId;
    var builder = new codec.MessageV0Builder(
        kPrintBackendService_EstablishPrintingContext_Name,
        codec.align(PrintBackendService_EstablishPrintingContext_Params.encodedSize));
    builder.encodeStruct(PrintBackendService_EstablishPrintingContext_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PrintBackendServicePtr.prototype.useDefaultSettings = function() {
    return PrintBackendServiceProxy.prototype.useDefaultSettings
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.useDefaultSettings = function(contextId) {
    var params_ = new PrintBackendService_UseDefaultSettings_Params();
    params_.contextId = contextId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintBackendService_UseDefaultSettings_Name,
          codec.align(PrintBackendService_UseDefaultSettings_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintBackendService_UseDefaultSettings_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintBackendService_UseDefaultSettings_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintBackendServicePtr.prototype.updatePrintSettings = function() {
    return PrintBackendServiceProxy.prototype.updatePrintSettings
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.updatePrintSettings = function(contextId, jobSettings) {
    var params_ = new PrintBackendService_UpdatePrintSettings_Params();
    params_.contextId = contextId;
    params_.jobSettings = jobSettings;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintBackendService_UpdatePrintSettings_Name,
          codec.align(PrintBackendService_UpdatePrintSettings_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintBackendService_UpdatePrintSettings_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintBackendService_UpdatePrintSettings_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintBackendServicePtr.prototype.startPrinting = function() {
    return PrintBackendServiceProxy.prototype.startPrinting
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.startPrinting = function(contextId, documentCookie, documentName, settings) {
    var params_ = new PrintBackendService_StartPrinting_Params();
    params_.contextId = contextId;
    params_.documentCookie = documentCookie;
    params_.documentName = documentName;
    params_.settings = settings;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintBackendService_StartPrinting_Name,
          codec.align(PrintBackendService_StartPrinting_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintBackendService_StartPrinting_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintBackendService_StartPrinting_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintBackendServicePtr.prototype.renderPrintedDocument = function() {
    return PrintBackendServiceProxy.prototype.renderPrintedDocument
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.renderPrintedDocument = function(documentCookie, pageCount, dataType, serializedDoc) {
    var params_ = new PrintBackendService_RenderPrintedDocument_Params();
    params_.documentCookie = documentCookie;
    params_.pageCount = pageCount;
    params_.dataType = dataType;
    params_.serializedDoc = serializedDoc;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintBackendService_RenderPrintedDocument_Name,
          codec.align(PrintBackendService_RenderPrintedDocument_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintBackendService_RenderPrintedDocument_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintBackendService_RenderPrintedDocument_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintBackendServicePtr.prototype.documentDone = function() {
    return PrintBackendServiceProxy.prototype.documentDone
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.documentDone = function(documentCookie) {
    var params_ = new PrintBackendService_DocumentDone_Params();
    params_.documentCookie = documentCookie;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintBackendService_DocumentDone_Name,
          codec.align(PrintBackendService_DocumentDone_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintBackendService_DocumentDone_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintBackendService_DocumentDone_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PrintBackendServicePtr.prototype.cancel = function() {
    return PrintBackendServiceProxy.prototype.cancel
        .apply(this.ptr.getProxy(), arguments);
  };

  PrintBackendServiceProxy.prototype.cancel = function(documentCookie) {
    var params_ = new PrintBackendService_Cancel_Params();
    params_.documentCookie = documentCookie;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPrintBackendService_Cancel_Name,
          codec.align(PrintBackendService_Cancel_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PrintBackendService_Cancel_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PrintBackendService_Cancel_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PrintBackendServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  PrintBackendServiceStub.prototype.init = function(locale) {
    return this.delegate_ && this.delegate_.init && this.delegate_.init(locale);
  }
  PrintBackendServiceStub.prototype.poke = function() {
    return this.delegate_ && this.delegate_.poke && this.delegate_.poke();
  }
  PrintBackendServiceStub.prototype.enumeratePrinters = function() {
    return this.delegate_ && this.delegate_.enumeratePrinters && this.delegate_.enumeratePrinters();
  }
  PrintBackendServiceStub.prototype.getDefaultPrinterName = function() {
    return this.delegate_ && this.delegate_.getDefaultPrinterName && this.delegate_.getDefaultPrinterName();
  }
  PrintBackendServiceStub.prototype.fetchCapabilities = function(printerName) {
    return this.delegate_ && this.delegate_.fetchCapabilities && this.delegate_.fetchCapabilities(printerName);
  }
  PrintBackendServiceStub.prototype.establishPrintingContext = function(contextId) {
    return this.delegate_ && this.delegate_.establishPrintingContext && this.delegate_.establishPrintingContext(contextId);
  }
  PrintBackendServiceStub.prototype.useDefaultSettings = function(contextId) {
    return this.delegate_ && this.delegate_.useDefaultSettings && this.delegate_.useDefaultSettings(contextId);
  }
  PrintBackendServiceStub.prototype.updatePrintSettings = function(contextId, jobSettings) {
    return this.delegate_ && this.delegate_.updatePrintSettings && this.delegate_.updatePrintSettings(contextId, jobSettings);
  }
  PrintBackendServiceStub.prototype.startPrinting = function(contextId, documentCookie, documentName, settings) {
    return this.delegate_ && this.delegate_.startPrinting && this.delegate_.startPrinting(contextId, documentCookie, documentName, settings);
  }
  PrintBackendServiceStub.prototype.renderPrintedDocument = function(documentCookie, pageCount, dataType, serializedDoc) {
    return this.delegate_ && this.delegate_.renderPrintedDocument && this.delegate_.renderPrintedDocument(documentCookie, pageCount, dataType, serializedDoc);
  }
  PrintBackendServiceStub.prototype.documentDone = function(documentCookie) {
    return this.delegate_ && this.delegate_.documentDone && this.delegate_.documentDone(documentCookie);
  }
  PrintBackendServiceStub.prototype.cancel = function(documentCookie) {
    return this.delegate_ && this.delegate_.cancel && this.delegate_.cancel(documentCookie);
  }

  PrintBackendServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrintBackendService_Init_Name:
      var params = reader.decodeStruct(PrintBackendService_Init_Params);
      this.init(params.locale);
      return true;
    case kPrintBackendService_Poke_Name:
      var params = reader.decodeStruct(PrintBackendService_Poke_Params);
      this.poke();
      return true;
    case kPrintBackendService_EstablishPrintingContext_Name:
      var params = reader.decodeStruct(PrintBackendService_EstablishPrintingContext_Params);
      this.establishPrintingContext(params.contextId);
      return true;
    default:
      return false;
    }
  };

  PrintBackendServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPrintBackendService_EnumeratePrinters_Name:
      var params = reader.decodeStruct(PrintBackendService_EnumeratePrinters_Params);
      this.enumeratePrinters().then(function(response) {
        var responseParams =
            new PrintBackendService_EnumeratePrinters_ResponseParams();
        responseParams.printerList = response.printerList;
        var builder = new codec.MessageV1Builder(
            kPrintBackendService_EnumeratePrinters_Name,
            codec.align(PrintBackendService_EnumeratePrinters_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintBackendService_EnumeratePrinters_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintBackendService_GetDefaultPrinterName_Name:
      var params = reader.decodeStruct(PrintBackendService_GetDefaultPrinterName_Params);
      this.getDefaultPrinterName().then(function(response) {
        var responseParams =
            new PrintBackendService_GetDefaultPrinterName_ResponseParams();
        responseParams.printerName = response.printerName;
        var builder = new codec.MessageV1Builder(
            kPrintBackendService_GetDefaultPrinterName_Name,
            codec.align(PrintBackendService_GetDefaultPrinterName_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintBackendService_GetDefaultPrinterName_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintBackendService_FetchCapabilities_Name:
      var params = reader.decodeStruct(PrintBackendService_FetchCapabilities_Params);
      this.fetchCapabilities(params.printerName).then(function(response) {
        var responseParams =
            new PrintBackendService_FetchCapabilities_ResponseParams();
        responseParams.printerCapsAndInfo = response.printerCapsAndInfo;
        var builder = new codec.MessageV1Builder(
            kPrintBackendService_FetchCapabilities_Name,
            codec.align(PrintBackendService_FetchCapabilities_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintBackendService_FetchCapabilities_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintBackendService_UseDefaultSettings_Name:
      var params = reader.decodeStruct(PrintBackendService_UseDefaultSettings_Params);
      this.useDefaultSettings(params.contextId).then(function(response) {
        var responseParams =
            new PrintBackendService_UseDefaultSettings_ResponseParams();
        responseParams.settings = response.settings;
        var builder = new codec.MessageV1Builder(
            kPrintBackendService_UseDefaultSettings_Name,
            codec.align(PrintBackendService_UseDefaultSettings_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintBackendService_UseDefaultSettings_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintBackendService_UpdatePrintSettings_Name:
      var params = reader.decodeStruct(PrintBackendService_UpdatePrintSettings_Params);
      this.updatePrintSettings(params.contextId, params.jobSettings).then(function(response) {
        var responseParams =
            new PrintBackendService_UpdatePrintSettings_ResponseParams();
        responseParams.settings = response.settings;
        var builder = new codec.MessageV1Builder(
            kPrintBackendService_UpdatePrintSettings_Name,
            codec.align(PrintBackendService_UpdatePrintSettings_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintBackendService_UpdatePrintSettings_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintBackendService_StartPrinting_Name:
      var params = reader.decodeStruct(PrintBackendService_StartPrinting_Params);
      this.startPrinting(params.contextId, params.documentCookie, params.documentName, params.settings).then(function(response) {
        var responseParams =
            new PrintBackendService_StartPrinting_ResponseParams();
        responseParams.resultCode = response.resultCode;
        var builder = new codec.MessageV1Builder(
            kPrintBackendService_StartPrinting_Name,
            codec.align(PrintBackendService_StartPrinting_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintBackendService_StartPrinting_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintBackendService_RenderPrintedDocument_Name:
      var params = reader.decodeStruct(PrintBackendService_RenderPrintedDocument_Params);
      this.renderPrintedDocument(params.documentCookie, params.pageCount, params.dataType, params.serializedDoc).then(function(response) {
        var responseParams =
            new PrintBackendService_RenderPrintedDocument_ResponseParams();
        responseParams.resultCode = response.resultCode;
        var builder = new codec.MessageV1Builder(
            kPrintBackendService_RenderPrintedDocument_Name,
            codec.align(PrintBackendService_RenderPrintedDocument_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintBackendService_RenderPrintedDocument_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintBackendService_DocumentDone_Name:
      var params = reader.decodeStruct(PrintBackendService_DocumentDone_Params);
      this.documentDone(params.documentCookie).then(function(response) {
        var responseParams =
            new PrintBackendService_DocumentDone_ResponseParams();
        responseParams.resultCode = response.resultCode;
        var builder = new codec.MessageV1Builder(
            kPrintBackendService_DocumentDone_Name,
            codec.align(PrintBackendService_DocumentDone_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintBackendService_DocumentDone_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPrintBackendService_Cancel_Name:
      var params = reader.decodeStruct(PrintBackendService_Cancel_Params);
      this.cancel(params.documentCookie).then(function(response) {
        var responseParams =
            new PrintBackendService_Cancel_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kPrintBackendService_Cancel_Name,
            codec.align(PrintBackendService_Cancel_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PrintBackendService_Cancel_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePrintBackendServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPrintBackendService_Init_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintBackendService_Init_Params;
      break;
      case kPrintBackendService_Poke_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintBackendService_Poke_Params;
      break;
      case kPrintBackendService_EnumeratePrinters_Name:
        if (message.expectsResponse())
          paramsClass = PrintBackendService_EnumeratePrinters_Params;
      break;
      case kPrintBackendService_GetDefaultPrinterName_Name:
        if (message.expectsResponse())
          paramsClass = PrintBackendService_GetDefaultPrinterName_Params;
      break;
      case kPrintBackendService_FetchCapabilities_Name:
        if (message.expectsResponse())
          paramsClass = PrintBackendService_FetchCapabilities_Params;
      break;
      case kPrintBackendService_EstablishPrintingContext_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PrintBackendService_EstablishPrintingContext_Params;
      break;
      case kPrintBackendService_UseDefaultSettings_Name:
        if (message.expectsResponse())
          paramsClass = PrintBackendService_UseDefaultSettings_Params;
      break;
      case kPrintBackendService_UpdatePrintSettings_Name:
        if (message.expectsResponse())
          paramsClass = PrintBackendService_UpdatePrintSettings_Params;
      break;
      case kPrintBackendService_StartPrinting_Name:
        if (message.expectsResponse())
          paramsClass = PrintBackendService_StartPrinting_Params;
      break;
      case kPrintBackendService_RenderPrintedDocument_Name:
        if (message.expectsResponse())
          paramsClass = PrintBackendService_RenderPrintedDocument_Params;
      break;
      case kPrintBackendService_DocumentDone_Name:
        if (message.expectsResponse())
          paramsClass = PrintBackendService_DocumentDone_Params;
      break;
      case kPrintBackendService_Cancel_Name:
        if (message.expectsResponse())
          paramsClass = PrintBackendService_Cancel_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePrintBackendServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPrintBackendService_EnumeratePrinters_Name:
        if (message.isResponse())
          paramsClass = PrintBackendService_EnumeratePrinters_ResponseParams;
        break;
      case kPrintBackendService_GetDefaultPrinterName_Name:
        if (message.isResponse())
          paramsClass = PrintBackendService_GetDefaultPrinterName_ResponseParams;
        break;
      case kPrintBackendService_FetchCapabilities_Name:
        if (message.isResponse())
          paramsClass = PrintBackendService_FetchCapabilities_ResponseParams;
        break;
      case kPrintBackendService_UseDefaultSettings_Name:
        if (message.isResponse())
          paramsClass = PrintBackendService_UseDefaultSettings_ResponseParams;
        break;
      case kPrintBackendService_UpdatePrintSettings_Name:
        if (message.isResponse())
          paramsClass = PrintBackendService_UpdatePrintSettings_ResponseParams;
        break;
      case kPrintBackendService_StartPrinting_Name:
        if (message.isResponse())
          paramsClass = PrintBackendService_StartPrinting_ResponseParams;
        break;
      case kPrintBackendService_RenderPrintedDocument_Name:
        if (message.isResponse())
          paramsClass = PrintBackendService_RenderPrintedDocument_ResponseParams;
        break;
      case kPrintBackendService_DocumentDone_Name:
        if (message.isResponse())
          paramsClass = PrintBackendService_DocumentDone_ResponseParams;
        break;
      case kPrintBackendService_Cancel_Name:
        if (message.isResponse())
          paramsClass = PrintBackendService_Cancel_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PrintBackendService = {
    name: 'printing.mojom.PrintBackendService',
    kVersion: 0,
    ptrClass: PrintBackendServicePtr,
    proxyClass: PrintBackendServiceProxy,
    stubClass: PrintBackendServiceStub,
    validateRequest: validatePrintBackendServiceRequest,
    validateResponse: validatePrintBackendServiceResponse,
  };
  PrintBackendServiceStub.prototype.validator = validatePrintBackendServiceRequest;
  PrintBackendServiceProxy.prototype.validator = validatePrintBackendServiceResponse;
  exports.PrinterCapsAndInfo = PrinterCapsAndInfo;
  exports.DefaultPrinterNameResult = DefaultPrinterNameResult;
  exports.PrinterListResult = PrinterListResult;
  exports.PrinterSemanticCapsAndDefaultsResult = PrinterSemanticCapsAndDefaultsResult;
  exports.PrinterCapsAndInfoResult = PrinterCapsAndInfoResult;
  exports.PrintSettingsResult = PrintSettingsResult;
  exports.UnsandboxedPrintBackendHost = UnsandboxedPrintBackendHost;
  exports.UnsandboxedPrintBackendHostPtr = UnsandboxedPrintBackendHostPtr;
  exports.UnsandboxedPrintBackendHostAssociatedPtr = UnsandboxedPrintBackendHostAssociatedPtr;
  exports.SandboxedPrintBackendHost = SandboxedPrintBackendHost;
  exports.SandboxedPrintBackendHostPtr = SandboxedPrintBackendHostPtr;
  exports.SandboxedPrintBackendHostAssociatedPtr = SandboxedPrintBackendHostAssociatedPtr;
  exports.PrintBackendService = PrintBackendService;
  exports.PrintBackendServicePtr = PrintBackendServicePtr;
  exports.PrintBackendServiceAssociatedPtr = PrintBackendServiceAssociatedPtr;
})();