// chrome/common/available_offline_content.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/common/available_offline_content.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('chrome.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../url/mojom/url.mojom.js');
  }


  var AvailableContentType = {};
  AvailableContentType.kPrefetchedPage = 0;
  AvailableContentType.kVideo = 1;
  AvailableContentType.kAudio = 2;
  AvailableContentType.kOtherPage = 3;
  AvailableContentType.kUninteresting = 4;
  AvailableContentType.MIN_VALUE = 0;
  AvailableContentType.MAX_VALUE = 4;

  AvailableContentType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  AvailableContentType.toKnownEnumValue = function(value) {
    return value;
  };

  AvailableContentType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function AvailableOfflineContent(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AvailableOfflineContent.prototype.initDefaults_ = function() {
    this.id = null;
    this.nameSpace = null;
    this.title = null;
    this.snippet = null;
    this.dateModified = null;
    this.attribution = null;
    this.thumbnailDataUri = null;
    this.faviconDataUri = null;
    this.contentType = 0;
  };
  AvailableOfflineContent.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AvailableOfflineContent.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 80}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AvailableOfflineContent.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AvailableOfflineContent.nameSpace
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AvailableOfflineContent.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AvailableOfflineContent.snippet
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AvailableOfflineContent.dateModified
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AvailableOfflineContent.attribution
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AvailableOfflineContent.thumbnailDataUri
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AvailableOfflineContent.faviconDataUri
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AvailableOfflineContent.contentType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 64, AvailableContentType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AvailableOfflineContent.encodedSize = codec.kStructHeaderSize + 72;

  AvailableOfflineContent.decode = function(decoder) {
    var packed;
    var val = new AvailableOfflineContent();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    val.nameSpace =
        decoder.decodeStruct(codec.String);
    val.title =
        decoder.decodeStruct(codec.String);
    val.snippet =
        decoder.decodeStruct(codec.String);
    val.dateModified =
        decoder.decodeStruct(codec.String);
    val.attribution =
        decoder.decodeStruct(codec.String);
    val.thumbnailDataUri =
        decoder.decodeStructPointer(url$.Url);
    val.faviconDataUri =
        decoder.decodeStructPointer(url$.Url);
    val.contentType =
        decoder.decodeStruct(new codec.Enum(AvailableContentType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  AvailableOfflineContent.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AvailableOfflineContent.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeStruct(codec.String, val.nameSpace);
    encoder.encodeStruct(codec.String, val.title);
    encoder.encodeStruct(codec.String, val.snippet);
    encoder.encodeStruct(codec.String, val.dateModified);
    encoder.encodeStruct(codec.String, val.attribution);
    encoder.encodeStructPointer(url$.Url, val.thumbnailDataUri);
    encoder.encodeStructPointer(url$.Url, val.faviconDataUri);
    encoder.encodeStruct(codec.Int32, val.contentType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function AvailableOfflineContentProvider_List_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AvailableOfflineContentProvider_List_Params.prototype.initDefaults_ = function() {
  };
  AvailableOfflineContentProvider_List_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AvailableOfflineContentProvider_List_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AvailableOfflineContentProvider_List_Params.encodedSize = codec.kStructHeaderSize + 0;

  AvailableOfflineContentProvider_List_Params.decode = function(decoder) {
    var packed;
    var val = new AvailableOfflineContentProvider_List_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  AvailableOfflineContentProvider_List_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AvailableOfflineContentProvider_List_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function AvailableOfflineContentProvider_List_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AvailableOfflineContentProvider_List_ResponseParams.prototype.initDefaults_ = function() {
    this.listVisibleByPrefs = false;
    this.out = null;
  };
  AvailableOfflineContentProvider_List_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AvailableOfflineContentProvider_List_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate AvailableOfflineContentProvider_List_ResponseParams.out
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(AvailableOfflineContent), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AvailableOfflineContentProvider_List_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  AvailableOfflineContentProvider_List_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new AvailableOfflineContentProvider_List_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.listVisibleByPrefs = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.out =
        decoder.decodeArrayPointer(new codec.PointerTo(AvailableOfflineContent));
    return val;
  };

  AvailableOfflineContentProvider_List_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AvailableOfflineContentProvider_List_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.listVisibleByPrefs & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(AvailableOfflineContent), val.out);
  };
  function AvailableOfflineContentProvider_LaunchItem_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AvailableOfflineContentProvider_LaunchItem_Params.prototype.initDefaults_ = function() {
    this.itemId = null;
    this.nameSpace = null;
  };
  AvailableOfflineContentProvider_LaunchItem_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AvailableOfflineContentProvider_LaunchItem_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AvailableOfflineContentProvider_LaunchItem_Params.itemId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate AvailableOfflineContentProvider_LaunchItem_Params.nameSpace
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AvailableOfflineContentProvider_LaunchItem_Params.encodedSize = codec.kStructHeaderSize + 16;

  AvailableOfflineContentProvider_LaunchItem_Params.decode = function(decoder) {
    var packed;
    var val = new AvailableOfflineContentProvider_LaunchItem_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.itemId =
        decoder.decodeStruct(codec.String);
    val.nameSpace =
        decoder.decodeStruct(codec.String);
    return val;
  };

  AvailableOfflineContentProvider_LaunchItem_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AvailableOfflineContentProvider_LaunchItem_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.itemId);
    encoder.encodeStruct(codec.String, val.nameSpace);
  };
  function AvailableOfflineContentProvider_LaunchDownloadsPage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AvailableOfflineContentProvider_LaunchDownloadsPage_Params.prototype.initDefaults_ = function() {
    this.openPrefetchedArticlesTab = false;
  };
  AvailableOfflineContentProvider_LaunchDownloadsPage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AvailableOfflineContentProvider_LaunchDownloadsPage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  AvailableOfflineContentProvider_LaunchDownloadsPage_Params.encodedSize = codec.kStructHeaderSize + 8;

  AvailableOfflineContentProvider_LaunchDownloadsPage_Params.decode = function(decoder) {
    var packed;
    var val = new AvailableOfflineContentProvider_LaunchDownloadsPage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.openPrefetchedArticlesTab = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  AvailableOfflineContentProvider_LaunchDownloadsPage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AvailableOfflineContentProvider_LaunchDownloadsPage_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.openPrefetchedArticlesTab & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function AvailableOfflineContentProvider_ListVisibilityChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AvailableOfflineContentProvider_ListVisibilityChanged_Params.prototype.initDefaults_ = function() {
    this.isVisible = false;
  };
  AvailableOfflineContentProvider_ListVisibilityChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AvailableOfflineContentProvider_ListVisibilityChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  AvailableOfflineContentProvider_ListVisibilityChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  AvailableOfflineContentProvider_ListVisibilityChanged_Params.decode = function(decoder) {
    var packed;
    var val = new AvailableOfflineContentProvider_ListVisibilityChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isVisible = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  AvailableOfflineContentProvider_ListVisibilityChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AvailableOfflineContentProvider_ListVisibilityChanged_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isVisible & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kAvailableOfflineContentProvider_List_Name = 1457501685;
  var kAvailableOfflineContentProvider_LaunchItem_Name = 2128138068;
  var kAvailableOfflineContentProvider_LaunchDownloadsPage_Name = 2131076393;
  var kAvailableOfflineContentProvider_ListVisibilityChanged_Name = 917639533;

  function AvailableOfflineContentProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AvailableOfflineContentProvider,
                                                   handleOrPtrInfo);
  }

  function AvailableOfflineContentProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AvailableOfflineContentProvider, associatedInterfacePtrInfo);
  }

  AvailableOfflineContentProviderAssociatedPtr.prototype =
      Object.create(AvailableOfflineContentProviderPtr.prototype);
  AvailableOfflineContentProviderAssociatedPtr.prototype.constructor =
      AvailableOfflineContentProviderAssociatedPtr;

  function AvailableOfflineContentProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  AvailableOfflineContentProviderPtr.prototype.list = function() {
    return AvailableOfflineContentProviderProxy.prototype.list
        .apply(this.ptr.getProxy(), arguments);
  };

  AvailableOfflineContentProviderProxy.prototype.list = function() {
    var params_ = new AvailableOfflineContentProvider_List_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kAvailableOfflineContentProvider_List_Name,
          codec.align(AvailableOfflineContentProvider_List_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(AvailableOfflineContentProvider_List_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(AvailableOfflineContentProvider_List_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  AvailableOfflineContentProviderPtr.prototype.launchItem = function() {
    return AvailableOfflineContentProviderProxy.prototype.launchItem
        .apply(this.ptr.getProxy(), arguments);
  };

  AvailableOfflineContentProviderProxy.prototype.launchItem = function(itemId, nameSpace) {
    var params_ = new AvailableOfflineContentProvider_LaunchItem_Params();
    params_.itemId = itemId;
    params_.nameSpace = nameSpace;
    var builder = new codec.MessageV0Builder(
        kAvailableOfflineContentProvider_LaunchItem_Name,
        codec.align(AvailableOfflineContentProvider_LaunchItem_Params.encodedSize));
    builder.encodeStruct(AvailableOfflineContentProvider_LaunchItem_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AvailableOfflineContentProviderPtr.prototype.launchDownloadsPage = function() {
    return AvailableOfflineContentProviderProxy.prototype.launchDownloadsPage
        .apply(this.ptr.getProxy(), arguments);
  };

  AvailableOfflineContentProviderProxy.prototype.launchDownloadsPage = function(openPrefetchedArticlesTab) {
    var params_ = new AvailableOfflineContentProvider_LaunchDownloadsPage_Params();
    params_.openPrefetchedArticlesTab = openPrefetchedArticlesTab;
    var builder = new codec.MessageV0Builder(
        kAvailableOfflineContentProvider_LaunchDownloadsPage_Name,
        codec.align(AvailableOfflineContentProvider_LaunchDownloadsPage_Params.encodedSize));
    builder.encodeStruct(AvailableOfflineContentProvider_LaunchDownloadsPage_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AvailableOfflineContentProviderPtr.prototype.listVisibilityChanged = function() {
    return AvailableOfflineContentProviderProxy.prototype.listVisibilityChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  AvailableOfflineContentProviderProxy.prototype.listVisibilityChanged = function(isVisible) {
    var params_ = new AvailableOfflineContentProvider_ListVisibilityChanged_Params();
    params_.isVisible = isVisible;
    var builder = new codec.MessageV0Builder(
        kAvailableOfflineContentProvider_ListVisibilityChanged_Name,
        codec.align(AvailableOfflineContentProvider_ListVisibilityChanged_Params.encodedSize));
    builder.encodeStruct(AvailableOfflineContentProvider_ListVisibilityChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AvailableOfflineContentProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  AvailableOfflineContentProviderStub.prototype.list = function() {
    return this.delegate_ && this.delegate_.list && this.delegate_.list();
  }
  AvailableOfflineContentProviderStub.prototype.launchItem = function(itemId, nameSpace) {
    return this.delegate_ && this.delegate_.launchItem && this.delegate_.launchItem(itemId, nameSpace);
  }
  AvailableOfflineContentProviderStub.prototype.launchDownloadsPage = function(openPrefetchedArticlesTab) {
    return this.delegate_ && this.delegate_.launchDownloadsPage && this.delegate_.launchDownloadsPage(openPrefetchedArticlesTab);
  }
  AvailableOfflineContentProviderStub.prototype.listVisibilityChanged = function(isVisible) {
    return this.delegate_ && this.delegate_.listVisibilityChanged && this.delegate_.listVisibilityChanged(isVisible);
  }

  AvailableOfflineContentProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAvailableOfflineContentProvider_LaunchItem_Name:
      var params = reader.decodeStruct(AvailableOfflineContentProvider_LaunchItem_Params);
      this.launchItem(params.itemId, params.nameSpace);
      return true;
    case kAvailableOfflineContentProvider_LaunchDownloadsPage_Name:
      var params = reader.decodeStruct(AvailableOfflineContentProvider_LaunchDownloadsPage_Params);
      this.launchDownloadsPage(params.openPrefetchedArticlesTab);
      return true;
    case kAvailableOfflineContentProvider_ListVisibilityChanged_Name:
      var params = reader.decodeStruct(AvailableOfflineContentProvider_ListVisibilityChanged_Params);
      this.listVisibilityChanged(params.isVisible);
      return true;
    default:
      return false;
    }
  };

  AvailableOfflineContentProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAvailableOfflineContentProvider_List_Name:
      var params = reader.decodeStruct(AvailableOfflineContentProvider_List_Params);
      this.list().then(function(response) {
        var responseParams =
            new AvailableOfflineContentProvider_List_ResponseParams();
        responseParams.listVisibleByPrefs = response.listVisibleByPrefs;
        responseParams.out = response.out;
        var builder = new codec.MessageV1Builder(
            kAvailableOfflineContentProvider_List_Name,
            codec.align(AvailableOfflineContentProvider_List_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(AvailableOfflineContentProvider_List_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateAvailableOfflineContentProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAvailableOfflineContentProvider_List_Name:
        if (message.expectsResponse())
          paramsClass = AvailableOfflineContentProvider_List_Params;
      break;
      case kAvailableOfflineContentProvider_LaunchItem_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AvailableOfflineContentProvider_LaunchItem_Params;
      break;
      case kAvailableOfflineContentProvider_LaunchDownloadsPage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AvailableOfflineContentProvider_LaunchDownloadsPage_Params;
      break;
      case kAvailableOfflineContentProvider_ListVisibilityChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AvailableOfflineContentProvider_ListVisibilityChanged_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAvailableOfflineContentProviderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kAvailableOfflineContentProvider_List_Name:
        if (message.isResponse())
          paramsClass = AvailableOfflineContentProvider_List_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var AvailableOfflineContentProvider = {
    name: 'chrome.mojom.AvailableOfflineContentProvider',
    kVersion: 0,
    ptrClass: AvailableOfflineContentProviderPtr,
    proxyClass: AvailableOfflineContentProviderProxy,
    stubClass: AvailableOfflineContentProviderStub,
    validateRequest: validateAvailableOfflineContentProviderRequest,
    validateResponse: validateAvailableOfflineContentProviderResponse,
  };
  AvailableOfflineContentProviderStub.prototype.validator = validateAvailableOfflineContentProviderRequest;
  AvailableOfflineContentProviderProxy.prototype.validator = validateAvailableOfflineContentProviderResponse;
  exports.AvailableContentType = AvailableContentType;
  exports.AvailableOfflineContent = AvailableOfflineContent;
  exports.AvailableOfflineContentProvider = AvailableOfflineContentProvider;
  exports.AvailableOfflineContentProviderPtr = AvailableOfflineContentProviderPtr;
  exports.AvailableOfflineContentProviderAssociatedPtr = AvailableOfflineContentProviderAssociatedPtr;
})();