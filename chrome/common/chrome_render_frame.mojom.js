// chrome/common/chrome_render_frame.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/common/chrome_render_frame.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('chrome.mojom');
  var lens_metadata$ =
      mojo.internal.exposeNamespace('lens.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/lens/lens_metadata.mojom', '../../components/lens/lens_metadata.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../mojo/public/mojom/base/string16.mojom.js');
  }
  var window_features$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/window_features/window_features.mojom', '../../third_party/blink/public/mojom/window_features/window_features.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../url/mojom/url.mojom.js');
  }


  var DEFAULT_QUALITY = 90;
  var ImageFormat = {};
  ImageFormat.JPEG = 0;
  ImageFormat.PNG = 1;
  ImageFormat.WEBP = 2;
  ImageFormat.ORIGINAL = 3;
  ImageFormat.MIN_VALUE = 0;
  ImageFormat.MAX_VALUE = 3;

  ImageFormat.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  ImageFormat.toKnownEnumValue = function(value) {
    return value;
  };

  ImageFormat.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function ChromeRenderFrame_SetWindowFeatures_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeRenderFrame_SetWindowFeatures_Params.prototype.initDefaults_ = function() {
    this.windowFeatures = null;
  };
  ChromeRenderFrame_SetWindowFeatures_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeRenderFrame_SetWindowFeatures_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRenderFrame_SetWindowFeatures_Params.windowFeatures
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, window_features$.WindowFeatures, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeRenderFrame_SetWindowFeatures_Params.encodedSize = codec.kStructHeaderSize + 8;

  ChromeRenderFrame_SetWindowFeatures_Params.decode = function(decoder) {
    var packed;
    var val = new ChromeRenderFrame_SetWindowFeatures_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.windowFeatures =
        decoder.decodeStructPointer(window_features$.WindowFeatures);
    return val;
  };

  ChromeRenderFrame_SetWindowFeatures_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeRenderFrame_SetWindowFeatures_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(window_features$.WindowFeatures, val.windowFeatures);
  };
  function ChromeRenderFrame_RequestReloadImageForContextNode_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeRenderFrame_RequestReloadImageForContextNode_Params.prototype.initDefaults_ = function() {
  };
  ChromeRenderFrame_RequestReloadImageForContextNode_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeRenderFrame_RequestReloadImageForContextNode_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeRenderFrame_RequestReloadImageForContextNode_Params.encodedSize = codec.kStructHeaderSize + 0;

  ChromeRenderFrame_RequestReloadImageForContextNode_Params.decode = function(decoder) {
    var packed;
    var val = new ChromeRenderFrame_RequestReloadImageForContextNode_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ChromeRenderFrame_RequestReloadImageForContextNode_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeRenderFrame_RequestReloadImageForContextNode_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ChromeRenderFrame_RequestImageForContextNode_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeRenderFrame_RequestImageForContextNode_Params.prototype.initDefaults_ = function() {
    this.imageMinAreaPixels = 0;
    this.imageFormat = 0;
    this.imageMaxSizePixels = null;
    this.quality = 0;
  };
  ChromeRenderFrame_RequestImageForContextNode_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeRenderFrame_RequestImageForContextNode_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ChromeRenderFrame_RequestImageForContextNode_Params.imageMaxSizePixels
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRenderFrame_RequestImageForContextNode_Params.imageFormat
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, ImageFormat);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ChromeRenderFrame_RequestImageForContextNode_Params.encodedSize = codec.kStructHeaderSize + 24;

  ChromeRenderFrame_RequestImageForContextNode_Params.decode = function(decoder) {
    var packed;
    var val = new ChromeRenderFrame_RequestImageForContextNode_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.imageMinAreaPixels =
        decoder.decodeStruct(codec.Int32);
    val.imageFormat =
        decoder.decodeStruct(new codec.Enum(ImageFormat));
    val.imageMaxSizePixels =
        decoder.decodeStructPointer(geometry$.Size);
    val.quality =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ChromeRenderFrame_RequestImageForContextNode_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeRenderFrame_RequestImageForContextNode_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.imageMinAreaPixels);
    encoder.encodeStruct(codec.Int32, val.imageFormat);
    encoder.encodeStructPointer(geometry$.Size, val.imageMaxSizePixels);
    encoder.encodeStruct(codec.Int32, val.quality);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ChromeRenderFrame_RequestImageForContextNode_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeRenderFrame_RequestImageForContextNode_ResponseParams.prototype.initDefaults_ = function() {
    this.imageData = null;
    this.originalSize = null;
    this.downscaledSize = null;
    this.encodedExtension = null;
    this.logData = null;
  };
  ChromeRenderFrame_RequestImageForContextNode_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeRenderFrame_RequestImageForContextNode_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRenderFrame_RequestImageForContextNode_ResponseParams.imageData
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRenderFrame_RequestImageForContextNode_ResponseParams.originalSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRenderFrame_RequestImageForContextNode_ResponseParams.downscaledSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRenderFrame_RequestImageForContextNode_ResponseParams.encodedExtension
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRenderFrame_RequestImageForContextNode_ResponseParams.logData
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(lens_metadata$.LatencyLog), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeRenderFrame_RequestImageForContextNode_ResponseParams.encodedSize = codec.kStructHeaderSize + 40;

  ChromeRenderFrame_RequestImageForContextNode_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ChromeRenderFrame_RequestImageForContextNode_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.imageData =
        decoder.decodeArrayPointer(codec.Uint8);
    val.originalSize =
        decoder.decodeStructPointer(geometry$.Size);
    val.downscaledSize =
        decoder.decodeStructPointer(geometry$.Size);
    val.encodedExtension =
        decoder.decodeStruct(codec.String);
    val.logData =
        decoder.decodeArrayPointer(new codec.PointerTo(lens_metadata$.LatencyLog));
    return val;
  };

  ChromeRenderFrame_RequestImageForContextNode_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeRenderFrame_RequestImageForContextNode_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.imageData);
    encoder.encodeStructPointer(geometry$.Size, val.originalSize);
    encoder.encodeStructPointer(geometry$.Size, val.downscaledSize);
    encoder.encodeStruct(codec.String, val.encodedExtension);
    encoder.encodeArrayPointer(new codec.PointerTo(lens_metadata$.LatencyLog), val.logData);
  };
  function ChromeRenderFrame_ExecuteWebUIJavaScript_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeRenderFrame_ExecuteWebUIJavaScript_Params.prototype.initDefaults_ = function() {
    this.javascript = null;
  };
  ChromeRenderFrame_ExecuteWebUIJavaScript_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeRenderFrame_ExecuteWebUIJavaScript_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRenderFrame_ExecuteWebUIJavaScript_Params.javascript
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeRenderFrame_ExecuteWebUIJavaScript_Params.encodedSize = codec.kStructHeaderSize + 8;

  ChromeRenderFrame_ExecuteWebUIJavaScript_Params.decode = function(decoder) {
    var packed;
    var val = new ChromeRenderFrame_ExecuteWebUIJavaScript_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.javascript =
        decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  ChromeRenderFrame_ExecuteWebUIJavaScript_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeRenderFrame_ExecuteWebUIJavaScript_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.javascript);
  };
  function ChromeRenderFrame_GetMediaFeedURL_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeRenderFrame_GetMediaFeedURL_Params.prototype.initDefaults_ = function() {
  };
  ChromeRenderFrame_GetMediaFeedURL_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeRenderFrame_GetMediaFeedURL_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeRenderFrame_GetMediaFeedURL_Params.encodedSize = codec.kStructHeaderSize + 0;

  ChromeRenderFrame_GetMediaFeedURL_Params.decode = function(decoder) {
    var packed;
    var val = new ChromeRenderFrame_GetMediaFeedURL_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ChromeRenderFrame_GetMediaFeedURL_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeRenderFrame_GetMediaFeedURL_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ChromeRenderFrame_GetMediaFeedURL_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeRenderFrame_GetMediaFeedURL_ResponseParams.prototype.initDefaults_ = function() {
    this.url = null;
  };
  ChromeRenderFrame_GetMediaFeedURL_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeRenderFrame_GetMediaFeedURL_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRenderFrame_GetMediaFeedURL_ResponseParams.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeRenderFrame_GetMediaFeedURL_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ChromeRenderFrame_GetMediaFeedURL_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ChromeRenderFrame_GetMediaFeedURL_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  ChromeRenderFrame_GetMediaFeedURL_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeRenderFrame_GetMediaFeedURL_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function ChromeRenderFrame_LoadBlockedPlugins_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeRenderFrame_LoadBlockedPlugins_Params.prototype.initDefaults_ = function() {
    this.identifier = null;
  };
  ChromeRenderFrame_LoadBlockedPlugins_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeRenderFrame_LoadBlockedPlugins_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRenderFrame_LoadBlockedPlugins_Params.identifier
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeRenderFrame_LoadBlockedPlugins_Params.encodedSize = codec.kStructHeaderSize + 8;

  ChromeRenderFrame_LoadBlockedPlugins_Params.decode = function(decoder) {
    var packed;
    var val = new ChromeRenderFrame_LoadBlockedPlugins_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.identifier =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ChromeRenderFrame_LoadBlockedPlugins_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeRenderFrame_LoadBlockedPlugins_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.identifier);
  };
  var kChromeRenderFrame_SetWindowFeatures_Name = 1759686020;
  var kChromeRenderFrame_RequestReloadImageForContextNode_Name = 2040369235;
  var kChromeRenderFrame_RequestImageForContextNode_Name = 980025472;
  var kChromeRenderFrame_ExecuteWebUIJavaScript_Name = 1145497001;
  var kChromeRenderFrame_GetMediaFeedURL_Name = 1695775417;
  var kChromeRenderFrame_LoadBlockedPlugins_Name = 395749898;

  function ChromeRenderFramePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ChromeRenderFrame,
                                                   handleOrPtrInfo);
  }

  function ChromeRenderFrameAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ChromeRenderFrame, associatedInterfacePtrInfo);
  }

  ChromeRenderFrameAssociatedPtr.prototype =
      Object.create(ChromeRenderFramePtr.prototype);
  ChromeRenderFrameAssociatedPtr.prototype.constructor =
      ChromeRenderFrameAssociatedPtr;

  function ChromeRenderFrameProxy(receiver) {
    this.receiver_ = receiver;
  }
  ChromeRenderFramePtr.prototype.setWindowFeatures = function() {
    return ChromeRenderFrameProxy.prototype.setWindowFeatures
        .apply(this.ptr.getProxy(), arguments);
  };

  ChromeRenderFrameProxy.prototype.setWindowFeatures = function(windowFeatures) {
    var params_ = new ChromeRenderFrame_SetWindowFeatures_Params();
    params_.windowFeatures = windowFeatures;
    var builder = new codec.MessageV0Builder(
        kChromeRenderFrame_SetWindowFeatures_Name,
        codec.align(ChromeRenderFrame_SetWindowFeatures_Params.encodedSize));
    builder.encodeStruct(ChromeRenderFrame_SetWindowFeatures_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ChromeRenderFramePtr.prototype.requestReloadImageForContextNode = function() {
    return ChromeRenderFrameProxy.prototype.requestReloadImageForContextNode
        .apply(this.ptr.getProxy(), arguments);
  };

  ChromeRenderFrameProxy.prototype.requestReloadImageForContextNode = function() {
    var params_ = new ChromeRenderFrame_RequestReloadImageForContextNode_Params();
    var builder = new codec.MessageV0Builder(
        kChromeRenderFrame_RequestReloadImageForContextNode_Name,
        codec.align(ChromeRenderFrame_RequestReloadImageForContextNode_Params.encodedSize));
    builder.encodeStruct(ChromeRenderFrame_RequestReloadImageForContextNode_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ChromeRenderFramePtr.prototype.requestImageForContextNode = function() {
    return ChromeRenderFrameProxy.prototype.requestImageForContextNode
        .apply(this.ptr.getProxy(), arguments);
  };

  ChromeRenderFrameProxy.prototype.requestImageForContextNode = function(imageMinAreaPixels, imageMaxSizePixels, imageFormat, quality) {
    var params_ = new ChromeRenderFrame_RequestImageForContextNode_Params();
    params_.imageMinAreaPixels = imageMinAreaPixels;
    params_.imageMaxSizePixels = imageMaxSizePixels;
    params_.imageFormat = imageFormat;
    params_.quality = quality;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kChromeRenderFrame_RequestImageForContextNode_Name,
          codec.align(ChromeRenderFrame_RequestImageForContextNode_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ChromeRenderFrame_RequestImageForContextNode_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ChromeRenderFrame_RequestImageForContextNode_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ChromeRenderFramePtr.prototype.executeWebUIJavaScript = function() {
    return ChromeRenderFrameProxy.prototype.executeWebUIJavaScript
        .apply(this.ptr.getProxy(), arguments);
  };

  ChromeRenderFrameProxy.prototype.executeWebUIJavaScript = function(javascript) {
    var params_ = new ChromeRenderFrame_ExecuteWebUIJavaScript_Params();
    params_.javascript = javascript;
    var builder = new codec.MessageV0Builder(
        kChromeRenderFrame_ExecuteWebUIJavaScript_Name,
        codec.align(ChromeRenderFrame_ExecuteWebUIJavaScript_Params.encodedSize));
    builder.encodeStruct(ChromeRenderFrame_ExecuteWebUIJavaScript_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ChromeRenderFramePtr.prototype.getMediaFeedURL = function() {
    return ChromeRenderFrameProxy.prototype.getMediaFeedURL
        .apply(this.ptr.getProxy(), arguments);
  };

  ChromeRenderFrameProxy.prototype.getMediaFeedURL = function() {
    var params_ = new ChromeRenderFrame_GetMediaFeedURL_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kChromeRenderFrame_GetMediaFeedURL_Name,
          codec.align(ChromeRenderFrame_GetMediaFeedURL_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ChromeRenderFrame_GetMediaFeedURL_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ChromeRenderFrame_GetMediaFeedURL_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ChromeRenderFramePtr.prototype.loadBlockedPlugins = function() {
    return ChromeRenderFrameProxy.prototype.loadBlockedPlugins
        .apply(this.ptr.getProxy(), arguments);
  };

  ChromeRenderFrameProxy.prototype.loadBlockedPlugins = function(identifier) {
    var params_ = new ChromeRenderFrame_LoadBlockedPlugins_Params();
    params_.identifier = identifier;
    var builder = new codec.MessageV0Builder(
        kChromeRenderFrame_LoadBlockedPlugins_Name,
        codec.align(ChromeRenderFrame_LoadBlockedPlugins_Params.encodedSize));
    builder.encodeStruct(ChromeRenderFrame_LoadBlockedPlugins_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ChromeRenderFrameStub(delegate) {
    this.delegate_ = delegate;
  }
  ChromeRenderFrameStub.prototype.setWindowFeatures = function(windowFeatures) {
    return this.delegate_ && this.delegate_.setWindowFeatures && this.delegate_.setWindowFeatures(windowFeatures);
  }
  ChromeRenderFrameStub.prototype.requestReloadImageForContextNode = function() {
    return this.delegate_ && this.delegate_.requestReloadImageForContextNode && this.delegate_.requestReloadImageForContextNode();
  }
  ChromeRenderFrameStub.prototype.requestImageForContextNode = function(imageMinAreaPixels, imageMaxSizePixels, imageFormat, quality) {
    return this.delegate_ && this.delegate_.requestImageForContextNode && this.delegate_.requestImageForContextNode(imageMinAreaPixels, imageMaxSizePixels, imageFormat, quality);
  }
  ChromeRenderFrameStub.prototype.executeWebUIJavaScript = function(javascript) {
    return this.delegate_ && this.delegate_.executeWebUIJavaScript && this.delegate_.executeWebUIJavaScript(javascript);
  }
  ChromeRenderFrameStub.prototype.getMediaFeedURL = function() {
    return this.delegate_ && this.delegate_.getMediaFeedURL && this.delegate_.getMediaFeedURL();
  }
  ChromeRenderFrameStub.prototype.loadBlockedPlugins = function(identifier) {
    return this.delegate_ && this.delegate_.loadBlockedPlugins && this.delegate_.loadBlockedPlugins(identifier);
  }

  ChromeRenderFrameStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kChromeRenderFrame_SetWindowFeatures_Name:
      var params = reader.decodeStruct(ChromeRenderFrame_SetWindowFeatures_Params);
      this.setWindowFeatures(params.windowFeatures);
      return true;
    case kChromeRenderFrame_RequestReloadImageForContextNode_Name:
      var params = reader.decodeStruct(ChromeRenderFrame_RequestReloadImageForContextNode_Params);
      this.requestReloadImageForContextNode();
      return true;
    case kChromeRenderFrame_ExecuteWebUIJavaScript_Name:
      var params = reader.decodeStruct(ChromeRenderFrame_ExecuteWebUIJavaScript_Params);
      this.executeWebUIJavaScript(params.javascript);
      return true;
    case kChromeRenderFrame_LoadBlockedPlugins_Name:
      var params = reader.decodeStruct(ChromeRenderFrame_LoadBlockedPlugins_Params);
      this.loadBlockedPlugins(params.identifier);
      return true;
    default:
      return false;
    }
  };

  ChromeRenderFrameStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kChromeRenderFrame_RequestImageForContextNode_Name:
      var params = reader.decodeStruct(ChromeRenderFrame_RequestImageForContextNode_Params);
      this.requestImageForContextNode(params.imageMinAreaPixels, params.imageMaxSizePixels, params.imageFormat, params.quality).then(function(response) {
        var responseParams =
            new ChromeRenderFrame_RequestImageForContextNode_ResponseParams();
        responseParams.imageData = response.imageData;
        responseParams.originalSize = response.originalSize;
        responseParams.downscaledSize = response.downscaledSize;
        responseParams.encodedExtension = response.encodedExtension;
        responseParams.logData = response.logData;
        var builder = new codec.MessageV1Builder(
            kChromeRenderFrame_RequestImageForContextNode_Name,
            codec.align(ChromeRenderFrame_RequestImageForContextNode_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ChromeRenderFrame_RequestImageForContextNode_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kChromeRenderFrame_GetMediaFeedURL_Name:
      var params = reader.decodeStruct(ChromeRenderFrame_GetMediaFeedURL_Params);
      this.getMediaFeedURL().then(function(response) {
        var responseParams =
            new ChromeRenderFrame_GetMediaFeedURL_ResponseParams();
        responseParams.url = response.url;
        var builder = new codec.MessageV1Builder(
            kChromeRenderFrame_GetMediaFeedURL_Name,
            codec.align(ChromeRenderFrame_GetMediaFeedURL_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ChromeRenderFrame_GetMediaFeedURL_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateChromeRenderFrameRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kChromeRenderFrame_SetWindowFeatures_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChromeRenderFrame_SetWindowFeatures_Params;
      break;
      case kChromeRenderFrame_RequestReloadImageForContextNode_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChromeRenderFrame_RequestReloadImageForContextNode_Params;
      break;
      case kChromeRenderFrame_RequestImageForContextNode_Name:
        if (message.expectsResponse())
          paramsClass = ChromeRenderFrame_RequestImageForContextNode_Params;
      break;
      case kChromeRenderFrame_ExecuteWebUIJavaScript_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChromeRenderFrame_ExecuteWebUIJavaScript_Params;
      break;
      case kChromeRenderFrame_GetMediaFeedURL_Name:
        if (message.expectsResponse())
          paramsClass = ChromeRenderFrame_GetMediaFeedURL_Params;
      break;
      case kChromeRenderFrame_LoadBlockedPlugins_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChromeRenderFrame_LoadBlockedPlugins_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateChromeRenderFrameResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kChromeRenderFrame_RequestImageForContextNode_Name:
        if (message.isResponse())
          paramsClass = ChromeRenderFrame_RequestImageForContextNode_ResponseParams;
        break;
      case kChromeRenderFrame_GetMediaFeedURL_Name:
        if (message.isResponse())
          paramsClass = ChromeRenderFrame_GetMediaFeedURL_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ChromeRenderFrame = {
    name: 'chrome.mojom.ChromeRenderFrame',
    kVersion: 0,
    ptrClass: ChromeRenderFramePtr,
    proxyClass: ChromeRenderFrameProxy,
    stubClass: ChromeRenderFrameStub,
    validateRequest: validateChromeRenderFrameRequest,
    validateResponse: validateChromeRenderFrameResponse,
  };
  ChromeRenderFrameStub.prototype.validator = validateChromeRenderFrameRequest;
  ChromeRenderFrameProxy.prototype.validator = validateChromeRenderFrameResponse;
  exports.DEFAULT_QUALITY = DEFAULT_QUALITY;
  exports.ImageFormat = ImageFormat;
  exports.ChromeRenderFrame = ChromeRenderFrame;
  exports.ChromeRenderFramePtr = ChromeRenderFramePtr;
  exports.ChromeRenderFrameAssociatedPtr = ChromeRenderFrameAssociatedPtr;
})();