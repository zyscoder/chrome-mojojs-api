// chrome/common/draggable_regions.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/common/draggable_regions.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('chrome.mojom');
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }



  function DraggableRegion(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DraggableRegion.prototype.initDefaults_ = function() {
    this.bounds = null;
    this.draggable = false;
  };
  DraggableRegion.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DraggableRegion.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DraggableRegion.bounds
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Rect, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DraggableRegion.encodedSize = codec.kStructHeaderSize + 16;

  DraggableRegion.decode = function(decoder) {
    var packed;
    var val = new DraggableRegion();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bounds =
        decoder.decodeStructPointer(geometry$.Rect);
    packed = decoder.readUint8();
    val.draggable = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DraggableRegion.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DraggableRegion.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Rect, val.bounds);
    packed = 0;
    packed |= (val.draggable & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DraggableRegions_UpdateDraggableRegions_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DraggableRegions_UpdateDraggableRegions_Params.prototype.initDefaults_ = function() {
    this.draggableRegion = null;
  };
  DraggableRegions_UpdateDraggableRegions_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DraggableRegions_UpdateDraggableRegions_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DraggableRegions_UpdateDraggableRegions_Params.draggableRegion
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(DraggableRegion), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DraggableRegions_UpdateDraggableRegions_Params.encodedSize = codec.kStructHeaderSize + 8;

  DraggableRegions_UpdateDraggableRegions_Params.decode = function(decoder) {
    var packed;
    var val = new DraggableRegions_UpdateDraggableRegions_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.draggableRegion =
        decoder.decodeArrayPointer(new codec.PointerTo(DraggableRegion));
    return val;
  };

  DraggableRegions_UpdateDraggableRegions_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DraggableRegions_UpdateDraggableRegions_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(DraggableRegion), val.draggableRegion);
  };
  var kDraggableRegions_UpdateDraggableRegions_Name = 2101966144;

  function DraggableRegionsPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DraggableRegions,
                                                   handleOrPtrInfo);
  }

  function DraggableRegionsAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DraggableRegions, associatedInterfacePtrInfo);
  }

  DraggableRegionsAssociatedPtr.prototype =
      Object.create(DraggableRegionsPtr.prototype);
  DraggableRegionsAssociatedPtr.prototype.constructor =
      DraggableRegionsAssociatedPtr;

  function DraggableRegionsProxy(receiver) {
    this.receiver_ = receiver;
  }
  DraggableRegionsPtr.prototype.updateDraggableRegions = function() {
    return DraggableRegionsProxy.prototype.updateDraggableRegions
        .apply(this.ptr.getProxy(), arguments);
  };

  DraggableRegionsProxy.prototype.updateDraggableRegions = function(draggableRegion) {
    var params_ = new DraggableRegions_UpdateDraggableRegions_Params();
    params_.draggableRegion = draggableRegion;
    var builder = new codec.MessageV0Builder(
        kDraggableRegions_UpdateDraggableRegions_Name,
        codec.align(DraggableRegions_UpdateDraggableRegions_Params.encodedSize));
    builder.encodeStruct(DraggableRegions_UpdateDraggableRegions_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DraggableRegionsStub(delegate) {
    this.delegate_ = delegate;
  }
  DraggableRegionsStub.prototype.updateDraggableRegions = function(draggableRegion) {
    return this.delegate_ && this.delegate_.updateDraggableRegions && this.delegate_.updateDraggableRegions(draggableRegion);
  }

  DraggableRegionsStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDraggableRegions_UpdateDraggableRegions_Name:
      var params = reader.decodeStruct(DraggableRegions_UpdateDraggableRegions_Params);
      this.updateDraggableRegions(params.draggableRegion);
      return true;
    default:
      return false;
    }
  };

  DraggableRegionsStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDraggableRegionsRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDraggableRegions_UpdateDraggableRegions_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DraggableRegions_UpdateDraggableRegions_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDraggableRegionsResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DraggableRegions = {
    name: 'chrome.mojom.DraggableRegions',
    kVersion: 0,
    ptrClass: DraggableRegionsPtr,
    proxyClass: DraggableRegionsProxy,
    stubClass: DraggableRegionsStub,
    validateRequest: validateDraggableRegionsRequest,
    validateResponse: null,
  };
  DraggableRegionsStub.prototype.validator = validateDraggableRegionsRequest;
  DraggableRegionsProxy.prototype.validator = null;
  exports.DraggableRegion = DraggableRegion;
  exports.DraggableRegions = DraggableRegions;
  exports.DraggableRegionsPtr = DraggableRegionsPtr;
  exports.DraggableRegionsAssociatedPtr = DraggableRegionsAssociatedPtr;
})();