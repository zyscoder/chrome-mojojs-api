// chrome/common/trusted_vault_encryption_keys_extension.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/common/trusted_vault_encryption_keys_extension.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('chrome.mojom');



  function TrustedVaultKey(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TrustedVaultKey.prototype.initDefaults_ = function() {
    this.version = 0;
    this.bytes = null;
  };
  TrustedVaultKey.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TrustedVaultKey.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate TrustedVaultKey.bytes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TrustedVaultKey.encodedSize = codec.kStructHeaderSize + 16;

  TrustedVaultKey.decode = function(decoder) {
    var packed;
    var val = new TrustedVaultKey();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.version =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.bytes =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  TrustedVaultKey.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TrustedVaultKey.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.version);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.Uint8, val.bytes);
  };
  function TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params.prototype.initDefaults_ = function() {
    this.gaiaId = null;
    this.encryptionKeys = null;
  };
  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params.gaiaId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params.encryptionKeys
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, codec.String, new codec.ArrayOf(new codec.PointerTo(TrustedVaultKey)), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params.encodedSize = codec.kStructHeaderSize + 16;

  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params.decode = function(decoder) {
    var packed;
    var val = new TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.gaiaId =
        decoder.decodeStruct(codec.String);
    val.encryptionKeys =
        decoder.decodeMapPointer(codec.String, new codec.ArrayOf(new codec.PointerTo(TrustedVaultKey)));
    return val;
  };

  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.gaiaId);
    encoder.encodeMapPointer(codec.String, new codec.ArrayOf(new codec.PointerTo(TrustedVaultKey)), val.encryptionKeys);
  };
  function TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams.prototype.initDefaults_ = function() {
  };
  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params.prototype.initDefaults_ = function() {
    this.gaiaId = null;
    this.publicKey = null;
    this.methodTypeHint = 0;
  };
  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params.gaiaId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params.publicKey
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params.encodedSize = codec.kStructHeaderSize + 24;

  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params.decode = function(decoder) {
    var packed;
    var val = new TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.gaiaId =
        decoder.decodeStruct(codec.String);
    val.publicKey =
        decoder.decodeArrayPointer(codec.Uint8);
    val.methodTypeHint =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.gaiaId);
    encoder.encodeArrayPointer(codec.Uint8, val.publicKey);
    encoder.encodeStruct(codec.Int32, val.methodTypeHint);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams.prototype.initDefaults_ = function() {
  };
  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  var kTrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Name = 200531449;
  var kTrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Name = 612230426;

  function TrustedVaultEncryptionKeysExtensionPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TrustedVaultEncryptionKeysExtension,
                                                   handleOrPtrInfo);
  }

  function TrustedVaultEncryptionKeysExtensionAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TrustedVaultEncryptionKeysExtension, associatedInterfacePtrInfo);
  }

  TrustedVaultEncryptionKeysExtensionAssociatedPtr.prototype =
      Object.create(TrustedVaultEncryptionKeysExtensionPtr.prototype);
  TrustedVaultEncryptionKeysExtensionAssociatedPtr.prototype.constructor =
      TrustedVaultEncryptionKeysExtensionAssociatedPtr;

  function TrustedVaultEncryptionKeysExtensionProxy(receiver) {
    this.receiver_ = receiver;
  }
  TrustedVaultEncryptionKeysExtensionPtr.prototype.setEncryptionKeys = function() {
    return TrustedVaultEncryptionKeysExtensionProxy.prototype.setEncryptionKeys
        .apply(this.ptr.getProxy(), arguments);
  };

  TrustedVaultEncryptionKeysExtensionProxy.prototype.setEncryptionKeys = function(gaiaId, encryptionKeys) {
    var params_ = new TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params();
    params_.gaiaId = gaiaId;
    params_.encryptionKeys = encryptionKeys;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Name,
          codec.align(TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TrustedVaultEncryptionKeysExtensionPtr.prototype.addTrustedRecoveryMethod = function() {
    return TrustedVaultEncryptionKeysExtensionProxy.prototype.addTrustedRecoveryMethod
        .apply(this.ptr.getProxy(), arguments);
  };

  TrustedVaultEncryptionKeysExtensionProxy.prototype.addTrustedRecoveryMethod = function(gaiaId, publicKey, methodTypeHint) {
    var params_ = new TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params();
    params_.gaiaId = gaiaId;
    params_.publicKey = publicKey;
    params_.methodTypeHint = methodTypeHint;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Name,
          codec.align(TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TrustedVaultEncryptionKeysExtensionStub(delegate) {
    this.delegate_ = delegate;
  }
  TrustedVaultEncryptionKeysExtensionStub.prototype.setEncryptionKeys = function(gaiaId, encryptionKeys) {
    return this.delegate_ && this.delegate_.setEncryptionKeys && this.delegate_.setEncryptionKeys(gaiaId, encryptionKeys);
  }
  TrustedVaultEncryptionKeysExtensionStub.prototype.addTrustedRecoveryMethod = function(gaiaId, publicKey, methodTypeHint) {
    return this.delegate_ && this.delegate_.addTrustedRecoveryMethod && this.delegate_.addTrustedRecoveryMethod(gaiaId, publicKey, methodTypeHint);
  }

  TrustedVaultEncryptionKeysExtensionStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  TrustedVaultEncryptionKeysExtensionStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Name:
      var params = reader.decodeStruct(TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params);
      this.setEncryptionKeys(params.gaiaId, params.encryptionKeys).then(function(response) {
        var responseParams =
            new TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Name,
            codec.align(TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Name:
      var params = reader.decodeStruct(TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params);
      this.addTrustedRecoveryMethod(params.gaiaId, params.publicKey, params.methodTypeHint).then(function(response) {
        var responseParams =
            new TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Name,
            codec.align(TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTrustedVaultEncryptionKeysExtensionRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Name:
        if (message.expectsResponse())
          paramsClass = TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Params;
      break;
      case kTrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Name:
        if (message.expectsResponse())
          paramsClass = TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTrustedVaultEncryptionKeysExtensionResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTrustedVaultEncryptionKeysExtension_SetEncryptionKeys_Name:
        if (message.isResponse())
          paramsClass = TrustedVaultEncryptionKeysExtension_SetEncryptionKeys_ResponseParams;
        break;
      case kTrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_Name:
        if (message.isResponse())
          paramsClass = TrustedVaultEncryptionKeysExtension_AddTrustedRecoveryMethod_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TrustedVaultEncryptionKeysExtension = {
    name: 'chrome.mojom.TrustedVaultEncryptionKeysExtension',
    kVersion: 0,
    ptrClass: TrustedVaultEncryptionKeysExtensionPtr,
    proxyClass: TrustedVaultEncryptionKeysExtensionProxy,
    stubClass: TrustedVaultEncryptionKeysExtensionStub,
    validateRequest: validateTrustedVaultEncryptionKeysExtensionRequest,
    validateResponse: validateTrustedVaultEncryptionKeysExtensionResponse,
  };
  TrustedVaultEncryptionKeysExtensionStub.prototype.validator = validateTrustedVaultEncryptionKeysExtensionRequest;
  TrustedVaultEncryptionKeysExtensionProxy.prototype.validator = validateTrustedVaultEncryptionKeysExtensionResponse;
  exports.TrustedVaultKey = TrustedVaultKey;
  exports.TrustedVaultEncryptionKeysExtension = TrustedVaultEncryptionKeysExtension;
  exports.TrustedVaultEncryptionKeysExtensionPtr = TrustedVaultEncryptionKeysExtensionPtr;
  exports.TrustedVaultEncryptionKeysExtensionAssociatedPtr = TrustedVaultEncryptionKeysExtensionAssociatedPtr;
})();