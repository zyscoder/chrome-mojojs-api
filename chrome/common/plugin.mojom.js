// chrome/common/plugin.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/common/plugin.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('chrome.mojom');
  var webplugininfo$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/public/common/webplugininfo.mojom', '../../content/public/common/webplugininfo.mojom.js');
  }
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../mojo/public/mojom/base/string16.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../url/mojom/origin.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../url/mojom/url.mojom.js');
  }


  var PluginStatus = {};
  PluginStatus.kAllowed = 0;
  PluginStatus.kBlocked = 1;
  PluginStatus.kBlockedByPolicy = 2;
  PluginStatus.kDisabled = 3;
  PluginStatus.kNotFound = 4;
  PluginStatus.kPlayImportantContent = 5;
  PluginStatus.kUnauthorized = 6;
  PluginStatus.MIN_VALUE = 0;
  PluginStatus.MAX_VALUE = 6;

  PluginStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  PluginStatus.toKnownEnumValue = function(value) {
    return value;
  };

  PluginStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function PluginInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PluginInfo.prototype.initDefaults_ = function() {
    this.status = 0;
    this.plugin = null;
    this.actualMimeType = null;
    this.groupIdentifier = null;
    this.groupName = null;
  };
  PluginInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PluginInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginInfo.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PluginStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginInfo.plugin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, webplugininfo$.WebPluginInfo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginInfo.actualMimeType
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginInfo.groupIdentifier
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginInfo.groupName
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PluginInfo.encodedSize = codec.kStructHeaderSize + 40;

  PluginInfo.decode = function(decoder) {
    var packed;
    var val = new PluginInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PluginStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.plugin =
        decoder.decodeStructPointer(webplugininfo$.WebPluginInfo);
    val.actualMimeType =
        decoder.decodeStruct(codec.String);
    val.groupIdentifier =
        decoder.decodeStruct(codec.String);
    val.groupName =
        decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  PluginInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PluginInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(webplugininfo$.WebPluginInfo, val.plugin);
    encoder.encodeStruct(codec.String, val.actualMimeType);
    encoder.encodeStruct(codec.String, val.groupIdentifier);
    encoder.encodeStructPointer(string16$.String16, val.groupName);
  };
  function PluginParam(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PluginParam.prototype.initDefaults_ = function() {
    this.name = null;
    this.value = null;
  };
  PluginParam.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PluginParam.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginParam.name
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginParam.value
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PluginParam.encodedSize = codec.kStructHeaderSize + 16;

  PluginParam.decode = function(decoder) {
    var packed;
    var val = new PluginParam();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStructPointer(string16$.String16);
    val.value =
        decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  PluginParam.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PluginParam.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.name);
    encoder.encodeStructPointer(string16$.String16, val.value);
  };
  function PluginHost_CouldNotLoadPlugin_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PluginHost_CouldNotLoadPlugin_Params.prototype.initDefaults_ = function() {
    this.filePath = null;
  };
  PluginHost_CouldNotLoadPlugin_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PluginHost_CouldNotLoadPlugin_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginHost_CouldNotLoadPlugin_Params.filePath
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PluginHost_CouldNotLoadPlugin_Params.encodedSize = codec.kStructHeaderSize + 8;

  PluginHost_CouldNotLoadPlugin_Params.decode = function(decoder) {
    var packed;
    var val = new PluginHost_CouldNotLoadPlugin_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.filePath =
        decoder.decodeStructPointer(file_path$.FilePath);
    return val;
  };

  PluginHost_CouldNotLoadPlugin_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PluginHost_CouldNotLoadPlugin_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file_path$.FilePath, val.filePath);
  };
  function PluginHost_OpenPDF_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PluginHost_OpenPDF_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  PluginHost_OpenPDF_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PluginHost_OpenPDF_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginHost_OpenPDF_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PluginHost_OpenPDF_Params.encodedSize = codec.kStructHeaderSize + 8;

  PluginHost_OpenPDF_Params.decode = function(decoder) {
    var packed;
    var val = new PluginHost_OpenPDF_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PluginHost_OpenPDF_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PluginHost_OpenPDF_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function PluginAuthHost_BlockedUnauthorizedPlugin_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PluginAuthHost_BlockedUnauthorizedPlugin_Params.prototype.initDefaults_ = function() {
    this.name = null;
    this.groupId = null;
  };
  PluginAuthHost_BlockedUnauthorizedPlugin_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PluginAuthHost_BlockedUnauthorizedPlugin_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginAuthHost_BlockedUnauthorizedPlugin_Params.name
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginAuthHost_BlockedUnauthorizedPlugin_Params.groupId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PluginAuthHost_BlockedUnauthorizedPlugin_Params.encodedSize = codec.kStructHeaderSize + 16;

  PluginAuthHost_BlockedUnauthorizedPlugin_Params.decode = function(decoder) {
    var packed;
    var val = new PluginAuthHost_BlockedUnauthorizedPlugin_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStructPointer(string16$.String16);
    val.groupId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PluginAuthHost_BlockedUnauthorizedPlugin_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PluginAuthHost_BlockedUnauthorizedPlugin_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.name);
    encoder.encodeStruct(codec.String, val.groupId);
  };
  function PluginInfoHost_GetPluginInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PluginInfoHost_GetPluginInfo_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.origin = null;
    this.mimeType = null;
  };
  PluginInfoHost_GetPluginInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PluginInfoHost_GetPluginInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginInfoHost_GetPluginInfo_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginInfoHost_GetPluginInfo_Params.origin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginInfoHost_GetPluginInfo_Params.mimeType
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PluginInfoHost_GetPluginInfo_Params.encodedSize = codec.kStructHeaderSize + 24;

  PluginInfoHost_GetPluginInfo_Params.decode = function(decoder) {
    var packed;
    var val = new PluginInfoHost_GetPluginInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.origin =
        decoder.decodeStructPointer(origin$.Origin);
    val.mimeType =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PluginInfoHost_GetPluginInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PluginInfoHost_GetPluginInfo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(origin$.Origin, val.origin);
    encoder.encodeStruct(codec.String, val.mimeType);
  };
  function PluginInfoHost_GetPluginInfo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PluginInfoHost_GetPluginInfo_ResponseParams.prototype.initDefaults_ = function() {
    this.pluginInfo = null;
  };
  PluginInfoHost_GetPluginInfo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PluginInfoHost_GetPluginInfo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PluginInfoHost_GetPluginInfo_ResponseParams.pluginInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, PluginInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PluginInfoHost_GetPluginInfo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PluginInfoHost_GetPluginInfo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PluginInfoHost_GetPluginInfo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pluginInfo =
        decoder.decodeStructPointer(PluginInfo);
    return val;
  };

  PluginInfoHost_GetPluginInfo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PluginInfoHost_GetPluginInfo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(PluginInfo, val.pluginInfo);
  };
  var kPluginHost_CouldNotLoadPlugin_Name = 1673727053;
  var kPluginHost_OpenPDF_Name = 326425613;

  function PluginHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PluginHost,
                                                   handleOrPtrInfo);
  }

  function PluginHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PluginHost, associatedInterfacePtrInfo);
  }

  PluginHostAssociatedPtr.prototype =
      Object.create(PluginHostPtr.prototype);
  PluginHostAssociatedPtr.prototype.constructor =
      PluginHostAssociatedPtr;

  function PluginHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  PluginHostPtr.prototype.couldNotLoadPlugin = function() {
    return PluginHostProxy.prototype.couldNotLoadPlugin
        .apply(this.ptr.getProxy(), arguments);
  };

  PluginHostProxy.prototype.couldNotLoadPlugin = function(filePath) {
    var params_ = new PluginHost_CouldNotLoadPlugin_Params();
    params_.filePath = filePath;
    var builder = new codec.MessageV0Builder(
        kPluginHost_CouldNotLoadPlugin_Name,
        codec.align(PluginHost_CouldNotLoadPlugin_Params.encodedSize));
    builder.encodeStruct(PluginHost_CouldNotLoadPlugin_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PluginHostPtr.prototype.openPDF = function() {
    return PluginHostProxy.prototype.openPDF
        .apply(this.ptr.getProxy(), arguments);
  };

  PluginHostProxy.prototype.openPDF = function(url) {
    var params_ = new PluginHost_OpenPDF_Params();
    params_.url = url;
    var builder = new codec.MessageV0Builder(
        kPluginHost_OpenPDF_Name,
        codec.align(PluginHost_OpenPDF_Params.encodedSize));
    builder.encodeStruct(PluginHost_OpenPDF_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PluginHostStub(delegate) {
    this.delegate_ = delegate;
  }
  PluginHostStub.prototype.couldNotLoadPlugin = function(filePath) {
    return this.delegate_ && this.delegate_.couldNotLoadPlugin && this.delegate_.couldNotLoadPlugin(filePath);
  }
  PluginHostStub.prototype.openPDF = function(url) {
    return this.delegate_ && this.delegate_.openPDF && this.delegate_.openPDF(url);
  }

  PluginHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPluginHost_CouldNotLoadPlugin_Name:
      var params = reader.decodeStruct(PluginHost_CouldNotLoadPlugin_Params);
      this.couldNotLoadPlugin(params.filePath);
      return true;
    case kPluginHost_OpenPDF_Name:
      var params = reader.decodeStruct(PluginHost_OpenPDF_Params);
      this.openPDF(params.url);
      return true;
    default:
      return false;
    }
  };

  PluginHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePluginHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPluginHost_CouldNotLoadPlugin_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PluginHost_CouldNotLoadPlugin_Params;
      break;
      case kPluginHost_OpenPDF_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PluginHost_OpenPDF_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePluginHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PluginHost = {
    name: 'chrome.mojom.PluginHost',
    kVersion: 0,
    ptrClass: PluginHostPtr,
    proxyClass: PluginHostProxy,
    stubClass: PluginHostStub,
    validateRequest: validatePluginHostRequest,
    validateResponse: null,
  };
  PluginHostStub.prototype.validator = validatePluginHostRequest;
  PluginHostProxy.prototype.validator = null;
  var kPluginAuthHost_BlockedUnauthorizedPlugin_Name = 1794392312;

  function PluginAuthHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PluginAuthHost,
                                                   handleOrPtrInfo);
  }

  function PluginAuthHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PluginAuthHost, associatedInterfacePtrInfo);
  }

  PluginAuthHostAssociatedPtr.prototype =
      Object.create(PluginAuthHostPtr.prototype);
  PluginAuthHostAssociatedPtr.prototype.constructor =
      PluginAuthHostAssociatedPtr;

  function PluginAuthHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  PluginAuthHostPtr.prototype.blockedUnauthorizedPlugin = function() {
    return PluginAuthHostProxy.prototype.blockedUnauthorizedPlugin
        .apply(this.ptr.getProxy(), arguments);
  };

  PluginAuthHostProxy.prototype.blockedUnauthorizedPlugin = function(name, groupId) {
    var params_ = new PluginAuthHost_BlockedUnauthorizedPlugin_Params();
    params_.name = name;
    params_.groupId = groupId;
    var builder = new codec.MessageV0Builder(
        kPluginAuthHost_BlockedUnauthorizedPlugin_Name,
        codec.align(PluginAuthHost_BlockedUnauthorizedPlugin_Params.encodedSize));
    builder.encodeStruct(PluginAuthHost_BlockedUnauthorizedPlugin_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PluginAuthHostStub(delegate) {
    this.delegate_ = delegate;
  }
  PluginAuthHostStub.prototype.blockedUnauthorizedPlugin = function(name, groupId) {
    return this.delegate_ && this.delegate_.blockedUnauthorizedPlugin && this.delegate_.blockedUnauthorizedPlugin(name, groupId);
  }

  PluginAuthHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPluginAuthHost_BlockedUnauthorizedPlugin_Name:
      var params = reader.decodeStruct(PluginAuthHost_BlockedUnauthorizedPlugin_Params);
      this.blockedUnauthorizedPlugin(params.name, params.groupId);
      return true;
    default:
      return false;
    }
  };

  PluginAuthHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePluginAuthHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPluginAuthHost_BlockedUnauthorizedPlugin_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PluginAuthHost_BlockedUnauthorizedPlugin_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePluginAuthHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PluginAuthHost = {
    name: 'chrome.mojom.PluginAuthHost',
    kVersion: 0,
    ptrClass: PluginAuthHostPtr,
    proxyClass: PluginAuthHostProxy,
    stubClass: PluginAuthHostStub,
    validateRequest: validatePluginAuthHostRequest,
    validateResponse: null,
  };
  PluginAuthHostStub.prototype.validator = validatePluginAuthHostRequest;
  PluginAuthHostProxy.prototype.validator = null;
  var kPluginInfoHost_GetPluginInfo_Name = 1345223621;

  function PluginInfoHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PluginInfoHost,
                                                   handleOrPtrInfo);
  }

  function PluginInfoHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PluginInfoHost, associatedInterfacePtrInfo);
  }

  PluginInfoHostAssociatedPtr.prototype =
      Object.create(PluginInfoHostPtr.prototype);
  PluginInfoHostAssociatedPtr.prototype.constructor =
      PluginInfoHostAssociatedPtr;

  function PluginInfoHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  PluginInfoHostPtr.prototype.getPluginInfo = function() {
    return PluginInfoHostProxy.prototype.getPluginInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  PluginInfoHostProxy.prototype.getPluginInfo = function(url, origin, mimeType) {
    var params_ = new PluginInfoHost_GetPluginInfo_Params();
    params_.url = url;
    params_.origin = origin;
    params_.mimeType = mimeType;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPluginInfoHost_GetPluginInfo_Name,
          codec.align(PluginInfoHost_GetPluginInfo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PluginInfoHost_GetPluginInfo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PluginInfoHost_GetPluginInfo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PluginInfoHostStub(delegate) {
    this.delegate_ = delegate;
  }
  PluginInfoHostStub.prototype.getPluginInfo = function(url, origin, mimeType) {
    return this.delegate_ && this.delegate_.getPluginInfo && this.delegate_.getPluginInfo(url, origin, mimeType);
  }

  PluginInfoHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  PluginInfoHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPluginInfoHost_GetPluginInfo_Name:
      var params = reader.decodeStruct(PluginInfoHost_GetPluginInfo_Params);
      this.getPluginInfo(params.url, params.origin, params.mimeType).then(function(response) {
        var responseParams =
            new PluginInfoHost_GetPluginInfo_ResponseParams();
        responseParams.pluginInfo = response.pluginInfo;
        var builder = new codec.MessageV1Builder(
            kPluginInfoHost_GetPluginInfo_Name,
            codec.align(PluginInfoHost_GetPluginInfo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PluginInfoHost_GetPluginInfo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePluginInfoHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPluginInfoHost_GetPluginInfo_Name:
        if (message.expectsResponse())
          paramsClass = PluginInfoHost_GetPluginInfo_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePluginInfoHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPluginInfoHost_GetPluginInfo_Name:
        if (message.isResponse())
          paramsClass = PluginInfoHost_GetPluginInfo_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PluginInfoHost = {
    name: 'chrome.mojom.PluginInfoHost',
    kVersion: 0,
    ptrClass: PluginInfoHostPtr,
    proxyClass: PluginInfoHostProxy,
    stubClass: PluginInfoHostStub,
    validateRequest: validatePluginInfoHostRequest,
    validateResponse: validatePluginInfoHostResponse,
  };
  PluginInfoHostStub.prototype.validator = validatePluginInfoHostRequest;
  PluginInfoHostProxy.prototype.validator = validatePluginInfoHostResponse;
  exports.PluginStatus = PluginStatus;
  exports.PluginInfo = PluginInfo;
  exports.PluginParam = PluginParam;
  exports.PluginHost = PluginHost;
  exports.PluginHostPtr = PluginHostPtr;
  exports.PluginHostAssociatedPtr = PluginHostAssociatedPtr;
  exports.PluginAuthHost = PluginAuthHost;
  exports.PluginAuthHostPtr = PluginAuthHostPtr;
  exports.PluginAuthHostAssociatedPtr = PluginAuthHostAssociatedPtr;
  exports.PluginInfoHost = PluginInfoHost;
  exports.PluginInfoHostPtr = PluginInfoHostPtr;
  exports.PluginInfoHostAssociatedPtr = PluginInfoHostAssociatedPtr;
})();