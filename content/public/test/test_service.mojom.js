// content/public/test/test_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/public/test/test_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');
  var file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file.mojom', '../../../mojo/public/mojom/base/file.mojom.js');
  }
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }


  var TEST_PIPE_KEY = "content_test_pipe";

  function TestService_DoSomething_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_DoSomething_Params.prototype.initDefaults_ = function() {
  };
  TestService_DoSomething_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_DoSomething_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_DoSomething_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestService_DoSomething_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_DoSomething_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService_DoSomething_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_DoSomething_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService_DoSomething_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_DoSomething_ResponseParams.prototype.initDefaults_ = function() {
  };
  TestService_DoSomething_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_DoSomething_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_DoSomething_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TestService_DoSomething_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_DoSomething_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService_DoSomething_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_DoSomething_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService_DoTerminateProcess_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_DoTerminateProcess_Params.prototype.initDefaults_ = function() {
  };
  TestService_DoTerminateProcess_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_DoTerminateProcess_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_DoTerminateProcess_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestService_DoTerminateProcess_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_DoTerminateProcess_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService_DoTerminateProcess_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_DoTerminateProcess_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService_DoTerminateProcess_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_DoTerminateProcess_ResponseParams.prototype.initDefaults_ = function() {
  };
  TestService_DoTerminateProcess_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_DoTerminateProcess_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_DoTerminateProcess_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TestService_DoTerminateProcess_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_DoTerminateProcess_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService_DoTerminateProcess_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_DoTerminateProcess_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService_DoCrashImmediately_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_DoCrashImmediately_Params.prototype.initDefaults_ = function() {
  };
  TestService_DoCrashImmediately_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_DoCrashImmediately_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_DoCrashImmediately_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestService_DoCrashImmediately_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_DoCrashImmediately_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService_DoCrashImmediately_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_DoCrashImmediately_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService_DoCrashImmediately_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_DoCrashImmediately_ResponseParams.prototype.initDefaults_ = function() {
  };
  TestService_DoCrashImmediately_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_DoCrashImmediately_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_DoCrashImmediately_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TestService_DoCrashImmediately_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_DoCrashImmediately_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService_DoCrashImmediately_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_DoCrashImmediately_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService_CreateFolder_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_CreateFolder_Params.prototype.initDefaults_ = function() {
  };
  TestService_CreateFolder_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_CreateFolder_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_CreateFolder_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestService_CreateFolder_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_CreateFolder_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService_CreateFolder_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_CreateFolder_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService_CreateFolder_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_CreateFolder_ResponseParams.prototype.initDefaults_ = function() {
    this.succeeded = false;
  };
  TestService_CreateFolder_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_CreateFolder_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TestService_CreateFolder_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestService_CreateFolder_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_CreateFolder_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.succeeded = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestService_CreateFolder_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_CreateFolder_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.succeeded & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestService_GetRequestorName_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_GetRequestorName_Params.prototype.initDefaults_ = function() {
  };
  TestService_GetRequestorName_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_GetRequestorName_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_GetRequestorName_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestService_GetRequestorName_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_GetRequestorName_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService_GetRequestorName_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_GetRequestorName_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService_GetRequestorName_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_GetRequestorName_ResponseParams.prototype.initDefaults_ = function() {
    this.name = null;
  };
  TestService_GetRequestorName_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_GetRequestorName_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestService_GetRequestorName_ResponseParams.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_GetRequestorName_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestService_GetRequestorName_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_GetRequestorName_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TestService_GetRequestorName_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_GetRequestorName_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
  };
  function TestService_CreateReadOnlySharedMemoryRegion_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_CreateReadOnlySharedMemoryRegion_Params.prototype.initDefaults_ = function() {
    this.message = null;
  };
  TestService_CreateReadOnlySharedMemoryRegion_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_CreateReadOnlySharedMemoryRegion_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestService_CreateReadOnlySharedMemoryRegion_Params.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_CreateReadOnlySharedMemoryRegion_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestService_CreateReadOnlySharedMemoryRegion_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_CreateReadOnlySharedMemoryRegion_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TestService_CreateReadOnlySharedMemoryRegion_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_CreateReadOnlySharedMemoryRegion_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.message);
  };
  function TestService_CreateReadOnlySharedMemoryRegion_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_CreateReadOnlySharedMemoryRegion_ResponseParams.prototype.initDefaults_ = function() {
    this.region = null;
  };
  TestService_CreateReadOnlySharedMemoryRegion_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_CreateReadOnlySharedMemoryRegion_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestService_CreateReadOnlySharedMemoryRegion_ResponseParams.region
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, shared_memory$.ReadOnlySharedMemoryRegion, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_CreateReadOnlySharedMemoryRegion_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestService_CreateReadOnlySharedMemoryRegion_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_CreateReadOnlySharedMemoryRegion_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.region =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    return val;
  };

  TestService_CreateReadOnlySharedMemoryRegion_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_CreateReadOnlySharedMemoryRegion_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.region);
  };
  function TestService_CreateWritableSharedMemoryRegion_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_CreateWritableSharedMemoryRegion_Params.prototype.initDefaults_ = function() {
    this.message = null;
  };
  TestService_CreateWritableSharedMemoryRegion_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_CreateWritableSharedMemoryRegion_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestService_CreateWritableSharedMemoryRegion_Params.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_CreateWritableSharedMemoryRegion_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestService_CreateWritableSharedMemoryRegion_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_CreateWritableSharedMemoryRegion_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TestService_CreateWritableSharedMemoryRegion_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_CreateWritableSharedMemoryRegion_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.message);
  };
  function TestService_CreateWritableSharedMemoryRegion_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_CreateWritableSharedMemoryRegion_ResponseParams.prototype.initDefaults_ = function() {
    this.region = null;
  };
  TestService_CreateWritableSharedMemoryRegion_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_CreateWritableSharedMemoryRegion_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestService_CreateWritableSharedMemoryRegion_ResponseParams.region
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, shared_memory$.WritableSharedMemoryRegion, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_CreateWritableSharedMemoryRegion_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestService_CreateWritableSharedMemoryRegion_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_CreateWritableSharedMemoryRegion_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.region =
        decoder.decodeStructPointer(shared_memory$.WritableSharedMemoryRegion);
    return val;
  };

  TestService_CreateWritableSharedMemoryRegion_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_CreateWritableSharedMemoryRegion_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(shared_memory$.WritableSharedMemoryRegion, val.region);
  };
  function TestService_CreateUnsafeSharedMemoryRegion_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_CreateUnsafeSharedMemoryRegion_Params.prototype.initDefaults_ = function() {
    this.message = null;
  };
  TestService_CreateUnsafeSharedMemoryRegion_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_CreateUnsafeSharedMemoryRegion_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestService_CreateUnsafeSharedMemoryRegion_Params.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_CreateUnsafeSharedMemoryRegion_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestService_CreateUnsafeSharedMemoryRegion_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_CreateUnsafeSharedMemoryRegion_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TestService_CreateUnsafeSharedMemoryRegion_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_CreateUnsafeSharedMemoryRegion_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.message);
  };
  function TestService_CreateUnsafeSharedMemoryRegion_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_CreateUnsafeSharedMemoryRegion_ResponseParams.prototype.initDefaults_ = function() {
    this.region = null;
  };
  TestService_CreateUnsafeSharedMemoryRegion_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_CreateUnsafeSharedMemoryRegion_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestService_CreateUnsafeSharedMemoryRegion_ResponseParams.region
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, shared_memory$.UnsafeSharedMemoryRegion, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_CreateUnsafeSharedMemoryRegion_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestService_CreateUnsafeSharedMemoryRegion_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_CreateUnsafeSharedMemoryRegion_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.region =
        decoder.decodeStructPointer(shared_memory$.UnsafeSharedMemoryRegion);
    return val;
  };

  TestService_CreateUnsafeSharedMemoryRegion_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_CreateUnsafeSharedMemoryRegion_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(shared_memory$.UnsafeSharedMemoryRegion, val.region);
  };
  function TestService_CloneSharedMemoryContents_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_CloneSharedMemoryContents_Params.prototype.initDefaults_ = function() {
    this.region = null;
  };
  TestService_CloneSharedMemoryContents_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_CloneSharedMemoryContents_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestService_CloneSharedMemoryContents_Params.region
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, shared_memory$.ReadOnlySharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_CloneSharedMemoryContents_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestService_CloneSharedMemoryContents_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_CloneSharedMemoryContents_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.region =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    return val;
  };

  TestService_CloneSharedMemoryContents_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_CloneSharedMemoryContents_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.region);
  };
  function TestService_CloneSharedMemoryContents_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_CloneSharedMemoryContents_ResponseParams.prototype.initDefaults_ = function() {
    this.newRegion = null;
  };
  TestService_CloneSharedMemoryContents_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_CloneSharedMemoryContents_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestService_CloneSharedMemoryContents_ResponseParams.newRegion
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, shared_memory$.UnsafeSharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_CloneSharedMemoryContents_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestService_CloneSharedMemoryContents_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_CloneSharedMemoryContents_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.newRegion =
        decoder.decodeStructPointer(shared_memory$.UnsafeSharedMemoryRegion);
    return val;
  };

  TestService_CloneSharedMemoryContents_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_CloneSharedMemoryContents_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(shared_memory$.UnsafeSharedMemoryRegion, val.newRegion);
  };
  function TestService_IsProcessSandboxed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_IsProcessSandboxed_Params.prototype.initDefaults_ = function() {
  };
  TestService_IsProcessSandboxed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_IsProcessSandboxed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_IsProcessSandboxed_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestService_IsProcessSandboxed_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_IsProcessSandboxed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService_IsProcessSandboxed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_IsProcessSandboxed_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService_IsProcessSandboxed_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_IsProcessSandboxed_ResponseParams.prototype.initDefaults_ = function() {
    this.isSandboxed = false;
  };
  TestService_IsProcessSandboxed_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_IsProcessSandboxed_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TestService_IsProcessSandboxed_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestService_IsProcessSandboxed_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_IsProcessSandboxed_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isSandboxed = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestService_IsProcessSandboxed_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_IsProcessSandboxed_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isSandboxed & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestService_PseudonymizeString_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_PseudonymizeString_Params.prototype.initDefaults_ = function() {
    this.value = null;
  };
  TestService_PseudonymizeString_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_PseudonymizeString_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestService_PseudonymizeString_Params.value
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_PseudonymizeString_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestService_PseudonymizeString_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_PseudonymizeString_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TestService_PseudonymizeString_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_PseudonymizeString_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.value);
  };
  function TestService_PseudonymizeString_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_PseudonymizeString_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  TestService_PseudonymizeString_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_PseudonymizeString_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TestService_PseudonymizeString_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestService_PseudonymizeString_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_PseudonymizeString_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestService_PseudonymizeString_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_PseudonymizeString_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestService_PassWriteableFile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_PassWriteableFile_Params.prototype.initDefaults_ = function() {
    this.file = null;
  };
  TestService_PassWriteableFile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_PassWriteableFile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestService_PassWriteableFile_Params.file
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file$.File, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_PassWriteableFile_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestService_PassWriteableFile_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_PassWriteableFile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.file =
        decoder.decodeStructPointer(file$.File);
    return val;
  };

  TestService_PassWriteableFile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_PassWriteableFile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file$.File, val.file);
  };
  function TestService_PassWriteableFile_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_PassWriteableFile_ResponseParams.prototype.initDefaults_ = function() {
  };
  TestService_PassWriteableFile_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_PassWriteableFile_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_PassWriteableFile_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TestService_PassWriteableFile_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestService_PassWriteableFile_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService_PassWriteableFile_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_PassWriteableFile_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TestService_WriteToPreloadedPipe_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestService_WriteToPreloadedPipe_Params.prototype.initDefaults_ = function() {
  };
  TestService_WriteToPreloadedPipe_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestService_WriteToPreloadedPipe_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestService_WriteToPreloadedPipe_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestService_WriteToPreloadedPipe_Params.decode = function(decoder) {
    var packed;
    var val = new TestService_WriteToPreloadedPipe_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestService_WriteToPreloadedPipe_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestService_WriteToPreloadedPipe_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kTestService_DoSomething_Name = 988820994;
  var kTestService_DoTerminateProcess_Name = 1879304992;
  var kTestService_DoCrashImmediately_Name = 312561782;
  var kTestService_CreateFolder_Name = 178664287;
  var kTestService_GetRequestorName_Name = 1079404323;
  var kTestService_CreateReadOnlySharedMemoryRegion_Name = 1011649341;
  var kTestService_CreateWritableSharedMemoryRegion_Name = 97574050;
  var kTestService_CreateUnsafeSharedMemoryRegion_Name = 1481244532;
  var kTestService_CloneSharedMemoryContents_Name = 1203353000;
  var kTestService_IsProcessSandboxed_Name = 2050417040;
  var kTestService_PseudonymizeString_Name = 973998437;
  var kTestService_PassWriteableFile_Name = 1910521755;
  var kTestService_WriteToPreloadedPipe_Name = 663536639;

  function TestServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestService,
                                                   handleOrPtrInfo);
  }

  function TestServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestService, associatedInterfacePtrInfo);
  }

  TestServiceAssociatedPtr.prototype =
      Object.create(TestServicePtr.prototype);
  TestServiceAssociatedPtr.prototype.constructor =
      TestServiceAssociatedPtr;

  function TestServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestServicePtr.prototype.doSomething = function() {
    return TestServiceProxy.prototype.doSomething
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.doSomething = function() {
    var params_ = new TestService_DoSomething_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_DoSomething_Name,
          codec.align(TestService_DoSomething_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_DoSomething_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_DoSomething_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.doTerminateProcess = function() {
    return TestServiceProxy.prototype.doTerminateProcess
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.doTerminateProcess = function() {
    var params_ = new TestService_DoTerminateProcess_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_DoTerminateProcess_Name,
          codec.align(TestService_DoTerminateProcess_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_DoTerminateProcess_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_DoTerminateProcess_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.doCrashImmediately = function() {
    return TestServiceProxy.prototype.doCrashImmediately
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.doCrashImmediately = function() {
    var params_ = new TestService_DoCrashImmediately_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_DoCrashImmediately_Name,
          codec.align(TestService_DoCrashImmediately_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_DoCrashImmediately_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_DoCrashImmediately_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.createFolder = function() {
    return TestServiceProxy.prototype.createFolder
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.createFolder = function() {
    var params_ = new TestService_CreateFolder_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_CreateFolder_Name,
          codec.align(TestService_CreateFolder_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_CreateFolder_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_CreateFolder_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.getRequestorName = function() {
    return TestServiceProxy.prototype.getRequestorName
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.getRequestorName = function() {
    var params_ = new TestService_GetRequestorName_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_GetRequestorName_Name,
          codec.align(TestService_GetRequestorName_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_GetRequestorName_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_GetRequestorName_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.createReadOnlySharedMemoryRegion = function() {
    return TestServiceProxy.prototype.createReadOnlySharedMemoryRegion
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.createReadOnlySharedMemoryRegion = function(message) {
    var params_ = new TestService_CreateReadOnlySharedMemoryRegion_Params();
    params_.message = message;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_CreateReadOnlySharedMemoryRegion_Name,
          codec.align(TestService_CreateReadOnlySharedMemoryRegion_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_CreateReadOnlySharedMemoryRegion_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_CreateReadOnlySharedMemoryRegion_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.createWritableSharedMemoryRegion = function() {
    return TestServiceProxy.prototype.createWritableSharedMemoryRegion
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.createWritableSharedMemoryRegion = function(message) {
    var params_ = new TestService_CreateWritableSharedMemoryRegion_Params();
    params_.message = message;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_CreateWritableSharedMemoryRegion_Name,
          codec.align(TestService_CreateWritableSharedMemoryRegion_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_CreateWritableSharedMemoryRegion_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_CreateWritableSharedMemoryRegion_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.createUnsafeSharedMemoryRegion = function() {
    return TestServiceProxy.prototype.createUnsafeSharedMemoryRegion
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.createUnsafeSharedMemoryRegion = function(message) {
    var params_ = new TestService_CreateUnsafeSharedMemoryRegion_Params();
    params_.message = message;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_CreateUnsafeSharedMemoryRegion_Name,
          codec.align(TestService_CreateUnsafeSharedMemoryRegion_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_CreateUnsafeSharedMemoryRegion_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_CreateUnsafeSharedMemoryRegion_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.cloneSharedMemoryContents = function() {
    return TestServiceProxy.prototype.cloneSharedMemoryContents
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.cloneSharedMemoryContents = function(region) {
    var params_ = new TestService_CloneSharedMemoryContents_Params();
    params_.region = region;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_CloneSharedMemoryContents_Name,
          codec.align(TestService_CloneSharedMemoryContents_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_CloneSharedMemoryContents_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_CloneSharedMemoryContents_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.isProcessSandboxed = function() {
    return TestServiceProxy.prototype.isProcessSandboxed
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.isProcessSandboxed = function() {
    var params_ = new TestService_IsProcessSandboxed_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_IsProcessSandboxed_Name,
          codec.align(TestService_IsProcessSandboxed_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_IsProcessSandboxed_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_IsProcessSandboxed_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.pseudonymizeString = function() {
    return TestServiceProxy.prototype.pseudonymizeString
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.pseudonymizeString = function(value) {
    var params_ = new TestService_PseudonymizeString_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_PseudonymizeString_Name,
          codec.align(TestService_PseudonymizeString_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_PseudonymizeString_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_PseudonymizeString_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.passWriteableFile = function() {
    return TestServiceProxy.prototype.passWriteableFile
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.passWriteableFile = function(file) {
    var params_ = new TestService_PassWriteableFile_Params();
    params_.file = file;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestService_PassWriteableFile_Name,
          codec.align(TestService_PassWriteableFile_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestService_PassWriteableFile_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestService_PassWriteableFile_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestServicePtr.prototype.writeToPreloadedPipe = function() {
    return TestServiceProxy.prototype.writeToPreloadedPipe
        .apply(this.ptr.getProxy(), arguments);
  };

  TestServiceProxy.prototype.writeToPreloadedPipe = function() {
    var params_ = new TestService_WriteToPreloadedPipe_Params();
    var builder = new codec.MessageV0Builder(
        kTestService_WriteToPreloadedPipe_Name,
        codec.align(TestService_WriteToPreloadedPipe_Params.encodedSize));
    builder.encodeStruct(TestService_WriteToPreloadedPipe_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TestServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  TestServiceStub.prototype.doSomething = function() {
    return this.delegate_ && this.delegate_.doSomething && this.delegate_.doSomething();
  }
  TestServiceStub.prototype.doTerminateProcess = function() {
    return this.delegate_ && this.delegate_.doTerminateProcess && this.delegate_.doTerminateProcess();
  }
  TestServiceStub.prototype.doCrashImmediately = function() {
    return this.delegate_ && this.delegate_.doCrashImmediately && this.delegate_.doCrashImmediately();
  }
  TestServiceStub.prototype.createFolder = function() {
    return this.delegate_ && this.delegate_.createFolder && this.delegate_.createFolder();
  }
  TestServiceStub.prototype.getRequestorName = function() {
    return this.delegate_ && this.delegate_.getRequestorName && this.delegate_.getRequestorName();
  }
  TestServiceStub.prototype.createReadOnlySharedMemoryRegion = function(message) {
    return this.delegate_ && this.delegate_.createReadOnlySharedMemoryRegion && this.delegate_.createReadOnlySharedMemoryRegion(message);
  }
  TestServiceStub.prototype.createWritableSharedMemoryRegion = function(message) {
    return this.delegate_ && this.delegate_.createWritableSharedMemoryRegion && this.delegate_.createWritableSharedMemoryRegion(message);
  }
  TestServiceStub.prototype.createUnsafeSharedMemoryRegion = function(message) {
    return this.delegate_ && this.delegate_.createUnsafeSharedMemoryRegion && this.delegate_.createUnsafeSharedMemoryRegion(message);
  }
  TestServiceStub.prototype.cloneSharedMemoryContents = function(region) {
    return this.delegate_ && this.delegate_.cloneSharedMemoryContents && this.delegate_.cloneSharedMemoryContents(region);
  }
  TestServiceStub.prototype.isProcessSandboxed = function() {
    return this.delegate_ && this.delegate_.isProcessSandboxed && this.delegate_.isProcessSandboxed();
  }
  TestServiceStub.prototype.pseudonymizeString = function(value) {
    return this.delegate_ && this.delegate_.pseudonymizeString && this.delegate_.pseudonymizeString(value);
  }
  TestServiceStub.prototype.passWriteableFile = function(file) {
    return this.delegate_ && this.delegate_.passWriteableFile && this.delegate_.passWriteableFile(file);
  }
  TestServiceStub.prototype.writeToPreloadedPipe = function() {
    return this.delegate_ && this.delegate_.writeToPreloadedPipe && this.delegate_.writeToPreloadedPipe();
  }

  TestServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestService_WriteToPreloadedPipe_Name:
      var params = reader.decodeStruct(TestService_WriteToPreloadedPipe_Params);
      this.writeToPreloadedPipe();
      return true;
    default:
      return false;
    }
  };

  TestServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestService_DoSomething_Name:
      var params = reader.decodeStruct(TestService_DoSomething_Params);
      this.doSomething().then(function(response) {
        var responseParams =
            new TestService_DoSomething_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTestService_DoSomething_Name,
            codec.align(TestService_DoSomething_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_DoSomething_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestService_DoTerminateProcess_Name:
      var params = reader.decodeStruct(TestService_DoTerminateProcess_Params);
      this.doTerminateProcess().then(function(response) {
        var responseParams =
            new TestService_DoTerminateProcess_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTestService_DoTerminateProcess_Name,
            codec.align(TestService_DoTerminateProcess_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_DoTerminateProcess_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestService_DoCrashImmediately_Name:
      var params = reader.decodeStruct(TestService_DoCrashImmediately_Params);
      this.doCrashImmediately().then(function(response) {
        var responseParams =
            new TestService_DoCrashImmediately_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTestService_DoCrashImmediately_Name,
            codec.align(TestService_DoCrashImmediately_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_DoCrashImmediately_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestService_CreateFolder_Name:
      var params = reader.decodeStruct(TestService_CreateFolder_Params);
      this.createFolder().then(function(response) {
        var responseParams =
            new TestService_CreateFolder_ResponseParams();
        responseParams.succeeded = response.succeeded;
        var builder = new codec.MessageV1Builder(
            kTestService_CreateFolder_Name,
            codec.align(TestService_CreateFolder_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_CreateFolder_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestService_GetRequestorName_Name:
      var params = reader.decodeStruct(TestService_GetRequestorName_Params);
      this.getRequestorName().then(function(response) {
        var responseParams =
            new TestService_GetRequestorName_ResponseParams();
        responseParams.name = response.name;
        var builder = new codec.MessageV1Builder(
            kTestService_GetRequestorName_Name,
            codec.align(TestService_GetRequestorName_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_GetRequestorName_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestService_CreateReadOnlySharedMemoryRegion_Name:
      var params = reader.decodeStruct(TestService_CreateReadOnlySharedMemoryRegion_Params);
      this.createReadOnlySharedMemoryRegion(params.message).then(function(response) {
        var responseParams =
            new TestService_CreateReadOnlySharedMemoryRegion_ResponseParams();
        responseParams.region = response.region;
        var builder = new codec.MessageV1Builder(
            kTestService_CreateReadOnlySharedMemoryRegion_Name,
            codec.align(TestService_CreateReadOnlySharedMemoryRegion_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_CreateReadOnlySharedMemoryRegion_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestService_CreateWritableSharedMemoryRegion_Name:
      var params = reader.decodeStruct(TestService_CreateWritableSharedMemoryRegion_Params);
      this.createWritableSharedMemoryRegion(params.message).then(function(response) {
        var responseParams =
            new TestService_CreateWritableSharedMemoryRegion_ResponseParams();
        responseParams.region = response.region;
        var builder = new codec.MessageV1Builder(
            kTestService_CreateWritableSharedMemoryRegion_Name,
            codec.align(TestService_CreateWritableSharedMemoryRegion_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_CreateWritableSharedMemoryRegion_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestService_CreateUnsafeSharedMemoryRegion_Name:
      var params = reader.decodeStruct(TestService_CreateUnsafeSharedMemoryRegion_Params);
      this.createUnsafeSharedMemoryRegion(params.message).then(function(response) {
        var responseParams =
            new TestService_CreateUnsafeSharedMemoryRegion_ResponseParams();
        responseParams.region = response.region;
        var builder = new codec.MessageV1Builder(
            kTestService_CreateUnsafeSharedMemoryRegion_Name,
            codec.align(TestService_CreateUnsafeSharedMemoryRegion_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_CreateUnsafeSharedMemoryRegion_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestService_CloneSharedMemoryContents_Name:
      var params = reader.decodeStruct(TestService_CloneSharedMemoryContents_Params);
      this.cloneSharedMemoryContents(params.region).then(function(response) {
        var responseParams =
            new TestService_CloneSharedMemoryContents_ResponseParams();
        responseParams.newRegion = response.newRegion;
        var builder = new codec.MessageV1Builder(
            kTestService_CloneSharedMemoryContents_Name,
            codec.align(TestService_CloneSharedMemoryContents_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_CloneSharedMemoryContents_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestService_IsProcessSandboxed_Name:
      var params = reader.decodeStruct(TestService_IsProcessSandboxed_Params);
      this.isProcessSandboxed().then(function(response) {
        var responseParams =
            new TestService_IsProcessSandboxed_ResponseParams();
        responseParams.isSandboxed = response.isSandboxed;
        var builder = new codec.MessageV1Builder(
            kTestService_IsProcessSandboxed_Name,
            codec.align(TestService_IsProcessSandboxed_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_IsProcessSandboxed_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestService_PseudonymizeString_Name:
      var params = reader.decodeStruct(TestService_PseudonymizeString_Params);
      this.pseudonymizeString(params.value).then(function(response) {
        var responseParams =
            new TestService_PseudonymizeString_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kTestService_PseudonymizeString_Name,
            codec.align(TestService_PseudonymizeString_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_PseudonymizeString_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestService_PassWriteableFile_Name:
      var params = reader.decodeStruct(TestService_PassWriteableFile_Params);
      this.passWriteableFile(params.file).then(function(response) {
        var responseParams =
            new TestService_PassWriteableFile_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTestService_PassWriteableFile_Name,
            codec.align(TestService_PassWriteableFile_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestService_PassWriteableFile_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTestServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestService_DoSomething_Name:
        if (message.expectsResponse())
          paramsClass = TestService_DoSomething_Params;
      break;
      case kTestService_DoTerminateProcess_Name:
        if (message.expectsResponse())
          paramsClass = TestService_DoTerminateProcess_Params;
      break;
      case kTestService_DoCrashImmediately_Name:
        if (message.expectsResponse())
          paramsClass = TestService_DoCrashImmediately_Params;
      break;
      case kTestService_CreateFolder_Name:
        if (message.expectsResponse())
          paramsClass = TestService_CreateFolder_Params;
      break;
      case kTestService_GetRequestorName_Name:
        if (message.expectsResponse())
          paramsClass = TestService_GetRequestorName_Params;
      break;
      case kTestService_CreateReadOnlySharedMemoryRegion_Name:
        if (message.expectsResponse())
          paramsClass = TestService_CreateReadOnlySharedMemoryRegion_Params;
      break;
      case kTestService_CreateWritableSharedMemoryRegion_Name:
        if (message.expectsResponse())
          paramsClass = TestService_CreateWritableSharedMemoryRegion_Params;
      break;
      case kTestService_CreateUnsafeSharedMemoryRegion_Name:
        if (message.expectsResponse())
          paramsClass = TestService_CreateUnsafeSharedMemoryRegion_Params;
      break;
      case kTestService_CloneSharedMemoryContents_Name:
        if (message.expectsResponse())
          paramsClass = TestService_CloneSharedMemoryContents_Params;
      break;
      case kTestService_IsProcessSandboxed_Name:
        if (message.expectsResponse())
          paramsClass = TestService_IsProcessSandboxed_Params;
      break;
      case kTestService_PseudonymizeString_Name:
        if (message.expectsResponse())
          paramsClass = TestService_PseudonymizeString_Params;
      break;
      case kTestService_PassWriteableFile_Name:
        if (message.expectsResponse())
          paramsClass = TestService_PassWriteableFile_Params;
      break;
      case kTestService_WriteToPreloadedPipe_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestService_WriteToPreloadedPipe_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTestService_DoSomething_Name:
        if (message.isResponse())
          paramsClass = TestService_DoSomething_ResponseParams;
        break;
      case kTestService_DoTerminateProcess_Name:
        if (message.isResponse())
          paramsClass = TestService_DoTerminateProcess_ResponseParams;
        break;
      case kTestService_DoCrashImmediately_Name:
        if (message.isResponse())
          paramsClass = TestService_DoCrashImmediately_ResponseParams;
        break;
      case kTestService_CreateFolder_Name:
        if (message.isResponse())
          paramsClass = TestService_CreateFolder_ResponseParams;
        break;
      case kTestService_GetRequestorName_Name:
        if (message.isResponse())
          paramsClass = TestService_GetRequestorName_ResponseParams;
        break;
      case kTestService_CreateReadOnlySharedMemoryRegion_Name:
        if (message.isResponse())
          paramsClass = TestService_CreateReadOnlySharedMemoryRegion_ResponseParams;
        break;
      case kTestService_CreateWritableSharedMemoryRegion_Name:
        if (message.isResponse())
          paramsClass = TestService_CreateWritableSharedMemoryRegion_ResponseParams;
        break;
      case kTestService_CreateUnsafeSharedMemoryRegion_Name:
        if (message.isResponse())
          paramsClass = TestService_CreateUnsafeSharedMemoryRegion_ResponseParams;
        break;
      case kTestService_CloneSharedMemoryContents_Name:
        if (message.isResponse())
          paramsClass = TestService_CloneSharedMemoryContents_ResponseParams;
        break;
      case kTestService_IsProcessSandboxed_Name:
        if (message.isResponse())
          paramsClass = TestService_IsProcessSandboxed_ResponseParams;
        break;
      case kTestService_PseudonymizeString_Name:
        if (message.isResponse())
          paramsClass = TestService_PseudonymizeString_ResponseParams;
        break;
      case kTestService_PassWriteableFile_Name:
        if (message.isResponse())
          paramsClass = TestService_PassWriteableFile_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TestService = {
    name: 'content.mojom.TestService',
    kVersion: 0,
    ptrClass: TestServicePtr,
    proxyClass: TestServiceProxy,
    stubClass: TestServiceStub,
    validateRequest: validateTestServiceRequest,
    validateResponse: validateTestServiceResponse,
  };
  TestServiceStub.prototype.validator = validateTestServiceRequest;
  TestServiceProxy.prototype.validator = validateTestServiceResponse;
  exports.TEST_PIPE_KEY = TEST_PIPE_KEY;
  exports.TestService = TestService;
  exports.TestServicePtr = TestServicePtr;
  exports.TestServiceAssociatedPtr = TestServiceAssociatedPtr;
})();