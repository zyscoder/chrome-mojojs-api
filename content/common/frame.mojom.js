// content/common/frame.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/common/frame.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');
  var browser_controls_state$ =
      mojo.internal.exposeNamespace('cc.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'cc/mojom/browser_controls_state.mojom', '../../cc/mojom/browser_controls_state.mojom.js');
  }
  var frame_messages$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/common/frame_messages.mojom', 'frame_messages.mojom.js');
  }
  var navigation_client$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/common/navigation_client.mojom', 'navigation_client.mojom.js');
  }
  var web_ui$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/common/web_ui.mojom', 'web_ui.mojom.js');
  }
  var extra_mojo_js_features$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/public/common/extra_mojo_js_features.mojom', '../public/common/extra_mojo_js_features.mojom.js');
  }
  var window_container_type$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/public/common/window_container_type.mojom', '../public/common/window_container_type.mojom.js');
  }
  var constants$ =
      mojo.internal.exposeNamespace('iPC.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ipc/constants.mojom', '../../ipc/constants.mojom.js');
  }
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../mojo/public/mojom/base/time.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var skcolor$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/skcolor.mojom', '../../skia/public/mojom/skcolor.mojom.js');
  }
  var content_security_policy$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/content_security_policy.mojom', '../../services/network/public/mojom/content_security_policy.mojom.js');
  }
  var url_loader$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_loader.mojom', '../../services/network/public/mojom/url_loader.mojom.js');
  }
  var url_loader_completion_status$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_loader_completion_status.mojom', '../../services/network/public/mojom/url_loader_completion_status.mojom.js');
  }
  var url_loader_factory$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_loader_factory.mojom', '../../services/network/public/mojom/url_loader_factory.mojom.js');
  }
  var url_request$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_request.mojom', '../../services/network/public/mojom/url_request.mojom.js');
  }
  var url_response_head$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_response_head.mojom', '../../services/network/public/mojom/url_response_head.mojom.js');
  }
  var interface_provider$ =
      mojo.internal.exposeNamespace('serviceManager.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/service_manager/public/mojom/interface_provider.mojom', '../../services/service_manager/public/mojom/interface_provider.mojom.js');
  }
  var surface_id$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/public/mojom/compositing/surface_id.mojom', '../../services/viz/public/mojom/compositing/surface_id.mojom.js');
  }
  var associated_interfaces$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/associated_interfaces/associated_interfaces.mojom', '../../third_party/blink/public/mojom/associated_interfaces/associated_interfaces.mojom.js');
  }
  var blob_url_store$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/blob/blob_url_store.mojom', '../../third_party/blink/public/mojom/blob/blob_url_store.mojom.js');
  }
  var browser_interface_broker$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/browser_interface_broker.mojom', '../../third_party/blink/public/mojom/browser_interface_broker.mojom.js');
  }
  var commit_result$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/commit_result/commit_result.mojom', '../../third_party/blink/public/mojom/commit_result/commit_result.mojom.js');
  }
  var conversions$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/conversions/conversions.mojom', '../../third_party/blink/public/mojom/conversions/conversions.mojom.js');
  }
  var console_message$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/devtools/console_message.mojom', '../../third_party/blink/public/mojom/devtools/console_message.mojom.js');
  }
  var fenced_frame$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/fenced_frame/fenced_frame.mojom', '../../third_party/blink/public/mojom/fenced_frame/fenced_frame.mojom.js');
  }
  var fenced_frame_config$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/fenced_frame/fenced_frame_config.mojom', '../../third_party/blink/public/mojom/fenced_frame/fenced_frame_config.mojom.js');
  }
  var frame_owner_properties$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/frame/frame_owner_properties.mojom', '../../third_party/blink/public/mojom/frame/frame_owner_properties.mojom.js');
  }
  var frame_policy$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/frame/frame_policy.mojom', '../../third_party/blink/public/mojom/frame/frame_policy.mojom.js');
  }
  var frame_replication_state$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/frame/frame_replication_state.mojom', '../../third_party/blink/public/mojom/frame/frame_replication_state.mojom.js');
  }
  var lifecycle$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/frame/lifecycle.mojom', '../../third_party/blink/public/mojom/frame/lifecycle.mojom.js');
  }
  var policy_container$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/frame/policy_container.mojom', '../../third_party/blink/public/mojom/frame/policy_container.mojom.js');
  }
  var remote_frame$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/frame/remote_frame.mojom', '../../third_party/blink/public/mojom/frame/remote_frame.mojom.js');
  }
  var tree_scope_type$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/frame/tree_scope_type.mojom', '../../third_party/blink/public/mojom/frame/tree_scope_type.mojom.js');
  }
  var referrer$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/referrer.mojom', '../../third_party/blink/public/mojom/loader/referrer.mojom.js');
  }
  var resource_cache$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/resource_cache.mojom', '../../third_party/blink/public/mojom/loader/resource_cache.mojom.js');
  }
  var navigation_policy$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/navigation/navigation_policy.mojom', '../../third_party/blink/public/mojom/navigation/navigation_policy.mojom.js');
  }
  var resource_load_info$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/resource_load_info.mojom', '../../third_party/blink/public/mojom/loader/resource_load_info.mojom.js');
  }
  var url_loader_factory_bundle$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom', '../../third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom.js');
  }
  var transferable_message$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/messaging/transferable_message.mojom', '../../third_party/blink/public/mojom/messaging/transferable_message.mojom.js');
  }
  var navigation_params$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/navigation/navigation_params.mojom', '../../third_party/blink/public/mojom/navigation/navigation_params.mojom.js');
  }
  var navigation_initiator_activation_and_ad_status$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/navigation/navigation_initiator_activation_and_ad_status.mojom', '../../third_party/blink/public/mojom/navigation/navigation_initiator_activation_and_ad_status.mojom.js');
  }
  var browsing_context_group_info$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/page/browsing_context_group_info.mojom', '../../third_party/blink/public/mojom/page/browsing_context_group_info.mojom.js');
  }
  var page$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/page/page.mojom', '../../third_party/blink/public/mojom/page/page.mojom.js');
  }
  var picture_in_picture_window_options$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/picture_in_picture_window_options/picture_in_picture_window_options.mojom', '../../third_party/blink/public/mojom/picture_in_picture_window_options/picture_in_picture_window_options.mojom.js');
  }
  var platform_widget$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/widget/platform_widget.mojom', '../../third_party/blink/public/mojom/widget/platform_widget.mojom.js');
  }
  var widget$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/page/widget.mojom', '../../third_party/blink/public/mojom/page/widget.mojom.js');
  }
  var portal$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/portal/portal.mojom', '../../third_party/blink/public/mojom/portal/portal.mojom.js');
  }
  var renderer_preferences$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/renderer_preferences.mojom', '../../third_party/blink/public/mojom/renderer_preferences.mojom.js');
  }
  var controller_service_worker$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/controller_service_worker.mojom', '../../third_party/blink/public/mojom/service_worker/controller_service_worker.mojom.js');
  }
  var service_worker_container$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_container.mojom', '../../third_party/blink/public/mojom/service_worker/service_worker_container.mojom.js');
  }
  var tokens$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/tokens/tokens.mojom', '../../third_party/blink/public/mojom/tokens/tokens.mojom.js');
  }
  var web_preferences$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/webpreferences/web_preferences.mojom', '../../third_party/blink/public/mojom/webpreferences/web_preferences.mojom.js');
  }
  var visual_properties$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/widget/visual_properties.mojom', '../../third_party/blink/public/mojom/widget/visual_properties.mojom.js');
  }
  var window_features$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/window_features/window_features.mojom', '../../third_party/blink/public/mojom/window_features/window_features.mojom.js');
  }
  var ax_tree_update$ =
      mojo.internal.exposeNamespace('ax.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/accessibility/mojom/ax_tree_update.mojom', '../../ui/accessibility/mojom/ax_tree_update.mojom.js');
  }
  var window_open_disposition$ =
      mojo.internal.exposeNamespace('ui.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/base/mojom/window_open_disposition.mojom', '../../ui/base/mojom/window_open_disposition.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../url/mojom/origin.mojom.js');
  }
  var scheme_host_port$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/scheme_host_port.mojom', '../../url/mojom/scheme_host_port.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../url/mojom/url.mojom.js');
  }


  var ViewWidgetType = {};
  ViewWidgetType.kTopLevel = 0;
  ViewWidgetType.kGuestView = 1;
  ViewWidgetType.kPortal = 2;
  ViewWidgetType.kFencedFrame = 3;
  ViewWidgetType.MIN_VALUE = 0;
  ViewWidgetType.MAX_VALUE = 3;

  ViewWidgetType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  ViewWidgetType.toKnownEnumValue = function(value) {
    return value;
  };

  ViewWidgetType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var ChildFrameOwnerElementType = {};
  ChildFrameOwnerElementType.kIframe = 0;
  ChildFrameOwnerElementType.kObject = 1;
  ChildFrameOwnerElementType.kEmbed = 2;
  ChildFrameOwnerElementType.kFrame = 3;
  ChildFrameOwnerElementType.MIN_VALUE = 0;
  ChildFrameOwnerElementType.MAX_VALUE = 3;

  ChildFrameOwnerElementType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  ChildFrameOwnerElementType.toKnownEnumValue = function(value) {
    return value;
  };

  ChildFrameOwnerElementType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var FrameDeleteIntention = {};
  FrameDeleteIntention.kNotMainFrame = 0;
  FrameDeleteIntention.kSpeculativeMainFrameForShutdown = 1;
  FrameDeleteIntention.kSpeculativeMainFrameForNavigationCancelled = 2;
  FrameDeleteIntention.MIN_VALUE = 0;
  FrameDeleteIntention.MAX_VALUE = 2;

  FrameDeleteIntention.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  FrameDeleteIntention.toKnownEnumValue = function(value) {
    return value;
  };

  FrameDeleteIntention.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var CreateNewWindowStatus = {};
  CreateNewWindowStatus.kBlocked = 0;
  CreateNewWindowStatus.kIgnore = 1;
  CreateNewWindowStatus.kReuse = 2;
  CreateNewWindowStatus.kSuccess = 3;
  CreateNewWindowStatus.MIN_VALUE = 0;
  CreateNewWindowStatus.MAX_VALUE = 3;

  CreateNewWindowStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  CreateNewWindowStatus.toKnownEnumValue = function(value) {
    return value;
  };

  CreateNewWindowStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function CreateViewParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CreateViewParams.prototype.initDefaults_ = function() {
    this.rendererPreferences = null;
    this.webPreferences = null;
    this.sessionStorageNamespaceId = null;
    this.openerFrameToken = null;
    this.replicationState = null;
    this.devtoolsMainFrameToken = null;
    this.mainFrame = null;
    this.hidden = false;
    this.isPrerendering = false;
    this.neverComposited = false;
    this.windowWasOpenedByAnotherWindow = false;
    this.type = 0;
    this.fencedFrameMode = 0;
    this.blinkPageBroadcast = new associatedBindings.AssociatedInterfaceRequest();
    this.outermostOrigin = null;
    this.baseBackgroundColor = null;
    this.browsingContextGroupInfo = null;
  };
  CreateViewParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CreateViewParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 120}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.rendererPreferences
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, renderer_preferences$.RendererPreferences, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.webPreferences
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, web_preferences$.WebPreferences, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.sessionStorageNamespaceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.openerFrameToken
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 24, tokens$.FrameToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.replicationState
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, frame_replication_state$.FrameReplicationState, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.devtoolsMainFrameToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.mainFrame
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 56, CreateMainFrameUnion, false);
    if (err !== validator.validationError.NONE)
        return err;






    // validate CreateViewParams.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 76, ViewWidgetType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.fencedFrameMode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 80, fenced_frame_config$.DeprecatedFencedFrameMode);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.outermostOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, origin$.Origin, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.blinkPageBroadcast
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 84, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.baseBackgroundColor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, skcolor$.SkColor, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateViewParams.browsingContextGroupInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 104, browsing_context_group_info$.BrowsingContextGroupInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CreateViewParams.encodedSize = codec.kStructHeaderSize + 112;

  CreateViewParams.decode = function(decoder) {
    var packed;
    var val = new CreateViewParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rendererPreferences =
        decoder.decodeStructPointer(renderer_preferences$.RendererPreferences);
    val.webPreferences =
        decoder.decodeStructPointer(web_preferences$.WebPreferences);
    val.sessionStorageNamespaceId =
        decoder.decodeStruct(codec.String);
    val.openerFrameToken =
        decoder.decodeStruct(tokens$.FrameToken);
    val.replicationState =
        decoder.decodeStructPointer(frame_replication_state$.FrameReplicationState);
    val.devtoolsMainFrameToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.mainFrame =
        decoder.decodeStruct(CreateMainFrameUnion);
    packed = decoder.readUint8();
    val.hidden = (packed >> 0) & 1 ? true : false;
    val.isPrerendering = (packed >> 1) & 1 ? true : false;
    val.neverComposited = (packed >> 2) & 1 ? true : false;
    val.windowWasOpenedByAnotherWindow = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.type =
        decoder.decodeStruct(new codec.Enum(ViewWidgetType));
    val.fencedFrameMode =
        decoder.decodeStruct(new codec.Enum(fenced_frame_config$.DeprecatedFencedFrameMode));
    val.blinkPageBroadcast =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.outermostOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.baseBackgroundColor =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.browsingContextGroupInfo =
        decoder.decodeStructPointer(browsing_context_group_info$.BrowsingContextGroupInfo);
    return val;
  };

  CreateViewParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CreateViewParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(renderer_preferences$.RendererPreferences, val.rendererPreferences);
    encoder.encodeStructPointer(web_preferences$.WebPreferences, val.webPreferences);
    encoder.encodeStruct(codec.String, val.sessionStorageNamespaceId);
    encoder.encodeStruct(tokens$.FrameToken, val.openerFrameToken);
    encoder.encodeStructPointer(frame_replication_state$.FrameReplicationState, val.replicationState);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.devtoolsMainFrameToken);
    encoder.encodeStruct(CreateMainFrameUnion, val.mainFrame);
    packed = 0;
    packed |= (val.hidden & 1) << 0
    packed |= (val.isPrerendering & 1) << 1
    packed |= (val.neverComposited & 1) << 2
    packed |= (val.windowWasOpenedByAnotherWindow & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.encodeStruct(codec.Int32, val.fencedFrameMode);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.blinkPageBroadcast);
    encoder.encodeStructPointer(origin$.Origin, val.outermostOrigin);
    encoder.encodeStructPointer(skcolor$.SkColor, val.baseBackgroundColor);
    encoder.encodeStructPointer(browsing_context_group_info$.BrowsingContextGroupInfo, val.browsingContextGroupInfo);
  };
  function CreateLocalMainFrameParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CreateLocalMainFrameParams.prototype.initDefaults_ = function() {
    this.frameToken = null;
    this.routingId = constants$.ROUTING_ID_NONE;
    this.frame = new associatedBindings.AssociatedInterfaceRequest();
    this.interfaceBroker = new browser_interface_broker$.BrowserInterfaceBrokerPtr();
    this.associatedInterfaceProviderRemote = new associatedBindings.AssociatedInterfacePtrInfo();
    this.isOnInitialEmptyDocument = true;
    this.documentToken = null;
    this.policyContainer = null;
    this.widgetParams = null;
    this.subresourceLoaderFactories = null;
    this.previousFrameToken = null;
  };
  CreateLocalMainFrameParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CreateLocalMainFrameParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 96}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateLocalMainFrameParams.frameToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, tokens$.LocalFrameToken, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate CreateLocalMainFrameParams.frame
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 12, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateLocalMainFrameParams.interfaceBroker
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateLocalMainFrameParams.associatedInterfaceProviderRemote
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 24, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate CreateLocalMainFrameParams.documentToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, tokens$.DocumentToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateLocalMainFrameParams.policyContainer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, policy_container$.PolicyContainer, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateLocalMainFrameParams.widgetParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, CreateFrameWidgetParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateLocalMainFrameParams.subresourceLoaderFactories
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, url_loader_factory_bundle$.URLLoaderFactoryBundle, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateLocalMainFrameParams.previousFrameToken
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 72, tokens$.FrameToken, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CreateLocalMainFrameParams.encodedSize = codec.kStructHeaderSize + 88;

  CreateLocalMainFrameParams.decode = function(decoder) {
    var packed;
    var val = new CreateLocalMainFrameParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameToken =
        decoder.decodeStructPointer(tokens$.LocalFrameToken);
    val.routingId =
        decoder.decodeStruct(codec.Int32);
    val.frame =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.interfaceBroker =
        decoder.decodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr));
    val.associatedInterfaceProviderRemote =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    packed = decoder.readUint8();
    val.isOnInitialEmptyDocument = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.documentToken =
        decoder.decodeStructPointer(tokens$.DocumentToken);
    val.policyContainer =
        decoder.decodeStructPointer(policy_container$.PolicyContainer);
    val.widgetParams =
        decoder.decodeStructPointer(CreateFrameWidgetParams);
    val.subresourceLoaderFactories =
        decoder.decodeStructPointer(url_loader_factory_bundle$.URLLoaderFactoryBundle);
    val.previousFrameToken =
        decoder.decodeStruct(tokens$.FrameToken);
    return val;
  };

  CreateLocalMainFrameParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CreateLocalMainFrameParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(tokens$.LocalFrameToken, val.frameToken);
    encoder.encodeStruct(codec.Int32, val.routingId);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.frame);
    encoder.encodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr), val.interfaceBroker);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.associatedInterfaceProviderRemote);
    packed = 0;
    packed |= (val.isOnInitialEmptyDocument & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(tokens$.DocumentToken, val.documentToken);
    encoder.encodeStructPointer(policy_container$.PolicyContainer, val.policyContainer);
    encoder.encodeStructPointer(CreateFrameWidgetParams, val.widgetParams);
    encoder.encodeStructPointer(url_loader_factory_bundle$.URLLoaderFactoryBundle, val.subresourceLoaderFactories);
    encoder.encodeStruct(tokens$.FrameToken, val.previousFrameToken);
  };
  function CreateRemoteMainFrameParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CreateRemoteMainFrameParams.prototype.initDefaults_ = function() {
    this.token = null;
    this.frameInterfaces = null;
    this.mainFrameInterfaces = null;
  };
  CreateRemoteMainFrameParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CreateRemoteMainFrameParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateRemoteMainFrameParams.token
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, tokens$.RemoteFrameToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateRemoteMainFrameParams.frameInterfaces
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, remote_frame$.RemoteFrameInterfacesFromBrowser, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateRemoteMainFrameParams.mainFrameInterfaces
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, remote_frame$.RemoteMainFrameInterfaces, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CreateRemoteMainFrameParams.encodedSize = codec.kStructHeaderSize + 24;

  CreateRemoteMainFrameParams.decode = function(decoder) {
    var packed;
    var val = new CreateRemoteMainFrameParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.token =
        decoder.decodeStructPointer(tokens$.RemoteFrameToken);
    val.frameInterfaces =
        decoder.decodeStructPointer(remote_frame$.RemoteFrameInterfacesFromBrowser);
    val.mainFrameInterfaces =
        decoder.decodeStructPointer(remote_frame$.RemoteMainFrameInterfaces);
    return val;
  };

  CreateRemoteMainFrameParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CreateRemoteMainFrameParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(tokens$.RemoteFrameToken, val.token);
    encoder.encodeStructPointer(remote_frame$.RemoteFrameInterfacesFromBrowser, val.frameInterfaces);
    encoder.encodeStructPointer(remote_frame$.RemoteMainFrameInterfaces, val.mainFrameInterfaces);
  };
  function CreateFrameWidgetParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CreateFrameWidgetParams.prototype.initDefaults_ = function() {
    this.routingId = 0;
    this.frameWidgetHost = new associatedBindings.AssociatedInterfacePtrInfo();
    this.frameWidget = new associatedBindings.AssociatedInterfaceRequest();
    this.widgetHost = new associatedBindings.AssociatedInterfacePtrInfo();
    this.widget = new associatedBindings.AssociatedInterfaceRequest();
    this.visualProperties = null;
    this.previousFrameTokenForCompositorReuse = null;
  };
  CreateFrameWidgetParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CreateFrameWidgetParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate CreateFrameWidgetParams.frameWidgetHost
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameWidgetParams.frameWidget
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 12, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameWidgetParams.widgetHost
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameWidgetParams.widget
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameWidgetParams.visualProperties
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, visual_properties$.VisualProperties, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameWidgetParams.previousFrameTokenForCompositorReuse
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 40, tokens$.FrameToken, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CreateFrameWidgetParams.encodedSize = codec.kStructHeaderSize + 56;

  CreateFrameWidgetParams.decode = function(decoder) {
    var packed;
    var val = new CreateFrameWidgetParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.routingId =
        decoder.decodeStruct(codec.Int32);
    val.frameWidgetHost =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.frameWidget =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.widgetHost =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.widget =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.visualProperties =
        decoder.decodeStructPointer(visual_properties$.VisualProperties);
    val.previousFrameTokenForCompositorReuse =
        decoder.decodeStruct(tokens$.FrameToken);
    return val;
  };

  CreateFrameWidgetParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CreateFrameWidgetParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.routingId);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.frameWidgetHost);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.frameWidget);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.widgetHost);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.widget);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(visual_properties$.VisualProperties, val.visualProperties);
    encoder.encodeStruct(tokens$.FrameToken, val.previousFrameTokenForCompositorReuse);
  };
  function CreateFrameParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CreateFrameParams.prototype.initDefaults_ = function() {
    this.frameToken = null;
    this.routingId = 0;
    this.treeScopeType = 0;
    this.previousFrameToken = null;
    this.openerFrameToken = null;
    this.parentFrameToken = null;
    this.previousSiblingFrameToken = null;
    this.interfaceBroker = new browser_interface_broker$.BrowserInterfaceBrokerPtr();
    this.replicationState = null;
    this.devtoolsFrameToken = null;
    this.frameOwnerProperties = null;
    this.widgetParams = null;
    this.isOnInitialEmptyDocument = true;
    this.frame = new associatedBindings.AssociatedInterfaceRequest();
    this.documentToken = null;
    this.policyContainer = null;
    this.associatedInterfaceProviderRemote = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  CreateFrameParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CreateFrameParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 160}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.frameToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, tokens$.LocalFrameToken, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate CreateFrameParams.previousFrameToken
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 16, tokens$.FrameToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.openerFrameToken
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 32, tokens$.FrameToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.parentFrameToken
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 48, tokens$.FrameToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.previousSiblingFrameToken
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 64, tokens$.FrameToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.interfaceBroker
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 80, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.treeScopeType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 12, tree_scope_type$.TreeScopeType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.replicationState
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, frame_replication_state$.FrameReplicationState, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.devtoolsFrameToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.frameOwnerProperties
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 104, frame_owner_properties$.FrameOwnerProperties, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.widgetParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 112, CreateFrameWidgetParams, true);
    if (err !== validator.validationError.NONE)
        return err;



    // validate CreateFrameParams.documentToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 128, tokens$.DocumentToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.policyContainer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 136, policy_container$.PolicyContainer, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.frame
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 124, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateFrameParams.associatedInterfaceProviderRemote
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 144, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CreateFrameParams.encodedSize = codec.kStructHeaderSize + 152;

  CreateFrameParams.decode = function(decoder) {
    var packed;
    var val = new CreateFrameParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameToken =
        decoder.decodeStructPointer(tokens$.LocalFrameToken);
    val.routingId =
        decoder.decodeStruct(codec.Int32);
    val.treeScopeType =
        decoder.decodeStruct(new codec.Enum(tree_scope_type$.TreeScopeType));
    val.previousFrameToken =
        decoder.decodeStruct(tokens$.FrameToken);
    val.openerFrameToken =
        decoder.decodeStruct(tokens$.FrameToken);
    val.parentFrameToken =
        decoder.decodeStruct(tokens$.FrameToken);
    val.previousSiblingFrameToken =
        decoder.decodeStruct(tokens$.FrameToken);
    val.interfaceBroker =
        decoder.decodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr));
    val.replicationState =
        decoder.decodeStructPointer(frame_replication_state$.FrameReplicationState);
    val.devtoolsFrameToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.frameOwnerProperties =
        decoder.decodeStructPointer(frame_owner_properties$.FrameOwnerProperties);
    val.widgetParams =
        decoder.decodeStructPointer(CreateFrameWidgetParams);
    packed = decoder.readUint8();
    val.isOnInitialEmptyDocument = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.frame =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.documentToken =
        decoder.decodeStructPointer(tokens$.DocumentToken);
    val.policyContainer =
        decoder.decodeStructPointer(policy_container$.PolicyContainer);
    val.associatedInterfaceProviderRemote =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  CreateFrameParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CreateFrameParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(tokens$.LocalFrameToken, val.frameToken);
    encoder.encodeStruct(codec.Int32, val.routingId);
    encoder.encodeStruct(codec.Int32, val.treeScopeType);
    encoder.encodeStruct(tokens$.FrameToken, val.previousFrameToken);
    encoder.encodeStruct(tokens$.FrameToken, val.openerFrameToken);
    encoder.encodeStruct(tokens$.FrameToken, val.parentFrameToken);
    encoder.encodeStruct(tokens$.FrameToken, val.previousSiblingFrameToken);
    encoder.encodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr), val.interfaceBroker);
    encoder.encodeStructPointer(frame_replication_state$.FrameReplicationState, val.replicationState);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.devtoolsFrameToken);
    encoder.encodeStructPointer(frame_owner_properties$.FrameOwnerProperties, val.frameOwnerProperties);
    encoder.encodeStructPointer(CreateFrameWidgetParams, val.widgetParams);
    packed = 0;
    packed |= (val.isOnInitialEmptyDocument & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.frame);
    encoder.encodeStructPointer(tokens$.DocumentToken, val.documentToken);
    encoder.encodeStructPointer(policy_container$.PolicyContainer, val.policyContainer);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.associatedInterfaceProviderRemote);
  };
  function SnapshotAccessibilityTreeParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SnapshotAccessibilityTreeParams.prototype.initDefaults_ = function() {
    this.axMode = 0;
    this.maxNodes = 0;
    this.timeout = null;
  };
  SnapshotAccessibilityTreeParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SnapshotAccessibilityTreeParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate SnapshotAccessibilityTreeParams.timeout
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SnapshotAccessibilityTreeParams.encodedSize = codec.kStructHeaderSize + 24;

  SnapshotAccessibilityTreeParams.decode = function(decoder) {
    var packed;
    var val = new SnapshotAccessibilityTreeParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.axMode =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.maxNodes =
        decoder.decodeStruct(codec.Uint64);
    val.timeout =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  SnapshotAccessibilityTreeParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SnapshotAccessibilityTreeParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.axMode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint64, val.maxNodes);
    encoder.encodeStructPointer(time$.TimeDelta, val.timeout);
  };
  function CreateNewWindowParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CreateNewWindowParams.prototype.initDefaults_ = function() {
    this.allowPopup = false;
    this.openerSuppressed = false;
    this.isFormSubmission = false;
    this.windowContainerType = 0;
    this.sessionStorageNamespaceId = null;
    this.cloneFromSessionStorageNamespaceId = null;
    this.frameName = null;
    this.formSubmissionPostData = null;
    this.formSubmissionPostContentType = null;
    this.disposition = 0;
    this.initiatorActivationAndAdStatus = 0;
    this.targetUrl = null;
    this.referrer = null;
    this.features = null;
    this.impression = null;
    this.downloadPolicy = null;
    this.pipOptions = null;
  };
  CreateNewWindowParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CreateNewWindowParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 112}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate CreateNewWindowParams.windowContainerType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, window_container_type$.WindowContainerType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.sessionStorageNamespaceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.cloneFromSessionStorageNamespaceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.frameName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;




    // validate CreateNewWindowParams.formSubmissionPostData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, url_request$.URLRequestBody, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.formSubmissionPostContentType
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.disposition
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 48, window_open_disposition$.WindowOpenDisposition);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.targetUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.referrer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, referrer$.Referrer, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.features
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, window_features$.WindowFeatures, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.impression
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, conversions$.Impression, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.downloadPolicy
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, navigation_policy$.NavigationDownloadPolicy, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.pipOptions
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, picture_in_picture_window_options$.PictureInPictureWindowOptions, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowParams.initiatorActivationAndAdStatus
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 52, navigation_initiator_activation_and_ad_status$.NavigationInitiatorActivationAndAdStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CreateNewWindowParams.encodedSize = codec.kStructHeaderSize + 104;

  CreateNewWindowParams.decode = function(decoder) {
    var packed;
    var val = new CreateNewWindowParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.allowPopup = (packed >> 0) & 1 ? true : false;
    val.openerSuppressed = (packed >> 1) & 1 ? true : false;
    val.isFormSubmission = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.windowContainerType =
        decoder.decodeStruct(new codec.Enum(window_container_type$.WindowContainerType));
    val.sessionStorageNamespaceId =
        decoder.decodeStruct(codec.String);
    val.cloneFromSessionStorageNamespaceId =
        decoder.decodeStruct(codec.String);
    val.frameName =
        decoder.decodeStruct(codec.String);
    val.formSubmissionPostData =
        decoder.decodeStructPointer(url_request$.URLRequestBody);
    val.formSubmissionPostContentType =
        decoder.decodeStruct(codec.String);
    val.disposition =
        decoder.decodeStruct(new codec.Enum(window_open_disposition$.WindowOpenDisposition));
    val.initiatorActivationAndAdStatus =
        decoder.decodeStruct(new codec.Enum(navigation_initiator_activation_and_ad_status$.NavigationInitiatorActivationAndAdStatus));
    val.targetUrl =
        decoder.decodeStructPointer(url$.Url);
    val.referrer =
        decoder.decodeStructPointer(referrer$.Referrer);
    val.features =
        decoder.decodeStructPointer(window_features$.WindowFeatures);
    val.impression =
        decoder.decodeStructPointer(conversions$.Impression);
    val.downloadPolicy =
        decoder.decodeStructPointer(navigation_policy$.NavigationDownloadPolicy);
    val.pipOptions =
        decoder.decodeStructPointer(picture_in_picture_window_options$.PictureInPictureWindowOptions);
    return val;
  };

  CreateNewWindowParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CreateNewWindowParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.allowPopup & 1) << 0
    packed |= (val.openerSuppressed & 1) << 1
    packed |= (val.isFormSubmission & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.windowContainerType);
    encoder.encodeStruct(codec.String, val.sessionStorageNamespaceId);
    encoder.encodeStruct(codec.String, val.cloneFromSessionStorageNamespaceId);
    encoder.encodeStruct(codec.String, val.frameName);
    encoder.encodeStructPointer(url_request$.URLRequestBody, val.formSubmissionPostData);
    encoder.encodeStruct(codec.String, val.formSubmissionPostContentType);
    encoder.encodeStruct(codec.Int32, val.disposition);
    encoder.encodeStruct(codec.Int32, val.initiatorActivationAndAdStatus);
    encoder.encodeStructPointer(url$.Url, val.targetUrl);
    encoder.encodeStructPointer(referrer$.Referrer, val.referrer);
    encoder.encodeStructPointer(window_features$.WindowFeatures, val.features);
    encoder.encodeStructPointer(conversions$.Impression, val.impression);
    encoder.encodeStructPointer(navigation_policy$.NavigationDownloadPolicy, val.downloadPolicy);
    encoder.encodeStructPointer(picture_in_picture_window_options$.PictureInPictureWindowOptions, val.pipOptions);
  };
  function CreateNewWindowReply(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CreateNewWindowReply.prototype.initDefaults_ = function() {
    this.mainFrameToken = null;
    this.mainFrameRouteId = 0;
    this.frame = new associatedBindings.AssociatedInterfaceRequest();
    this.widgetParams = null;
    this.pageBroadcast = new associatedBindings.AssociatedInterfaceRequest();
    this.mainFrameInterfaceBroker = new browser_interface_broker$.BrowserInterfaceBrokerPtr();
    this.associatedInterfaceProvider = new associatedBindings.AssociatedInterfacePtrInfo();
    this.waitForDebugger = false;
    this.clonedSessionStorageNamespaceId = null;
    this.devtoolsMainFrameToken = null;
    this.documentToken = null;
    this.policyContainer = null;
    this.browsingContextGroupInfo = null;
  };
  CreateNewWindowReply.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CreateNewWindowReply.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 96}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowReply.mainFrameToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, tokens$.LocalFrameToken, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate CreateNewWindowReply.frame
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 12, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowReply.widgetParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, CreateFrameWidgetParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowReply.pageBroadcast
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowReply.mainFrameInterfaceBroker
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 28, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowReply.associatedInterfaceProvider
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 36, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowReply.clonedSessionStorageNamespaceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 48, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowReply.devtoolsMainFrameToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate CreateNewWindowReply.documentToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, tokens$.DocumentToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowReply.policyContainer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, policy_container$.PolicyContainer, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateNewWindowReply.browsingContextGroupInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, browsing_context_group_info$.BrowsingContextGroupInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CreateNewWindowReply.encodedSize = codec.kStructHeaderSize + 88;

  CreateNewWindowReply.decode = function(decoder) {
    var packed;
    var val = new CreateNewWindowReply();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.mainFrameToken =
        decoder.decodeStructPointer(tokens$.LocalFrameToken);
    val.mainFrameRouteId =
        decoder.decodeStruct(codec.Int32);
    val.frame =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.widgetParams =
        decoder.decodeStructPointer(CreateFrameWidgetParams);
    val.pageBroadcast =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.mainFrameInterfaceBroker =
        decoder.decodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr));
    val.associatedInterfaceProvider =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    packed = decoder.readUint8();
    val.waitForDebugger = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.clonedSessionStorageNamespaceId =
        decoder.decodeStruct(codec.String);
    val.devtoolsMainFrameToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.documentToken =
        decoder.decodeStructPointer(tokens$.DocumentToken);
    val.policyContainer =
        decoder.decodeStructPointer(policy_container$.PolicyContainer);
    val.browsingContextGroupInfo =
        decoder.decodeStructPointer(browsing_context_group_info$.BrowsingContextGroupInfo);
    return val;
  };

  CreateNewWindowReply.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CreateNewWindowReply.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(tokens$.LocalFrameToken, val.mainFrameToken);
    encoder.encodeStruct(codec.Int32, val.mainFrameRouteId);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.frame);
    encoder.encodeStructPointer(CreateFrameWidgetParams, val.widgetParams);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.pageBroadcast);
    encoder.encodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr), val.mainFrameInterfaceBroker);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.associatedInterfaceProvider);
    packed = 0;
    packed |= (val.waitForDebugger & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.clonedSessionStorageNamespaceId);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.devtoolsMainFrameToken);
    encoder.encodeStructPointer(tokens$.DocumentToken, val.documentToken);
    encoder.encodeStructPointer(policy_container$.PolicyContainer, val.policyContainer);
    encoder.encodeStructPointer(browsing_context_group_info$.BrowsingContextGroupInfo, val.browsingContextGroupInfo);
  };
  function FrameHTMLSerializerHandler_DidReceiveData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHTMLSerializerHandler_DidReceiveData_Params.prototype.initDefaults_ = function() {
    this.dataBuffer = null;
  };
  FrameHTMLSerializerHandler_DidReceiveData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHTMLSerializerHandler_DidReceiveData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHTMLSerializerHandler_DidReceiveData_Params.dataBuffer
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHTMLSerializerHandler_DidReceiveData_Params.encodedSize = codec.kStructHeaderSize + 8;

  FrameHTMLSerializerHandler_DidReceiveData_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHTMLSerializerHandler_DidReceiveData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dataBuffer =
        decoder.decodeStruct(codec.String);
    return val;
  };

  FrameHTMLSerializerHandler_DidReceiveData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHTMLSerializerHandler_DidReceiveData_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.dataBuffer);
  };
  function FrameHTMLSerializerHandler_Done_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHTMLSerializerHandler_Done_Params.prototype.initDefaults_ = function() {
  };
  FrameHTMLSerializerHandler_Done_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHTMLSerializerHandler_Done_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHTMLSerializerHandler_Done_Params.encodedSize = codec.kStructHeaderSize + 0;

  FrameHTMLSerializerHandler_Done_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHTMLSerializerHandler_Done_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FrameHTMLSerializerHandler_Done_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHTMLSerializerHandler_Done_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Frame_CommitSameDocumentNavigation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_CommitSameDocumentNavigation_Params.prototype.initDefaults_ = function() {
    this.commonParams = null;
    this.requestParams = null;
  };
  Frame_CommitSameDocumentNavigation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_CommitSameDocumentNavigation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_CommitSameDocumentNavigation_Params.commonParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, navigation_params$.CommonNavigationParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_CommitSameDocumentNavigation_Params.requestParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, navigation_params$.CommitNavigationParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_CommitSameDocumentNavigation_Params.encodedSize = codec.kStructHeaderSize + 16;

  Frame_CommitSameDocumentNavigation_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_CommitSameDocumentNavigation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.commonParams =
        decoder.decodeStructPointer(navigation_params$.CommonNavigationParams);
    val.requestParams =
        decoder.decodeStructPointer(navigation_params$.CommitNavigationParams);
    return val;
  };

  Frame_CommitSameDocumentNavigation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_CommitSameDocumentNavigation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(navigation_params$.CommonNavigationParams, val.commonParams);
    encoder.encodeStructPointer(navigation_params$.CommitNavigationParams, val.requestParams);
  };
  function Frame_CommitSameDocumentNavigation_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_CommitSameDocumentNavigation_ResponseParams.prototype.initDefaults_ = function() {
    this.commitResult = 0;
  };
  Frame_CommitSameDocumentNavigation_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_CommitSameDocumentNavigation_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_CommitSameDocumentNavigation_ResponseParams.commitResult
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, commit_result$.CommitResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_CommitSameDocumentNavigation_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Frame_CommitSameDocumentNavigation_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Frame_CommitSameDocumentNavigation_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.commitResult =
        decoder.decodeStruct(new codec.Enum(commit_result$.CommitResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Frame_CommitSameDocumentNavigation_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_CommitSameDocumentNavigation_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.commitResult);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Frame_UpdateSubresourceLoaderFactories_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_UpdateSubresourceLoaderFactories_Params.prototype.initDefaults_ = function() {
    this.subresourceLoaderFactories = null;
  };
  Frame_UpdateSubresourceLoaderFactories_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_UpdateSubresourceLoaderFactories_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_UpdateSubresourceLoaderFactories_Params.subresourceLoaderFactories
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url_loader_factory_bundle$.URLLoaderFactoryBundle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_UpdateSubresourceLoaderFactories_Params.encodedSize = codec.kStructHeaderSize + 8;

  Frame_UpdateSubresourceLoaderFactories_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_UpdateSubresourceLoaderFactories_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.subresourceLoaderFactories =
        decoder.decodeStructPointer(url_loader_factory_bundle$.URLLoaderFactoryBundle);
    return val;
  };

  Frame_UpdateSubresourceLoaderFactories_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_UpdateSubresourceLoaderFactories_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url_loader_factory_bundle$.URLLoaderFactoryBundle, val.subresourceLoaderFactories);
  };
  function Frame_SetWantErrorMessageStackTrace_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_SetWantErrorMessageStackTrace_Params.prototype.initDefaults_ = function() {
  };
  Frame_SetWantErrorMessageStackTrace_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_SetWantErrorMessageStackTrace_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_SetWantErrorMessageStackTrace_Params.encodedSize = codec.kStructHeaderSize + 0;

  Frame_SetWantErrorMessageStackTrace_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_SetWantErrorMessageStackTrace_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Frame_SetWantErrorMessageStackTrace_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_SetWantErrorMessageStackTrace_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Frame_Unload_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_Unload_Params.prototype.initDefaults_ = function() {
    this.isLoading = false;
    this.newRemoteFrameReplicationState = null;
    this.newRemoteFrameToken = null;
    this.newRemoteFrameInterfaces = null;
    this.newRemoteMainFrameInterfaces = null;
  };
  Frame_Unload_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_Unload_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Frame_Unload_Params.newRemoteFrameReplicationState
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, frame_replication_state$.FrameReplicationState, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_Unload_Params.newRemoteFrameToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, tokens$.RemoteFrameToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_Unload_Params.newRemoteFrameInterfaces
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, remote_frame$.RemoteFrameInterfacesFromBrowser, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_Unload_Params.newRemoteMainFrameInterfaces
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, remote_frame$.RemoteMainFrameInterfaces, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_Unload_Params.encodedSize = codec.kStructHeaderSize + 40;

  Frame_Unload_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_Unload_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isLoading = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.newRemoteFrameReplicationState =
        decoder.decodeStructPointer(frame_replication_state$.FrameReplicationState);
    val.newRemoteFrameToken =
        decoder.decodeStructPointer(tokens$.RemoteFrameToken);
    val.newRemoteFrameInterfaces =
        decoder.decodeStructPointer(remote_frame$.RemoteFrameInterfacesFromBrowser);
    val.newRemoteMainFrameInterfaces =
        decoder.decodeStructPointer(remote_frame$.RemoteMainFrameInterfaces);
    return val;
  };

  Frame_Unload_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_Unload_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isLoading & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(frame_replication_state$.FrameReplicationState, val.newRemoteFrameReplicationState);
    encoder.encodeStructPointer(tokens$.RemoteFrameToken, val.newRemoteFrameToken);
    encoder.encodeStructPointer(remote_frame$.RemoteFrameInterfacesFromBrowser, val.newRemoteFrameInterfaces);
    encoder.encodeStructPointer(remote_frame$.RemoteMainFrameInterfaces, val.newRemoteMainFrameInterfaces);
  };
  function Frame_Delete_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_Delete_Params.prototype.initDefaults_ = function() {
    this.intention = 0;
  };
  Frame_Delete_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_Delete_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_Delete_Params.intention
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, FrameDeleteIntention);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_Delete_Params.encodedSize = codec.kStructHeaderSize + 8;

  Frame_Delete_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_Delete_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.intention =
        decoder.decodeStruct(new codec.Enum(FrameDeleteIntention));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Frame_Delete_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_Delete_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.intention);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Frame_UndoCommitNavigation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_UndoCommitNavigation_Params.prototype.initDefaults_ = function() {
    this.isLoading = false;
    this.newRemoteFrameReplicationState = null;
    this.newRemoteFrameToken = null;
    this.newRemoteFrameInterfaces = null;
    this.newRemoteMainFrameInterfaces = null;
  };
  Frame_UndoCommitNavigation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_UndoCommitNavigation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Frame_UndoCommitNavigation_Params.newRemoteFrameReplicationState
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, frame_replication_state$.FrameReplicationState, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_UndoCommitNavigation_Params.newRemoteFrameToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, tokens$.RemoteFrameToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_UndoCommitNavigation_Params.newRemoteFrameInterfaces
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, remote_frame$.RemoteFrameInterfacesFromBrowser, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_UndoCommitNavigation_Params.newRemoteMainFrameInterfaces
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, remote_frame$.RemoteMainFrameInterfaces, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_UndoCommitNavigation_Params.encodedSize = codec.kStructHeaderSize + 40;

  Frame_UndoCommitNavigation_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_UndoCommitNavigation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isLoading = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.newRemoteFrameReplicationState =
        decoder.decodeStructPointer(frame_replication_state$.FrameReplicationState);
    val.newRemoteFrameToken =
        decoder.decodeStructPointer(tokens$.RemoteFrameToken);
    val.newRemoteFrameInterfaces =
        decoder.decodeStructPointer(remote_frame$.RemoteFrameInterfacesFromBrowser);
    val.newRemoteMainFrameInterfaces =
        decoder.decodeStructPointer(remote_frame$.RemoteMainFrameInterfaces);
    return val;
  };

  Frame_UndoCommitNavigation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_UndoCommitNavigation_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isLoading & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(frame_replication_state$.FrameReplicationState, val.newRemoteFrameReplicationState);
    encoder.encodeStructPointer(tokens$.RemoteFrameToken, val.newRemoteFrameToken);
    encoder.encodeStructPointer(remote_frame$.RemoteFrameInterfacesFromBrowser, val.newRemoteFrameInterfaces);
    encoder.encodeStructPointer(remote_frame$.RemoteMainFrameInterfaces, val.newRemoteMainFrameInterfaces);
  };
  function Frame_GetInterfaceProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_GetInterfaceProvider_Params.prototype.initDefaults_ = function() {
    this.interfaces = new bindings.InterfaceRequest();
  };
  Frame_GetInterfaceProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_GetInterfaceProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_GetInterfaceProvider_Params.interfaces
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_GetInterfaceProvider_Params.encodedSize = codec.kStructHeaderSize + 8;

  Frame_GetInterfaceProvider_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_GetInterfaceProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.interfaces =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Frame_GetInterfaceProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_GetInterfaceProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.interfaces);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Frame_SnapshotAccessibilityTree_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_SnapshotAccessibilityTree_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  Frame_SnapshotAccessibilityTree_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_SnapshotAccessibilityTree_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_SnapshotAccessibilityTree_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SnapshotAccessibilityTreeParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_SnapshotAccessibilityTree_Params.encodedSize = codec.kStructHeaderSize + 8;

  Frame_SnapshotAccessibilityTree_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_SnapshotAccessibilityTree_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(SnapshotAccessibilityTreeParams);
    return val;
  };

  Frame_SnapshotAccessibilityTree_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_SnapshotAccessibilityTree_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SnapshotAccessibilityTreeParams, val.params);
  };
  function Frame_SnapshotAccessibilityTree_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_SnapshotAccessibilityTree_ResponseParams.prototype.initDefaults_ = function() {
    this.snapshot = null;
  };
  Frame_SnapshotAccessibilityTree_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_SnapshotAccessibilityTree_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_SnapshotAccessibilityTree_ResponseParams.snapshot
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ax_tree_update$.AXTreeUpdate, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_SnapshotAccessibilityTree_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Frame_SnapshotAccessibilityTree_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Frame_SnapshotAccessibilityTree_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.snapshot =
        decoder.decodeStructPointer(ax_tree_update$.AXTreeUpdate);
    return val;
  };

  Frame_SnapshotAccessibilityTree_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_SnapshotAccessibilityTree_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ax_tree_update$.AXTreeUpdate, val.snapshot);
  };
  function Frame_GetSerializedHtmlWithLocalLinks_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_GetSerializedHtmlWithLocalLinks_Params.prototype.initDefaults_ = function() {
    this.urlMap = null;
    this.frameTokenMap = null;
    this.saveWithEmptyUrl = false;
    this.handlerRemote = new FrameHTMLSerializerHandlerPtr();
  };
  Frame_GetSerializedHtmlWithLocalLinks_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_GetSerializedHtmlWithLocalLinks_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_GetSerializedHtmlWithLocalLinks_Params.urlMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, new codec.PointerTo(url$.Url), new codec.PointerTo(file_path$.FilePath), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_GetSerializedHtmlWithLocalLinks_Params.frameTokenMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, tokens$.FrameToken, new codec.PointerTo(file_path$.FilePath), false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Frame_GetSerializedHtmlWithLocalLinks_Params.handlerRemote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 20, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_GetSerializedHtmlWithLocalLinks_Params.encodedSize = codec.kStructHeaderSize + 32;

  Frame_GetSerializedHtmlWithLocalLinks_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_GetSerializedHtmlWithLocalLinks_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.urlMap =
        decoder.decodeMapPointer(new codec.PointerTo(url$.Url), new codec.PointerTo(file_path$.FilePath));
    val.frameTokenMap =
        decoder.decodeMapPointer(tokens$.FrameToken, new codec.PointerTo(file_path$.FilePath));
    packed = decoder.readUint8();
    val.saveWithEmptyUrl = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.handlerRemote =
        decoder.decodeStruct(new codec.Interface(FrameHTMLSerializerHandlerPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Frame_GetSerializedHtmlWithLocalLinks_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_GetSerializedHtmlWithLocalLinks_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(new codec.PointerTo(url$.Url), new codec.PointerTo(file_path$.FilePath), val.urlMap);
    encoder.encodeMapPointer(tokens$.FrameToken, new codec.PointerTo(file_path$.FilePath), val.frameTokenMap);
    packed = 0;
    packed |= (val.saveWithEmptyUrl & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(new codec.Interface(FrameHTMLSerializerHandlerPtr), val.handlerRemote);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Frame_SetResourceCache_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Frame_SetResourceCache_Params.prototype.initDefaults_ = function() {
    this.remote = new resource_cache$.ResourceCachePtr();
  };
  Frame_SetResourceCache_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Frame_SetResourceCache_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Frame_SetResourceCache_Params.remote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Frame_SetResourceCache_Params.encodedSize = codec.kStructHeaderSize + 8;

  Frame_SetResourceCache_Params.decode = function(decoder) {
    var packed;
    var val = new Frame_SetResourceCache_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remote =
        decoder.decodeStruct(new codec.Interface(resource_cache$.ResourceCachePtr));
    return val;
  };

  Frame_SetResourceCache_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Frame_SetResourceCache_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(resource_cache$.ResourceCachePtr), val.remote);
  };
  function FrameBindingsControl_AllowBindings_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameBindingsControl_AllowBindings_Params.prototype.initDefaults_ = function() {
    this.enabledBindingsFlags = 0;
  };
  FrameBindingsControl_AllowBindings_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameBindingsControl_AllowBindings_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FrameBindingsControl_AllowBindings_Params.encodedSize = codec.kStructHeaderSize + 8;

  FrameBindingsControl_AllowBindings_Params.decode = function(decoder) {
    var packed;
    var val = new FrameBindingsControl_AllowBindings_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.enabledBindingsFlags =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FrameBindingsControl_AllowBindings_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameBindingsControl_AllowBindings_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.enabledBindingsFlags);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FrameBindingsControl_EnableMojoJsBindings_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameBindingsControl_EnableMojoJsBindings_Params.prototype.initDefaults_ = function() {
    this.features = null;
  };
  FrameBindingsControl_EnableMojoJsBindings_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameBindingsControl_EnableMojoJsBindings_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameBindingsControl_EnableMojoJsBindings_Params.features
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, extra_mojo_js_features$.ExtraMojoJsFeatures, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameBindingsControl_EnableMojoJsBindings_Params.encodedSize = codec.kStructHeaderSize + 8;

  FrameBindingsControl_EnableMojoJsBindings_Params.decode = function(decoder) {
    var packed;
    var val = new FrameBindingsControl_EnableMojoJsBindings_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.features =
        decoder.decodeStructPointer(extra_mojo_js_features$.ExtraMojoJsFeatures);
    return val;
  };

  FrameBindingsControl_EnableMojoJsBindings_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameBindingsControl_EnableMojoJsBindings_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(extra_mojo_js_features$.ExtraMojoJsFeatures, val.features);
  };
  function FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params.prototype.initDefaults_ = function() {
    this.broker = new browser_interface_broker$.BrowserInterfaceBrokerPtr();
  };
  FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params.broker
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params.encodedSize = codec.kStructHeaderSize + 8;

  FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params.decode = function(decoder) {
    var packed;
    var val = new FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.broker =
        decoder.decodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr));
    return val;
  };

  FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr), val.broker);
  };
  function FrameBindingsControl_BindWebUI_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameBindingsControl_BindWebUI_Params.prototype.initDefaults_ = function() {
    this.receiver = new associatedBindings.AssociatedInterfaceRequest();
    this.remote = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  FrameBindingsControl_BindWebUI_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameBindingsControl_BindWebUI_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameBindingsControl_BindWebUI_Params.receiver
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameBindingsControl_BindWebUI_Params.remote
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameBindingsControl_BindWebUI_Params.encodedSize = codec.kStructHeaderSize + 16;

  FrameBindingsControl_BindWebUI_Params.decode = function(decoder) {
    var packed;
    var val = new FrameBindingsControl_BindWebUI_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.remote =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FrameBindingsControl_BindWebUI_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameBindingsControl_BindWebUI_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.receiver);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.remote);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params.prototype.initDefaults_ = function() {
  };
  NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params.encodedSize = codec.kStructHeaderSize + 0;

  NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params.decode = function(decoder) {
    var packed;
    var val = new NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FrameHost_CreateNewWindow_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_CreateNewWindow_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  FrameHost_CreateNewWindow_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_CreateNewWindow_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_CreateNewWindow_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, CreateNewWindowParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_CreateNewWindow_Params.encodedSize = codec.kStructHeaderSize + 8;

  FrameHost_CreateNewWindow_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_CreateNewWindow_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(CreateNewWindowParams);
    return val;
  };

  FrameHost_CreateNewWindow_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_CreateNewWindow_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(CreateNewWindowParams, val.params);
  };
  function FrameHost_CreateNewWindow_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_CreateNewWindow_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.reply = null;
  };
  FrameHost_CreateNewWindow_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_CreateNewWindow_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_CreateNewWindow_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CreateNewWindowStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_CreateNewWindow_ResponseParams.reply
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, CreateNewWindowReply, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_CreateNewWindow_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  FrameHost_CreateNewWindow_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FrameHost_CreateNewWindow_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(CreateNewWindowStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.reply =
        decoder.decodeStructPointer(CreateNewWindowReply);
    return val;
  };

  FrameHost_CreateNewWindow_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_CreateNewWindow_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(CreateNewWindowReply, val.reply);
  };
  function FrameHost_CreateChildFrame_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_CreateChildFrame_Params.prototype.initDefaults_ = function() {
    this.childRoutingId = 0;
    this.frame = new associatedBindings.AssociatedInterfacePtrInfo();
    this.browserInterfaceBroker = new bindings.InterfaceRequest();
    this.policyContainerBindParams = null;
    this.associatedInterfaceProvider = new associatedBindings.AssociatedInterfaceRequest();
    this.scope = 0;
    this.frameName = null;
    this.frameUniqueName = null;
    this.isCreatedByScript = false;
    this.childFrameOwnerElementType = 0;
    this.framePolicy = null;
    this.frameOwnerProperties = null;
    this.documentUkmSourceId = 0;
  };
  FrameHost_CreateChildFrame_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_CreateChildFrame_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 88}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate FrameHost_CreateChildFrame_Params.frame
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_CreateChildFrame_Params.browserInterfaceBroker
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 12, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_CreateChildFrame_Params.policyContainerBindParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, policy_container$.PolicyContainerBindParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_CreateChildFrame_Params.associatedInterfaceProvider
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_CreateChildFrame_Params.scope
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 28, tree_scope_type$.TreeScopeType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_CreateChildFrame_Params.frameName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_CreateChildFrame_Params.frameUniqueName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate FrameHost_CreateChildFrame_Params.framePolicy
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, frame_policy$.FramePolicy, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_CreateChildFrame_Params.frameOwnerProperties
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, frame_owner_properties$.FrameOwnerProperties, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_CreateChildFrame_Params.childFrameOwnerElementType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 52, ChildFrameOwnerElementType);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FrameHost_CreateChildFrame_Params.encodedSize = codec.kStructHeaderSize + 80;

  FrameHost_CreateChildFrame_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_CreateChildFrame_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.childRoutingId =
        decoder.decodeStruct(codec.Int32);
    val.frame =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.browserInterfaceBroker =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.policyContainerBindParams =
        decoder.decodeStructPointer(policy_container$.PolicyContainerBindParams);
    val.associatedInterfaceProvider =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.scope =
        decoder.decodeStruct(new codec.Enum(tree_scope_type$.TreeScopeType));
    val.frameName =
        decoder.decodeStruct(codec.String);
    val.frameUniqueName =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.isCreatedByScript = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.childFrameOwnerElementType =
        decoder.decodeStruct(new codec.Enum(ChildFrameOwnerElementType));
    val.framePolicy =
        decoder.decodeStructPointer(frame_policy$.FramePolicy);
    val.frameOwnerProperties =
        decoder.decodeStructPointer(frame_owner_properties$.FrameOwnerProperties);
    val.documentUkmSourceId =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  FrameHost_CreateChildFrame_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_CreateChildFrame_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.childRoutingId);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.frame);
    encoder.encodeStruct(codec.InterfaceRequest, val.browserInterfaceBroker);
    encoder.encodeStructPointer(policy_container$.PolicyContainerBindParams, val.policyContainerBindParams);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.associatedInterfaceProvider);
    encoder.encodeStruct(codec.Int32, val.scope);
    encoder.encodeStruct(codec.String, val.frameName);
    encoder.encodeStruct(codec.String, val.frameUniqueName);
    packed = 0;
    packed |= (val.isCreatedByScript & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.childFrameOwnerElementType);
    encoder.encodeStructPointer(frame_policy$.FramePolicy, val.framePolicy);
    encoder.encodeStructPointer(frame_owner_properties$.FrameOwnerProperties, val.frameOwnerProperties);
    encoder.encodeStruct(codec.Int64, val.documentUkmSourceId);
  };
  function FrameHost_DidCommitProvisionalLoad_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_DidCommitProvisionalLoad_Params.prototype.initDefaults_ = function() {
    this.params = null;
    this.interfaceParams = null;
  };
  FrameHost_DidCommitProvisionalLoad_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_DidCommitProvisionalLoad_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_DidCommitProvisionalLoad_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, navigation_client$.DidCommitProvisionalLoadParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_DidCommitProvisionalLoad_Params.interfaceParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, frame_messages$.DidCommitProvisionalLoadInterfaceParams, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_DidCommitProvisionalLoad_Params.encodedSize = codec.kStructHeaderSize + 16;

  FrameHost_DidCommitProvisionalLoad_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_DidCommitProvisionalLoad_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(navigation_client$.DidCommitProvisionalLoadParams);
    val.interfaceParams =
        decoder.decodeStructPointer(frame_messages$.DidCommitProvisionalLoadInterfaceParams);
    return val;
  };

  FrameHost_DidCommitProvisionalLoad_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_DidCommitProvisionalLoad_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(navigation_client$.DidCommitProvisionalLoadParams, val.params);
    encoder.encodeStructPointer(frame_messages$.DidCommitProvisionalLoadInterfaceParams, val.interfaceParams);
  };
  function FrameHost_DidCommitSameDocumentNavigation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_DidCommitSameDocumentNavigation_Params.prototype.initDefaults_ = function() {
    this.params = null;
    this.sameDocumentParams = null;
  };
  FrameHost_DidCommitSameDocumentNavigation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_DidCommitSameDocumentNavigation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_DidCommitSameDocumentNavigation_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, navigation_client$.DidCommitProvisionalLoadParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_DidCommitSameDocumentNavigation_Params.sameDocumentParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, navigation_client$.DidCommitSameDocumentNavigationParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_DidCommitSameDocumentNavigation_Params.encodedSize = codec.kStructHeaderSize + 16;

  FrameHost_DidCommitSameDocumentNavigation_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_DidCommitSameDocumentNavigation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(navigation_client$.DidCommitProvisionalLoadParams);
    val.sameDocumentParams =
        decoder.decodeStructPointer(navigation_client$.DidCommitSameDocumentNavigationParams);
    return val;
  };

  FrameHost_DidCommitSameDocumentNavigation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_DidCommitSameDocumentNavigation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(navigation_client$.DidCommitProvisionalLoadParams, val.params);
    encoder.encodeStructPointer(navigation_client$.DidCommitSameDocumentNavigationParams, val.sameDocumentParams);
  };
  function FrameHost_DidOpenDocumentInputStream_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_DidOpenDocumentInputStream_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  FrameHost_DidOpenDocumentInputStream_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_DidOpenDocumentInputStream_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_DidOpenDocumentInputStream_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_DidOpenDocumentInputStream_Params.encodedSize = codec.kStructHeaderSize + 8;

  FrameHost_DidOpenDocumentInputStream_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_DidOpenDocumentInputStream_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  FrameHost_DidOpenDocumentInputStream_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_DidOpenDocumentInputStream_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function FrameHost_BeginNavigation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_BeginNavigation_Params.prototype.initDefaults_ = function() {
    this.commonParams = null;
    this.beginParams = null;
    this.blobUrlToken = new blob_url_store$.BlobURLTokenPtr();
    this.navigationClient = new associatedBindings.AssociatedInterfacePtrInfo();
    this.initiatorPolicyContainerKeepAliveHandle = new policy_container$.PolicyContainerHostKeepAliveHandlePtr();
    this.rendererCancellationListener = new bindings.InterfaceRequest();
  };
  FrameHost_BeginNavigation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_BeginNavigation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_BeginNavigation_Params.commonParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, navigation_params$.CommonNavigationParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_BeginNavigation_Params.beginParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, navigation_params$.BeginNavigationParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_BeginNavigation_Params.blobUrlToken
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 16, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_BeginNavigation_Params.navigationClient
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 24, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_BeginNavigation_Params.initiatorPolicyContainerKeepAliveHandle
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 32, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_BeginNavigation_Params.rendererCancellationListener
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_BeginNavigation_Params.encodedSize = codec.kStructHeaderSize + 48;

  FrameHost_BeginNavigation_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_BeginNavigation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.commonParams =
        decoder.decodeStructPointer(navigation_params$.CommonNavigationParams);
    val.beginParams =
        decoder.decodeStructPointer(navigation_params$.BeginNavigationParams);
    val.blobUrlToken =
        decoder.decodeStruct(new codec.NullableInterface(blob_url_store$.BlobURLTokenPtr));
    val.navigationClient =
        decoder.decodeStruct(codec.NullableAssociatedInterfacePtrInfo);
    val.initiatorPolicyContainerKeepAliveHandle =
        decoder.decodeStruct(new codec.NullableInterface(policy_container$.PolicyContainerHostKeepAliveHandlePtr));
    val.rendererCancellationListener =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FrameHost_BeginNavigation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_BeginNavigation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(navigation_params$.CommonNavigationParams, val.commonParams);
    encoder.encodeStructPointer(navigation_params$.BeginNavigationParams, val.beginParams);
    encoder.encodeStruct(new codec.NullableInterface(blob_url_store$.BlobURLTokenPtr), val.blobUrlToken);
    encoder.encodeStruct(codec.NullableAssociatedInterfacePtrInfo, val.navigationClient);
    encoder.encodeStruct(new codec.NullableInterface(policy_container$.PolicyContainerHostKeepAliveHandlePtr), val.initiatorPolicyContainerKeepAliveHandle);
    encoder.encodeStruct(codec.InterfaceRequest, val.rendererCancellationListener);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FrameHost_SubresourceResponseStarted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_SubresourceResponseStarted_Params.prototype.initDefaults_ = function() {
    this.finalResponseUrl = null;
    this.certStatus = 0;
  };
  FrameHost_SubresourceResponseStarted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_SubresourceResponseStarted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_SubresourceResponseStarted_Params.finalResponseUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, scheme_host_port$.SchemeHostPort, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FrameHost_SubresourceResponseStarted_Params.encodedSize = codec.kStructHeaderSize + 16;

  FrameHost_SubresourceResponseStarted_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_SubresourceResponseStarted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.finalResponseUrl =
        decoder.decodeStructPointer(scheme_host_port$.SchemeHostPort);
    val.certStatus =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FrameHost_SubresourceResponseStarted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_SubresourceResponseStarted_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(scheme_host_port$.SchemeHostPort, val.finalResponseUrl);
    encoder.encodeStruct(codec.Uint32, val.certStatus);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FrameHost_ResourceLoadComplete_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_ResourceLoadComplete_Params.prototype.initDefaults_ = function() {
    this.urlLoadInfo = null;
  };
  FrameHost_ResourceLoadComplete_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_ResourceLoadComplete_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_ResourceLoadComplete_Params.urlLoadInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, resource_load_info$.ResourceLoadInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_ResourceLoadComplete_Params.encodedSize = codec.kStructHeaderSize + 8;

  FrameHost_ResourceLoadComplete_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_ResourceLoadComplete_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.urlLoadInfo =
        decoder.decodeStructPointer(resource_load_info$.ResourceLoadInfo);
    return val;
  };

  FrameHost_ResourceLoadComplete_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_ResourceLoadComplete_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(resource_load_info$.ResourceLoadInfo, val.urlLoadInfo);
  };
  function FrameHost_DidChangeName_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_DidChangeName_Params.prototype.initDefaults_ = function() {
    this.name = null;
    this.uniqueName = null;
  };
  FrameHost_DidChangeName_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_DidChangeName_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_DidChangeName_Params.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_DidChangeName_Params.uniqueName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_DidChangeName_Params.encodedSize = codec.kStructHeaderSize + 16;

  FrameHost_DidChangeName_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_DidChangeName_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.uniqueName =
        decoder.decodeStruct(codec.String);
    return val;
  };

  FrameHost_DidChangeName_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_DidChangeName_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.String, val.uniqueName);
  };
  function FrameHost_CancelInitialHistoryLoad_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_CancelInitialHistoryLoad_Params.prototype.initDefaults_ = function() {
  };
  FrameHost_CancelInitialHistoryLoad_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_CancelInitialHistoryLoad_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_CancelInitialHistoryLoad_Params.encodedSize = codec.kStructHeaderSize + 0;

  FrameHost_CancelInitialHistoryLoad_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_CancelInitialHistoryLoad_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FrameHost_CancelInitialHistoryLoad_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_CancelInitialHistoryLoad_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FrameHost_UpdateEncoding_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_UpdateEncoding_Params.prototype.initDefaults_ = function() {
    this.encodingName = null;
  };
  FrameHost_UpdateEncoding_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_UpdateEncoding_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_UpdateEncoding_Params.encodingName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_UpdateEncoding_Params.encodedSize = codec.kStructHeaderSize + 8;

  FrameHost_UpdateEncoding_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_UpdateEncoding_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.encodingName =
        decoder.decodeStruct(codec.String);
    return val;
  };

  FrameHost_UpdateEncoding_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_UpdateEncoding_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.encodingName);
  };
  function FrameHost_UpdateState_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_UpdateState_Params.prototype.initDefaults_ = function() {
    this.state = null;
  };
  FrameHost_UpdateState_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_UpdateState_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_UpdateState_Params.state
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, navigation_client$.PageState, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_UpdateState_Params.encodedSize = codec.kStructHeaderSize + 8;

  FrameHost_UpdateState_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_UpdateState_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.state =
        decoder.decodeStructPointer(navigation_client$.PageState);
    return val;
  };

  FrameHost_UpdateState_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_UpdateState_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(navigation_client$.PageState, val.state);
  };
  function FrameHost_OpenURL_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_OpenURL_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  FrameHost_OpenURL_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_OpenURL_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHost_OpenURL_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, remote_frame$.OpenURLParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_OpenURL_Params.encodedSize = codec.kStructHeaderSize + 8;

  FrameHost_OpenURL_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_OpenURL_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(remote_frame$.OpenURLParams);
    return val;
  };

  FrameHost_OpenURL_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_OpenURL_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(remote_frame$.OpenURLParams, val.params);
  };
  function FrameHost_DidStopLoading_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHost_DidStopLoading_Params.prototype.initDefaults_ = function() {
  };
  FrameHost_DidStopLoading_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHost_DidStopLoading_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHost_DidStopLoading_Params.encodedSize = codec.kStructHeaderSize + 0;

  FrameHost_DidStopLoading_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHost_DidStopLoading_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FrameHost_DidStopLoading_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHost_DidStopLoading_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function CreateMainFrameUnion(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  CreateMainFrameUnion.Tags = {
    localParams: 0,
    remoteParams: 1,
  };

  CreateMainFrameUnion.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  CreateMainFrameUnion.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "localParams",
        "remoteParams",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a CreateMainFrameUnion member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(CreateMainFrameUnion.prototype, "localParams", {
    get: function() {
      if (this.$tag != CreateMainFrameUnion.Tags.localParams) {
        throw new ReferenceError(
            "CreateMainFrameUnion.localParams is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = CreateMainFrameUnion.Tags.localParams;
      this.$data = value;
    }
  });
  Object.defineProperty(CreateMainFrameUnion.prototype, "remoteParams", {
    get: function() {
      if (this.$tag != CreateMainFrameUnion.Tags.remoteParams) {
        throw new ReferenceError(
            "CreateMainFrameUnion.remoteParams is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = CreateMainFrameUnion.Tags.remoteParams;
      this.$data = value;
    }
  });


    CreateMainFrameUnion.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case CreateMainFrameUnion.Tags.localParams:
          encoder.encodeStructPointer(CreateLocalMainFrameParams, val.localParams);
          break;
        case CreateMainFrameUnion.Tags.remoteParams:
          encoder.encodeStructPointer(CreateRemoteMainFrameParams, val.remoteParams);
          break;
      }
      encoder.align();
    };


    CreateMainFrameUnion.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new CreateMainFrameUnion();
      var tag = decoder.readUint32();
      switch (tag) {
        case CreateMainFrameUnion.Tags.localParams:
          result.localParams = decoder.decodeStructPointer(CreateLocalMainFrameParams);
          break;
        case CreateMainFrameUnion.Tags.remoteParams:
          result.remoteParams = decoder.decodeStructPointer(CreateRemoteMainFrameParams);
          break;
      }
      decoder.align();

      return result;
    };


    CreateMainFrameUnion.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case CreateMainFrameUnion.Tags.localParams:
          

    // validate CreateMainFrameUnion.localParams
    err = messageValidator.validateStructPointer(data_offset, CreateLocalMainFrameParams, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case CreateMainFrameUnion.Tags.remoteParams:
          

    // validate CreateMainFrameUnion.remoteParams
    err = messageValidator.validateStructPointer(data_offset, CreateRemoteMainFrameParams, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  CreateMainFrameUnion.encodedSize = 16;
  var kFrameHTMLSerializerHandler_DidReceiveData_Name = 1571611091;
  var kFrameHTMLSerializerHandler_Done_Name = 1233805631;

  function FrameHTMLSerializerHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FrameHTMLSerializerHandler,
                                                   handleOrPtrInfo);
  }

  function FrameHTMLSerializerHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FrameHTMLSerializerHandler, associatedInterfacePtrInfo);
  }

  FrameHTMLSerializerHandlerAssociatedPtr.prototype =
      Object.create(FrameHTMLSerializerHandlerPtr.prototype);
  FrameHTMLSerializerHandlerAssociatedPtr.prototype.constructor =
      FrameHTMLSerializerHandlerAssociatedPtr;

  function FrameHTMLSerializerHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  FrameHTMLSerializerHandlerPtr.prototype.didReceiveData = function() {
    return FrameHTMLSerializerHandlerProxy.prototype.didReceiveData
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHTMLSerializerHandlerProxy.prototype.didReceiveData = function(dataBuffer) {
    var params_ = new FrameHTMLSerializerHandler_DidReceiveData_Params();
    params_.dataBuffer = dataBuffer;
    var builder = new codec.MessageV0Builder(
        kFrameHTMLSerializerHandler_DidReceiveData_Name,
        codec.align(FrameHTMLSerializerHandler_DidReceiveData_Params.encodedSize));
    builder.encodeStruct(FrameHTMLSerializerHandler_DidReceiveData_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHTMLSerializerHandlerPtr.prototype.done = function() {
    return FrameHTMLSerializerHandlerProxy.prototype.done
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHTMLSerializerHandlerProxy.prototype.done = function() {
    var params_ = new FrameHTMLSerializerHandler_Done_Params();
    var builder = new codec.MessageV0Builder(
        kFrameHTMLSerializerHandler_Done_Name,
        codec.align(FrameHTMLSerializerHandler_Done_Params.encodedSize));
    builder.encodeStruct(FrameHTMLSerializerHandler_Done_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function FrameHTMLSerializerHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  FrameHTMLSerializerHandlerStub.prototype.didReceiveData = function(dataBuffer) {
    return this.delegate_ && this.delegate_.didReceiveData && this.delegate_.didReceiveData(dataBuffer);
  }
  FrameHTMLSerializerHandlerStub.prototype.done = function() {
    return this.delegate_ && this.delegate_.done && this.delegate_.done();
  }

  FrameHTMLSerializerHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFrameHTMLSerializerHandler_DidReceiveData_Name:
      var params = reader.decodeStruct(FrameHTMLSerializerHandler_DidReceiveData_Params);
      this.didReceiveData(params.dataBuffer);
      return true;
    case kFrameHTMLSerializerHandler_Done_Name:
      var params = reader.decodeStruct(FrameHTMLSerializerHandler_Done_Params);
      this.done();
      return true;
    default:
      return false;
    }
  };

  FrameHTMLSerializerHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateFrameHTMLSerializerHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFrameHTMLSerializerHandler_DidReceiveData_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHTMLSerializerHandler_DidReceiveData_Params;
      break;
      case kFrameHTMLSerializerHandler_Done_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHTMLSerializerHandler_Done_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFrameHTMLSerializerHandlerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var FrameHTMLSerializerHandler = {
    name: 'content.mojom.FrameHTMLSerializerHandler',
    kVersion: 0,
    ptrClass: FrameHTMLSerializerHandlerPtr,
    proxyClass: FrameHTMLSerializerHandlerProxy,
    stubClass: FrameHTMLSerializerHandlerStub,
    validateRequest: validateFrameHTMLSerializerHandlerRequest,
    validateResponse: null,
  };
  FrameHTMLSerializerHandlerStub.prototype.validator = validateFrameHTMLSerializerHandlerRequest;
  FrameHTMLSerializerHandlerProxy.prototype.validator = null;
  var kFrame_CommitSameDocumentNavigation_Name = 1200196346;
  var kFrame_UpdateSubresourceLoaderFactories_Name = 610581349;
  var kFrame_SetWantErrorMessageStackTrace_Name = 529610648;
  var kFrame_Unload_Name = 2122062529;
  var kFrame_Delete_Name = 87422940;
  var kFrame_UndoCommitNavigation_Name = 49212573;
  var kFrame_GetInterfaceProvider_Name = 663626908;
  var kFrame_SnapshotAccessibilityTree_Name = 1374450865;
  var kFrame_GetSerializedHtmlWithLocalLinks_Name = 455363507;
  var kFrame_SetResourceCache_Name = 396066231;

  function FramePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Frame,
                                                   handleOrPtrInfo);
  }

  function FrameAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Frame, associatedInterfacePtrInfo);
  }

  FrameAssociatedPtr.prototype =
      Object.create(FramePtr.prototype);
  FrameAssociatedPtr.prototype.constructor =
      FrameAssociatedPtr;

  function FrameProxy(receiver) {
    this.receiver_ = receiver;
  }
  FramePtr.prototype.commitSameDocumentNavigation = function() {
    return FrameProxy.prototype.commitSameDocumentNavigation
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.commitSameDocumentNavigation = function(commonParams, requestParams) {
    var params_ = new Frame_CommitSameDocumentNavigation_Params();
    params_.commonParams = commonParams;
    params_.requestParams = requestParams;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFrame_CommitSameDocumentNavigation_Name,
          codec.align(Frame_CommitSameDocumentNavigation_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Frame_CommitSameDocumentNavigation_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Frame_CommitSameDocumentNavigation_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FramePtr.prototype.updateSubresourceLoaderFactories = function() {
    return FrameProxy.prototype.updateSubresourceLoaderFactories
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.updateSubresourceLoaderFactories = function(subresourceLoaderFactories) {
    var params_ = new Frame_UpdateSubresourceLoaderFactories_Params();
    params_.subresourceLoaderFactories = subresourceLoaderFactories;
    var builder = new codec.MessageV0Builder(
        kFrame_UpdateSubresourceLoaderFactories_Name,
        codec.align(Frame_UpdateSubresourceLoaderFactories_Params.encodedSize));
    builder.encodeStruct(Frame_UpdateSubresourceLoaderFactories_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FramePtr.prototype.setWantErrorMessageStackTrace = function() {
    return FrameProxy.prototype.setWantErrorMessageStackTrace
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.setWantErrorMessageStackTrace = function() {
    var params_ = new Frame_SetWantErrorMessageStackTrace_Params();
    var builder = new codec.MessageV0Builder(
        kFrame_SetWantErrorMessageStackTrace_Name,
        codec.align(Frame_SetWantErrorMessageStackTrace_Params.encodedSize));
    builder.encodeStruct(Frame_SetWantErrorMessageStackTrace_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FramePtr.prototype.unload = function() {
    return FrameProxy.prototype.unload
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.unload = function(isLoading, newRemoteFrameReplicationState, newRemoteFrameToken, newRemoteFrameInterfaces, newRemoteMainFrameInterfaces) {
    var params_ = new Frame_Unload_Params();
    params_.isLoading = isLoading;
    params_.newRemoteFrameReplicationState = newRemoteFrameReplicationState;
    params_.newRemoteFrameToken = newRemoteFrameToken;
    params_.newRemoteFrameInterfaces = newRemoteFrameInterfaces;
    params_.newRemoteMainFrameInterfaces = newRemoteMainFrameInterfaces;
    var builder = new codec.MessageV2Builder(
        kFrame_Unload_Name,
        codec.align(Frame_Unload_Params.encodedSize));
    builder.setPayload(Frame_Unload_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FramePtr.prototype.delete = function() {
    return FrameProxy.prototype.delete
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.delete = function(intention) {
    var params_ = new Frame_Delete_Params();
    params_.intention = intention;
    var builder = new codec.MessageV0Builder(
        kFrame_Delete_Name,
        codec.align(Frame_Delete_Params.encodedSize));
    builder.encodeStruct(Frame_Delete_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FramePtr.prototype.undoCommitNavigation = function() {
    return FrameProxy.prototype.undoCommitNavigation
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.undoCommitNavigation = function(isLoading, newRemoteFrameReplicationState, newRemoteFrameToken, newRemoteFrameInterfaces, newRemoteMainFrameInterfaces) {
    var params_ = new Frame_UndoCommitNavigation_Params();
    params_.isLoading = isLoading;
    params_.newRemoteFrameReplicationState = newRemoteFrameReplicationState;
    params_.newRemoteFrameToken = newRemoteFrameToken;
    params_.newRemoteFrameInterfaces = newRemoteFrameInterfaces;
    params_.newRemoteMainFrameInterfaces = newRemoteMainFrameInterfaces;
    var builder = new codec.MessageV2Builder(
        kFrame_UndoCommitNavigation_Name,
        codec.align(Frame_UndoCommitNavigation_Params.encodedSize));
    builder.setPayload(Frame_UndoCommitNavigation_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FramePtr.prototype.getInterfaceProvider = function() {
    return FrameProxy.prototype.getInterfaceProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.getInterfaceProvider = function(interfaces) {
    var params_ = new Frame_GetInterfaceProvider_Params();
    params_.interfaces = interfaces;
    var builder = new codec.MessageV0Builder(
        kFrame_GetInterfaceProvider_Name,
        codec.align(Frame_GetInterfaceProvider_Params.encodedSize));
    builder.encodeStruct(Frame_GetInterfaceProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FramePtr.prototype.snapshotAccessibilityTree = function() {
    return FrameProxy.prototype.snapshotAccessibilityTree
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.snapshotAccessibilityTree = function(params) {
    var params_ = new Frame_SnapshotAccessibilityTree_Params();
    params_.params = params;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFrame_SnapshotAccessibilityTree_Name,
          codec.align(Frame_SnapshotAccessibilityTree_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Frame_SnapshotAccessibilityTree_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Frame_SnapshotAccessibilityTree_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FramePtr.prototype.getSerializedHtmlWithLocalLinks = function() {
    return FrameProxy.prototype.getSerializedHtmlWithLocalLinks
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.getSerializedHtmlWithLocalLinks = function(urlMap, frameTokenMap, saveWithEmptyUrl, handlerRemote) {
    var params_ = new Frame_GetSerializedHtmlWithLocalLinks_Params();
    params_.urlMap = urlMap;
    params_.frameTokenMap = frameTokenMap;
    params_.saveWithEmptyUrl = saveWithEmptyUrl;
    params_.handlerRemote = handlerRemote;
    var builder = new codec.MessageV0Builder(
        kFrame_GetSerializedHtmlWithLocalLinks_Name,
        codec.align(Frame_GetSerializedHtmlWithLocalLinks_Params.encodedSize));
    builder.encodeStruct(Frame_GetSerializedHtmlWithLocalLinks_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FramePtr.prototype.setResourceCache = function() {
    return FrameProxy.prototype.setResourceCache
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameProxy.prototype.setResourceCache = function(remote) {
    var params_ = new Frame_SetResourceCache_Params();
    params_.remote = remote;
    var builder = new codec.MessageV0Builder(
        kFrame_SetResourceCache_Name,
        codec.align(Frame_SetResourceCache_Params.encodedSize));
    builder.encodeStruct(Frame_SetResourceCache_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function FrameStub(delegate) {
    this.delegate_ = delegate;
  }
  FrameStub.prototype.commitSameDocumentNavigation = function(commonParams, requestParams) {
    return this.delegate_ && this.delegate_.commitSameDocumentNavigation && this.delegate_.commitSameDocumentNavigation(commonParams, requestParams);
  }
  FrameStub.prototype.updateSubresourceLoaderFactories = function(subresourceLoaderFactories) {
    return this.delegate_ && this.delegate_.updateSubresourceLoaderFactories && this.delegate_.updateSubresourceLoaderFactories(subresourceLoaderFactories);
  }
  FrameStub.prototype.setWantErrorMessageStackTrace = function() {
    return this.delegate_ && this.delegate_.setWantErrorMessageStackTrace && this.delegate_.setWantErrorMessageStackTrace();
  }
  FrameStub.prototype.unload = function(isLoading, newRemoteFrameReplicationState, newRemoteFrameToken, newRemoteFrameInterfaces, newRemoteMainFrameInterfaces) {
    return this.delegate_ && this.delegate_.unload && this.delegate_.unload(isLoading, newRemoteFrameReplicationState, newRemoteFrameToken, newRemoteFrameInterfaces, newRemoteMainFrameInterfaces);
  }
  FrameStub.prototype.delete = function(intention) {
    return this.delegate_ && this.delegate_.delete && this.delegate_.delete(intention);
  }
  FrameStub.prototype.undoCommitNavigation = function(isLoading, newRemoteFrameReplicationState, newRemoteFrameToken, newRemoteFrameInterfaces, newRemoteMainFrameInterfaces) {
    return this.delegate_ && this.delegate_.undoCommitNavigation && this.delegate_.undoCommitNavigation(isLoading, newRemoteFrameReplicationState, newRemoteFrameToken, newRemoteFrameInterfaces, newRemoteMainFrameInterfaces);
  }
  FrameStub.prototype.getInterfaceProvider = function(interfaces) {
    return this.delegate_ && this.delegate_.getInterfaceProvider && this.delegate_.getInterfaceProvider(interfaces);
  }
  FrameStub.prototype.snapshotAccessibilityTree = function(params) {
    return this.delegate_ && this.delegate_.snapshotAccessibilityTree && this.delegate_.snapshotAccessibilityTree(params);
  }
  FrameStub.prototype.getSerializedHtmlWithLocalLinks = function(urlMap, frameTokenMap, saveWithEmptyUrl, handlerRemote) {
    return this.delegate_ && this.delegate_.getSerializedHtmlWithLocalLinks && this.delegate_.getSerializedHtmlWithLocalLinks(urlMap, frameTokenMap, saveWithEmptyUrl, handlerRemote);
  }
  FrameStub.prototype.setResourceCache = function(remote) {
    return this.delegate_ && this.delegate_.setResourceCache && this.delegate_.setResourceCache(remote);
  }

  FrameStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFrame_UpdateSubresourceLoaderFactories_Name:
      var params = reader.decodeStruct(Frame_UpdateSubresourceLoaderFactories_Params);
      this.updateSubresourceLoaderFactories(params.subresourceLoaderFactories);
      return true;
    case kFrame_SetWantErrorMessageStackTrace_Name:
      var params = reader.decodeStruct(Frame_SetWantErrorMessageStackTrace_Params);
      this.setWantErrorMessageStackTrace();
      return true;
    case kFrame_Unload_Name:
      var params = reader.decodeStruct(Frame_Unload_Params);
      this.unload(params.isLoading, params.newRemoteFrameReplicationState, params.newRemoteFrameToken, params.newRemoteFrameInterfaces, params.newRemoteMainFrameInterfaces);
      return true;
    case kFrame_Delete_Name:
      var params = reader.decodeStruct(Frame_Delete_Params);
      this.delete(params.intention);
      return true;
    case kFrame_UndoCommitNavigation_Name:
      var params = reader.decodeStruct(Frame_UndoCommitNavigation_Params);
      this.undoCommitNavigation(params.isLoading, params.newRemoteFrameReplicationState, params.newRemoteFrameToken, params.newRemoteFrameInterfaces, params.newRemoteMainFrameInterfaces);
      return true;
    case kFrame_GetInterfaceProvider_Name:
      var params = reader.decodeStruct(Frame_GetInterfaceProvider_Params);
      this.getInterfaceProvider(params.interfaces);
      return true;
    case kFrame_GetSerializedHtmlWithLocalLinks_Name:
      var params = reader.decodeStruct(Frame_GetSerializedHtmlWithLocalLinks_Params);
      this.getSerializedHtmlWithLocalLinks(params.urlMap, params.frameTokenMap, params.saveWithEmptyUrl, params.handlerRemote);
      return true;
    case kFrame_SetResourceCache_Name:
      var params = reader.decodeStruct(Frame_SetResourceCache_Params);
      this.setResourceCache(params.remote);
      return true;
    default:
      return false;
    }
  };

  FrameStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFrame_CommitSameDocumentNavigation_Name:
      var params = reader.decodeStruct(Frame_CommitSameDocumentNavigation_Params);
      this.commitSameDocumentNavigation(params.commonParams, params.requestParams).then(function(response) {
        var responseParams =
            new Frame_CommitSameDocumentNavigation_ResponseParams();
        responseParams.commitResult = response.commitResult;
        var builder = new codec.MessageV1Builder(
            kFrame_CommitSameDocumentNavigation_Name,
            codec.align(Frame_CommitSameDocumentNavigation_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Frame_CommitSameDocumentNavigation_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFrame_SnapshotAccessibilityTree_Name:
      var params = reader.decodeStruct(Frame_SnapshotAccessibilityTree_Params);
      this.snapshotAccessibilityTree(params.params).then(function(response) {
        var responseParams =
            new Frame_SnapshotAccessibilityTree_ResponseParams();
        responseParams.snapshot = response.snapshot;
        var builder = new codec.MessageV1Builder(
            kFrame_SnapshotAccessibilityTree_Name,
            codec.align(Frame_SnapshotAccessibilityTree_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Frame_SnapshotAccessibilityTree_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFrameRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFrame_CommitSameDocumentNavigation_Name:
        if (message.expectsResponse())
          paramsClass = Frame_CommitSameDocumentNavigation_Params;
      break;
      case kFrame_UpdateSubresourceLoaderFactories_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Frame_UpdateSubresourceLoaderFactories_Params;
      break;
      case kFrame_SetWantErrorMessageStackTrace_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Frame_SetWantErrorMessageStackTrace_Params;
      break;
      case kFrame_Unload_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Frame_Unload_Params;
      break;
      case kFrame_Delete_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Frame_Delete_Params;
      break;
      case kFrame_UndoCommitNavigation_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Frame_UndoCommitNavigation_Params;
      break;
      case kFrame_GetInterfaceProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Frame_GetInterfaceProvider_Params;
      break;
      case kFrame_SnapshotAccessibilityTree_Name:
        if (message.expectsResponse())
          paramsClass = Frame_SnapshotAccessibilityTree_Params;
      break;
      case kFrame_GetSerializedHtmlWithLocalLinks_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Frame_GetSerializedHtmlWithLocalLinks_Params;
      break;
      case kFrame_SetResourceCache_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Frame_SetResourceCache_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFrameResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFrame_CommitSameDocumentNavigation_Name:
        if (message.isResponse())
          paramsClass = Frame_CommitSameDocumentNavigation_ResponseParams;
        break;
      case kFrame_SnapshotAccessibilityTree_Name:
        if (message.isResponse())
          paramsClass = Frame_SnapshotAccessibilityTree_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Frame = {
    name: 'content.mojom.Frame',
    kVersion: 0,
    ptrClass: FramePtr,
    proxyClass: FrameProxy,
    stubClass: FrameStub,
    validateRequest: validateFrameRequest,
    validateResponse: validateFrameResponse,
  };
  FrameStub.prototype.validator = validateFrameRequest;
  FrameProxy.prototype.validator = validateFrameResponse;
  var kFrameBindingsControl_AllowBindings_Name = 463389521;
  var kFrameBindingsControl_EnableMojoJsBindings_Name = 1980579019;
  var kFrameBindingsControl_EnableMojoJsBindingsWithBroker_Name = 477214468;
  var kFrameBindingsControl_BindWebUI_Name = 448514205;

  function FrameBindingsControlPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FrameBindingsControl,
                                                   handleOrPtrInfo);
  }

  function FrameBindingsControlAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FrameBindingsControl, associatedInterfacePtrInfo);
  }

  FrameBindingsControlAssociatedPtr.prototype =
      Object.create(FrameBindingsControlPtr.prototype);
  FrameBindingsControlAssociatedPtr.prototype.constructor =
      FrameBindingsControlAssociatedPtr;

  function FrameBindingsControlProxy(receiver) {
    this.receiver_ = receiver;
  }
  FrameBindingsControlPtr.prototype.allowBindings = function() {
    return FrameBindingsControlProxy.prototype.allowBindings
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameBindingsControlProxy.prototype.allowBindings = function(enabledBindingsFlags) {
    var params_ = new FrameBindingsControl_AllowBindings_Params();
    params_.enabledBindingsFlags = enabledBindingsFlags;
    var builder = new codec.MessageV0Builder(
        kFrameBindingsControl_AllowBindings_Name,
        codec.align(FrameBindingsControl_AllowBindings_Params.encodedSize));
    builder.encodeStruct(FrameBindingsControl_AllowBindings_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameBindingsControlPtr.prototype.enableMojoJsBindings = function() {
    return FrameBindingsControlProxy.prototype.enableMojoJsBindings
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameBindingsControlProxy.prototype.enableMojoJsBindings = function(features) {
    var params_ = new FrameBindingsControl_EnableMojoJsBindings_Params();
    params_.features = features;
    var builder = new codec.MessageV0Builder(
        kFrameBindingsControl_EnableMojoJsBindings_Name,
        codec.align(FrameBindingsControl_EnableMojoJsBindings_Params.encodedSize));
    builder.encodeStruct(FrameBindingsControl_EnableMojoJsBindings_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameBindingsControlPtr.prototype.enableMojoJsBindingsWithBroker = function() {
    return FrameBindingsControlProxy.prototype.enableMojoJsBindingsWithBroker
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameBindingsControlProxy.prototype.enableMojoJsBindingsWithBroker = function(broker) {
    var params_ = new FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params();
    params_.broker = broker;
    var builder = new codec.MessageV0Builder(
        kFrameBindingsControl_EnableMojoJsBindingsWithBroker_Name,
        codec.align(FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params.encodedSize));
    builder.encodeStruct(FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameBindingsControlPtr.prototype.bindWebUI = function() {
    return FrameBindingsControlProxy.prototype.bindWebUI
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameBindingsControlProxy.prototype.bindWebUI = function(receiver, remote) {
    var params_ = new FrameBindingsControl_BindWebUI_Params();
    params_.receiver = receiver;
    params_.remote = remote;
    var builder = new codec.MessageV2Builder(
        kFrameBindingsControl_BindWebUI_Name,
        codec.align(FrameBindingsControl_BindWebUI_Params.encodedSize));
    builder.setPayload(FrameBindingsControl_BindWebUI_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function FrameBindingsControlStub(delegate) {
    this.delegate_ = delegate;
  }
  FrameBindingsControlStub.prototype.allowBindings = function(enabledBindingsFlags) {
    return this.delegate_ && this.delegate_.allowBindings && this.delegate_.allowBindings(enabledBindingsFlags);
  }
  FrameBindingsControlStub.prototype.enableMojoJsBindings = function(features) {
    return this.delegate_ && this.delegate_.enableMojoJsBindings && this.delegate_.enableMojoJsBindings(features);
  }
  FrameBindingsControlStub.prototype.enableMojoJsBindingsWithBroker = function(broker) {
    return this.delegate_ && this.delegate_.enableMojoJsBindingsWithBroker && this.delegate_.enableMojoJsBindingsWithBroker(broker);
  }
  FrameBindingsControlStub.prototype.bindWebUI = function(receiver, remote) {
    return this.delegate_ && this.delegate_.bindWebUI && this.delegate_.bindWebUI(receiver, remote);
  }

  FrameBindingsControlStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFrameBindingsControl_AllowBindings_Name:
      var params = reader.decodeStruct(FrameBindingsControl_AllowBindings_Params);
      this.allowBindings(params.enabledBindingsFlags);
      return true;
    case kFrameBindingsControl_EnableMojoJsBindings_Name:
      var params = reader.decodeStruct(FrameBindingsControl_EnableMojoJsBindings_Params);
      this.enableMojoJsBindings(params.features);
      return true;
    case kFrameBindingsControl_EnableMojoJsBindingsWithBroker_Name:
      var params = reader.decodeStruct(FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params);
      this.enableMojoJsBindingsWithBroker(params.broker);
      return true;
    case kFrameBindingsControl_BindWebUI_Name:
      var params = reader.decodeStruct(FrameBindingsControl_BindWebUI_Params);
      this.bindWebUI(params.receiver, params.remote);
      return true;
    default:
      return false;
    }
  };

  FrameBindingsControlStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateFrameBindingsControlRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFrameBindingsControl_AllowBindings_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameBindingsControl_AllowBindings_Params;
      break;
      case kFrameBindingsControl_EnableMojoJsBindings_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameBindingsControl_EnableMojoJsBindings_Params;
      break;
      case kFrameBindingsControl_EnableMojoJsBindingsWithBroker_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params;
      break;
      case kFrameBindingsControl_BindWebUI_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameBindingsControl_BindWebUI_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFrameBindingsControlResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var FrameBindingsControl = {
    name: 'content.mojom.FrameBindingsControl',
    kVersion: 0,
    ptrClass: FrameBindingsControlPtr,
    proxyClass: FrameBindingsControlProxy,
    stubClass: FrameBindingsControlStub,
    validateRequest: validateFrameBindingsControlRequest,
    validateResponse: null,
  };
  FrameBindingsControlStub.prototype.validator = validateFrameBindingsControlRequest;
  FrameBindingsControlProxy.prototype.validator = null;
  var kNavigationRendererCancellationListener_RendererCancellationWindowEnded_Name = 1491796807;

  function NavigationRendererCancellationListenerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(NavigationRendererCancellationListener,
                                                   handleOrPtrInfo);
  }

  function NavigationRendererCancellationListenerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        NavigationRendererCancellationListener, associatedInterfacePtrInfo);
  }

  NavigationRendererCancellationListenerAssociatedPtr.prototype =
      Object.create(NavigationRendererCancellationListenerPtr.prototype);
  NavigationRendererCancellationListenerAssociatedPtr.prototype.constructor =
      NavigationRendererCancellationListenerAssociatedPtr;

  function NavigationRendererCancellationListenerProxy(receiver) {
    this.receiver_ = receiver;
  }
  NavigationRendererCancellationListenerPtr.prototype.rendererCancellationWindowEnded = function() {
    return NavigationRendererCancellationListenerProxy.prototype.rendererCancellationWindowEnded
        .apply(this.ptr.getProxy(), arguments);
  };

  NavigationRendererCancellationListenerProxy.prototype.rendererCancellationWindowEnded = function() {
    var params_ = new NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params();
    var builder = new codec.MessageV0Builder(
        kNavigationRendererCancellationListener_RendererCancellationWindowEnded_Name,
        codec.align(NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params.encodedSize));
    builder.encodeStruct(NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function NavigationRendererCancellationListenerStub(delegate) {
    this.delegate_ = delegate;
  }
  NavigationRendererCancellationListenerStub.prototype.rendererCancellationWindowEnded = function() {
    return this.delegate_ && this.delegate_.rendererCancellationWindowEnded && this.delegate_.rendererCancellationWindowEnded();
  }

  NavigationRendererCancellationListenerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kNavigationRendererCancellationListener_RendererCancellationWindowEnded_Name:
      var params = reader.decodeStruct(NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params);
      this.rendererCancellationWindowEnded();
      return true;
    default:
      return false;
    }
  };

  NavigationRendererCancellationListenerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateNavigationRendererCancellationListenerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kNavigationRendererCancellationListener_RendererCancellationWindowEnded_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateNavigationRendererCancellationListenerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var NavigationRendererCancellationListener = {
    name: 'content.mojom.NavigationRendererCancellationListener',
    kVersion: 0,
    ptrClass: NavigationRendererCancellationListenerPtr,
    proxyClass: NavigationRendererCancellationListenerProxy,
    stubClass: NavigationRendererCancellationListenerStub,
    validateRequest: validateNavigationRendererCancellationListenerRequest,
    validateResponse: null,
  };
  NavigationRendererCancellationListenerStub.prototype.validator = validateNavigationRendererCancellationListenerRequest;
  NavigationRendererCancellationListenerProxy.prototype.validator = null;
  var kFrameHost_CreateNewWindow_Name = 714084469;
  var kFrameHost_CreateChildFrame_Name = 819432471;
  var kFrameHost_DidCommitProvisionalLoad_Name = 312900666;
  var kFrameHost_DidCommitSameDocumentNavigation_Name = 1739572671;
  var kFrameHost_DidOpenDocumentInputStream_Name = 1005365551;
  var kFrameHost_BeginNavigation_Name = 1086716815;
  var kFrameHost_SubresourceResponseStarted_Name = 943103280;
  var kFrameHost_ResourceLoadComplete_Name = 1248382927;
  var kFrameHost_DidChangeName_Name = 72573160;
  var kFrameHost_CancelInitialHistoryLoad_Name = 1056735402;
  var kFrameHost_UpdateEncoding_Name = 1484449410;
  var kFrameHost_UpdateState_Name = 547601264;
  var kFrameHost_OpenURL_Name = 1572489086;
  var kFrameHost_DidStopLoading_Name = 1307653571;

  function FrameHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FrameHost,
                                                   handleOrPtrInfo);
  }

  function FrameHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FrameHost, associatedInterfacePtrInfo);
  }

  FrameHostAssociatedPtr.prototype =
      Object.create(FrameHostPtr.prototype);
  FrameHostAssociatedPtr.prototype.constructor =
      FrameHostAssociatedPtr;

  function FrameHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  FrameHostPtr.prototype.createNewWindow = function() {
    return FrameHostProxy.prototype.createNewWindow
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.createNewWindow = function(params) {
    var params_ = new FrameHost_CreateNewWindow_Params();
    params_.params = params;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kFrameHost_CreateNewWindow_Name,
          codec.align(FrameHost_CreateNewWindow_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(FrameHost_CreateNewWindow_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FrameHost_CreateNewWindow_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FrameHostPtr.prototype.createChildFrame = function() {
    return FrameHostProxy.prototype.createChildFrame
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.createChildFrame = function(childRoutingId, frame, browserInterfaceBroker, policyContainerBindParams, associatedInterfaceProvider, scope, frameName, frameUniqueName, isCreatedByScript, framePolicy, frameOwnerProperties, childFrameOwnerElementType, documentUkmSourceId) {
    var params_ = new FrameHost_CreateChildFrame_Params();
    params_.childRoutingId = childRoutingId;
    params_.frame = frame;
    params_.browserInterfaceBroker = browserInterfaceBroker;
    params_.policyContainerBindParams = policyContainerBindParams;
    params_.associatedInterfaceProvider = associatedInterfaceProvider;
    params_.scope = scope;
    params_.frameName = frameName;
    params_.frameUniqueName = frameUniqueName;
    params_.isCreatedByScript = isCreatedByScript;
    params_.framePolicy = framePolicy;
    params_.frameOwnerProperties = frameOwnerProperties;
    params_.childFrameOwnerElementType = childFrameOwnerElementType;
    params_.documentUkmSourceId = documentUkmSourceId;
    var builder = new codec.MessageV2Builder(
        kFrameHost_CreateChildFrame_Name,
        codec.align(FrameHost_CreateChildFrame_Params.encodedSize));
    builder.setPayload(FrameHost_CreateChildFrame_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.didCommitProvisionalLoad = function() {
    return FrameHostProxy.prototype.didCommitProvisionalLoad
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.didCommitProvisionalLoad = function(params, interfaceParams) {
    var params_ = new FrameHost_DidCommitProvisionalLoad_Params();
    params_.params = params;
    params_.interfaceParams = interfaceParams;
    var builder = new codec.MessageV0Builder(
        kFrameHost_DidCommitProvisionalLoad_Name,
        codec.align(FrameHost_DidCommitProvisionalLoad_Params.encodedSize));
    builder.encodeStruct(FrameHost_DidCommitProvisionalLoad_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.didCommitSameDocumentNavigation = function() {
    return FrameHostProxy.prototype.didCommitSameDocumentNavigation
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.didCommitSameDocumentNavigation = function(params, sameDocumentParams) {
    var params_ = new FrameHost_DidCommitSameDocumentNavigation_Params();
    params_.params = params;
    params_.sameDocumentParams = sameDocumentParams;
    var builder = new codec.MessageV0Builder(
        kFrameHost_DidCommitSameDocumentNavigation_Name,
        codec.align(FrameHost_DidCommitSameDocumentNavigation_Params.encodedSize));
    builder.encodeStruct(FrameHost_DidCommitSameDocumentNavigation_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.didOpenDocumentInputStream = function() {
    return FrameHostProxy.prototype.didOpenDocumentInputStream
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.didOpenDocumentInputStream = function(url) {
    var params_ = new FrameHost_DidOpenDocumentInputStream_Params();
    params_.url = url;
    var builder = new codec.MessageV0Builder(
        kFrameHost_DidOpenDocumentInputStream_Name,
        codec.align(FrameHost_DidOpenDocumentInputStream_Params.encodedSize));
    builder.encodeStruct(FrameHost_DidOpenDocumentInputStream_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.beginNavigation = function() {
    return FrameHostProxy.prototype.beginNavigation
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.beginNavigation = function(commonParams, beginParams, blobUrlToken, navigationClient, initiatorPolicyContainerKeepAliveHandle, rendererCancellationListener) {
    var params_ = new FrameHost_BeginNavigation_Params();
    params_.commonParams = commonParams;
    params_.beginParams = beginParams;
    params_.blobUrlToken = blobUrlToken;
    params_.navigationClient = navigationClient;
    params_.initiatorPolicyContainerKeepAliveHandle = initiatorPolicyContainerKeepAliveHandle;
    params_.rendererCancellationListener = rendererCancellationListener;
    var builder = new codec.MessageV2Builder(
        kFrameHost_BeginNavigation_Name,
        codec.align(FrameHost_BeginNavigation_Params.encodedSize));
    builder.setPayload(FrameHost_BeginNavigation_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.subresourceResponseStarted = function() {
    return FrameHostProxy.prototype.subresourceResponseStarted
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.subresourceResponseStarted = function(finalResponseUrl, certStatus) {
    var params_ = new FrameHost_SubresourceResponseStarted_Params();
    params_.finalResponseUrl = finalResponseUrl;
    params_.certStatus = certStatus;
    var builder = new codec.MessageV0Builder(
        kFrameHost_SubresourceResponseStarted_Name,
        codec.align(FrameHost_SubresourceResponseStarted_Params.encodedSize));
    builder.encodeStruct(FrameHost_SubresourceResponseStarted_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.resourceLoadComplete = function() {
    return FrameHostProxy.prototype.resourceLoadComplete
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.resourceLoadComplete = function(urlLoadInfo) {
    var params_ = new FrameHost_ResourceLoadComplete_Params();
    params_.urlLoadInfo = urlLoadInfo;
    var builder = new codec.MessageV0Builder(
        kFrameHost_ResourceLoadComplete_Name,
        codec.align(FrameHost_ResourceLoadComplete_Params.encodedSize));
    builder.encodeStruct(FrameHost_ResourceLoadComplete_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.didChangeName = function() {
    return FrameHostProxy.prototype.didChangeName
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.didChangeName = function(name, uniqueName) {
    var params_ = new FrameHost_DidChangeName_Params();
    params_.name = name;
    params_.uniqueName = uniqueName;
    var builder = new codec.MessageV0Builder(
        kFrameHost_DidChangeName_Name,
        codec.align(FrameHost_DidChangeName_Params.encodedSize));
    builder.encodeStruct(FrameHost_DidChangeName_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.cancelInitialHistoryLoad = function() {
    return FrameHostProxy.prototype.cancelInitialHistoryLoad
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.cancelInitialHistoryLoad = function() {
    var params_ = new FrameHost_CancelInitialHistoryLoad_Params();
    var builder = new codec.MessageV0Builder(
        kFrameHost_CancelInitialHistoryLoad_Name,
        codec.align(FrameHost_CancelInitialHistoryLoad_Params.encodedSize));
    builder.encodeStruct(FrameHost_CancelInitialHistoryLoad_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.updateEncoding = function() {
    return FrameHostProxy.prototype.updateEncoding
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.updateEncoding = function(encodingName) {
    var params_ = new FrameHost_UpdateEncoding_Params();
    params_.encodingName = encodingName;
    var builder = new codec.MessageV0Builder(
        kFrameHost_UpdateEncoding_Name,
        codec.align(FrameHost_UpdateEncoding_Params.encodedSize));
    builder.encodeStruct(FrameHost_UpdateEncoding_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.updateState = function() {
    return FrameHostProxy.prototype.updateState
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.updateState = function(state) {
    var params_ = new FrameHost_UpdateState_Params();
    params_.state = state;
    var builder = new codec.MessageV0Builder(
        kFrameHost_UpdateState_Name,
        codec.align(FrameHost_UpdateState_Params.encodedSize));
    builder.encodeStruct(FrameHost_UpdateState_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.openURL = function() {
    return FrameHostProxy.prototype.openURL
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.openURL = function(params) {
    var params_ = new FrameHost_OpenURL_Params();
    params_.params = params;
    var builder = new codec.MessageV0Builder(
        kFrameHost_OpenURL_Name,
        codec.align(FrameHost_OpenURL_Params.encodedSize));
    builder.encodeStruct(FrameHost_OpenURL_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FrameHostPtr.prototype.didStopLoading = function() {
    return FrameHostProxy.prototype.didStopLoading
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostProxy.prototype.didStopLoading = function() {
    var params_ = new FrameHost_DidStopLoading_Params();
    var builder = new codec.MessageV0Builder(
        kFrameHost_DidStopLoading_Name,
        codec.align(FrameHost_DidStopLoading_Params.encodedSize));
    builder.encodeStruct(FrameHost_DidStopLoading_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function FrameHostStub(delegate) {
    this.delegate_ = delegate;
  }
  FrameHostStub.prototype.createNewWindow = function(params) {
    return this.delegate_ && this.delegate_.createNewWindow && this.delegate_.createNewWindow(params);
  }
  FrameHostStub.prototype.createChildFrame = function(childRoutingId, frame, browserInterfaceBroker, policyContainerBindParams, associatedInterfaceProvider, scope, frameName, frameUniqueName, isCreatedByScript, framePolicy, frameOwnerProperties, childFrameOwnerElementType, documentUkmSourceId) {
    return this.delegate_ && this.delegate_.createChildFrame && this.delegate_.createChildFrame(childRoutingId, frame, browserInterfaceBroker, policyContainerBindParams, associatedInterfaceProvider, scope, frameName, frameUniqueName, isCreatedByScript, framePolicy, frameOwnerProperties, childFrameOwnerElementType, documentUkmSourceId);
  }
  FrameHostStub.prototype.didCommitProvisionalLoad = function(params, interfaceParams) {
    return this.delegate_ && this.delegate_.didCommitProvisionalLoad && this.delegate_.didCommitProvisionalLoad(params, interfaceParams);
  }
  FrameHostStub.prototype.didCommitSameDocumentNavigation = function(params, sameDocumentParams) {
    return this.delegate_ && this.delegate_.didCommitSameDocumentNavigation && this.delegate_.didCommitSameDocumentNavigation(params, sameDocumentParams);
  }
  FrameHostStub.prototype.didOpenDocumentInputStream = function(url) {
    return this.delegate_ && this.delegate_.didOpenDocumentInputStream && this.delegate_.didOpenDocumentInputStream(url);
  }
  FrameHostStub.prototype.beginNavigation = function(commonParams, beginParams, blobUrlToken, navigationClient, initiatorPolicyContainerKeepAliveHandle, rendererCancellationListener) {
    return this.delegate_ && this.delegate_.beginNavigation && this.delegate_.beginNavigation(commonParams, beginParams, blobUrlToken, navigationClient, initiatorPolicyContainerKeepAliveHandle, rendererCancellationListener);
  }
  FrameHostStub.prototype.subresourceResponseStarted = function(finalResponseUrl, certStatus) {
    return this.delegate_ && this.delegate_.subresourceResponseStarted && this.delegate_.subresourceResponseStarted(finalResponseUrl, certStatus);
  }
  FrameHostStub.prototype.resourceLoadComplete = function(urlLoadInfo) {
    return this.delegate_ && this.delegate_.resourceLoadComplete && this.delegate_.resourceLoadComplete(urlLoadInfo);
  }
  FrameHostStub.prototype.didChangeName = function(name, uniqueName) {
    return this.delegate_ && this.delegate_.didChangeName && this.delegate_.didChangeName(name, uniqueName);
  }
  FrameHostStub.prototype.cancelInitialHistoryLoad = function() {
    return this.delegate_ && this.delegate_.cancelInitialHistoryLoad && this.delegate_.cancelInitialHistoryLoad();
  }
  FrameHostStub.prototype.updateEncoding = function(encodingName) {
    return this.delegate_ && this.delegate_.updateEncoding && this.delegate_.updateEncoding(encodingName);
  }
  FrameHostStub.prototype.updateState = function(state) {
    return this.delegate_ && this.delegate_.updateState && this.delegate_.updateState(state);
  }
  FrameHostStub.prototype.openURL = function(params) {
    return this.delegate_ && this.delegate_.openURL && this.delegate_.openURL(params);
  }
  FrameHostStub.prototype.didStopLoading = function() {
    return this.delegate_ && this.delegate_.didStopLoading && this.delegate_.didStopLoading();
  }

  FrameHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFrameHost_CreateChildFrame_Name:
      var params = reader.decodeStruct(FrameHost_CreateChildFrame_Params);
      this.createChildFrame(params.childRoutingId, params.frame, params.browserInterfaceBroker, params.policyContainerBindParams, params.associatedInterfaceProvider, params.scope, params.frameName, params.frameUniqueName, params.isCreatedByScript, params.framePolicy, params.frameOwnerProperties, params.childFrameOwnerElementType, params.documentUkmSourceId);
      return true;
    case kFrameHost_DidCommitProvisionalLoad_Name:
      var params = reader.decodeStruct(FrameHost_DidCommitProvisionalLoad_Params);
      this.didCommitProvisionalLoad(params.params, params.interfaceParams);
      return true;
    case kFrameHost_DidCommitSameDocumentNavigation_Name:
      var params = reader.decodeStruct(FrameHost_DidCommitSameDocumentNavigation_Params);
      this.didCommitSameDocumentNavigation(params.params, params.sameDocumentParams);
      return true;
    case kFrameHost_DidOpenDocumentInputStream_Name:
      var params = reader.decodeStruct(FrameHost_DidOpenDocumentInputStream_Params);
      this.didOpenDocumentInputStream(params.url);
      return true;
    case kFrameHost_BeginNavigation_Name:
      var params = reader.decodeStruct(FrameHost_BeginNavigation_Params);
      this.beginNavigation(params.commonParams, params.beginParams, params.blobUrlToken, params.navigationClient, params.initiatorPolicyContainerKeepAliveHandle, params.rendererCancellationListener);
      return true;
    case kFrameHost_SubresourceResponseStarted_Name:
      var params = reader.decodeStruct(FrameHost_SubresourceResponseStarted_Params);
      this.subresourceResponseStarted(params.finalResponseUrl, params.certStatus);
      return true;
    case kFrameHost_ResourceLoadComplete_Name:
      var params = reader.decodeStruct(FrameHost_ResourceLoadComplete_Params);
      this.resourceLoadComplete(params.urlLoadInfo);
      return true;
    case kFrameHost_DidChangeName_Name:
      var params = reader.decodeStruct(FrameHost_DidChangeName_Params);
      this.didChangeName(params.name, params.uniqueName);
      return true;
    case kFrameHost_CancelInitialHistoryLoad_Name:
      var params = reader.decodeStruct(FrameHost_CancelInitialHistoryLoad_Params);
      this.cancelInitialHistoryLoad();
      return true;
    case kFrameHost_UpdateEncoding_Name:
      var params = reader.decodeStruct(FrameHost_UpdateEncoding_Params);
      this.updateEncoding(params.encodingName);
      return true;
    case kFrameHost_UpdateState_Name:
      var params = reader.decodeStruct(FrameHost_UpdateState_Params);
      this.updateState(params.state);
      return true;
    case kFrameHost_OpenURL_Name:
      var params = reader.decodeStruct(FrameHost_OpenURL_Params);
      this.openURL(params.params);
      return true;
    case kFrameHost_DidStopLoading_Name:
      var params = reader.decodeStruct(FrameHost_DidStopLoading_Params);
      this.didStopLoading();
      return true;
    default:
      return false;
    }
  };

  FrameHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFrameHost_CreateNewWindow_Name:
      var params = reader.decodeStruct(FrameHost_CreateNewWindow_Params);
      this.createNewWindow(params.params).then(function(response) {
        var responseParams =
            new FrameHost_CreateNewWindow_ResponseParams();
        responseParams.status = response.status;
        responseParams.reply = response.reply;
        var builder = new codec.MessageV2Builder(
            kFrameHost_CreateNewWindow_Name,
            codec.align(FrameHost_CreateNewWindow_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(FrameHost_CreateNewWindow_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFrameHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFrameHost_CreateNewWindow_Name:
        if (message.expectsResponse())
          paramsClass = FrameHost_CreateNewWindow_Params;
      break;
      case kFrameHost_CreateChildFrame_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_CreateChildFrame_Params;
      break;
      case kFrameHost_DidCommitProvisionalLoad_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_DidCommitProvisionalLoad_Params;
      break;
      case kFrameHost_DidCommitSameDocumentNavigation_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_DidCommitSameDocumentNavigation_Params;
      break;
      case kFrameHost_DidOpenDocumentInputStream_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_DidOpenDocumentInputStream_Params;
      break;
      case kFrameHost_BeginNavigation_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_BeginNavigation_Params;
      break;
      case kFrameHost_SubresourceResponseStarted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_SubresourceResponseStarted_Params;
      break;
      case kFrameHost_ResourceLoadComplete_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_ResourceLoadComplete_Params;
      break;
      case kFrameHost_DidChangeName_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_DidChangeName_Params;
      break;
      case kFrameHost_CancelInitialHistoryLoad_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_CancelInitialHistoryLoad_Params;
      break;
      case kFrameHost_UpdateEncoding_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_UpdateEncoding_Params;
      break;
      case kFrameHost_UpdateState_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_UpdateState_Params;
      break;
      case kFrameHost_OpenURL_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_OpenURL_Params;
      break;
      case kFrameHost_DidStopLoading_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHost_DidStopLoading_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFrameHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFrameHost_CreateNewWindow_Name:
        if (message.isResponse())
          paramsClass = FrameHost_CreateNewWindow_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var FrameHost = {
    name: 'content.mojom.FrameHost',
    kVersion: 0,
    ptrClass: FrameHostPtr,
    proxyClass: FrameHostProxy,
    stubClass: FrameHostStub,
    validateRequest: validateFrameHostRequest,
    validateResponse: validateFrameHostResponse,
  };
  FrameHostStub.prototype.validator = validateFrameHostRequest;
  FrameHostProxy.prototype.validator = validateFrameHostResponse;
  exports.ViewWidgetType = ViewWidgetType;
  exports.ChildFrameOwnerElementType = ChildFrameOwnerElementType;
  exports.FrameDeleteIntention = FrameDeleteIntention;
  exports.CreateNewWindowStatus = CreateNewWindowStatus;
  exports.CreateViewParams = CreateViewParams;
  exports.CreateLocalMainFrameParams = CreateLocalMainFrameParams;
  exports.CreateRemoteMainFrameParams = CreateRemoteMainFrameParams;
  exports.CreateFrameWidgetParams = CreateFrameWidgetParams;
  exports.CreateFrameParams = CreateFrameParams;
  exports.SnapshotAccessibilityTreeParams = SnapshotAccessibilityTreeParams;
  exports.CreateNewWindowParams = CreateNewWindowParams;
  exports.CreateNewWindowReply = CreateNewWindowReply;
  exports.CreateMainFrameUnion = CreateMainFrameUnion;
  exports.FrameHTMLSerializerHandler = FrameHTMLSerializerHandler;
  exports.FrameHTMLSerializerHandlerPtr = FrameHTMLSerializerHandlerPtr;
  exports.FrameHTMLSerializerHandlerAssociatedPtr = FrameHTMLSerializerHandlerAssociatedPtr;
  exports.Frame = Frame;
  exports.FramePtr = FramePtr;
  exports.FrameAssociatedPtr = FrameAssociatedPtr;
  exports.FrameBindingsControl = FrameBindingsControl;
  exports.FrameBindingsControlPtr = FrameBindingsControlPtr;
  exports.FrameBindingsControlAssociatedPtr = FrameBindingsControlAssociatedPtr;
  exports.NavigationRendererCancellationListener = NavigationRendererCancellationListener;
  exports.NavigationRendererCancellationListenerPtr = NavigationRendererCancellationListenerPtr;
  exports.NavigationRendererCancellationListenerAssociatedPtr = NavigationRendererCancellationListenerAssociatedPtr;
  exports.FrameHost = FrameHost;
  exports.FrameHostPtr = FrameHostPtr;
  exports.FrameHostAssociatedPtr = FrameHostAssociatedPtr;
})();