// content/common/renderer.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/common/renderer.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');
  var agent_scheduling_group$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/common/agent_scheduling_group.mojom', 'agent_scheduling_group.mojom.js');
  }
  var native_types$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/common/native_types.mojom', 'native_types.mojom.js');
  }
  var ipc$ =
      mojo.internal.exposeNamespace('iPC.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ipc/ipc.mojom', '../../ipc/ipc.mojom.js');
  }
  var generic_pending_receiver$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/generic_pending_receiver.mojom', '../../mojo/public/mojom/base/generic_pending_receiver.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../mojo/public/mojom/base/time.mojom.js');
  }
  var network_types$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/network_types.mojom', '../../services/network/public/mojom/network_types.mojom.js');
  }
  var attribution$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/attribution.mojom', '../../services/network/public/mojom/attribution.mojom.js');
  }
  var skcolor$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/skcolor.mojom', '../../skia/public/mojom/skcolor.mojom.js');
  }
  var browser_interface_broker$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/browser_interface_broker.mojom', '../../third_party/blink/public/mojom/browser_interface_broker.mojom.js');
  }
  var origin_trials_settings$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/origin_trials/origin_trials_settings.mojom', '../../third_party/blink/public/mojom/origin_trials/origin_trials_settings.mojom.js');
  }
  var user_agent_metadata$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom', '../../third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom.js');
  }
  var color_id$ =
      mojo.internal.exposeNamespace('color.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/color/color_id.mojom', '../../ui/color/color_id.mojom.js');
  }


  var RenderProcessBackgroundState = {};
  RenderProcessBackgroundState.kForegrounded = 0;
  RenderProcessBackgroundState.kBackgrounded = 1;
  RenderProcessBackgroundState.MIN_VALUE = 0;
  RenderProcessBackgroundState.MAX_VALUE = 1;

  RenderProcessBackgroundState.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  RenderProcessBackgroundState.toKnownEnumValue = function(value) {
    return value;
  };

  RenderProcessBackgroundState.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var RenderProcessVisibleState = {};
  RenderProcessVisibleState.kVisible = 0;
  RenderProcessVisibleState.kHidden = 1;
  RenderProcessVisibleState.MIN_VALUE = 0;
  RenderProcessVisibleState.MAX_VALUE = 1;

  RenderProcessVisibleState.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  RenderProcessVisibleState.toKnownEnumValue = function(value) {
    return value;
  };

  RenderProcessVisibleState.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function UpdateScrollbarThemeParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UpdateScrollbarThemeParams.prototype.initDefaults_ = function() {
    this.hasInitialButtonDelay = false;
    this.hasAutoscrollButtonDelay = false;
    this.jumpOnTrackClick = false;
    this.redraw = false;
    this.scrollViewRubberBanding = false;
    this.initialButtonDelay = 0;
    this.autoscrollButtonDelay = 0;
    this.preferredScrollerStyle = 0;
  };
  UpdateScrollbarThemeParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UpdateScrollbarThemeParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;







    // validate UpdateScrollbarThemeParams.preferredScrollerStyle
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 12, native_types$.ScrollerStyle);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  UpdateScrollbarThemeParams.encodedSize = codec.kStructHeaderSize + 16;

  UpdateScrollbarThemeParams.decode = function(decoder) {
    var packed;
    var val = new UpdateScrollbarThemeParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.hasInitialButtonDelay = (packed >> 0) & 1 ? true : false;
    val.hasAutoscrollButtonDelay = (packed >> 1) & 1 ? true : false;
    val.jumpOnTrackClick = (packed >> 2) & 1 ? true : false;
    val.redraw = (packed >> 3) & 1 ? true : false;
    val.scrollViewRubberBanding = (packed >> 4) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.initialButtonDelay =
        decoder.decodeStruct(codec.Float);
    val.autoscrollButtonDelay =
        decoder.decodeStruct(codec.Float);
    val.preferredScrollerStyle =
        decoder.decodeStruct(new codec.Enum(native_types$.ScrollerStyle));
    return val;
  };

  UpdateScrollbarThemeParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UpdateScrollbarThemeParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.hasInitialButtonDelay & 1) << 0
    packed |= (val.hasAutoscrollButtonDelay & 1) << 1
    packed |= (val.jumpOnTrackClick & 1) << 2
    packed |= (val.redraw & 1) << 3
    packed |= (val.scrollViewRubberBanding & 1) << 4
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Float, val.initialButtonDelay);
    encoder.encodeStruct(codec.Float, val.autoscrollButtonDelay);
    encoder.encodeStruct(codec.Int32, val.preferredScrollerStyle);
  };
  function UpdateSystemColorInfoParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  UpdateSystemColorInfoParams.prototype.initDefaults_ = function() {
    this.isDarkMode = false;
    this.forcedColors = false;
    this.colors = null;
    this.lightColors = null;
    this.darkColors = null;
    this.forcedColorsMap = null;
  };
  UpdateSystemColorInfoParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  UpdateSystemColorInfoParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate UpdateSystemColorInfoParams.colors
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, new codec.Enum(native_types$.SystemThemeColor), codec.Uint32, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate UpdateSystemColorInfoParams.lightColors
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 16, false, new codec.Enum(color_id$.RendererColorId), new codec.PointerTo(skcolor$.SkColor), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate UpdateSystemColorInfoParams.darkColors
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 24, false, new codec.Enum(color_id$.RendererColorId), new codec.PointerTo(skcolor$.SkColor), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate UpdateSystemColorInfoParams.forcedColorsMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 32, false, new codec.Enum(color_id$.RendererColorId), new codec.PointerTo(skcolor$.SkColor), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  UpdateSystemColorInfoParams.encodedSize = codec.kStructHeaderSize + 40;

  UpdateSystemColorInfoParams.decode = function(decoder) {
    var packed;
    var val = new UpdateSystemColorInfoParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isDarkMode = (packed >> 0) & 1 ? true : false;
    val.forcedColors = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.colors =
        decoder.decodeMapPointer(new codec.Enum(native_types$.SystemThemeColor), codec.Uint32);
    val.lightColors =
        decoder.decodeMapPointer(new codec.Enum(color_id$.RendererColorId), new codec.PointerTo(skcolor$.SkColor));
    val.darkColors =
        decoder.decodeMapPointer(new codec.Enum(color_id$.RendererColorId), new codec.PointerTo(skcolor$.SkColor));
    val.forcedColorsMap =
        decoder.decodeMapPointer(new codec.Enum(color_id$.RendererColorId), new codec.PointerTo(skcolor$.SkColor));
    return val;
  };

  UpdateSystemColorInfoParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(UpdateSystemColorInfoParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isDarkMode & 1) << 0
    packed |= (val.forcedColors & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeMapPointer(new codec.Enum(native_types$.SystemThemeColor), codec.Uint32, val.colors);
    encoder.encodeMapPointer(new codec.Enum(color_id$.RendererColorId), new codec.PointerTo(skcolor$.SkColor), val.lightColors);
    encoder.encodeMapPointer(new codec.Enum(color_id$.RendererColorId), new codec.PointerTo(skcolor$.SkColor), val.darkColors);
    encoder.encodeMapPointer(new codec.Enum(color_id$.RendererColorId), new codec.PointerTo(skcolor$.SkColor), val.forcedColorsMap);
  };
  function Renderer_CreateAgentSchedulingGroup_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_CreateAgentSchedulingGroup_Params.prototype.initDefaults_ = function() {
    this.bootstrap = new bindings.InterfaceRequest();
    this.brokerRemote = new browser_interface_broker$.BrowserInterfaceBrokerPtr();
  };
  Renderer_CreateAgentSchedulingGroup_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_CreateAgentSchedulingGroup_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_CreateAgentSchedulingGroup_Params.bootstrap
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_CreateAgentSchedulingGroup_Params.brokerRemote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_CreateAgentSchedulingGroup_Params.encodedSize = codec.kStructHeaderSize + 16;

  Renderer_CreateAgentSchedulingGroup_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_CreateAgentSchedulingGroup_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bootstrap =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.brokerRemote =
        decoder.decodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Renderer_CreateAgentSchedulingGroup_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_CreateAgentSchedulingGroup_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.bootstrap);
    encoder.encodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr), val.brokerRemote);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Renderer_CreateAssociatedAgentSchedulingGroup_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_CreateAssociatedAgentSchedulingGroup_Params.prototype.initDefaults_ = function() {
    this.agentSchedulingGroup = new associatedBindings.AssociatedInterfaceRequest();
    this.brokerRemote = new browser_interface_broker$.BrowserInterfaceBrokerPtr();
  };
  Renderer_CreateAssociatedAgentSchedulingGroup_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_CreateAssociatedAgentSchedulingGroup_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_CreateAssociatedAgentSchedulingGroup_Params.agentSchedulingGroup
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_CreateAssociatedAgentSchedulingGroup_Params.brokerRemote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_CreateAssociatedAgentSchedulingGroup_Params.encodedSize = codec.kStructHeaderSize + 16;

  Renderer_CreateAssociatedAgentSchedulingGroup_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_CreateAssociatedAgentSchedulingGroup_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.agentSchedulingGroup =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.brokerRemote =
        decoder.decodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Renderer_CreateAssociatedAgentSchedulingGroup_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_CreateAssociatedAgentSchedulingGroup_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.agentSchedulingGroup);
    encoder.encodeStruct(new codec.Interface(browser_interface_broker$.BrowserInterfaceBrokerPtr), val.brokerRemote);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Renderer_OnNetworkConnectionChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_OnNetworkConnectionChanged_Params.prototype.initDefaults_ = function() {
    this.connectionType = 0;
    this.maxBandwidthMbps = 0;
  };
  Renderer_OnNetworkConnectionChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_OnNetworkConnectionChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_OnNetworkConnectionChanged_Params.connectionType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, native_types$.NetworkConnectionType);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Renderer_OnNetworkConnectionChanged_Params.encodedSize = codec.kStructHeaderSize + 16;

  Renderer_OnNetworkConnectionChanged_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_OnNetworkConnectionChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.connectionType =
        decoder.decodeStruct(new codec.Enum(native_types$.NetworkConnectionType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.maxBandwidthMbps =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  Renderer_OnNetworkConnectionChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_OnNetworkConnectionChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.connectionType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Double, val.maxBandwidthMbps);
  };
  function Renderer_OnNetworkQualityChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_OnNetworkQualityChanged_Params.prototype.initDefaults_ = function() {
    this.effectiveConnectionType = 0;
    this.httpRtt = null;
    this.transportRtt = null;
    this.bandwidthKbps = 0;
  };
  Renderer_OnNetworkQualityChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_OnNetworkQualityChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_OnNetworkQualityChanged_Params.effectiveConnectionType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, network_types$.EffectiveConnectionType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_OnNetworkQualityChanged_Params.httpRtt
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_OnNetworkQualityChanged_Params.transportRtt
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Renderer_OnNetworkQualityChanged_Params.encodedSize = codec.kStructHeaderSize + 32;

  Renderer_OnNetworkQualityChanged_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_OnNetworkQualityChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.effectiveConnectionType =
        decoder.decodeStruct(new codec.Enum(network_types$.EffectiveConnectionType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.httpRtt =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.transportRtt =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.bandwidthKbps =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  Renderer_OnNetworkQualityChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_OnNetworkQualityChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.effectiveConnectionType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(time$.TimeDelta, val.httpRtt);
    encoder.encodeStructPointer(time$.TimeDelta, val.transportRtt);
    encoder.encodeStruct(codec.Double, val.bandwidthKbps);
  };
  function Renderer_SetWebKitSharedTimersSuspended_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetWebKitSharedTimersSuspended_Params.prototype.initDefaults_ = function() {
    this.suspend = false;
  };
  Renderer_SetWebKitSharedTimersSuspended_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetWebKitSharedTimersSuspended_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Renderer_SetWebKitSharedTimersSuspended_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_SetWebKitSharedTimersSuspended_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetWebKitSharedTimersSuspended_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.suspend = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Renderer_SetWebKitSharedTimersSuspended_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetWebKitSharedTimersSuspended_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.suspend & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Renderer_UpdateScrollbarTheme_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_UpdateScrollbarTheme_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  Renderer_UpdateScrollbarTheme_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_UpdateScrollbarTheme_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_UpdateScrollbarTheme_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, UpdateScrollbarThemeParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_UpdateScrollbarTheme_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_UpdateScrollbarTheme_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_UpdateScrollbarTheme_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(UpdateScrollbarThemeParams);
    return val;
  };

  Renderer_UpdateScrollbarTheme_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_UpdateScrollbarTheme_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(UpdateScrollbarThemeParams, val.params);
  };
  function Renderer_OnSystemColorsChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_OnSystemColorsChanged_Params.prototype.initDefaults_ = function() {
    this.aquaColorVariant = 0;
  };
  Renderer_OnSystemColorsChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_OnSystemColorsChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Renderer_OnSystemColorsChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_OnSystemColorsChanged_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_OnSystemColorsChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.aquaColorVariant =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Renderer_OnSystemColorsChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_OnSystemColorsChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.aquaColorVariant);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Renderer_UpdateSystemColorInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_UpdateSystemColorInfo_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  Renderer_UpdateSystemColorInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_UpdateSystemColorInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_UpdateSystemColorInfo_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, UpdateSystemColorInfoParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_UpdateSystemColorInfo_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_UpdateSystemColorInfo_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_UpdateSystemColorInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(UpdateSystemColorInfoParams);
    return val;
  };

  Renderer_UpdateSystemColorInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_UpdateSystemColorInfo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(UpdateSystemColorInfoParams, val.params);
  };
  function Renderer_PurgePluginListCache_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_PurgePluginListCache_Params.prototype.initDefaults_ = function() {
    this.reloadPages = false;
  };
  Renderer_PurgePluginListCache_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_PurgePluginListCache_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Renderer_PurgePluginListCache_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_PurgePluginListCache_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_PurgePluginListCache_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.reloadPages = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Renderer_PurgePluginListCache_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_PurgePluginListCache_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.reloadPages & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Renderer_PurgeResourceCache_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_PurgeResourceCache_Params.prototype.initDefaults_ = function() {
  };
  Renderer_PurgeResourceCache_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_PurgeResourceCache_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_PurgeResourceCache_Params.encodedSize = codec.kStructHeaderSize + 0;

  Renderer_PurgeResourceCache_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_PurgeResourceCache_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Renderer_PurgeResourceCache_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_PurgeResourceCache_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Renderer_PurgeResourceCache_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_PurgeResourceCache_ResponseParams.prototype.initDefaults_ = function() {
  };
  Renderer_PurgeResourceCache_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_PurgeResourceCache_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_PurgeResourceCache_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Renderer_PurgeResourceCache_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Renderer_PurgeResourceCache_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Renderer_PurgeResourceCache_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_PurgeResourceCache_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Renderer_SetProcessState_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetProcessState_Params.prototype.initDefaults_ = function() {
    this.backgroundState = 0;
    this.visibleState = 0;
  };
  Renderer_SetProcessState_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetProcessState_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_SetProcessState_Params.backgroundState
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, RenderProcessBackgroundState);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_SetProcessState_Params.visibleState
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, RenderProcessVisibleState);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_SetProcessState_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_SetProcessState_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetProcessState_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.backgroundState =
        decoder.decodeStruct(new codec.Enum(RenderProcessBackgroundState));
    val.visibleState =
        decoder.decodeStruct(new codec.Enum(RenderProcessVisibleState));
    return val;
  };

  Renderer_SetProcessState_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetProcessState_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.backgroundState);
    encoder.encodeStruct(codec.Int32, val.visibleState);
  };
  function Renderer_SetIsLockedToSite_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetIsLockedToSite_Params.prototype.initDefaults_ = function() {
  };
  Renderer_SetIsLockedToSite_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetIsLockedToSite_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_SetIsLockedToSite_Params.encodedSize = codec.kStructHeaderSize + 0;

  Renderer_SetIsLockedToSite_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetIsLockedToSite_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Renderer_SetIsLockedToSite_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetIsLockedToSite_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Renderer_SetIsCrossOriginIsolated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetIsCrossOriginIsolated_Params.prototype.initDefaults_ = function() {
    this.value = false;
  };
  Renderer_SetIsCrossOriginIsolated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetIsCrossOriginIsolated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Renderer_SetIsCrossOriginIsolated_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_SetIsCrossOriginIsolated_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetIsCrossOriginIsolated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.value = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Renderer_SetIsCrossOriginIsolated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetIsCrossOriginIsolated_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.value & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Renderer_SetIsWebSecurityDisabled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetIsWebSecurityDisabled_Params.prototype.initDefaults_ = function() {
    this.value = false;
  };
  Renderer_SetIsWebSecurityDisabled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetIsWebSecurityDisabled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Renderer_SetIsWebSecurityDisabled_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_SetIsWebSecurityDisabled_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetIsWebSecurityDisabled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.value = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Renderer_SetIsWebSecurityDisabled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetIsWebSecurityDisabled_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.value & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Renderer_SetIsIsolatedContext_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetIsIsolatedContext_Params.prototype.initDefaults_ = function() {
    this.value = false;
  };
  Renderer_SetIsIsolatedContext_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetIsIsolatedContext_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Renderer_SetIsIsolatedContext_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_SetIsIsolatedContext_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetIsIsolatedContext_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.value = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Renderer_SetIsIsolatedContext_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetIsIsolatedContext_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.value & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Renderer_InitializeRenderer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_InitializeRenderer_Params.prototype.initDefaults_ = function() {
    this.userAgent = null;
    this.metadata = null;
    this.corsExemptHeaderList = null;
    this.attributionSupport = 0;
    this.originTrialsSettings = null;
  };
  Renderer_InitializeRenderer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_InitializeRenderer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_InitializeRenderer_Params.userAgent
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_InitializeRenderer_Params.metadata
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, user_agent_metadata$.UserAgentMetadata, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_InitializeRenderer_Params.corsExemptHeaderList
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_InitializeRenderer_Params.attributionSupport
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 24, attribution$.AttributionSupport);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_InitializeRenderer_Params.originTrialsSettings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, origin_trials_settings$.OriginTrialsSettings, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_InitializeRenderer_Params.encodedSize = codec.kStructHeaderSize + 40;

  Renderer_InitializeRenderer_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_InitializeRenderer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.userAgent =
        decoder.decodeStruct(codec.String);
    val.metadata =
        decoder.decodeStructPointer(user_agent_metadata$.UserAgentMetadata);
    val.corsExemptHeaderList =
        decoder.decodeArrayPointer(codec.String);
    val.attributionSupport =
        decoder.decodeStruct(new codec.Enum(attribution$.AttributionSupport));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.originTrialsSettings =
        decoder.decodeStructPointer(origin_trials_settings$.OriginTrialsSettings);
    return val;
  };

  Renderer_InitializeRenderer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_InitializeRenderer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.userAgent);
    encoder.encodeStructPointer(user_agent_metadata$.UserAgentMetadata, val.metadata);
    encoder.encodeArrayPointer(codec.String, val.corsExemptHeaderList);
    encoder.encodeStruct(codec.Int32, val.attributionSupport);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(origin_trials_settings$.OriginTrialsSettings, val.originTrialsSettings);
  };
  function Renderer_SetAttributionReportingSupport_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Renderer_SetAttributionReportingSupport_Params.prototype.initDefaults_ = function() {
    this.attributionSupport = 0;
  };
  Renderer_SetAttributionReportingSupport_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Renderer_SetAttributionReportingSupport_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Renderer_SetAttributionReportingSupport_Params.attributionSupport
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, attribution$.AttributionSupport);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Renderer_SetAttributionReportingSupport_Params.encodedSize = codec.kStructHeaderSize + 8;

  Renderer_SetAttributionReportingSupport_Params.decode = function(decoder) {
    var packed;
    var val = new Renderer_SetAttributionReportingSupport_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.attributionSupport =
        decoder.decodeStruct(new codec.Enum(attribution$.AttributionSupport));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Renderer_SetAttributionReportingSupport_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Renderer_SetAttributionReportingSupport_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.attributionSupport);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kRenderer_CreateAgentSchedulingGroup_Name = 2103303337;
  var kRenderer_CreateAssociatedAgentSchedulingGroup_Name = 1132523474;
  var kRenderer_OnNetworkConnectionChanged_Name = 2045553489;
  var kRenderer_OnNetworkQualityChanged_Name = 1188971234;
  var kRenderer_SetWebKitSharedTimersSuspended_Name = 2055525211;
  var kRenderer_UpdateScrollbarTheme_Name = 386266142;
  var kRenderer_OnSystemColorsChanged_Name = 339107028;
  var kRenderer_UpdateSystemColorInfo_Name = 717320487;
  var kRenderer_PurgePluginListCache_Name = 940086666;
  var kRenderer_PurgeResourceCache_Name = 1019976064;
  var kRenderer_SetProcessState_Name = 1857396287;
  var kRenderer_SetIsLockedToSite_Name = 248223529;
  var kRenderer_SetIsCrossOriginIsolated_Name = 958301673;
  var kRenderer_SetIsWebSecurityDisabled_Name = 1534497074;
  var kRenderer_SetIsIsolatedContext_Name = 493046113;
  var kRenderer_InitializeRenderer_Name = 201091057;
  var kRenderer_SetAttributionReportingSupport_Name = 1936117299;

  function RendererPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Renderer,
                                                   handleOrPtrInfo);
  }

  function RendererAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Renderer, associatedInterfacePtrInfo);
  }

  RendererAssociatedPtr.prototype =
      Object.create(RendererPtr.prototype);
  RendererAssociatedPtr.prototype.constructor =
      RendererAssociatedPtr;

  function RendererProxy(receiver) {
    this.receiver_ = receiver;
  }
  RendererPtr.prototype.createAgentSchedulingGroup = function() {
    return RendererProxy.prototype.createAgentSchedulingGroup
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.createAgentSchedulingGroup = function(bootstrap, brokerRemote) {
    var params_ = new Renderer_CreateAgentSchedulingGroup_Params();
    params_.bootstrap = bootstrap;
    params_.brokerRemote = brokerRemote;
    var builder = new codec.MessageV0Builder(
        kRenderer_CreateAgentSchedulingGroup_Name,
        codec.align(Renderer_CreateAgentSchedulingGroup_Params.encodedSize));
    builder.encodeStruct(Renderer_CreateAgentSchedulingGroup_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.createAssociatedAgentSchedulingGroup = function() {
    return RendererProxy.prototype.createAssociatedAgentSchedulingGroup
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.createAssociatedAgentSchedulingGroup = function(agentSchedulingGroup, brokerRemote) {
    var params_ = new Renderer_CreateAssociatedAgentSchedulingGroup_Params();
    params_.agentSchedulingGroup = agentSchedulingGroup;
    params_.brokerRemote = brokerRemote;
    var builder = new codec.MessageV2Builder(
        kRenderer_CreateAssociatedAgentSchedulingGroup_Name,
        codec.align(Renderer_CreateAssociatedAgentSchedulingGroup_Params.encodedSize));
    builder.setPayload(Renderer_CreateAssociatedAgentSchedulingGroup_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.onNetworkConnectionChanged = function() {
    return RendererProxy.prototype.onNetworkConnectionChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.onNetworkConnectionChanged = function(connectionType, maxBandwidthMbps) {
    var params_ = new Renderer_OnNetworkConnectionChanged_Params();
    params_.connectionType = connectionType;
    params_.maxBandwidthMbps = maxBandwidthMbps;
    var builder = new codec.MessageV0Builder(
        kRenderer_OnNetworkConnectionChanged_Name,
        codec.align(Renderer_OnNetworkConnectionChanged_Params.encodedSize));
    builder.encodeStruct(Renderer_OnNetworkConnectionChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.onNetworkQualityChanged = function() {
    return RendererProxy.prototype.onNetworkQualityChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.onNetworkQualityChanged = function(effectiveConnectionType, httpRtt, transportRtt, bandwidthKbps) {
    var params_ = new Renderer_OnNetworkQualityChanged_Params();
    params_.effectiveConnectionType = effectiveConnectionType;
    params_.httpRtt = httpRtt;
    params_.transportRtt = transportRtt;
    params_.bandwidthKbps = bandwidthKbps;
    var builder = new codec.MessageV0Builder(
        kRenderer_OnNetworkQualityChanged_Name,
        codec.align(Renderer_OnNetworkQualityChanged_Params.encodedSize));
    builder.encodeStruct(Renderer_OnNetworkQualityChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.setWebKitSharedTimersSuspended = function() {
    return RendererProxy.prototype.setWebKitSharedTimersSuspended
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setWebKitSharedTimersSuspended = function(suspend) {
    var params_ = new Renderer_SetWebKitSharedTimersSuspended_Params();
    params_.suspend = suspend;
    var builder = new codec.MessageV0Builder(
        kRenderer_SetWebKitSharedTimersSuspended_Name,
        codec.align(Renderer_SetWebKitSharedTimersSuspended_Params.encodedSize));
    builder.encodeStruct(Renderer_SetWebKitSharedTimersSuspended_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.updateScrollbarTheme = function() {
    return RendererProxy.prototype.updateScrollbarTheme
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.updateScrollbarTheme = function(params) {
    var params_ = new Renderer_UpdateScrollbarTheme_Params();
    params_.params = params;
    var builder = new codec.MessageV0Builder(
        kRenderer_UpdateScrollbarTheme_Name,
        codec.align(Renderer_UpdateScrollbarTheme_Params.encodedSize));
    builder.encodeStruct(Renderer_UpdateScrollbarTheme_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.onSystemColorsChanged = function() {
    return RendererProxy.prototype.onSystemColorsChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.onSystemColorsChanged = function(aquaColorVariant) {
    var params_ = new Renderer_OnSystemColorsChanged_Params();
    params_.aquaColorVariant = aquaColorVariant;
    var builder = new codec.MessageV0Builder(
        kRenderer_OnSystemColorsChanged_Name,
        codec.align(Renderer_OnSystemColorsChanged_Params.encodedSize));
    builder.encodeStruct(Renderer_OnSystemColorsChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.updateSystemColorInfo = function() {
    return RendererProxy.prototype.updateSystemColorInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.updateSystemColorInfo = function(params) {
    var params_ = new Renderer_UpdateSystemColorInfo_Params();
    params_.params = params;
    var builder = new codec.MessageV0Builder(
        kRenderer_UpdateSystemColorInfo_Name,
        codec.align(Renderer_UpdateSystemColorInfo_Params.encodedSize));
    builder.encodeStruct(Renderer_UpdateSystemColorInfo_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.purgePluginListCache = function() {
    return RendererProxy.prototype.purgePluginListCache
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.purgePluginListCache = function(reloadPages) {
    var params_ = new Renderer_PurgePluginListCache_Params();
    params_.reloadPages = reloadPages;
    var builder = new codec.MessageV0Builder(
        kRenderer_PurgePluginListCache_Name,
        codec.align(Renderer_PurgePluginListCache_Params.encodedSize));
    builder.encodeStruct(Renderer_PurgePluginListCache_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.purgeResourceCache = function() {
    return RendererProxy.prototype.purgeResourceCache
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.purgeResourceCache = function() {
    var params_ = new Renderer_PurgeResourceCache_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kRenderer_PurgeResourceCache_Name,
          codec.align(Renderer_PurgeResourceCache_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Renderer_PurgeResourceCache_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Renderer_PurgeResourceCache_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  RendererPtr.prototype.setProcessState = function() {
    return RendererProxy.prototype.setProcessState
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setProcessState = function(backgroundState, visibleState) {
    var params_ = new Renderer_SetProcessState_Params();
    params_.backgroundState = backgroundState;
    params_.visibleState = visibleState;
    var builder = new codec.MessageV0Builder(
        kRenderer_SetProcessState_Name,
        codec.align(Renderer_SetProcessState_Params.encodedSize));
    builder.encodeStruct(Renderer_SetProcessState_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.setIsLockedToSite = function() {
    return RendererProxy.prototype.setIsLockedToSite
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setIsLockedToSite = function() {
    var params_ = new Renderer_SetIsLockedToSite_Params();
    var builder = new codec.MessageV0Builder(
        kRenderer_SetIsLockedToSite_Name,
        codec.align(Renderer_SetIsLockedToSite_Params.encodedSize));
    builder.encodeStruct(Renderer_SetIsLockedToSite_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.setIsCrossOriginIsolated = function() {
    return RendererProxy.prototype.setIsCrossOriginIsolated
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setIsCrossOriginIsolated = function(value) {
    var params_ = new Renderer_SetIsCrossOriginIsolated_Params();
    params_.value = value;
    var builder = new codec.MessageV0Builder(
        kRenderer_SetIsCrossOriginIsolated_Name,
        codec.align(Renderer_SetIsCrossOriginIsolated_Params.encodedSize));
    builder.encodeStruct(Renderer_SetIsCrossOriginIsolated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.setIsWebSecurityDisabled = function() {
    return RendererProxy.prototype.setIsWebSecurityDisabled
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setIsWebSecurityDisabled = function(value) {
    var params_ = new Renderer_SetIsWebSecurityDisabled_Params();
    params_.value = value;
    var builder = new codec.MessageV0Builder(
        kRenderer_SetIsWebSecurityDisabled_Name,
        codec.align(Renderer_SetIsWebSecurityDisabled_Params.encodedSize));
    builder.encodeStruct(Renderer_SetIsWebSecurityDisabled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.setIsIsolatedContext = function() {
    return RendererProxy.prototype.setIsIsolatedContext
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setIsIsolatedContext = function(value) {
    var params_ = new Renderer_SetIsIsolatedContext_Params();
    params_.value = value;
    var builder = new codec.MessageV0Builder(
        kRenderer_SetIsIsolatedContext_Name,
        codec.align(Renderer_SetIsIsolatedContext_Params.encodedSize));
    builder.encodeStruct(Renderer_SetIsIsolatedContext_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.initializeRenderer = function() {
    return RendererProxy.prototype.initializeRenderer
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.initializeRenderer = function(userAgent, metadata, corsExemptHeaderList, attributionSupport, originTrialsSettings) {
    var params_ = new Renderer_InitializeRenderer_Params();
    params_.userAgent = userAgent;
    params_.metadata = metadata;
    params_.corsExemptHeaderList = corsExemptHeaderList;
    params_.attributionSupport = attributionSupport;
    params_.originTrialsSettings = originTrialsSettings;
    var builder = new codec.MessageV0Builder(
        kRenderer_InitializeRenderer_Name,
        codec.align(Renderer_InitializeRenderer_Params.encodedSize));
    builder.encodeStruct(Renderer_InitializeRenderer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  RendererPtr.prototype.setAttributionReportingSupport = function() {
    return RendererProxy.prototype.setAttributionReportingSupport
        .apply(this.ptr.getProxy(), arguments);
  };

  RendererProxy.prototype.setAttributionReportingSupport = function(attributionSupport) {
    var params_ = new Renderer_SetAttributionReportingSupport_Params();
    params_.attributionSupport = attributionSupport;
    var builder = new codec.MessageV0Builder(
        kRenderer_SetAttributionReportingSupport_Name,
        codec.align(Renderer_SetAttributionReportingSupport_Params.encodedSize));
    builder.encodeStruct(Renderer_SetAttributionReportingSupport_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function RendererStub(delegate) {
    this.delegate_ = delegate;
  }
  RendererStub.prototype.createAgentSchedulingGroup = function(bootstrap, brokerRemote) {
    return this.delegate_ && this.delegate_.createAgentSchedulingGroup && this.delegate_.createAgentSchedulingGroup(bootstrap, brokerRemote);
  }
  RendererStub.prototype.createAssociatedAgentSchedulingGroup = function(agentSchedulingGroup, brokerRemote) {
    return this.delegate_ && this.delegate_.createAssociatedAgentSchedulingGroup && this.delegate_.createAssociatedAgentSchedulingGroup(agentSchedulingGroup, brokerRemote);
  }
  RendererStub.prototype.onNetworkConnectionChanged = function(connectionType, maxBandwidthMbps) {
    return this.delegate_ && this.delegate_.onNetworkConnectionChanged && this.delegate_.onNetworkConnectionChanged(connectionType, maxBandwidthMbps);
  }
  RendererStub.prototype.onNetworkQualityChanged = function(effectiveConnectionType, httpRtt, transportRtt, bandwidthKbps) {
    return this.delegate_ && this.delegate_.onNetworkQualityChanged && this.delegate_.onNetworkQualityChanged(effectiveConnectionType, httpRtt, transportRtt, bandwidthKbps);
  }
  RendererStub.prototype.setWebKitSharedTimersSuspended = function(suspend) {
    return this.delegate_ && this.delegate_.setWebKitSharedTimersSuspended && this.delegate_.setWebKitSharedTimersSuspended(suspend);
  }
  RendererStub.prototype.updateScrollbarTheme = function(params) {
    return this.delegate_ && this.delegate_.updateScrollbarTheme && this.delegate_.updateScrollbarTheme(params);
  }
  RendererStub.prototype.onSystemColorsChanged = function(aquaColorVariant) {
    return this.delegate_ && this.delegate_.onSystemColorsChanged && this.delegate_.onSystemColorsChanged(aquaColorVariant);
  }
  RendererStub.prototype.updateSystemColorInfo = function(params) {
    return this.delegate_ && this.delegate_.updateSystemColorInfo && this.delegate_.updateSystemColorInfo(params);
  }
  RendererStub.prototype.purgePluginListCache = function(reloadPages) {
    return this.delegate_ && this.delegate_.purgePluginListCache && this.delegate_.purgePluginListCache(reloadPages);
  }
  RendererStub.prototype.purgeResourceCache = function() {
    return this.delegate_ && this.delegate_.purgeResourceCache && this.delegate_.purgeResourceCache();
  }
  RendererStub.prototype.setProcessState = function(backgroundState, visibleState) {
    return this.delegate_ && this.delegate_.setProcessState && this.delegate_.setProcessState(backgroundState, visibleState);
  }
  RendererStub.prototype.setIsLockedToSite = function() {
    return this.delegate_ && this.delegate_.setIsLockedToSite && this.delegate_.setIsLockedToSite();
  }
  RendererStub.prototype.setIsCrossOriginIsolated = function(value) {
    return this.delegate_ && this.delegate_.setIsCrossOriginIsolated && this.delegate_.setIsCrossOriginIsolated(value);
  }
  RendererStub.prototype.setIsWebSecurityDisabled = function(value) {
    return this.delegate_ && this.delegate_.setIsWebSecurityDisabled && this.delegate_.setIsWebSecurityDisabled(value);
  }
  RendererStub.prototype.setIsIsolatedContext = function(value) {
    return this.delegate_ && this.delegate_.setIsIsolatedContext && this.delegate_.setIsIsolatedContext(value);
  }
  RendererStub.prototype.initializeRenderer = function(userAgent, metadata, corsExemptHeaderList, attributionSupport, originTrialsSettings) {
    return this.delegate_ && this.delegate_.initializeRenderer && this.delegate_.initializeRenderer(userAgent, metadata, corsExemptHeaderList, attributionSupport, originTrialsSettings);
  }
  RendererStub.prototype.setAttributionReportingSupport = function(attributionSupport) {
    return this.delegate_ && this.delegate_.setAttributionReportingSupport && this.delegate_.setAttributionReportingSupport(attributionSupport);
  }

  RendererStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRenderer_CreateAgentSchedulingGroup_Name:
      var params = reader.decodeStruct(Renderer_CreateAgentSchedulingGroup_Params);
      this.createAgentSchedulingGroup(params.bootstrap, params.brokerRemote);
      return true;
    case kRenderer_CreateAssociatedAgentSchedulingGroup_Name:
      var params = reader.decodeStruct(Renderer_CreateAssociatedAgentSchedulingGroup_Params);
      this.createAssociatedAgentSchedulingGroup(params.agentSchedulingGroup, params.brokerRemote);
      return true;
    case kRenderer_OnNetworkConnectionChanged_Name:
      var params = reader.decodeStruct(Renderer_OnNetworkConnectionChanged_Params);
      this.onNetworkConnectionChanged(params.connectionType, params.maxBandwidthMbps);
      return true;
    case kRenderer_OnNetworkQualityChanged_Name:
      var params = reader.decodeStruct(Renderer_OnNetworkQualityChanged_Params);
      this.onNetworkQualityChanged(params.effectiveConnectionType, params.httpRtt, params.transportRtt, params.bandwidthKbps);
      return true;
    case kRenderer_SetWebKitSharedTimersSuspended_Name:
      var params = reader.decodeStruct(Renderer_SetWebKitSharedTimersSuspended_Params);
      this.setWebKitSharedTimersSuspended(params.suspend);
      return true;
    case kRenderer_UpdateScrollbarTheme_Name:
      var params = reader.decodeStruct(Renderer_UpdateScrollbarTheme_Params);
      this.updateScrollbarTheme(params.params);
      return true;
    case kRenderer_OnSystemColorsChanged_Name:
      var params = reader.decodeStruct(Renderer_OnSystemColorsChanged_Params);
      this.onSystemColorsChanged(params.aquaColorVariant);
      return true;
    case kRenderer_UpdateSystemColorInfo_Name:
      var params = reader.decodeStruct(Renderer_UpdateSystemColorInfo_Params);
      this.updateSystemColorInfo(params.params);
      return true;
    case kRenderer_PurgePluginListCache_Name:
      var params = reader.decodeStruct(Renderer_PurgePluginListCache_Params);
      this.purgePluginListCache(params.reloadPages);
      return true;
    case kRenderer_SetProcessState_Name:
      var params = reader.decodeStruct(Renderer_SetProcessState_Params);
      this.setProcessState(params.backgroundState, params.visibleState);
      return true;
    case kRenderer_SetIsLockedToSite_Name:
      var params = reader.decodeStruct(Renderer_SetIsLockedToSite_Params);
      this.setIsLockedToSite();
      return true;
    case kRenderer_SetIsCrossOriginIsolated_Name:
      var params = reader.decodeStruct(Renderer_SetIsCrossOriginIsolated_Params);
      this.setIsCrossOriginIsolated(params.value);
      return true;
    case kRenderer_SetIsWebSecurityDisabled_Name:
      var params = reader.decodeStruct(Renderer_SetIsWebSecurityDisabled_Params);
      this.setIsWebSecurityDisabled(params.value);
      return true;
    case kRenderer_SetIsIsolatedContext_Name:
      var params = reader.decodeStruct(Renderer_SetIsIsolatedContext_Params);
      this.setIsIsolatedContext(params.value);
      return true;
    case kRenderer_InitializeRenderer_Name:
      var params = reader.decodeStruct(Renderer_InitializeRenderer_Params);
      this.initializeRenderer(params.userAgent, params.metadata, params.corsExemptHeaderList, params.attributionSupport, params.originTrialsSettings);
      return true;
    case kRenderer_SetAttributionReportingSupport_Name:
      var params = reader.decodeStruct(Renderer_SetAttributionReportingSupport_Params);
      this.setAttributionReportingSupport(params.attributionSupport);
      return true;
    default:
      return false;
    }
  };

  RendererStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRenderer_PurgeResourceCache_Name:
      var params = reader.decodeStruct(Renderer_PurgeResourceCache_Params);
      this.purgeResourceCache().then(function(response) {
        var responseParams =
            new Renderer_PurgeResourceCache_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kRenderer_PurgeResourceCache_Name,
            codec.align(Renderer_PurgeResourceCache_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Renderer_PurgeResourceCache_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateRendererRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kRenderer_CreateAgentSchedulingGroup_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_CreateAgentSchedulingGroup_Params;
      break;
      case kRenderer_CreateAssociatedAgentSchedulingGroup_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_CreateAssociatedAgentSchedulingGroup_Params;
      break;
      case kRenderer_OnNetworkConnectionChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_OnNetworkConnectionChanged_Params;
      break;
      case kRenderer_OnNetworkQualityChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_OnNetworkQualityChanged_Params;
      break;
      case kRenderer_SetWebKitSharedTimersSuspended_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetWebKitSharedTimersSuspended_Params;
      break;
      case kRenderer_UpdateScrollbarTheme_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_UpdateScrollbarTheme_Params;
      break;
      case kRenderer_OnSystemColorsChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_OnSystemColorsChanged_Params;
      break;
      case kRenderer_UpdateSystemColorInfo_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_UpdateSystemColorInfo_Params;
      break;
      case kRenderer_PurgePluginListCache_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_PurgePluginListCache_Params;
      break;
      case kRenderer_PurgeResourceCache_Name:
        if (message.expectsResponse())
          paramsClass = Renderer_PurgeResourceCache_Params;
      break;
      case kRenderer_SetProcessState_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetProcessState_Params;
      break;
      case kRenderer_SetIsLockedToSite_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetIsLockedToSite_Params;
      break;
      case kRenderer_SetIsCrossOriginIsolated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetIsCrossOriginIsolated_Params;
      break;
      case kRenderer_SetIsWebSecurityDisabled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetIsWebSecurityDisabled_Params;
      break;
      case kRenderer_SetIsIsolatedContext_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetIsIsolatedContext_Params;
      break;
      case kRenderer_InitializeRenderer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_InitializeRenderer_Params;
      break;
      case kRenderer_SetAttributionReportingSupport_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Renderer_SetAttributionReportingSupport_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateRendererResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kRenderer_PurgeResourceCache_Name:
        if (message.isResponse())
          paramsClass = Renderer_PurgeResourceCache_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Renderer = {
    name: 'content.mojom.Renderer',
    kVersion: 0,
    ptrClass: RendererPtr,
    proxyClass: RendererProxy,
    stubClass: RendererStub,
    validateRequest: validateRendererRequest,
    validateResponse: validateRendererResponse,
  };
  RendererStub.prototype.validator = validateRendererRequest;
  RendererProxy.prototype.validator = validateRendererResponse;
  exports.RenderProcessBackgroundState = RenderProcessBackgroundState;
  exports.RenderProcessVisibleState = RenderProcessVisibleState;
  exports.UpdateScrollbarThemeParams = UpdateScrollbarThemeParams;
  exports.UpdateSystemColorInfoParams = UpdateSystemColorInfoParams;
  exports.Renderer = Renderer;
  exports.RendererPtr = RendererPtr;
  exports.RendererAssociatedPtr = RendererAssociatedPtr;
})();