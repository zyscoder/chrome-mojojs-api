// content/common/media/media_log_records.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/common/media/media_log_records.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');
  var media_types$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/media_types.mojom', '../../../media/mojo/mojom/media_types.mojom.js');
  }



  function MediaInternalLogRecords_Log_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MediaInternalLogRecords_Log_Params.prototype.initDefaults_ = function() {
    this.events = null;
  };
  MediaInternalLogRecords_Log_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MediaInternalLogRecords_Log_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MediaInternalLogRecords_Log_Params.events
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(media_types$.MediaLogRecord), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MediaInternalLogRecords_Log_Params.encodedSize = codec.kStructHeaderSize + 8;

  MediaInternalLogRecords_Log_Params.decode = function(decoder) {
    var packed;
    var val = new MediaInternalLogRecords_Log_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.events =
        decoder.decodeArrayPointer(new codec.PointerTo(media_types$.MediaLogRecord));
    return val;
  };

  MediaInternalLogRecords_Log_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MediaInternalLogRecords_Log_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(media_types$.MediaLogRecord), val.events);
  };
  var kMediaInternalLogRecords_Log_Name = 1168389528;

  function MediaInternalLogRecordsPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MediaInternalLogRecords,
                                                   handleOrPtrInfo);
  }

  function MediaInternalLogRecordsAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MediaInternalLogRecords, associatedInterfacePtrInfo);
  }

  MediaInternalLogRecordsAssociatedPtr.prototype =
      Object.create(MediaInternalLogRecordsPtr.prototype);
  MediaInternalLogRecordsAssociatedPtr.prototype.constructor =
      MediaInternalLogRecordsAssociatedPtr;

  function MediaInternalLogRecordsProxy(receiver) {
    this.receiver_ = receiver;
  }
  MediaInternalLogRecordsPtr.prototype.log = function() {
    return MediaInternalLogRecordsProxy.prototype.log
        .apply(this.ptr.getProxy(), arguments);
  };

  MediaInternalLogRecordsProxy.prototype.log = function(events) {
    var params_ = new MediaInternalLogRecords_Log_Params();
    params_.events = events;
    var builder = new codec.MessageV0Builder(
        kMediaInternalLogRecords_Log_Name,
        codec.align(MediaInternalLogRecords_Log_Params.encodedSize));
    builder.encodeStruct(MediaInternalLogRecords_Log_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MediaInternalLogRecordsStub(delegate) {
    this.delegate_ = delegate;
  }
  MediaInternalLogRecordsStub.prototype.log = function(events) {
    return this.delegate_ && this.delegate_.log && this.delegate_.log(events);
  }

  MediaInternalLogRecordsStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMediaInternalLogRecords_Log_Name:
      var params = reader.decodeStruct(MediaInternalLogRecords_Log_Params);
      this.log(params.events);
      return true;
    default:
      return false;
    }
  };

  MediaInternalLogRecordsStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMediaInternalLogRecordsRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMediaInternalLogRecords_Log_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MediaInternalLogRecords_Log_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMediaInternalLogRecordsResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MediaInternalLogRecords = {
    name: 'content.mojom.MediaInternalLogRecords',
    kVersion: 0,
    ptrClass: MediaInternalLogRecordsPtr,
    proxyClass: MediaInternalLogRecordsProxy,
    stubClass: MediaInternalLogRecordsStub,
    validateRequest: validateMediaInternalLogRecordsRequest,
    validateResponse: null,
  };
  MediaInternalLogRecordsStub.prototype.validator = validateMediaInternalLogRecordsRequest;
  MediaInternalLogRecordsProxy.prototype.validator = null;
  exports.MediaInternalLogRecords = MediaInternalLogRecords;
  exports.MediaInternalLogRecordsPtr = MediaInternalLogRecordsPtr;
  exports.MediaInternalLogRecordsAssociatedPtr = MediaInternalLogRecordsAssociatedPtr;
})();