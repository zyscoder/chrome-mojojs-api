// content/common/pepper_plugin.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/common/pepper_plugin.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');
  var webplugininfo$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/public/common/webplugininfo.mojom', '../public/common/webplugininfo.mojom.js');
  }
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var process_id$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/process_id.mojom', '../../mojo/public/mojom/base/process_id.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../url/mojom/origin.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../url/mojom/url.mojom.js');
  }



  function PepperHost_InstanceCreated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHost_InstanceCreated_Params.prototype.initDefaults_ = function() {
    this.instanceId = 0;
    this.instance = new associatedBindings.AssociatedInterfacePtrInfo();
    this.host = new associatedBindings.AssociatedInterfaceRequest();
  };
  PepperHost_InstanceCreated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHost_InstanceCreated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PepperHost_InstanceCreated_Params.instance
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_InstanceCreated_Params.host
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 12, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PepperHost_InstanceCreated_Params.encodedSize = codec.kStructHeaderSize + 16;

  PepperHost_InstanceCreated_Params.decode = function(decoder) {
    var packed;
    var val = new PepperHost_InstanceCreated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.instanceId =
        decoder.decodeStruct(codec.Int32);
    val.instance =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.host =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    return val;
  };

  PepperHost_InstanceCreated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHost_InstanceCreated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.instanceId);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.instance);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.host);
  };
  function PepperHost_BindHungDetectorHost_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHost_BindHungDetectorHost_Params.prototype.initDefaults_ = function() {
    this.host = new bindings.InterfaceRequest();
    this.pluginChildId = 0;
    this.pluginPath = null;
  };
  PepperHost_BindHungDetectorHost_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHost_BindHungDetectorHost_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_BindHungDetectorHost_Params.host
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate PepperHost_BindHungDetectorHost_Params.pluginPath
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PepperHost_BindHungDetectorHost_Params.encodedSize = codec.kStructHeaderSize + 16;

  PepperHost_BindHungDetectorHost_Params.decode = function(decoder) {
    var packed;
    var val = new PepperHost_BindHungDetectorHost_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.host =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.pluginChildId =
        decoder.decodeStruct(codec.Int32);
    val.pluginPath =
        decoder.decodeStructPointer(file_path$.FilePath);
    return val;
  };

  PepperHost_BindHungDetectorHost_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHost_BindHungDetectorHost_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.host);
    encoder.encodeStruct(codec.Int32, val.pluginChildId);
    encoder.encodeStructPointer(file_path$.FilePath, val.pluginPath);
  };
  function PepperHost_GetPluginInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHost_GetPluginInfo_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.mimeType = null;
  };
  PepperHost_GetPluginInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHost_GetPluginInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_GetPluginInfo_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_GetPluginInfo_Params.mimeType
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PepperHost_GetPluginInfo_Params.encodedSize = codec.kStructHeaderSize + 16;

  PepperHost_GetPluginInfo_Params.decode = function(decoder) {
    var packed;
    var val = new PepperHost_GetPluginInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.mimeType =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PepperHost_GetPluginInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHost_GetPluginInfo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.mimeType);
  };
  function PepperHost_GetPluginInfo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHost_GetPluginInfo_ResponseParams.prototype.initDefaults_ = function() {
    this.found = false;
    this.pluginInfo = null;
    this.actualMimeType = null;
  };
  PepperHost_GetPluginInfo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHost_GetPluginInfo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PepperHost_GetPluginInfo_ResponseParams.pluginInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, webplugininfo$.WebPluginInfo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_GetPluginInfo_ResponseParams.actualMimeType
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PepperHost_GetPluginInfo_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  PepperHost_GetPluginInfo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PepperHost_GetPluginInfo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.found = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.pluginInfo =
        decoder.decodeStructPointer(webplugininfo$.WebPluginInfo);
    val.actualMimeType =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PepperHost_GetPluginInfo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHost_GetPluginInfo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.found & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(webplugininfo$.WebPluginInfo, val.pluginInfo);
    encoder.encodeStruct(codec.String, val.actualMimeType);
  };
  function PepperHost_DidCreateInProcessInstance_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHost_DidCreateInProcessInstance_Params.prototype.initDefaults_ = function() {
    this.instanceId = 0;
    this.frameRoutingId = 0;
    this.documentUrl = null;
    this.pluginUrl = null;
  };
  PepperHost_DidCreateInProcessInstance_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHost_DidCreateInProcessInstance_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate PepperHost_DidCreateInProcessInstance_Params.documentUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_DidCreateInProcessInstance_Params.pluginUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PepperHost_DidCreateInProcessInstance_Params.encodedSize = codec.kStructHeaderSize + 24;

  PepperHost_DidCreateInProcessInstance_Params.decode = function(decoder) {
    var packed;
    var val = new PepperHost_DidCreateInProcessInstance_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.instanceId =
        decoder.decodeStruct(codec.Int32);
    val.frameRoutingId =
        decoder.decodeStruct(codec.Int32);
    val.documentUrl =
        decoder.decodeStructPointer(url$.Url);
    val.pluginUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PepperHost_DidCreateInProcessInstance_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHost_DidCreateInProcessInstance_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.instanceId);
    encoder.encodeStruct(codec.Int32, val.frameRoutingId);
    encoder.encodeStructPointer(url$.Url, val.documentUrl);
    encoder.encodeStructPointer(url$.Url, val.pluginUrl);
  };
  function PepperHost_DidDeleteInProcessInstance_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHost_DidDeleteInProcessInstance_Params.prototype.initDefaults_ = function() {
    this.instanceId = 0;
  };
  PepperHost_DidDeleteInProcessInstance_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHost_DidDeleteInProcessInstance_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PepperHost_DidDeleteInProcessInstance_Params.encodedSize = codec.kStructHeaderSize + 8;

  PepperHost_DidDeleteInProcessInstance_Params.decode = function(decoder) {
    var packed;
    var val = new PepperHost_DidDeleteInProcessInstance_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.instanceId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PepperHost_DidDeleteInProcessInstance_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHost_DidDeleteInProcessInstance_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.instanceId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PepperHost_DidCreateOutOfProcessPepperInstance_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHost_DidCreateOutOfProcessPepperInstance_Params.prototype.initDefaults_ = function() {
    this.pluginChildId = 0;
    this.ppInstance = 0;
    this.isExternal = false;
    this.isPrivilegedContext = false;
    this.frameRoutingId = 0;
    this.documentUrl = null;
    this.pluginUrl = null;
  };
  PepperHost_DidCreateOutOfProcessPepperInstance_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHost_DidCreateOutOfProcessPepperInstance_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;






    // validate PepperHost_DidCreateOutOfProcessPepperInstance_Params.documentUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_DidCreateOutOfProcessPepperInstance_Params.pluginUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PepperHost_DidCreateOutOfProcessPepperInstance_Params.encodedSize = codec.kStructHeaderSize + 32;

  PepperHost_DidCreateOutOfProcessPepperInstance_Params.decode = function(decoder) {
    var packed;
    var val = new PepperHost_DidCreateOutOfProcessPepperInstance_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pluginChildId =
        decoder.decodeStruct(codec.Int32);
    val.ppInstance =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.isExternal = (packed >> 0) & 1 ? true : false;
    val.isPrivilegedContext = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.frameRoutingId =
        decoder.decodeStruct(codec.Int32);
    val.documentUrl =
        decoder.decodeStructPointer(url$.Url);
    val.pluginUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PepperHost_DidCreateOutOfProcessPepperInstance_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHost_DidCreateOutOfProcessPepperInstance_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.pluginChildId);
    encoder.encodeStruct(codec.Int32, val.ppInstance);
    packed = 0;
    packed |= (val.isExternal & 1) << 0
    packed |= (val.isPrivilegedContext & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.frameRoutingId);
    encoder.encodeStructPointer(url$.Url, val.documentUrl);
    encoder.encodeStructPointer(url$.Url, val.pluginUrl);
  };
  function PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams.prototype.initDefaults_ = function() {
  };
  PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function PepperHost_DidDeleteOutOfProcessPepperInstance_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHost_DidDeleteOutOfProcessPepperInstance_Params.prototype.initDefaults_ = function() {
    this.pluginChildId = 0;
    this.ppInstance = 0;
    this.isExternal = false;
  };
  PepperHost_DidDeleteOutOfProcessPepperInstance_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHost_DidDeleteOutOfProcessPepperInstance_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  PepperHost_DidDeleteOutOfProcessPepperInstance_Params.encodedSize = codec.kStructHeaderSize + 16;

  PepperHost_DidDeleteOutOfProcessPepperInstance_Params.decode = function(decoder) {
    var packed;
    var val = new PepperHost_DidDeleteOutOfProcessPepperInstance_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pluginChildId =
        decoder.decodeStruct(codec.Int32);
    val.ppInstance =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.isExternal = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PepperHost_DidDeleteOutOfProcessPepperInstance_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHost_DidDeleteOutOfProcessPepperInstance_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.pluginChildId);
    encoder.encodeStruct(codec.Int32, val.ppInstance);
    packed = 0;
    packed |= (val.isExternal & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PepperHost_OpenChannelToPepperPlugin_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHost_OpenChannelToPepperPlugin_Params.prototype.initDefaults_ = function() {
    this.embedderOrigin = null;
    this.path = null;
    this.originLock = null;
  };
  PepperHost_OpenChannelToPepperPlugin_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHost_OpenChannelToPepperPlugin_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_OpenChannelToPepperPlugin_Params.embedderOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_OpenChannelToPepperPlugin_Params.path
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_OpenChannelToPepperPlugin_Params.originLock
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, origin$.Origin, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PepperHost_OpenChannelToPepperPlugin_Params.encodedSize = codec.kStructHeaderSize + 24;

  PepperHost_OpenChannelToPepperPlugin_Params.decode = function(decoder) {
    var packed;
    var val = new PepperHost_OpenChannelToPepperPlugin_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.embedderOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.path =
        decoder.decodeStructPointer(file_path$.FilePath);
    val.originLock =
        decoder.decodeStructPointer(origin$.Origin);
    return val;
  };

  PepperHost_OpenChannelToPepperPlugin_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHost_OpenChannelToPepperPlugin_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.embedderOrigin);
    encoder.encodeStructPointer(file_path$.FilePath, val.path);
    encoder.encodeStructPointer(origin$.Origin, val.originLock);
  };
  function PepperHost_OpenChannelToPepperPlugin_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHost_OpenChannelToPepperPlugin_ResponseParams.prototype.initDefaults_ = function() {
    this.handleToChannel = null;
    this.pluginChildId = 0;
    this.pluginPid = null;
  };
  PepperHost_OpenChannelToPepperPlugin_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHost_OpenChannelToPepperPlugin_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_OpenChannelToPepperPlugin_ResponseParams.handleToChannel
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperHost_OpenChannelToPepperPlugin_ResponseParams.pluginPid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, process_id$.ProcessId, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PepperHost_OpenChannelToPepperPlugin_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  PepperHost_OpenChannelToPepperPlugin_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PepperHost_OpenChannelToPepperPlugin_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.handleToChannel =
        decoder.decodeStruct(codec.NullableHandle);
    val.pluginChildId =
        decoder.decodeStruct(codec.Int32);
    val.pluginPid =
        decoder.decodeStructPointer(process_id$.ProcessId);
    return val;
  };

  PepperHost_OpenChannelToPepperPlugin_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHost_OpenChannelToPepperPlugin_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableHandle, val.handleToChannel);
    encoder.encodeStruct(codec.Int32, val.pluginChildId);
    encoder.encodeStructPointer(process_id$.ProcessId, val.pluginPid);
  };
  function PepperHungDetectorHost_PluginHung_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperHungDetectorHost_PluginHung_Params.prototype.initDefaults_ = function() {
    this.isHung = false;
  };
  PepperHungDetectorHost_PluginHung_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperHungDetectorHost_PluginHung_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PepperHungDetectorHost_PluginHung_Params.encodedSize = codec.kStructHeaderSize + 8;

  PepperHungDetectorHost_PluginHung_Params.decode = function(decoder) {
    var packed;
    var val = new PepperHungDetectorHost_PluginHung_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isHung = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PepperHungDetectorHost_PluginHung_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperHungDetectorHost_PluginHung_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isHung & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PepperPluginInstanceHost_StartsPlayback_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperPluginInstanceHost_StartsPlayback_Params.prototype.initDefaults_ = function() {
  };
  PepperPluginInstanceHost_StartsPlayback_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperPluginInstanceHost_StartsPlayback_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PepperPluginInstanceHost_StartsPlayback_Params.encodedSize = codec.kStructHeaderSize + 0;

  PepperPluginInstanceHost_StartsPlayback_Params.decode = function(decoder) {
    var packed;
    var val = new PepperPluginInstanceHost_StartsPlayback_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PepperPluginInstanceHost_StartsPlayback_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperPluginInstanceHost_StartsPlayback_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PepperPluginInstanceHost_StopsPlayback_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperPluginInstanceHost_StopsPlayback_Params.prototype.initDefaults_ = function() {
  };
  PepperPluginInstanceHost_StopsPlayback_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperPluginInstanceHost_StopsPlayback_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PepperPluginInstanceHost_StopsPlayback_Params.encodedSize = codec.kStructHeaderSize + 0;

  PepperPluginInstanceHost_StopsPlayback_Params.decode = function(decoder) {
    var packed;
    var val = new PepperPluginInstanceHost_StopsPlayback_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PepperPluginInstanceHost_StopsPlayback_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperPluginInstanceHost_StopsPlayback_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PepperPluginInstanceHost_InstanceCrashed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperPluginInstanceHost_InstanceCrashed_Params.prototype.initDefaults_ = function() {
    this.pluginPath = null;
    this.pluginPid = null;
  };
  PepperPluginInstanceHost_InstanceCrashed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperPluginInstanceHost_InstanceCrashed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperPluginInstanceHost_InstanceCrashed_Params.pluginPath
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PepperPluginInstanceHost_InstanceCrashed_Params.pluginPid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, process_id$.ProcessId, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PepperPluginInstanceHost_InstanceCrashed_Params.encodedSize = codec.kStructHeaderSize + 16;

  PepperPluginInstanceHost_InstanceCrashed_Params.decode = function(decoder) {
    var packed;
    var val = new PepperPluginInstanceHost_InstanceCrashed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pluginPath =
        decoder.decodeStructPointer(file_path$.FilePath);
    val.pluginPid =
        decoder.decodeStructPointer(process_id$.ProcessId);
    return val;
  };

  PepperPluginInstanceHost_InstanceCrashed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperPluginInstanceHost_InstanceCrashed_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file_path$.FilePath, val.pluginPath);
    encoder.encodeStructPointer(process_id$.ProcessId, val.pluginPid);
  };
  function PepperPluginInstance_SetVolume_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PepperPluginInstance_SetVolume_Params.prototype.initDefaults_ = function() {
    this.volume = 0;
  };
  PepperPluginInstance_SetVolume_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PepperPluginInstance_SetVolume_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PepperPluginInstance_SetVolume_Params.encodedSize = codec.kStructHeaderSize + 8;

  PepperPluginInstance_SetVolume_Params.decode = function(decoder) {
    var packed;
    var val = new PepperPluginInstance_SetVolume_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.volume =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  PepperPluginInstance_SetVolume_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PepperPluginInstance_SetVolume_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.volume);
  };
  var kPepperHost_InstanceCreated_Name = 1629745879;
  var kPepperHost_BindHungDetectorHost_Name = 809967713;
  var kPepperHost_GetPluginInfo_Name = 1581000551;
  var kPepperHost_DidCreateInProcessInstance_Name = 254181556;
  var kPepperHost_DidDeleteInProcessInstance_Name = 1800091822;
  var kPepperHost_DidCreateOutOfProcessPepperInstance_Name = 1370455521;
  var kPepperHost_DidDeleteOutOfProcessPepperInstance_Name = 737139173;
  var kPepperHost_OpenChannelToPepperPlugin_Name = 1089345530;

  function PepperHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PepperHost,
                                                   handleOrPtrInfo);
  }

  function PepperHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PepperHost, associatedInterfacePtrInfo);
  }

  PepperHostAssociatedPtr.prototype =
      Object.create(PepperHostPtr.prototype);
  PepperHostAssociatedPtr.prototype.constructor =
      PepperHostAssociatedPtr;

  function PepperHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  PepperHostPtr.prototype.instanceCreated = function() {
    return PepperHostProxy.prototype.instanceCreated
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperHostProxy.prototype.instanceCreated = function(instanceId, instance, host) {
    var params_ = new PepperHost_InstanceCreated_Params();
    params_.instanceId = instanceId;
    params_.instance = instance;
    params_.host = host;
    var builder = new codec.MessageV2Builder(
        kPepperHost_InstanceCreated_Name,
        codec.align(PepperHost_InstanceCreated_Params.encodedSize));
    builder.setPayload(PepperHost_InstanceCreated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PepperHostPtr.prototype.bindHungDetectorHost = function() {
    return PepperHostProxy.prototype.bindHungDetectorHost
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperHostProxy.prototype.bindHungDetectorHost = function(host, pluginChildId, pluginPath) {
    var params_ = new PepperHost_BindHungDetectorHost_Params();
    params_.host = host;
    params_.pluginChildId = pluginChildId;
    params_.pluginPath = pluginPath;
    var builder = new codec.MessageV0Builder(
        kPepperHost_BindHungDetectorHost_Name,
        codec.align(PepperHost_BindHungDetectorHost_Params.encodedSize));
    builder.encodeStruct(PepperHost_BindHungDetectorHost_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PepperHostPtr.prototype.getPluginInfo = function() {
    return PepperHostProxy.prototype.getPluginInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperHostProxy.prototype.getPluginInfo = function(url, mimeType) {
    var params_ = new PepperHost_GetPluginInfo_Params();
    params_.url = url;
    params_.mimeType = mimeType;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPepperHost_GetPluginInfo_Name,
          codec.align(PepperHost_GetPluginInfo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PepperHost_GetPluginInfo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PepperHost_GetPluginInfo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PepperHostPtr.prototype.didCreateInProcessInstance = function() {
    return PepperHostProxy.prototype.didCreateInProcessInstance
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperHostProxy.prototype.didCreateInProcessInstance = function(instanceId, frameRoutingId, documentUrl, pluginUrl) {
    var params_ = new PepperHost_DidCreateInProcessInstance_Params();
    params_.instanceId = instanceId;
    params_.frameRoutingId = frameRoutingId;
    params_.documentUrl = documentUrl;
    params_.pluginUrl = pluginUrl;
    var builder = new codec.MessageV0Builder(
        kPepperHost_DidCreateInProcessInstance_Name,
        codec.align(PepperHost_DidCreateInProcessInstance_Params.encodedSize));
    builder.encodeStruct(PepperHost_DidCreateInProcessInstance_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PepperHostPtr.prototype.didDeleteInProcessInstance = function() {
    return PepperHostProxy.prototype.didDeleteInProcessInstance
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperHostProxy.prototype.didDeleteInProcessInstance = function(instanceId) {
    var params_ = new PepperHost_DidDeleteInProcessInstance_Params();
    params_.instanceId = instanceId;
    var builder = new codec.MessageV0Builder(
        kPepperHost_DidDeleteInProcessInstance_Name,
        codec.align(PepperHost_DidDeleteInProcessInstance_Params.encodedSize));
    builder.encodeStruct(PepperHost_DidDeleteInProcessInstance_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PepperHostPtr.prototype.didCreateOutOfProcessPepperInstance = function() {
    return PepperHostProxy.prototype.didCreateOutOfProcessPepperInstance
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperHostProxy.prototype.didCreateOutOfProcessPepperInstance = function(pluginChildId, ppInstance, isExternal, frameRoutingId, documentUrl, pluginUrl, isPrivilegedContext) {
    var params_ = new PepperHost_DidCreateOutOfProcessPepperInstance_Params();
    params_.pluginChildId = pluginChildId;
    params_.ppInstance = ppInstance;
    params_.isExternal = isExternal;
    params_.frameRoutingId = frameRoutingId;
    params_.documentUrl = documentUrl;
    params_.pluginUrl = pluginUrl;
    params_.isPrivilegedContext = isPrivilegedContext;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPepperHost_DidCreateOutOfProcessPepperInstance_Name,
          codec.align(PepperHost_DidCreateOutOfProcessPepperInstance_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PepperHost_DidCreateOutOfProcessPepperInstance_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PepperHostPtr.prototype.didDeleteOutOfProcessPepperInstance = function() {
    return PepperHostProxy.prototype.didDeleteOutOfProcessPepperInstance
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperHostProxy.prototype.didDeleteOutOfProcessPepperInstance = function(pluginChildId, ppInstance, isExternal) {
    var params_ = new PepperHost_DidDeleteOutOfProcessPepperInstance_Params();
    params_.pluginChildId = pluginChildId;
    params_.ppInstance = ppInstance;
    params_.isExternal = isExternal;
    var builder = new codec.MessageV0Builder(
        kPepperHost_DidDeleteOutOfProcessPepperInstance_Name,
        codec.align(PepperHost_DidDeleteOutOfProcessPepperInstance_Params.encodedSize));
    builder.encodeStruct(PepperHost_DidDeleteOutOfProcessPepperInstance_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PepperHostPtr.prototype.openChannelToPepperPlugin = function() {
    return PepperHostProxy.prototype.openChannelToPepperPlugin
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperHostProxy.prototype.openChannelToPepperPlugin = function(embedderOrigin, path, originLock) {
    var params_ = new PepperHost_OpenChannelToPepperPlugin_Params();
    params_.embedderOrigin = embedderOrigin;
    params_.path = path;
    params_.originLock = originLock;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPepperHost_OpenChannelToPepperPlugin_Name,
          codec.align(PepperHost_OpenChannelToPepperPlugin_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PepperHost_OpenChannelToPepperPlugin_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PepperHost_OpenChannelToPepperPlugin_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PepperHostStub(delegate) {
    this.delegate_ = delegate;
  }
  PepperHostStub.prototype.instanceCreated = function(instanceId, instance, host) {
    return this.delegate_ && this.delegate_.instanceCreated && this.delegate_.instanceCreated(instanceId, instance, host);
  }
  PepperHostStub.prototype.bindHungDetectorHost = function(host, pluginChildId, pluginPath) {
    return this.delegate_ && this.delegate_.bindHungDetectorHost && this.delegate_.bindHungDetectorHost(host, pluginChildId, pluginPath);
  }
  PepperHostStub.prototype.getPluginInfo = function(url, mimeType) {
    return this.delegate_ && this.delegate_.getPluginInfo && this.delegate_.getPluginInfo(url, mimeType);
  }
  PepperHostStub.prototype.didCreateInProcessInstance = function(instanceId, frameRoutingId, documentUrl, pluginUrl) {
    return this.delegate_ && this.delegate_.didCreateInProcessInstance && this.delegate_.didCreateInProcessInstance(instanceId, frameRoutingId, documentUrl, pluginUrl);
  }
  PepperHostStub.prototype.didDeleteInProcessInstance = function(instanceId) {
    return this.delegate_ && this.delegate_.didDeleteInProcessInstance && this.delegate_.didDeleteInProcessInstance(instanceId);
  }
  PepperHostStub.prototype.didCreateOutOfProcessPepperInstance = function(pluginChildId, ppInstance, isExternal, frameRoutingId, documentUrl, pluginUrl, isPrivilegedContext) {
    return this.delegate_ && this.delegate_.didCreateOutOfProcessPepperInstance && this.delegate_.didCreateOutOfProcessPepperInstance(pluginChildId, ppInstance, isExternal, frameRoutingId, documentUrl, pluginUrl, isPrivilegedContext);
  }
  PepperHostStub.prototype.didDeleteOutOfProcessPepperInstance = function(pluginChildId, ppInstance, isExternal) {
    return this.delegate_ && this.delegate_.didDeleteOutOfProcessPepperInstance && this.delegate_.didDeleteOutOfProcessPepperInstance(pluginChildId, ppInstance, isExternal);
  }
  PepperHostStub.prototype.openChannelToPepperPlugin = function(embedderOrigin, path, originLock) {
    return this.delegate_ && this.delegate_.openChannelToPepperPlugin && this.delegate_.openChannelToPepperPlugin(embedderOrigin, path, originLock);
  }

  PepperHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPepperHost_InstanceCreated_Name:
      var params = reader.decodeStruct(PepperHost_InstanceCreated_Params);
      this.instanceCreated(params.instanceId, params.instance, params.host);
      return true;
    case kPepperHost_BindHungDetectorHost_Name:
      var params = reader.decodeStruct(PepperHost_BindHungDetectorHost_Params);
      this.bindHungDetectorHost(params.host, params.pluginChildId, params.pluginPath);
      return true;
    case kPepperHost_DidCreateInProcessInstance_Name:
      var params = reader.decodeStruct(PepperHost_DidCreateInProcessInstance_Params);
      this.didCreateInProcessInstance(params.instanceId, params.frameRoutingId, params.documentUrl, params.pluginUrl);
      return true;
    case kPepperHost_DidDeleteInProcessInstance_Name:
      var params = reader.decodeStruct(PepperHost_DidDeleteInProcessInstance_Params);
      this.didDeleteInProcessInstance(params.instanceId);
      return true;
    case kPepperHost_DidDeleteOutOfProcessPepperInstance_Name:
      var params = reader.decodeStruct(PepperHost_DidDeleteOutOfProcessPepperInstance_Params);
      this.didDeleteOutOfProcessPepperInstance(params.pluginChildId, params.ppInstance, params.isExternal);
      return true;
    default:
      return false;
    }
  };

  PepperHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPepperHost_GetPluginInfo_Name:
      var params = reader.decodeStruct(PepperHost_GetPluginInfo_Params);
      this.getPluginInfo(params.url, params.mimeType).then(function(response) {
        var responseParams =
            new PepperHost_GetPluginInfo_ResponseParams();
        responseParams.found = response.found;
        responseParams.pluginInfo = response.pluginInfo;
        responseParams.actualMimeType = response.actualMimeType;
        var builder = new codec.MessageV1Builder(
            kPepperHost_GetPluginInfo_Name,
            codec.align(PepperHost_GetPluginInfo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PepperHost_GetPluginInfo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPepperHost_DidCreateOutOfProcessPepperInstance_Name:
      var params = reader.decodeStruct(PepperHost_DidCreateOutOfProcessPepperInstance_Params);
      this.didCreateOutOfProcessPepperInstance(params.pluginChildId, params.ppInstance, params.isExternal, params.frameRoutingId, params.documentUrl, params.pluginUrl, params.isPrivilegedContext).then(function(response) {
        var responseParams =
            new PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kPepperHost_DidCreateOutOfProcessPepperInstance_Name,
            codec.align(PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPepperHost_OpenChannelToPepperPlugin_Name:
      var params = reader.decodeStruct(PepperHost_OpenChannelToPepperPlugin_Params);
      this.openChannelToPepperPlugin(params.embedderOrigin, params.path, params.originLock).then(function(response) {
        var responseParams =
            new PepperHost_OpenChannelToPepperPlugin_ResponseParams();
        responseParams.handleToChannel = response.handleToChannel;
        responseParams.pluginPid = response.pluginPid;
        responseParams.pluginChildId = response.pluginChildId;
        var builder = new codec.MessageV1Builder(
            kPepperHost_OpenChannelToPepperPlugin_Name,
            codec.align(PepperHost_OpenChannelToPepperPlugin_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PepperHost_OpenChannelToPepperPlugin_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePepperHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPepperHost_InstanceCreated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PepperHost_InstanceCreated_Params;
      break;
      case kPepperHost_BindHungDetectorHost_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PepperHost_BindHungDetectorHost_Params;
      break;
      case kPepperHost_GetPluginInfo_Name:
        if (message.expectsResponse())
          paramsClass = PepperHost_GetPluginInfo_Params;
      break;
      case kPepperHost_DidCreateInProcessInstance_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PepperHost_DidCreateInProcessInstance_Params;
      break;
      case kPepperHost_DidDeleteInProcessInstance_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PepperHost_DidDeleteInProcessInstance_Params;
      break;
      case kPepperHost_DidCreateOutOfProcessPepperInstance_Name:
        if (message.expectsResponse())
          paramsClass = PepperHost_DidCreateOutOfProcessPepperInstance_Params;
      break;
      case kPepperHost_DidDeleteOutOfProcessPepperInstance_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PepperHost_DidDeleteOutOfProcessPepperInstance_Params;
      break;
      case kPepperHost_OpenChannelToPepperPlugin_Name:
        if (message.expectsResponse())
          paramsClass = PepperHost_OpenChannelToPepperPlugin_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePepperHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPepperHost_GetPluginInfo_Name:
        if (message.isResponse())
          paramsClass = PepperHost_GetPluginInfo_ResponseParams;
        break;
      case kPepperHost_DidCreateOutOfProcessPepperInstance_Name:
        if (message.isResponse())
          paramsClass = PepperHost_DidCreateOutOfProcessPepperInstance_ResponseParams;
        break;
      case kPepperHost_OpenChannelToPepperPlugin_Name:
        if (message.isResponse())
          paramsClass = PepperHost_OpenChannelToPepperPlugin_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PepperHost = {
    name: 'content.mojom.PepperHost',
    kVersion: 0,
    ptrClass: PepperHostPtr,
    proxyClass: PepperHostProxy,
    stubClass: PepperHostStub,
    validateRequest: validatePepperHostRequest,
    validateResponse: validatePepperHostResponse,
  };
  PepperHostStub.prototype.validator = validatePepperHostRequest;
  PepperHostProxy.prototype.validator = validatePepperHostResponse;
  var kPepperHungDetectorHost_PluginHung_Name = 2111099951;

  function PepperHungDetectorHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PepperHungDetectorHost,
                                                   handleOrPtrInfo);
  }

  function PepperHungDetectorHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PepperHungDetectorHost, associatedInterfacePtrInfo);
  }

  PepperHungDetectorHostAssociatedPtr.prototype =
      Object.create(PepperHungDetectorHostPtr.prototype);
  PepperHungDetectorHostAssociatedPtr.prototype.constructor =
      PepperHungDetectorHostAssociatedPtr;

  function PepperHungDetectorHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  PepperHungDetectorHostPtr.prototype.pluginHung = function() {
    return PepperHungDetectorHostProxy.prototype.pluginHung
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperHungDetectorHostProxy.prototype.pluginHung = function(isHung) {
    var params_ = new PepperHungDetectorHost_PluginHung_Params();
    params_.isHung = isHung;
    var builder = new codec.MessageV0Builder(
        kPepperHungDetectorHost_PluginHung_Name,
        codec.align(PepperHungDetectorHost_PluginHung_Params.encodedSize));
    builder.encodeStruct(PepperHungDetectorHost_PluginHung_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PepperHungDetectorHostStub(delegate) {
    this.delegate_ = delegate;
  }
  PepperHungDetectorHostStub.prototype.pluginHung = function(isHung) {
    return this.delegate_ && this.delegate_.pluginHung && this.delegate_.pluginHung(isHung);
  }

  PepperHungDetectorHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPepperHungDetectorHost_PluginHung_Name:
      var params = reader.decodeStruct(PepperHungDetectorHost_PluginHung_Params);
      this.pluginHung(params.isHung);
      return true;
    default:
      return false;
    }
  };

  PepperHungDetectorHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePepperHungDetectorHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPepperHungDetectorHost_PluginHung_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PepperHungDetectorHost_PluginHung_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePepperHungDetectorHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PepperHungDetectorHost = {
    name: 'content.mojom.PepperHungDetectorHost',
    kVersion: 0,
    ptrClass: PepperHungDetectorHostPtr,
    proxyClass: PepperHungDetectorHostProxy,
    stubClass: PepperHungDetectorHostStub,
    validateRequest: validatePepperHungDetectorHostRequest,
    validateResponse: null,
  };
  PepperHungDetectorHostStub.prototype.validator = validatePepperHungDetectorHostRequest;
  PepperHungDetectorHostProxy.prototype.validator = null;
  var kPepperPluginInstanceHost_StartsPlayback_Name = 1856662591;
  var kPepperPluginInstanceHost_StopsPlayback_Name = 1174293225;
  var kPepperPluginInstanceHost_InstanceCrashed_Name = 1418418563;

  function PepperPluginInstanceHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PepperPluginInstanceHost,
                                                   handleOrPtrInfo);
  }

  function PepperPluginInstanceHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PepperPluginInstanceHost, associatedInterfacePtrInfo);
  }

  PepperPluginInstanceHostAssociatedPtr.prototype =
      Object.create(PepperPluginInstanceHostPtr.prototype);
  PepperPluginInstanceHostAssociatedPtr.prototype.constructor =
      PepperPluginInstanceHostAssociatedPtr;

  function PepperPluginInstanceHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  PepperPluginInstanceHostPtr.prototype.startsPlayback = function() {
    return PepperPluginInstanceHostProxy.prototype.startsPlayback
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperPluginInstanceHostProxy.prototype.startsPlayback = function() {
    var params_ = new PepperPluginInstanceHost_StartsPlayback_Params();
    var builder = new codec.MessageV0Builder(
        kPepperPluginInstanceHost_StartsPlayback_Name,
        codec.align(PepperPluginInstanceHost_StartsPlayback_Params.encodedSize));
    builder.encodeStruct(PepperPluginInstanceHost_StartsPlayback_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PepperPluginInstanceHostPtr.prototype.stopsPlayback = function() {
    return PepperPluginInstanceHostProxy.prototype.stopsPlayback
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperPluginInstanceHostProxy.prototype.stopsPlayback = function() {
    var params_ = new PepperPluginInstanceHost_StopsPlayback_Params();
    var builder = new codec.MessageV0Builder(
        kPepperPluginInstanceHost_StopsPlayback_Name,
        codec.align(PepperPluginInstanceHost_StopsPlayback_Params.encodedSize));
    builder.encodeStruct(PepperPluginInstanceHost_StopsPlayback_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PepperPluginInstanceHostPtr.prototype.instanceCrashed = function() {
    return PepperPluginInstanceHostProxy.prototype.instanceCrashed
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperPluginInstanceHostProxy.prototype.instanceCrashed = function(pluginPath, pluginPid) {
    var params_ = new PepperPluginInstanceHost_InstanceCrashed_Params();
    params_.pluginPath = pluginPath;
    params_.pluginPid = pluginPid;
    var builder = new codec.MessageV0Builder(
        kPepperPluginInstanceHost_InstanceCrashed_Name,
        codec.align(PepperPluginInstanceHost_InstanceCrashed_Params.encodedSize));
    builder.encodeStruct(PepperPluginInstanceHost_InstanceCrashed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PepperPluginInstanceHostStub(delegate) {
    this.delegate_ = delegate;
  }
  PepperPluginInstanceHostStub.prototype.startsPlayback = function() {
    return this.delegate_ && this.delegate_.startsPlayback && this.delegate_.startsPlayback();
  }
  PepperPluginInstanceHostStub.prototype.stopsPlayback = function() {
    return this.delegate_ && this.delegate_.stopsPlayback && this.delegate_.stopsPlayback();
  }
  PepperPluginInstanceHostStub.prototype.instanceCrashed = function(pluginPath, pluginPid) {
    return this.delegate_ && this.delegate_.instanceCrashed && this.delegate_.instanceCrashed(pluginPath, pluginPid);
  }

  PepperPluginInstanceHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPepperPluginInstanceHost_StartsPlayback_Name:
      var params = reader.decodeStruct(PepperPluginInstanceHost_StartsPlayback_Params);
      this.startsPlayback();
      return true;
    case kPepperPluginInstanceHost_StopsPlayback_Name:
      var params = reader.decodeStruct(PepperPluginInstanceHost_StopsPlayback_Params);
      this.stopsPlayback();
      return true;
    case kPepperPluginInstanceHost_InstanceCrashed_Name:
      var params = reader.decodeStruct(PepperPluginInstanceHost_InstanceCrashed_Params);
      this.instanceCrashed(params.pluginPath, params.pluginPid);
      return true;
    default:
      return false;
    }
  };

  PepperPluginInstanceHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePepperPluginInstanceHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPepperPluginInstanceHost_StartsPlayback_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PepperPluginInstanceHost_StartsPlayback_Params;
      break;
      case kPepperPluginInstanceHost_StopsPlayback_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PepperPluginInstanceHost_StopsPlayback_Params;
      break;
      case kPepperPluginInstanceHost_InstanceCrashed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PepperPluginInstanceHost_InstanceCrashed_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePepperPluginInstanceHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PepperPluginInstanceHost = {
    name: 'content.mojom.PepperPluginInstanceHost',
    kVersion: 0,
    ptrClass: PepperPluginInstanceHostPtr,
    proxyClass: PepperPluginInstanceHostProxy,
    stubClass: PepperPluginInstanceHostStub,
    validateRequest: validatePepperPluginInstanceHostRequest,
    validateResponse: null,
  };
  PepperPluginInstanceHostStub.prototype.validator = validatePepperPluginInstanceHostRequest;
  PepperPluginInstanceHostProxy.prototype.validator = null;
  var kPepperPluginInstance_SetVolume_Name = 1675977572;

  function PepperPluginInstancePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PepperPluginInstance,
                                                   handleOrPtrInfo);
  }

  function PepperPluginInstanceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PepperPluginInstance, associatedInterfacePtrInfo);
  }

  PepperPluginInstanceAssociatedPtr.prototype =
      Object.create(PepperPluginInstancePtr.prototype);
  PepperPluginInstanceAssociatedPtr.prototype.constructor =
      PepperPluginInstanceAssociatedPtr;

  function PepperPluginInstanceProxy(receiver) {
    this.receiver_ = receiver;
  }
  PepperPluginInstancePtr.prototype.setVolume = function() {
    return PepperPluginInstanceProxy.prototype.setVolume
        .apply(this.ptr.getProxy(), arguments);
  };

  PepperPluginInstanceProxy.prototype.setVolume = function(volume) {
    var params_ = new PepperPluginInstance_SetVolume_Params();
    params_.volume = volume;
    var builder = new codec.MessageV0Builder(
        kPepperPluginInstance_SetVolume_Name,
        codec.align(PepperPluginInstance_SetVolume_Params.encodedSize));
    builder.encodeStruct(PepperPluginInstance_SetVolume_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PepperPluginInstanceStub(delegate) {
    this.delegate_ = delegate;
  }
  PepperPluginInstanceStub.prototype.setVolume = function(volume) {
    return this.delegate_ && this.delegate_.setVolume && this.delegate_.setVolume(volume);
  }

  PepperPluginInstanceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPepperPluginInstance_SetVolume_Name:
      var params = reader.decodeStruct(PepperPluginInstance_SetVolume_Params);
      this.setVolume(params.volume);
      return true;
    default:
      return false;
    }
  };

  PepperPluginInstanceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePepperPluginInstanceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPepperPluginInstance_SetVolume_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PepperPluginInstance_SetVolume_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePepperPluginInstanceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PepperPluginInstance = {
    name: 'content.mojom.PepperPluginInstance',
    kVersion: 0,
    ptrClass: PepperPluginInstancePtr,
    proxyClass: PepperPluginInstanceProxy,
    stubClass: PepperPluginInstanceStub,
    validateRequest: validatePepperPluginInstanceRequest,
    validateResponse: null,
  };
  PepperPluginInstanceStub.prototype.validator = validatePepperPluginInstanceRequest;
  PepperPluginInstanceProxy.prototype.validator = null;
  exports.PepperHost = PepperHost;
  exports.PepperHostPtr = PepperHostPtr;
  exports.PepperHostAssociatedPtr = PepperHostAssociatedPtr;
  exports.PepperHungDetectorHost = PepperHungDetectorHost;
  exports.PepperHungDetectorHostPtr = PepperHungDetectorHostPtr;
  exports.PepperHungDetectorHostAssociatedPtr = PepperHungDetectorHostAssociatedPtr;
  exports.PepperPluginInstanceHost = PepperPluginInstanceHost;
  exports.PepperPluginInstanceHostPtr = PepperPluginInstanceHostPtr;
  exports.PepperPluginInstanceHostAssociatedPtr = PepperPluginInstanceHostAssociatedPtr;
  exports.PepperPluginInstance = PepperPluginInstance;
  exports.PepperPluginInstancePtr = PepperPluginInstancePtr;
  exports.PepperPluginInstanceAssociatedPtr = PepperPluginInstanceAssociatedPtr;
})();