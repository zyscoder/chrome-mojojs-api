// content/common/input/input_injector.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/common/input/input_injector.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var scroll_granularity$ =
      mojo.internal.exposeNamespace('ui.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/events/mojom/scroll_granularity.mojom', '../../../ui/events/mojom/scroll_granularity.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../mojo/public/mojom/base/time.mojom.js');
  }


  var GestureSourceType = {};
  GestureSourceType.kDefaultInput = 0;
  GestureSourceType.kTouchInput = 1;
  GestureSourceType.kMouseInput = 2;
  GestureSourceType.kTouchpadInput = 2;
  GestureSourceType.kPenInput = 3;
  GestureSourceType.kGestureSourceTypeMax = 3;
  GestureSourceType.MIN_VALUE = 0;
  GestureSourceType.MAX_VALUE = 3;

  GestureSourceType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  GestureSourceType.toKnownEnumValue = function(value) {
    return value;
  };

  GestureSourceType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var PointerActionType = {};
  PointerActionType.kNotInitialized = 0;
  PointerActionType.kPress = 1;
  PointerActionType.kMove = 2;
  PointerActionType.kRelease = 3;
  PointerActionType.kCancel = 4;
  PointerActionType.kLeave = 5;
  PointerActionType.kIdle = 6;
  PointerActionType.MIN_VALUE = 0;
  PointerActionType.MAX_VALUE = 6;

  PointerActionType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  PointerActionType.toKnownEnumValue = function(value) {
    return value;
  };

  PointerActionType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var SyntheticButton = {};
  SyntheticButton.kNoButton = 0;
  SyntheticButton.kLeft = 1;
  SyntheticButton.kMiddle = 2;
  SyntheticButton.kRight = 3;
  SyntheticButton.kBack = 4;
  SyntheticButton.kForward = 5;
  SyntheticButton.MIN_VALUE = 0;
  SyntheticButton.MAX_VALUE = 5;

  SyntheticButton.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    }
    return false;
  };

  SyntheticButton.toKnownEnumValue = function(value) {
    return value;
  };

  SyntheticButton.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function SyntheticSmoothDrag(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SyntheticSmoothDrag.prototype.initDefaults_ = function() {
    this.gestureSourceType = 0;
    this.speedInPixelsS = 0;
    this.startPoint = null;
    this.distances = null;
  };
  SyntheticSmoothDrag.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SyntheticSmoothDrag.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticSmoothDrag.gestureSourceType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, GestureSourceType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticSmoothDrag.startPoint
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.PointF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticSmoothDrag.distances
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(geometry$.Vector2dF), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SyntheticSmoothDrag.encodedSize = codec.kStructHeaderSize + 24;

  SyntheticSmoothDrag.decode = function(decoder) {
    var packed;
    var val = new SyntheticSmoothDrag();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.gestureSourceType =
        decoder.decodeStruct(new codec.Enum(GestureSourceType));
    val.speedInPixelsS =
        decoder.decodeStruct(codec.Float);
    val.startPoint =
        decoder.decodeStructPointer(geometry$.PointF);
    val.distances =
        decoder.decodeArrayPointer(new codec.PointerTo(geometry$.Vector2dF));
    return val;
  };

  SyntheticSmoothDrag.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SyntheticSmoothDrag.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.gestureSourceType);
    encoder.encodeStruct(codec.Float, val.speedInPixelsS);
    encoder.encodeStructPointer(geometry$.PointF, val.startPoint);
    encoder.encodeArrayPointer(new codec.PointerTo(geometry$.Vector2dF), val.distances);
  };
  function SyntheticSmoothScroll(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SyntheticSmoothScroll.prototype.initDefaults_ = function() {
    this.gestureSourceType = 0;
    this.preventFling = false;
    this.anchor = null;
    this.distances = null;
    this.speedInPixelsS = 0;
    this.flingVelocityX = 0;
    this.flingVelocityY = 0;
    this.granularity = 0;
    this.modifiers = 0;
  };
  SyntheticSmoothScroll.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SyntheticSmoothScroll.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticSmoothScroll.gestureSourceType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, GestureSourceType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticSmoothScroll.anchor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.PointF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticSmoothScroll.distances
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(geometry$.Vector2dF), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;






    // validate SyntheticSmoothScroll.granularity
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 36, scroll_granularity$.ScrollGranularity);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SyntheticSmoothScroll.encodedSize = codec.kStructHeaderSize + 48;

  SyntheticSmoothScroll.decode = function(decoder) {
    var packed;
    var val = new SyntheticSmoothScroll();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.gestureSourceType =
        decoder.decodeStruct(new codec.Enum(GestureSourceType));
    packed = decoder.readUint8();
    val.preventFling = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.anchor =
        decoder.decodeStructPointer(geometry$.PointF);
    val.distances =
        decoder.decodeArrayPointer(new codec.PointerTo(geometry$.Vector2dF));
    val.speedInPixelsS =
        decoder.decodeStruct(codec.Float);
    val.flingVelocityX =
        decoder.decodeStruct(codec.Float);
    val.flingVelocityY =
        decoder.decodeStruct(codec.Float);
    val.granularity =
        decoder.decodeStruct(new codec.Enum(scroll_granularity$.ScrollGranularity));
    val.modifiers =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SyntheticSmoothScroll.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SyntheticSmoothScroll.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.gestureSourceType);
    packed = 0;
    packed |= (val.preventFling & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(geometry$.PointF, val.anchor);
    encoder.encodeArrayPointer(new codec.PointerTo(geometry$.Vector2dF), val.distances);
    encoder.encodeStruct(codec.Float, val.speedInPixelsS);
    encoder.encodeStruct(codec.Float, val.flingVelocityX);
    encoder.encodeStruct(codec.Float, val.flingVelocityY);
    encoder.encodeStruct(codec.Int32, val.granularity);
    encoder.encodeStruct(codec.Int32, val.modifiers);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SyntheticPinch(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SyntheticPinch.prototype.initDefaults_ = function() {
    this.scaleFactor = 0;
    this.relativePointerSpeedInPixelsS = 0;
    this.anchor = null;
  };
  SyntheticPinch.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SyntheticPinch.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SyntheticPinch.anchor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.PointF, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SyntheticPinch.encodedSize = codec.kStructHeaderSize + 16;

  SyntheticPinch.decode = function(decoder) {
    var packed;
    var val = new SyntheticPinch();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.scaleFactor =
        decoder.decodeStruct(codec.Float);
    val.relativePointerSpeedInPixelsS =
        decoder.decodeStruct(codec.Float);
    val.anchor =
        decoder.decodeStructPointer(geometry$.PointF);
    return val;
  };

  SyntheticPinch.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SyntheticPinch.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Float, val.scaleFactor);
    encoder.encodeStruct(codec.Float, val.relativePointerSpeedInPixelsS);
    encoder.encodeStructPointer(geometry$.PointF, val.anchor);
  };
  function SyntheticTap(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SyntheticTap.prototype.initDefaults_ = function() {
    this.gestureSourceType = 0;
    this.durationMs = 0;
    this.position = null;
  };
  SyntheticTap.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SyntheticTap.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticTap.gestureSourceType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, GestureSourceType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticTap.position
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.PointF, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SyntheticTap.encodedSize = codec.kStructHeaderSize + 16;

  SyntheticTap.decode = function(decoder) {
    var packed;
    var val = new SyntheticTap();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.gestureSourceType =
        decoder.decodeStruct(new codec.Enum(GestureSourceType));
    val.durationMs =
        decoder.decodeStruct(codec.Float);
    val.position =
        decoder.decodeStructPointer(geometry$.PointF);
    return val;
  };

  SyntheticTap.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SyntheticTap.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.gestureSourceType);
    encoder.encodeStruct(codec.Float, val.durationMs);
    encoder.encodeStructPointer(geometry$.PointF, val.position);
  };
  function SyntheticPointerActionParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SyntheticPointerActionParams.prototype.initDefaults_ = function() {
    this.pointerActionType = 0;
    this.pointerId = 0;
    this.position = null;
    this.button = 0;
    this.keyModifiers = 0;
    this.width = 0;
    this.height = 0;
    this.rotationAngle = 0;
    this.force = 0;
    this.tangentialPressure = 0;
    this.tiltX = 0;
    this.tiltY = 0;
    this.timestamp = null;
    this.duration = null;
  };
  SyntheticPointerActionParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SyntheticPointerActionParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 80}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticPointerActionParams.pointerActionType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PointerActionType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticPointerActionParams.position
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.PointF, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SyntheticPointerActionParams.button
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, SyntheticButton);
    if (err !== validator.validationError.NONE)
        return err;










    // validate SyntheticPointerActionParams.timestamp
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticPointerActionParams.duration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SyntheticPointerActionParams.encodedSize = codec.kStructHeaderSize + 72;

  SyntheticPointerActionParams.decode = function(decoder) {
    var packed;
    var val = new SyntheticPointerActionParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pointerActionType =
        decoder.decodeStruct(new codec.Enum(PointerActionType));
    val.pointerId =
        decoder.decodeStruct(codec.Uint32);
    val.position =
        decoder.decodeStructPointer(geometry$.PointF);
    val.button =
        decoder.decodeStruct(new codec.Enum(SyntheticButton));
    val.keyModifiers =
        decoder.decodeStruct(codec.Int32);
    val.width =
        decoder.decodeStruct(codec.Float);
    val.height =
        decoder.decodeStruct(codec.Float);
    val.rotationAngle =
        decoder.decodeStruct(codec.Float);
    val.force =
        decoder.decodeStruct(codec.Float);
    val.tangentialPressure =
        decoder.decodeStruct(codec.Float);
    val.tiltX =
        decoder.decodeStruct(codec.Int32);
    val.tiltY =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.timestamp =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.duration =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  SyntheticPointerActionParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SyntheticPointerActionParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.pointerActionType);
    encoder.encodeStruct(codec.Uint32, val.pointerId);
    encoder.encodeStructPointer(geometry$.PointF, val.position);
    encoder.encodeStruct(codec.Int32, val.button);
    encoder.encodeStruct(codec.Int32, val.keyModifiers);
    encoder.encodeStruct(codec.Float, val.width);
    encoder.encodeStruct(codec.Float, val.height);
    encoder.encodeStruct(codec.Float, val.rotationAngle);
    encoder.encodeStruct(codec.Float, val.force);
    encoder.encodeStruct(codec.Float, val.tangentialPressure);
    encoder.encodeStruct(codec.Int32, val.tiltX);
    encoder.encodeStruct(codec.Int32, val.tiltY);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(time$.TimeTicks, val.timestamp);
    encoder.encodeStructPointer(time$.TimeDelta, val.duration);
  };
  function SyntheticPointerAction(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SyntheticPointerAction.prototype.initDefaults_ = function() {
    this.gestureSourceType = 0;
    this.params = null;
  };
  SyntheticPointerAction.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SyntheticPointerAction.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticPointerAction.gestureSourceType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, GestureSourceType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SyntheticPointerAction.params
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.ArrayOf(new codec.PointerTo(SyntheticPointerActionParams)), false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SyntheticPointerAction.encodedSize = codec.kStructHeaderSize + 16;

  SyntheticPointerAction.decode = function(decoder) {
    var packed;
    var val = new SyntheticPointerAction();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.gestureSourceType =
        decoder.decodeStruct(new codec.Enum(GestureSourceType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.params =
        decoder.decodeArrayPointer(new codec.ArrayOf(new codec.PointerTo(SyntheticPointerActionParams)));
    return val;
  };

  SyntheticPointerAction.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SyntheticPointerAction.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.gestureSourceType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.ArrayOf(new codec.PointerTo(SyntheticPointerActionParams)), val.params);
  };
  function InputInjector_QueueSyntheticSmoothDrag_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InputInjector_QueueSyntheticSmoothDrag_Params.prototype.initDefaults_ = function() {
    this.drag = null;
  };
  InputInjector_QueueSyntheticSmoothDrag_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InputInjector_QueueSyntheticSmoothDrag_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InputInjector_QueueSyntheticSmoothDrag_Params.drag
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SyntheticSmoothDrag, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InputInjector_QueueSyntheticSmoothDrag_Params.encodedSize = codec.kStructHeaderSize + 8;

  InputInjector_QueueSyntheticSmoothDrag_Params.decode = function(decoder) {
    var packed;
    var val = new InputInjector_QueueSyntheticSmoothDrag_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.drag =
        decoder.decodeStructPointer(SyntheticSmoothDrag);
    return val;
  };

  InputInjector_QueueSyntheticSmoothDrag_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InputInjector_QueueSyntheticSmoothDrag_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SyntheticSmoothDrag, val.drag);
  };
  function InputInjector_QueueSyntheticSmoothDrag_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InputInjector_QueueSyntheticSmoothDrag_ResponseParams.prototype.initDefaults_ = function() {
  };
  InputInjector_QueueSyntheticSmoothDrag_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InputInjector_QueueSyntheticSmoothDrag_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InputInjector_QueueSyntheticSmoothDrag_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  InputInjector_QueueSyntheticSmoothDrag_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InputInjector_QueueSyntheticSmoothDrag_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InputInjector_QueueSyntheticSmoothDrag_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InputInjector_QueueSyntheticSmoothDrag_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function InputInjector_QueueSyntheticSmoothScroll_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InputInjector_QueueSyntheticSmoothScroll_Params.prototype.initDefaults_ = function() {
    this.scroll = null;
  };
  InputInjector_QueueSyntheticSmoothScroll_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InputInjector_QueueSyntheticSmoothScroll_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InputInjector_QueueSyntheticSmoothScroll_Params.scroll
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SyntheticSmoothScroll, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InputInjector_QueueSyntheticSmoothScroll_Params.encodedSize = codec.kStructHeaderSize + 8;

  InputInjector_QueueSyntheticSmoothScroll_Params.decode = function(decoder) {
    var packed;
    var val = new InputInjector_QueueSyntheticSmoothScroll_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.scroll =
        decoder.decodeStructPointer(SyntheticSmoothScroll);
    return val;
  };

  InputInjector_QueueSyntheticSmoothScroll_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InputInjector_QueueSyntheticSmoothScroll_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SyntheticSmoothScroll, val.scroll);
  };
  function InputInjector_QueueSyntheticSmoothScroll_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InputInjector_QueueSyntheticSmoothScroll_ResponseParams.prototype.initDefaults_ = function() {
  };
  InputInjector_QueueSyntheticSmoothScroll_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InputInjector_QueueSyntheticSmoothScroll_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InputInjector_QueueSyntheticSmoothScroll_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  InputInjector_QueueSyntheticSmoothScroll_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InputInjector_QueueSyntheticSmoothScroll_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InputInjector_QueueSyntheticSmoothScroll_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InputInjector_QueueSyntheticSmoothScroll_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function InputInjector_QueueSyntheticPinch_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InputInjector_QueueSyntheticPinch_Params.prototype.initDefaults_ = function() {
    this.pinch = null;
  };
  InputInjector_QueueSyntheticPinch_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InputInjector_QueueSyntheticPinch_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InputInjector_QueueSyntheticPinch_Params.pinch
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SyntheticPinch, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InputInjector_QueueSyntheticPinch_Params.encodedSize = codec.kStructHeaderSize + 8;

  InputInjector_QueueSyntheticPinch_Params.decode = function(decoder) {
    var packed;
    var val = new InputInjector_QueueSyntheticPinch_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pinch =
        decoder.decodeStructPointer(SyntheticPinch);
    return val;
  };

  InputInjector_QueueSyntheticPinch_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InputInjector_QueueSyntheticPinch_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SyntheticPinch, val.pinch);
  };
  function InputInjector_QueueSyntheticPinch_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InputInjector_QueueSyntheticPinch_ResponseParams.prototype.initDefaults_ = function() {
  };
  InputInjector_QueueSyntheticPinch_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InputInjector_QueueSyntheticPinch_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InputInjector_QueueSyntheticPinch_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  InputInjector_QueueSyntheticPinch_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InputInjector_QueueSyntheticPinch_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InputInjector_QueueSyntheticPinch_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InputInjector_QueueSyntheticPinch_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function InputInjector_QueueSyntheticTap_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InputInjector_QueueSyntheticTap_Params.prototype.initDefaults_ = function() {
    this.tap = null;
  };
  InputInjector_QueueSyntheticTap_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InputInjector_QueueSyntheticTap_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InputInjector_QueueSyntheticTap_Params.tap
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SyntheticTap, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InputInjector_QueueSyntheticTap_Params.encodedSize = codec.kStructHeaderSize + 8;

  InputInjector_QueueSyntheticTap_Params.decode = function(decoder) {
    var packed;
    var val = new InputInjector_QueueSyntheticTap_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tap =
        decoder.decodeStructPointer(SyntheticTap);
    return val;
  };

  InputInjector_QueueSyntheticTap_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InputInjector_QueueSyntheticTap_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SyntheticTap, val.tap);
  };
  function InputInjector_QueueSyntheticTap_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InputInjector_QueueSyntheticTap_ResponseParams.prototype.initDefaults_ = function() {
  };
  InputInjector_QueueSyntheticTap_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InputInjector_QueueSyntheticTap_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InputInjector_QueueSyntheticTap_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  InputInjector_QueueSyntheticTap_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InputInjector_QueueSyntheticTap_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InputInjector_QueueSyntheticTap_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InputInjector_QueueSyntheticTap_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function InputInjector_QueueSyntheticPointerAction_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InputInjector_QueueSyntheticPointerAction_Params.prototype.initDefaults_ = function() {
    this.pointerAction = null;
  };
  InputInjector_QueueSyntheticPointerAction_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InputInjector_QueueSyntheticPointerAction_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InputInjector_QueueSyntheticPointerAction_Params.pointerAction
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SyntheticPointerAction, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InputInjector_QueueSyntheticPointerAction_Params.encodedSize = codec.kStructHeaderSize + 8;

  InputInjector_QueueSyntheticPointerAction_Params.decode = function(decoder) {
    var packed;
    var val = new InputInjector_QueueSyntheticPointerAction_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pointerAction =
        decoder.decodeStructPointer(SyntheticPointerAction);
    return val;
  };

  InputInjector_QueueSyntheticPointerAction_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InputInjector_QueueSyntheticPointerAction_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SyntheticPointerAction, val.pointerAction);
  };
  function InputInjector_QueueSyntheticPointerAction_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InputInjector_QueueSyntheticPointerAction_ResponseParams.prototype.initDefaults_ = function() {
  };
  InputInjector_QueueSyntheticPointerAction_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InputInjector_QueueSyntheticPointerAction_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InputInjector_QueueSyntheticPointerAction_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  InputInjector_QueueSyntheticPointerAction_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InputInjector_QueueSyntheticPointerAction_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InputInjector_QueueSyntheticPointerAction_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InputInjector_QueueSyntheticPointerAction_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  var kInputInjector_QueueSyntheticSmoothDrag_Name = 1657573237;
  var kInputInjector_QueueSyntheticSmoothScroll_Name = 233521065;
  var kInputInjector_QueueSyntheticPinch_Name = 186625999;
  var kInputInjector_QueueSyntheticTap_Name = 1312508278;
  var kInputInjector_QueueSyntheticPointerAction_Name = 1976129442;

  function InputInjectorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(InputInjector,
                                                   handleOrPtrInfo);
  }

  function InputInjectorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        InputInjector, associatedInterfacePtrInfo);
  }

  InputInjectorAssociatedPtr.prototype =
      Object.create(InputInjectorPtr.prototype);
  InputInjectorAssociatedPtr.prototype.constructor =
      InputInjectorAssociatedPtr;

  function InputInjectorProxy(receiver) {
    this.receiver_ = receiver;
  }
  InputInjectorPtr.prototype.queueSyntheticSmoothDrag = function() {
    return InputInjectorProxy.prototype.queueSyntheticSmoothDrag
        .apply(this.ptr.getProxy(), arguments);
  };

  InputInjectorProxy.prototype.queueSyntheticSmoothDrag = function(drag) {
    var params_ = new InputInjector_QueueSyntheticSmoothDrag_Params();
    params_.drag = drag;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInputInjector_QueueSyntheticSmoothDrag_Name,
          codec.align(InputInjector_QueueSyntheticSmoothDrag_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(InputInjector_QueueSyntheticSmoothDrag_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InputInjector_QueueSyntheticSmoothDrag_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  InputInjectorPtr.prototype.queueSyntheticSmoothScroll = function() {
    return InputInjectorProxy.prototype.queueSyntheticSmoothScroll
        .apply(this.ptr.getProxy(), arguments);
  };

  InputInjectorProxy.prototype.queueSyntheticSmoothScroll = function(scroll) {
    var params_ = new InputInjector_QueueSyntheticSmoothScroll_Params();
    params_.scroll = scroll;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInputInjector_QueueSyntheticSmoothScroll_Name,
          codec.align(InputInjector_QueueSyntheticSmoothScroll_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(InputInjector_QueueSyntheticSmoothScroll_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InputInjector_QueueSyntheticSmoothScroll_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  InputInjectorPtr.prototype.queueSyntheticPinch = function() {
    return InputInjectorProxy.prototype.queueSyntheticPinch
        .apply(this.ptr.getProxy(), arguments);
  };

  InputInjectorProxy.prototype.queueSyntheticPinch = function(pinch) {
    var params_ = new InputInjector_QueueSyntheticPinch_Params();
    params_.pinch = pinch;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInputInjector_QueueSyntheticPinch_Name,
          codec.align(InputInjector_QueueSyntheticPinch_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(InputInjector_QueueSyntheticPinch_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InputInjector_QueueSyntheticPinch_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  InputInjectorPtr.prototype.queueSyntheticTap = function() {
    return InputInjectorProxy.prototype.queueSyntheticTap
        .apply(this.ptr.getProxy(), arguments);
  };

  InputInjectorProxy.prototype.queueSyntheticTap = function(tap) {
    var params_ = new InputInjector_QueueSyntheticTap_Params();
    params_.tap = tap;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInputInjector_QueueSyntheticTap_Name,
          codec.align(InputInjector_QueueSyntheticTap_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(InputInjector_QueueSyntheticTap_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InputInjector_QueueSyntheticTap_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  InputInjectorPtr.prototype.queueSyntheticPointerAction = function() {
    return InputInjectorProxy.prototype.queueSyntheticPointerAction
        .apply(this.ptr.getProxy(), arguments);
  };

  InputInjectorProxy.prototype.queueSyntheticPointerAction = function(pointerAction) {
    var params_ = new InputInjector_QueueSyntheticPointerAction_Params();
    params_.pointerAction = pointerAction;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInputInjector_QueueSyntheticPointerAction_Name,
          codec.align(InputInjector_QueueSyntheticPointerAction_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(InputInjector_QueueSyntheticPointerAction_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InputInjector_QueueSyntheticPointerAction_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function InputInjectorStub(delegate) {
    this.delegate_ = delegate;
  }
  InputInjectorStub.prototype.queueSyntheticSmoothDrag = function(drag) {
    return this.delegate_ && this.delegate_.queueSyntheticSmoothDrag && this.delegate_.queueSyntheticSmoothDrag(drag);
  }
  InputInjectorStub.prototype.queueSyntheticSmoothScroll = function(scroll) {
    return this.delegate_ && this.delegate_.queueSyntheticSmoothScroll && this.delegate_.queueSyntheticSmoothScroll(scroll);
  }
  InputInjectorStub.prototype.queueSyntheticPinch = function(pinch) {
    return this.delegate_ && this.delegate_.queueSyntheticPinch && this.delegate_.queueSyntheticPinch(pinch);
  }
  InputInjectorStub.prototype.queueSyntheticTap = function(tap) {
    return this.delegate_ && this.delegate_.queueSyntheticTap && this.delegate_.queueSyntheticTap(tap);
  }
  InputInjectorStub.prototype.queueSyntheticPointerAction = function(pointerAction) {
    return this.delegate_ && this.delegate_.queueSyntheticPointerAction && this.delegate_.queueSyntheticPointerAction(pointerAction);
  }

  InputInjectorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  InputInjectorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kInputInjector_QueueSyntheticSmoothDrag_Name:
      var params = reader.decodeStruct(InputInjector_QueueSyntheticSmoothDrag_Params);
      this.queueSyntheticSmoothDrag(params.drag).then(function(response) {
        var responseParams =
            new InputInjector_QueueSyntheticSmoothDrag_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kInputInjector_QueueSyntheticSmoothDrag_Name,
            codec.align(InputInjector_QueueSyntheticSmoothDrag_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(InputInjector_QueueSyntheticSmoothDrag_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kInputInjector_QueueSyntheticSmoothScroll_Name:
      var params = reader.decodeStruct(InputInjector_QueueSyntheticSmoothScroll_Params);
      this.queueSyntheticSmoothScroll(params.scroll).then(function(response) {
        var responseParams =
            new InputInjector_QueueSyntheticSmoothScroll_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kInputInjector_QueueSyntheticSmoothScroll_Name,
            codec.align(InputInjector_QueueSyntheticSmoothScroll_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(InputInjector_QueueSyntheticSmoothScroll_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kInputInjector_QueueSyntheticPinch_Name:
      var params = reader.decodeStruct(InputInjector_QueueSyntheticPinch_Params);
      this.queueSyntheticPinch(params.pinch).then(function(response) {
        var responseParams =
            new InputInjector_QueueSyntheticPinch_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kInputInjector_QueueSyntheticPinch_Name,
            codec.align(InputInjector_QueueSyntheticPinch_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(InputInjector_QueueSyntheticPinch_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kInputInjector_QueueSyntheticTap_Name:
      var params = reader.decodeStruct(InputInjector_QueueSyntheticTap_Params);
      this.queueSyntheticTap(params.tap).then(function(response) {
        var responseParams =
            new InputInjector_QueueSyntheticTap_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kInputInjector_QueueSyntheticTap_Name,
            codec.align(InputInjector_QueueSyntheticTap_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(InputInjector_QueueSyntheticTap_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kInputInjector_QueueSyntheticPointerAction_Name:
      var params = reader.decodeStruct(InputInjector_QueueSyntheticPointerAction_Params);
      this.queueSyntheticPointerAction(params.pointerAction).then(function(response) {
        var responseParams =
            new InputInjector_QueueSyntheticPointerAction_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kInputInjector_QueueSyntheticPointerAction_Name,
            codec.align(InputInjector_QueueSyntheticPointerAction_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(InputInjector_QueueSyntheticPointerAction_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateInputInjectorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kInputInjector_QueueSyntheticSmoothDrag_Name:
        if (message.expectsResponse())
          paramsClass = InputInjector_QueueSyntheticSmoothDrag_Params;
      break;
      case kInputInjector_QueueSyntheticSmoothScroll_Name:
        if (message.expectsResponse())
          paramsClass = InputInjector_QueueSyntheticSmoothScroll_Params;
      break;
      case kInputInjector_QueueSyntheticPinch_Name:
        if (message.expectsResponse())
          paramsClass = InputInjector_QueueSyntheticPinch_Params;
      break;
      case kInputInjector_QueueSyntheticTap_Name:
        if (message.expectsResponse())
          paramsClass = InputInjector_QueueSyntheticTap_Params;
      break;
      case kInputInjector_QueueSyntheticPointerAction_Name:
        if (message.expectsResponse())
          paramsClass = InputInjector_QueueSyntheticPointerAction_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateInputInjectorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kInputInjector_QueueSyntheticSmoothDrag_Name:
        if (message.isResponse())
          paramsClass = InputInjector_QueueSyntheticSmoothDrag_ResponseParams;
        break;
      case kInputInjector_QueueSyntheticSmoothScroll_Name:
        if (message.isResponse())
          paramsClass = InputInjector_QueueSyntheticSmoothScroll_ResponseParams;
        break;
      case kInputInjector_QueueSyntheticPinch_Name:
        if (message.isResponse())
          paramsClass = InputInjector_QueueSyntheticPinch_ResponseParams;
        break;
      case kInputInjector_QueueSyntheticTap_Name:
        if (message.isResponse())
          paramsClass = InputInjector_QueueSyntheticTap_ResponseParams;
        break;
      case kInputInjector_QueueSyntheticPointerAction_Name:
        if (message.isResponse())
          paramsClass = InputInjector_QueueSyntheticPointerAction_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var InputInjector = {
    name: 'content.mojom.InputInjector',
    kVersion: 0,
    ptrClass: InputInjectorPtr,
    proxyClass: InputInjectorProxy,
    stubClass: InputInjectorStub,
    validateRequest: validateInputInjectorRequest,
    validateResponse: validateInputInjectorResponse,
  };
  InputInjectorStub.prototype.validator = validateInputInjectorRequest;
  InputInjectorProxy.prototype.validator = validateInputInjectorResponse;
  exports.GestureSourceType = GestureSourceType;
  exports.PointerActionType = PointerActionType;
  exports.SyntheticButton = SyntheticButton;
  exports.SyntheticSmoothDrag = SyntheticSmoothDrag;
  exports.SyntheticSmoothScroll = SyntheticSmoothScroll;
  exports.SyntheticPinch = SyntheticPinch;
  exports.SyntheticTap = SyntheticTap;
  exports.SyntheticPointerActionParams = SyntheticPointerActionParams;
  exports.SyntheticPointerAction = SyntheticPointerAction;
  exports.InputInjector = InputInjector;
  exports.InputInjectorPtr = InputInjectorPtr;
  exports.InputInjectorAssociatedPtr = InputInjectorAssociatedPtr;
})();