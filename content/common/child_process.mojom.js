// content/common/child_process.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/common/child_process.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');
  var ipc$ =
      mojo.internal.exposeNamespace('iPC.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ipc/ipc.mojom', '../../ipc/ipc.mojom.js');
  }
  var file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file.mojom', '../../mojo/public/mojom/base/file.mojom.js');
  }
  var generic_pending_receiver$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/generic_pending_receiver.mojom', '../../mojo/public/mojom/base/generic_pending_receiver.mojom.js');
  }
  var memory_pressure_level$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/memory_pressure_level.mojom', '../../mojo/public/mojom/base/memory_pressure_level.mojom.js');
  }
  var background_tracing_agent$ =
      mojo.internal.exposeNamespace('tracing.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/tracing/public/mojom/background_tracing_agent.mojom', '../../services/tracing/public/mojom/background_tracing_agent.mojom.js');
  }
  var system_tracing_service$ =
      mojo.internal.exposeNamespace('tracing.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/tracing/public/mojom/system_tracing_service.mojom', '../../services/tracing/public/mojom/system_tracing_service.mojom.js');
  }



  function ChildProcessHost_Ping_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcessHost_Ping_Params.prototype.initDefaults_ = function() {
  };
  ChildProcessHost_Ping_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcessHost_Ping_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChildProcessHost_Ping_Params.encodedSize = codec.kStructHeaderSize + 0;

  ChildProcessHost_Ping_Params.decode = function(decoder) {
    var packed;
    var val = new ChildProcessHost_Ping_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ChildProcessHost_Ping_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcessHost_Ping_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ChildProcessHost_Ping_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcessHost_Ping_ResponseParams.prototype.initDefaults_ = function() {
  };
  ChildProcessHost_Ping_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcessHost_Ping_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChildProcessHost_Ping_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  ChildProcessHost_Ping_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ChildProcessHost_Ping_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ChildProcessHost_Ping_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcessHost_Ping_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function ChildProcessHost_BindHostReceiver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcessHost_BindHostReceiver_Params.prototype.initDefaults_ = function() {
    this.receiver = null;
  };
  ChildProcessHost_BindHostReceiver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcessHost_BindHostReceiver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChildProcessHost_BindHostReceiver_Params.receiver
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, generic_pending_receiver$.GenericPendingReceiver, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChildProcessHost_BindHostReceiver_Params.encodedSize = codec.kStructHeaderSize + 8;

  ChildProcessHost_BindHostReceiver_Params.decode = function(decoder) {
    var packed;
    var val = new ChildProcessHost_BindHostReceiver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStructPointer(generic_pending_receiver$.GenericPendingReceiver);
    return val;
  };

  ChildProcessHost_BindHostReceiver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcessHost_BindHostReceiver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(generic_pending_receiver$.GenericPendingReceiver, val.receiver);
  };
  function ChildProcess_ProcessShutdown_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcess_ProcessShutdown_Params.prototype.initDefaults_ = function() {
  };
  ChildProcess_ProcessShutdown_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcess_ProcessShutdown_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChildProcess_ProcessShutdown_Params.encodedSize = codec.kStructHeaderSize + 0;

  ChildProcess_ProcessShutdown_Params.decode = function(decoder) {
    var packed;
    var val = new ChildProcess_ProcessShutdown_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ChildProcess_ProcessShutdown_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcess_ProcessShutdown_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ChildProcess_SetIPCLoggingEnabled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcess_SetIPCLoggingEnabled_Params.prototype.initDefaults_ = function() {
    this.on = false;
  };
  ChildProcess_SetIPCLoggingEnabled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcess_SetIPCLoggingEnabled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ChildProcess_SetIPCLoggingEnabled_Params.encodedSize = codec.kStructHeaderSize + 8;

  ChildProcess_SetIPCLoggingEnabled_Params.decode = function(decoder) {
    var packed;
    var val = new ChildProcess_SetIPCLoggingEnabled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.on = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ChildProcess_SetIPCLoggingEnabled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcess_SetIPCLoggingEnabled_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.on & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ChildProcess_GetBackgroundTracingAgentProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcess_GetBackgroundTracingAgentProvider_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  ChildProcess_GetBackgroundTracingAgentProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcess_GetBackgroundTracingAgentProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChildProcess_GetBackgroundTracingAgentProvider_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChildProcess_GetBackgroundTracingAgentProvider_Params.encodedSize = codec.kStructHeaderSize + 8;

  ChildProcess_GetBackgroundTracingAgentProvider_Params.decode = function(decoder) {
    var packed;
    var val = new ChildProcess_GetBackgroundTracingAgentProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ChildProcess_GetBackgroundTracingAgentProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcess_GetBackgroundTracingAgentProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ChildProcess_EnableSystemTracingService_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcess_EnableSystemTracingService_Params.prototype.initDefaults_ = function() {
    this.remote = new system_tracing_service$.SystemTracingServicePtr();
  };
  ChildProcess_EnableSystemTracingService_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcess_EnableSystemTracingService_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChildProcess_EnableSystemTracingService_Params.remote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChildProcess_EnableSystemTracingService_Params.encodedSize = codec.kStructHeaderSize + 8;

  ChildProcess_EnableSystemTracingService_Params.decode = function(decoder) {
    var packed;
    var val = new ChildProcess_EnableSystemTracingService_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remote =
        decoder.decodeStruct(new codec.Interface(system_tracing_service$.SystemTracingServicePtr));
    return val;
  };

  ChildProcess_EnableSystemTracingService_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcess_EnableSystemTracingService_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(system_tracing_service$.SystemTracingServicePtr), val.remote);
  };
  function ChildProcess_CrashHungProcess_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcess_CrashHungProcess_Params.prototype.initDefaults_ = function() {
  };
  ChildProcess_CrashHungProcess_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcess_CrashHungProcess_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChildProcess_CrashHungProcess_Params.encodedSize = codec.kStructHeaderSize + 0;

  ChildProcess_CrashHungProcess_Params.decode = function(decoder) {
    var packed;
    var val = new ChildProcess_CrashHungProcess_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ChildProcess_CrashHungProcess_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcess_CrashHungProcess_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ChildProcess_RunServiceDeprecated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcess_RunServiceDeprecated_Params.prototype.initDefaults_ = function() {
    this.serviceName = null;
    this.servicePipe = null;
  };
  ChildProcess_RunServiceDeprecated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcess_RunServiceDeprecated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChildProcess_RunServiceDeprecated_Params.serviceName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChildProcess_RunServiceDeprecated_Params.servicePipe
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChildProcess_RunServiceDeprecated_Params.encodedSize = codec.kStructHeaderSize + 16;

  ChildProcess_RunServiceDeprecated_Params.decode = function(decoder) {
    var packed;
    var val = new ChildProcess_RunServiceDeprecated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.serviceName =
        decoder.decodeStruct(codec.String);
    val.servicePipe =
        decoder.decodeStruct(codec.Handle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ChildProcess_RunServiceDeprecated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcess_RunServiceDeprecated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.serviceName);
    encoder.encodeStruct(codec.Handle, val.servicePipe);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ChildProcess_BindServiceInterface_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcess_BindServiceInterface_Params.prototype.initDefaults_ = function() {
    this.receiver = null;
  };
  ChildProcess_BindServiceInterface_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcess_BindServiceInterface_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChildProcess_BindServiceInterface_Params.receiver
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, generic_pending_receiver$.GenericPendingReceiver, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChildProcess_BindServiceInterface_Params.encodedSize = codec.kStructHeaderSize + 8;

  ChildProcess_BindServiceInterface_Params.decode = function(decoder) {
    var packed;
    var val = new ChildProcess_BindServiceInterface_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStructPointer(generic_pending_receiver$.GenericPendingReceiver);
    return val;
  };

  ChildProcess_BindServiceInterface_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcess_BindServiceInterface_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(generic_pending_receiver$.GenericPendingReceiver, val.receiver);
  };
  function ChildProcess_BindReceiver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcess_BindReceiver_Params.prototype.initDefaults_ = function() {
    this.receiver = null;
  };
  ChildProcess_BindReceiver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcess_BindReceiver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChildProcess_BindReceiver_Params.receiver
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, generic_pending_receiver$.GenericPendingReceiver, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChildProcess_BindReceiver_Params.encodedSize = codec.kStructHeaderSize + 8;

  ChildProcess_BindReceiver_Params.decode = function(decoder) {
    var packed;
    var val = new ChildProcess_BindReceiver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStructPointer(generic_pending_receiver$.GenericPendingReceiver);
    return val;
  };

  ChildProcess_BindReceiver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcess_BindReceiver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(generic_pending_receiver$.GenericPendingReceiver, val.receiver);
  };
  function ChildProcess_SetPseudonymizationSalt_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChildProcess_SetPseudonymizationSalt_Params.prototype.initDefaults_ = function() {
    this.salt = 0;
  };
  ChildProcess_SetPseudonymizationSalt_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChildProcess_SetPseudonymizationSalt_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ChildProcess_SetPseudonymizationSalt_Params.encodedSize = codec.kStructHeaderSize + 8;

  ChildProcess_SetPseudonymizationSalt_Params.decode = function(decoder) {
    var packed;
    var val = new ChildProcess_SetPseudonymizationSalt_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.salt =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ChildProcess_SetPseudonymizationSalt_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChildProcess_SetPseudonymizationSalt_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.salt);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kChildProcessHost_Ping_Name = 667426868;
  var kChildProcessHost_BindHostReceiver_Name = 507328450;

  function ChildProcessHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ChildProcessHost,
                                                   handleOrPtrInfo);
  }

  function ChildProcessHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ChildProcessHost, associatedInterfacePtrInfo);
  }

  ChildProcessHostAssociatedPtr.prototype =
      Object.create(ChildProcessHostPtr.prototype);
  ChildProcessHostAssociatedPtr.prototype.constructor =
      ChildProcessHostAssociatedPtr;

  function ChildProcessHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  ChildProcessHostPtr.prototype.ping = function() {
    return ChildProcessHostProxy.prototype.ping
        .apply(this.ptr.getProxy(), arguments);
  };

  ChildProcessHostProxy.prototype.ping = function() {
    var params_ = new ChildProcessHost_Ping_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kChildProcessHost_Ping_Name,
          codec.align(ChildProcessHost_Ping_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ChildProcessHost_Ping_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ChildProcessHost_Ping_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ChildProcessHostPtr.prototype.bindHostReceiver = function() {
    return ChildProcessHostProxy.prototype.bindHostReceiver
        .apply(this.ptr.getProxy(), arguments);
  };

  ChildProcessHostProxy.prototype.bindHostReceiver = function(receiver) {
    var params_ = new ChildProcessHost_BindHostReceiver_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kChildProcessHost_BindHostReceiver_Name,
        codec.align(ChildProcessHost_BindHostReceiver_Params.encodedSize));
    builder.encodeStruct(ChildProcessHost_BindHostReceiver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ChildProcessHostStub(delegate) {
    this.delegate_ = delegate;
  }
  ChildProcessHostStub.prototype.ping = function() {
    return this.delegate_ && this.delegate_.ping && this.delegate_.ping();
  }
  ChildProcessHostStub.prototype.bindHostReceiver = function(receiver) {
    return this.delegate_ && this.delegate_.bindHostReceiver && this.delegate_.bindHostReceiver(receiver);
  }

  ChildProcessHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kChildProcessHost_BindHostReceiver_Name:
      var params = reader.decodeStruct(ChildProcessHost_BindHostReceiver_Params);
      this.bindHostReceiver(params.receiver);
      return true;
    default:
      return false;
    }
  };

  ChildProcessHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kChildProcessHost_Ping_Name:
      var params = reader.decodeStruct(ChildProcessHost_Ping_Params);
      this.ping().then(function(response) {
        var responseParams =
            new ChildProcessHost_Ping_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kChildProcessHost_Ping_Name,
            codec.align(ChildProcessHost_Ping_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ChildProcessHost_Ping_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateChildProcessHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kChildProcessHost_Ping_Name:
        if (message.expectsResponse())
          paramsClass = ChildProcessHost_Ping_Params;
      break;
      case kChildProcessHost_BindHostReceiver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChildProcessHost_BindHostReceiver_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateChildProcessHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kChildProcessHost_Ping_Name:
        if (message.isResponse())
          paramsClass = ChildProcessHost_Ping_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ChildProcessHost = {
    name: 'content.mojom.ChildProcessHost',
    kVersion: 0,
    ptrClass: ChildProcessHostPtr,
    proxyClass: ChildProcessHostProxy,
    stubClass: ChildProcessHostStub,
    validateRequest: validateChildProcessHostRequest,
    validateResponse: validateChildProcessHostResponse,
  };
  ChildProcessHostStub.prototype.validator = validateChildProcessHostRequest;
  ChildProcessHostProxy.prototype.validator = validateChildProcessHostResponse;
  var kChildProcess_ProcessShutdown_Name = 1593931118;
  var kChildProcess_SetIPCLoggingEnabled_Name = 800823577;
  var kChildProcess_GetBackgroundTracingAgentProvider_Name = 1414830673;
  var kChildProcess_EnableSystemTracingService_Name = 395546651;
  var kChildProcess_CrashHungProcess_Name = 2008785549;
  var kChildProcess_RunServiceDeprecated_Name = 491282618;
  var kChildProcess_BindServiceInterface_Name = 1921463871;
  var kChildProcess_BindReceiver_Name = 1221309667;
  var kChildProcess_SetPseudonymizationSalt_Name = 1307388705;

  function ChildProcessPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ChildProcess,
                                                   handleOrPtrInfo);
  }

  function ChildProcessAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ChildProcess, associatedInterfacePtrInfo);
  }

  ChildProcessAssociatedPtr.prototype =
      Object.create(ChildProcessPtr.prototype);
  ChildProcessAssociatedPtr.prototype.constructor =
      ChildProcessAssociatedPtr;

  function ChildProcessProxy(receiver) {
    this.receiver_ = receiver;
  }
  ChildProcessPtr.prototype.processShutdown = function() {
    return ChildProcessProxy.prototype.processShutdown
        .apply(this.ptr.getProxy(), arguments);
  };

  ChildProcessProxy.prototype.processShutdown = function() {
    var params_ = new ChildProcess_ProcessShutdown_Params();
    var builder = new codec.MessageV0Builder(
        kChildProcess_ProcessShutdown_Name,
        codec.align(ChildProcess_ProcessShutdown_Params.encodedSize));
    builder.encodeStruct(ChildProcess_ProcessShutdown_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ChildProcessPtr.prototype.setIPCLoggingEnabled = function() {
    return ChildProcessProxy.prototype.setIPCLoggingEnabled
        .apply(this.ptr.getProxy(), arguments);
  };

  ChildProcessProxy.prototype.setIPCLoggingEnabled = function(on) {
    var params_ = new ChildProcess_SetIPCLoggingEnabled_Params();
    params_.on = on;
    var builder = new codec.MessageV0Builder(
        kChildProcess_SetIPCLoggingEnabled_Name,
        codec.align(ChildProcess_SetIPCLoggingEnabled_Params.encodedSize));
    builder.encodeStruct(ChildProcess_SetIPCLoggingEnabled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ChildProcessPtr.prototype.getBackgroundTracingAgentProvider = function() {
    return ChildProcessProxy.prototype.getBackgroundTracingAgentProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  ChildProcessProxy.prototype.getBackgroundTracingAgentProvider = function(receiver) {
    var params_ = new ChildProcess_GetBackgroundTracingAgentProvider_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kChildProcess_GetBackgroundTracingAgentProvider_Name,
        codec.align(ChildProcess_GetBackgroundTracingAgentProvider_Params.encodedSize));
    builder.encodeStruct(ChildProcess_GetBackgroundTracingAgentProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ChildProcessPtr.prototype.enableSystemTracingService = function() {
    return ChildProcessProxy.prototype.enableSystemTracingService
        .apply(this.ptr.getProxy(), arguments);
  };

  ChildProcessProxy.prototype.enableSystemTracingService = function(remote) {
    var params_ = new ChildProcess_EnableSystemTracingService_Params();
    params_.remote = remote;
    var builder = new codec.MessageV0Builder(
        kChildProcess_EnableSystemTracingService_Name,
        codec.align(ChildProcess_EnableSystemTracingService_Params.encodedSize));
    builder.encodeStruct(ChildProcess_EnableSystemTracingService_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ChildProcessPtr.prototype.crashHungProcess = function() {
    return ChildProcessProxy.prototype.crashHungProcess
        .apply(this.ptr.getProxy(), arguments);
  };

  ChildProcessProxy.prototype.crashHungProcess = function() {
    var params_ = new ChildProcess_CrashHungProcess_Params();
    var builder = new codec.MessageV0Builder(
        kChildProcess_CrashHungProcess_Name,
        codec.align(ChildProcess_CrashHungProcess_Params.encodedSize));
    builder.encodeStruct(ChildProcess_CrashHungProcess_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ChildProcessPtr.prototype.runServiceDeprecated = function() {
    return ChildProcessProxy.prototype.runServiceDeprecated
        .apply(this.ptr.getProxy(), arguments);
  };

  ChildProcessProxy.prototype.runServiceDeprecated = function(serviceName, servicePipe) {
    var params_ = new ChildProcess_RunServiceDeprecated_Params();
    params_.serviceName = serviceName;
    params_.servicePipe = servicePipe;
    var builder = new codec.MessageV0Builder(
        kChildProcess_RunServiceDeprecated_Name,
        codec.align(ChildProcess_RunServiceDeprecated_Params.encodedSize));
    builder.encodeStruct(ChildProcess_RunServiceDeprecated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ChildProcessPtr.prototype.bindServiceInterface = function() {
    return ChildProcessProxy.prototype.bindServiceInterface
        .apply(this.ptr.getProxy(), arguments);
  };

  ChildProcessProxy.prototype.bindServiceInterface = function(receiver) {
    var params_ = new ChildProcess_BindServiceInterface_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kChildProcess_BindServiceInterface_Name,
        codec.align(ChildProcess_BindServiceInterface_Params.encodedSize));
    builder.encodeStruct(ChildProcess_BindServiceInterface_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ChildProcessPtr.prototype.bindReceiver = function() {
    return ChildProcessProxy.prototype.bindReceiver
        .apply(this.ptr.getProxy(), arguments);
  };

  ChildProcessProxy.prototype.bindReceiver = function(receiver) {
    var params_ = new ChildProcess_BindReceiver_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kChildProcess_BindReceiver_Name,
        codec.align(ChildProcess_BindReceiver_Params.encodedSize));
    builder.encodeStruct(ChildProcess_BindReceiver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ChildProcessPtr.prototype.setPseudonymizationSalt = function() {
    return ChildProcessProxy.prototype.setPseudonymizationSalt
        .apply(this.ptr.getProxy(), arguments);
  };

  ChildProcessProxy.prototype.setPseudonymizationSalt = function(salt) {
    var params_ = new ChildProcess_SetPseudonymizationSalt_Params();
    params_.salt = salt;
    var builder = new codec.MessageV0Builder(
        kChildProcess_SetPseudonymizationSalt_Name,
        codec.align(ChildProcess_SetPseudonymizationSalt_Params.encodedSize));
    builder.encodeStruct(ChildProcess_SetPseudonymizationSalt_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ChildProcessStub(delegate) {
    this.delegate_ = delegate;
  }
  ChildProcessStub.prototype.processShutdown = function() {
    return this.delegate_ && this.delegate_.processShutdown && this.delegate_.processShutdown();
  }
  ChildProcessStub.prototype.setIPCLoggingEnabled = function(on) {
    return this.delegate_ && this.delegate_.setIPCLoggingEnabled && this.delegate_.setIPCLoggingEnabled(on);
  }
  ChildProcessStub.prototype.getBackgroundTracingAgentProvider = function(receiver) {
    return this.delegate_ && this.delegate_.getBackgroundTracingAgentProvider && this.delegate_.getBackgroundTracingAgentProvider(receiver);
  }
  ChildProcessStub.prototype.enableSystemTracingService = function(remote) {
    return this.delegate_ && this.delegate_.enableSystemTracingService && this.delegate_.enableSystemTracingService(remote);
  }
  ChildProcessStub.prototype.crashHungProcess = function() {
    return this.delegate_ && this.delegate_.crashHungProcess && this.delegate_.crashHungProcess();
  }
  ChildProcessStub.prototype.runServiceDeprecated = function(serviceName, servicePipe) {
    return this.delegate_ && this.delegate_.runServiceDeprecated && this.delegate_.runServiceDeprecated(serviceName, servicePipe);
  }
  ChildProcessStub.prototype.bindServiceInterface = function(receiver) {
    return this.delegate_ && this.delegate_.bindServiceInterface && this.delegate_.bindServiceInterface(receiver);
  }
  ChildProcessStub.prototype.bindReceiver = function(receiver) {
    return this.delegate_ && this.delegate_.bindReceiver && this.delegate_.bindReceiver(receiver);
  }
  ChildProcessStub.prototype.setPseudonymizationSalt = function(salt) {
    return this.delegate_ && this.delegate_.setPseudonymizationSalt && this.delegate_.setPseudonymizationSalt(salt);
  }

  ChildProcessStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kChildProcess_ProcessShutdown_Name:
      var params = reader.decodeStruct(ChildProcess_ProcessShutdown_Params);
      this.processShutdown();
      return true;
    case kChildProcess_SetIPCLoggingEnabled_Name:
      var params = reader.decodeStruct(ChildProcess_SetIPCLoggingEnabled_Params);
      this.setIPCLoggingEnabled(params.on);
      return true;
    case kChildProcess_GetBackgroundTracingAgentProvider_Name:
      var params = reader.decodeStruct(ChildProcess_GetBackgroundTracingAgentProvider_Params);
      this.getBackgroundTracingAgentProvider(params.receiver);
      return true;
    case kChildProcess_EnableSystemTracingService_Name:
      var params = reader.decodeStruct(ChildProcess_EnableSystemTracingService_Params);
      this.enableSystemTracingService(params.remote);
      return true;
    case kChildProcess_CrashHungProcess_Name:
      var params = reader.decodeStruct(ChildProcess_CrashHungProcess_Params);
      this.crashHungProcess();
      return true;
    case kChildProcess_RunServiceDeprecated_Name:
      var params = reader.decodeStruct(ChildProcess_RunServiceDeprecated_Params);
      this.runServiceDeprecated(params.serviceName, params.servicePipe);
      return true;
    case kChildProcess_BindServiceInterface_Name:
      var params = reader.decodeStruct(ChildProcess_BindServiceInterface_Params);
      this.bindServiceInterface(params.receiver);
      return true;
    case kChildProcess_BindReceiver_Name:
      var params = reader.decodeStruct(ChildProcess_BindReceiver_Params);
      this.bindReceiver(params.receiver);
      return true;
    case kChildProcess_SetPseudonymizationSalt_Name:
      var params = reader.decodeStruct(ChildProcess_SetPseudonymizationSalt_Params);
      this.setPseudonymizationSalt(params.salt);
      return true;
    default:
      return false;
    }
  };

  ChildProcessStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateChildProcessRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kChildProcess_ProcessShutdown_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChildProcess_ProcessShutdown_Params;
      break;
      case kChildProcess_SetIPCLoggingEnabled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChildProcess_SetIPCLoggingEnabled_Params;
      break;
      case kChildProcess_GetBackgroundTracingAgentProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChildProcess_GetBackgroundTracingAgentProvider_Params;
      break;
      case kChildProcess_EnableSystemTracingService_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChildProcess_EnableSystemTracingService_Params;
      break;
      case kChildProcess_CrashHungProcess_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChildProcess_CrashHungProcess_Params;
      break;
      case kChildProcess_RunServiceDeprecated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChildProcess_RunServiceDeprecated_Params;
      break;
      case kChildProcess_BindServiceInterface_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChildProcess_BindServiceInterface_Params;
      break;
      case kChildProcess_BindReceiver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChildProcess_BindReceiver_Params;
      break;
      case kChildProcess_SetPseudonymizationSalt_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ChildProcess_SetPseudonymizationSalt_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateChildProcessResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ChildProcess = {
    name: 'content.mojom.ChildProcess',
    kVersion: 0,
    ptrClass: ChildProcessPtr,
    proxyClass: ChildProcessProxy,
    stubClass: ChildProcessStub,
    validateRequest: validateChildProcessRequest,
    validateResponse: null,
  };
  ChildProcessStub.prototype.validator = validateChildProcessRequest;
  ChildProcessProxy.prototype.validator = null;
  exports.ChildProcessHost = ChildProcessHost;
  exports.ChildProcessHostPtr = ChildProcessHostPtr;
  exports.ChildProcessHostAssociatedPtr = ChildProcessHostAssociatedPtr;
  exports.ChildProcess = ChildProcess;
  exports.ChildProcessPtr = ChildProcessPtr;
  exports.ChildProcessAssociatedPtr = ChildProcessAssociatedPtr;
})();