// content/common/render_message_filter.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/common/render_message_filter.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var tokens$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/tokens/tokens.mojom', '../../third_party/blink/public/mojom/tokens/tokens.mojom.js');
  }



  function RenderMessageFilter_GenerateRoutingID_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RenderMessageFilter_GenerateRoutingID_Params.prototype.initDefaults_ = function() {
  };
  RenderMessageFilter_GenerateRoutingID_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RenderMessageFilter_GenerateRoutingID_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RenderMessageFilter_GenerateRoutingID_Params.encodedSize = codec.kStructHeaderSize + 0;

  RenderMessageFilter_GenerateRoutingID_Params.decode = function(decoder) {
    var packed;
    var val = new RenderMessageFilter_GenerateRoutingID_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  RenderMessageFilter_GenerateRoutingID_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RenderMessageFilter_GenerateRoutingID_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function RenderMessageFilter_GenerateRoutingID_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RenderMessageFilter_GenerateRoutingID_ResponseParams.prototype.initDefaults_ = function() {
    this.routingId = 0;
  };
  RenderMessageFilter_GenerateRoutingID_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RenderMessageFilter_GenerateRoutingID_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  RenderMessageFilter_GenerateRoutingID_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  RenderMessageFilter_GenerateRoutingID_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new RenderMessageFilter_GenerateRoutingID_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.routingId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  RenderMessageFilter_GenerateRoutingID_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RenderMessageFilter_GenerateRoutingID_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.routingId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function RenderMessageFilter_GenerateFrameRoutingID_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RenderMessageFilter_GenerateFrameRoutingID_Params.prototype.initDefaults_ = function() {
  };
  RenderMessageFilter_GenerateFrameRoutingID_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RenderMessageFilter_GenerateFrameRoutingID_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RenderMessageFilter_GenerateFrameRoutingID_Params.encodedSize = codec.kStructHeaderSize + 0;

  RenderMessageFilter_GenerateFrameRoutingID_Params.decode = function(decoder) {
    var packed;
    var val = new RenderMessageFilter_GenerateFrameRoutingID_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  RenderMessageFilter_GenerateFrameRoutingID_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RenderMessageFilter_GenerateFrameRoutingID_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function RenderMessageFilter_GenerateFrameRoutingID_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RenderMessageFilter_GenerateFrameRoutingID_ResponseParams.prototype.initDefaults_ = function() {
    this.routingId = 0;
    this.frameToken = null;
    this.devtoolsFrameToken = null;
    this.documentToken = null;
  };
  RenderMessageFilter_GenerateFrameRoutingID_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RenderMessageFilter_GenerateFrameRoutingID_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate RenderMessageFilter_GenerateFrameRoutingID_ResponseParams.frameToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, tokens$.LocalFrameToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RenderMessageFilter_GenerateFrameRoutingID_ResponseParams.devtoolsFrameToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RenderMessageFilter_GenerateFrameRoutingID_ResponseParams.documentToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, tokens$.DocumentToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RenderMessageFilter_GenerateFrameRoutingID_ResponseParams.encodedSize = codec.kStructHeaderSize + 32;

  RenderMessageFilter_GenerateFrameRoutingID_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new RenderMessageFilter_GenerateFrameRoutingID_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.routingId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.frameToken =
        decoder.decodeStructPointer(tokens$.LocalFrameToken);
    val.devtoolsFrameToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.documentToken =
        decoder.decodeStructPointer(tokens$.DocumentToken);
    return val;
  };

  RenderMessageFilter_GenerateFrameRoutingID_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RenderMessageFilter_GenerateFrameRoutingID_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.routingId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(tokens$.LocalFrameToken, val.frameToken);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.devtoolsFrameToken);
    encoder.encodeStructPointer(tokens$.DocumentToken, val.documentToken);
  };
  function RenderMessageFilter_HasGpuProcess_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RenderMessageFilter_HasGpuProcess_Params.prototype.initDefaults_ = function() {
  };
  RenderMessageFilter_HasGpuProcess_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RenderMessageFilter_HasGpuProcess_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RenderMessageFilter_HasGpuProcess_Params.encodedSize = codec.kStructHeaderSize + 0;

  RenderMessageFilter_HasGpuProcess_Params.decode = function(decoder) {
    var packed;
    var val = new RenderMessageFilter_HasGpuProcess_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  RenderMessageFilter_HasGpuProcess_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RenderMessageFilter_HasGpuProcess_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function RenderMessageFilter_HasGpuProcess_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RenderMessageFilter_HasGpuProcess_ResponseParams.prototype.initDefaults_ = function() {
    this.hasGpuProcess = false;
  };
  RenderMessageFilter_HasGpuProcess_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RenderMessageFilter_HasGpuProcess_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  RenderMessageFilter_HasGpuProcess_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  RenderMessageFilter_HasGpuProcess_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new RenderMessageFilter_HasGpuProcess_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.hasGpuProcess = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  RenderMessageFilter_HasGpuProcess_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RenderMessageFilter_HasGpuProcess_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.hasGpuProcess & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kRenderMessageFilter_GenerateRoutingID_Name = 489694970;
  var kRenderMessageFilter_GenerateFrameRoutingID_Name = 759088511;
  var kRenderMessageFilter_HasGpuProcess_Name = 684528340;

  function RenderMessageFilterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(RenderMessageFilter,
                                                   handleOrPtrInfo);
  }

  function RenderMessageFilterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        RenderMessageFilter, associatedInterfacePtrInfo);
  }

  RenderMessageFilterAssociatedPtr.prototype =
      Object.create(RenderMessageFilterPtr.prototype);
  RenderMessageFilterAssociatedPtr.prototype.constructor =
      RenderMessageFilterAssociatedPtr;

  function RenderMessageFilterProxy(receiver) {
    this.receiver_ = receiver;
  }
  RenderMessageFilterPtr.prototype.generateRoutingID = function() {
    return RenderMessageFilterProxy.prototype.generateRoutingID
        .apply(this.ptr.getProxy(), arguments);
  };

  RenderMessageFilterProxy.prototype.generateRoutingID = function() {
    var params_ = new RenderMessageFilter_GenerateRoutingID_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kRenderMessageFilter_GenerateRoutingID_Name,
          codec.align(RenderMessageFilter_GenerateRoutingID_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(RenderMessageFilter_GenerateRoutingID_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(RenderMessageFilter_GenerateRoutingID_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  RenderMessageFilterPtr.prototype.generateFrameRoutingID = function() {
    return RenderMessageFilterProxy.prototype.generateFrameRoutingID
        .apply(this.ptr.getProxy(), arguments);
  };

  RenderMessageFilterProxy.prototype.generateFrameRoutingID = function() {
    var params_ = new RenderMessageFilter_GenerateFrameRoutingID_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kRenderMessageFilter_GenerateFrameRoutingID_Name,
          codec.align(RenderMessageFilter_GenerateFrameRoutingID_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(RenderMessageFilter_GenerateFrameRoutingID_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(RenderMessageFilter_GenerateFrameRoutingID_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  RenderMessageFilterPtr.prototype.hasGpuProcess = function() {
    return RenderMessageFilterProxy.prototype.hasGpuProcess
        .apply(this.ptr.getProxy(), arguments);
  };

  RenderMessageFilterProxy.prototype.hasGpuProcess = function() {
    var params_ = new RenderMessageFilter_HasGpuProcess_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kRenderMessageFilter_HasGpuProcess_Name,
          codec.align(RenderMessageFilter_HasGpuProcess_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(RenderMessageFilter_HasGpuProcess_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(RenderMessageFilter_HasGpuProcess_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function RenderMessageFilterStub(delegate) {
    this.delegate_ = delegate;
  }
  RenderMessageFilterStub.prototype.generateRoutingID = function() {
    return this.delegate_ && this.delegate_.generateRoutingID && this.delegate_.generateRoutingID();
  }
  RenderMessageFilterStub.prototype.generateFrameRoutingID = function() {
    return this.delegate_ && this.delegate_.generateFrameRoutingID && this.delegate_.generateFrameRoutingID();
  }
  RenderMessageFilterStub.prototype.hasGpuProcess = function() {
    return this.delegate_ && this.delegate_.hasGpuProcess && this.delegate_.hasGpuProcess();
  }

  RenderMessageFilterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  RenderMessageFilterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRenderMessageFilter_GenerateRoutingID_Name:
      var params = reader.decodeStruct(RenderMessageFilter_GenerateRoutingID_Params);
      this.generateRoutingID().then(function(response) {
        var responseParams =
            new RenderMessageFilter_GenerateRoutingID_ResponseParams();
        responseParams.routingId = response.routingId;
        var builder = new codec.MessageV1Builder(
            kRenderMessageFilter_GenerateRoutingID_Name,
            codec.align(RenderMessageFilter_GenerateRoutingID_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(RenderMessageFilter_GenerateRoutingID_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kRenderMessageFilter_GenerateFrameRoutingID_Name:
      var params = reader.decodeStruct(RenderMessageFilter_GenerateFrameRoutingID_Params);
      this.generateFrameRoutingID().then(function(response) {
        var responseParams =
            new RenderMessageFilter_GenerateFrameRoutingID_ResponseParams();
        responseParams.routingId = response.routingId;
        responseParams.frameToken = response.frameToken;
        responseParams.devtoolsFrameToken = response.devtoolsFrameToken;
        responseParams.documentToken = response.documentToken;
        var builder = new codec.MessageV1Builder(
            kRenderMessageFilter_GenerateFrameRoutingID_Name,
            codec.align(RenderMessageFilter_GenerateFrameRoutingID_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(RenderMessageFilter_GenerateFrameRoutingID_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kRenderMessageFilter_HasGpuProcess_Name:
      var params = reader.decodeStruct(RenderMessageFilter_HasGpuProcess_Params);
      this.hasGpuProcess().then(function(response) {
        var responseParams =
            new RenderMessageFilter_HasGpuProcess_ResponseParams();
        responseParams.hasGpuProcess = response.hasGpuProcess;
        var builder = new codec.MessageV1Builder(
            kRenderMessageFilter_HasGpuProcess_Name,
            codec.align(RenderMessageFilter_HasGpuProcess_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(RenderMessageFilter_HasGpuProcess_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateRenderMessageFilterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kRenderMessageFilter_GenerateRoutingID_Name:
        if (message.expectsResponse())
          paramsClass = RenderMessageFilter_GenerateRoutingID_Params;
      break;
      case kRenderMessageFilter_GenerateFrameRoutingID_Name:
        if (message.expectsResponse())
          paramsClass = RenderMessageFilter_GenerateFrameRoutingID_Params;
      break;
      case kRenderMessageFilter_HasGpuProcess_Name:
        if (message.expectsResponse())
          paramsClass = RenderMessageFilter_HasGpuProcess_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateRenderMessageFilterResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kRenderMessageFilter_GenerateRoutingID_Name:
        if (message.isResponse())
          paramsClass = RenderMessageFilter_GenerateRoutingID_ResponseParams;
        break;
      case kRenderMessageFilter_GenerateFrameRoutingID_Name:
        if (message.isResponse())
          paramsClass = RenderMessageFilter_GenerateFrameRoutingID_ResponseParams;
        break;
      case kRenderMessageFilter_HasGpuProcess_Name:
        if (message.isResponse())
          paramsClass = RenderMessageFilter_HasGpuProcess_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var RenderMessageFilter = {
    name: 'content.mojom.RenderMessageFilter',
    kVersion: 0,
    ptrClass: RenderMessageFilterPtr,
    proxyClass: RenderMessageFilterProxy,
    stubClass: RenderMessageFilterStub,
    validateRequest: validateRenderMessageFilterRequest,
    validateResponse: validateRenderMessageFilterResponse,
  };
  RenderMessageFilterStub.prototype.validator = validateRenderMessageFilterRequest;
  RenderMessageFilterProxy.prototype.validator = validateRenderMessageFilterResponse;
  exports.RenderMessageFilter = RenderMessageFilter;
  exports.RenderMessageFilterPtr = RenderMessageFilterPtr;
  exports.RenderMessageFilterAssociatedPtr = RenderMessageFilterAssociatedPtr;
})();