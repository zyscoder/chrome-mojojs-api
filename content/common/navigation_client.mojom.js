// content/common/navigation_client.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/common/navigation_client.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');
  var frame_messages$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/common/frame_messages.mojom', 'frame_messages.mojom.js');
  }
  var alternative_error_page_override_info$ =
      mojo.internal.exposeNamespace('content.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'content/public/common/alternative_error_page_override_info.mojom', '../public/common/alternative_error_page_override_info.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../mojo/public/mojom/base/time.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var network_param$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/network_param.mojom', '../../services/network/public/mojom/network_param.mojom.js');
  }
  var restricted_cookie_manager$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/restricted_cookie_manager.mojom', '../../services/network/public/mojom/restricted_cookie_manager.mojom.js');
  }
  var url_loader$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_loader.mojom', '../../services/network/public/mojom/url_loader.mojom.js');
  }
  var url_loader_factory$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_loader_factory.mojom', '../../services/network/public/mojom/url_loader_factory.mojom.js');
  }
  var url_response_head$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_response_head.mojom', '../../services/network/public/mojom/url_response_head.mojom.js');
  }
  var commit_result$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/commit_result/commit_result.mojom', '../../third_party/blink/public/mojom/commit_result/commit_result.mojom.js');
  }
  var storage_area$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/dom_storage/storage_area.mojom', '../../third_party/blink/public/mojom/dom_storage/storage_area.mojom.js');
  }
  var policy_container$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/frame/policy_container.mojom', '../../third_party/blink/public/mojom/frame/policy_container.mojom.js');
  }
  var code_cache$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/code_cache.mojom', '../../third_party/blink/public/mojom/loader/code_cache.mojom.js');
  }
  var referrer$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/referrer.mojom', '../../third_party/blink/public/mojom/loader/referrer.mojom.js');
  }
  var same_document_navigation_type$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/same_document_navigation_type.mojom', '../../third_party/blink/public/mojom/loader/same_document_navigation_type.mojom.js');
  }
  var transferrable_url_loader$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/transferrable_url_loader.mojom', '../../third_party/blink/public/mojom/loader/transferrable_url_loader.mojom.js');
  }
  var url_loader_factory_bundle$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom', '../../third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom.js');
  }
  var resource_cache$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/resource_cache.mojom', '../../third_party/blink/public/mojom/loader/resource_cache.mojom.js');
  }
  var navigation_params$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/navigation/navigation_params.mojom', '../../third_party/blink/public/mojom/navigation/navigation_params.mojom.js');
  }
  var document_policy_feature$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/permissions_policy/document_policy_feature.mojom', '../../third_party/blink/public/mojom/permissions_policy/document_policy_feature.mojom.js');
  }
  var permissions_policy$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/permissions_policy/permissions_policy.mojom', '../../third_party/blink/public/mojom/permissions_policy/permissions_policy.mojom.js');
  }
  var permissions_policy_feature$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom', '../../third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom.js');
  }
  var policy_value$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/permissions_policy/policy_value.mojom', '../../third_party/blink/public/mojom/permissions_policy/policy_value.mojom.js');
  }
  var insecure_request_policy$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/security_context/insecure_request_policy.mojom', '../../third_party/blink/public/mojom/security_context/insecure_request_policy.mojom.js');
  }
  var controller_service_worker$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/controller_service_worker.mojom', '../../third_party/blink/public/mojom/service_worker/controller_service_worker.mojom.js');
  }
  var service_worker_container$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_container.mojom', '../../third_party/blink/public/mojom/service_worker/service_worker_container.mojom.js');
  }
  var tokens$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/tokens/tokens.mojom', '../../third_party/blink/public/mojom/tokens/tokens.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../url/mojom/origin.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../url/mojom/url.mojom.js');
  }


  var NavigationGesture = {};

  NavigationGesture.isKnownEnumValue = function(value) {
    return false;
  };

  NavigationGesture.toKnownEnumValue = function(value) {
    return value;
  };

  NavigationGesture.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var PageTransition = {};

  PageTransition.isKnownEnumValue = function(value) {
    return false;
  };

  PageTransition.toKnownEnumValue = function(value) {
    return value;
  };

  PageTransition.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function PageState(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageState.prototype.initDefaults_ = function() {
  };
  PageState.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageState.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageState.encodedSize = codec.kStructHeaderSize + 0;

  PageState.decode = function(decoder) {
    var packed;
    var val = new PageState();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageState.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageState.encodedSize);
    encoder.writeUint32(0);
  };
  function DidCommitProvisionalLoadParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DidCommitProvisionalLoadParams.prototype.initDefaults_ = function() {
    this.itemSequenceNumber = -1;
    this.documentSequenceNumber = -1;
    this.navigationApiKey = null;
    this.url = null;
    this.referrer = null;
    this.transition = 0;
    this.shouldUpdateHistory = false;
    this.didCreateNewEntry = false;
    this.urlIsUnreachable = false;
    this.isOverridingUserAgent = false;
    this.historyListWasCleared = false;
    this.hasPotentiallyTrustworthyUniqueOrigin = false;
    this.contentsMimeType = null;
    this.method = null;
    this.postId = 0;
    this.httpStatusCode = 0;
    this.insecureRequestPolicy = 0;
    this.pageState = null;
    this.origin = null;
    this.initiatorBaseUrl = null;
    this.originCalculationDebugInfo = null;
    this.permissionsPolicyHeader = null;
    this.documentPolicyHeader = null;
    this.insecureNavigationsSet = null;
    this.requestId = 0;
    this.navigationToken = null;
    this.embeddingToken = null;
    this.unloadStart = null;
    this.unloadEnd = null;
    this.commitNavigationEnd = null;
  };
  DidCommitProvisionalLoadParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DidCommitProvisionalLoadParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 192}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate DidCommitProvisionalLoadParams.navigationApiKey
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.referrer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, referrer$.Referrer, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.transition
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 40, PageTransition);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DidCommitProvisionalLoadParams.contentsMimeType
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 48, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate DidCommitProvisionalLoadParams.method
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 56, false)
    if (err !== validator.validationError.NONE)
        return err;





    // validate DidCommitProvisionalLoadParams.pageState
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, PageState, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate DidCommitProvisionalLoadParams.origin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.initiatorBaseUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.originCalculationDebugInfo
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 104, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.permissionsPolicyHeader
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 112, 8, new codec.PointerTo(permissions_policy$.ParsedPermissionsPolicyDeclaration), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.documentPolicyHeader
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 120, false, new codec.Enum(document_policy_feature$.DocumentPolicyFeature), policy_value$.PolicyValue, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.insecureRequestPolicy
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 76, insecure_request_policy$.InsecureRequestPolicy);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.insecureNavigationsSet
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 128, 4, codec.Uint32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;




    // validate DidCommitProvisionalLoadParams.navigationToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 144, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.embeddingToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 152, unguessable_token$.UnguessableToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.unloadStart
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 160, time$.TimeTicks, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.unloadEnd
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 168, time$.TimeTicks, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitProvisionalLoadParams.commitNavigationEnd
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 176, time$.TimeTicks, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DidCommitProvisionalLoadParams.encodedSize = codec.kStructHeaderSize + 184;

  DidCommitProvisionalLoadParams.decode = function(decoder) {
    var packed;
    var val = new DidCommitProvisionalLoadParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.itemSequenceNumber =
        decoder.decodeStruct(codec.Int64);
    val.documentSequenceNumber =
        decoder.decodeStruct(codec.Int64);
    val.navigationApiKey =
        decoder.decodeStruct(codec.String);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.referrer =
        decoder.decodeStructPointer(referrer$.Referrer);
    val.transition =
        decoder.decodeStruct(new codec.Enum(PageTransition));
    packed = decoder.readUint8();
    val.shouldUpdateHistory = (packed >> 0) & 1 ? true : false;
    val.didCreateNewEntry = (packed >> 1) & 1 ? true : false;
    val.urlIsUnreachable = (packed >> 2) & 1 ? true : false;
    val.isOverridingUserAgent = (packed >> 3) & 1 ? true : false;
    val.historyListWasCleared = (packed >> 4) & 1 ? true : false;
    val.hasPotentiallyTrustworthyUniqueOrigin = (packed >> 5) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.contentsMimeType =
        decoder.decodeStruct(codec.String);
    val.method =
        decoder.decodeStruct(codec.String);
    val.postId =
        decoder.decodeStruct(codec.Int64);
    val.httpStatusCode =
        decoder.decodeStruct(codec.Int32);
    val.insecureRequestPolicy =
        decoder.decodeStruct(new codec.Enum(insecure_request_policy$.InsecureRequestPolicy));
    val.pageState =
        decoder.decodeStructPointer(PageState);
    val.origin =
        decoder.decodeStructPointer(origin$.Origin);
    val.initiatorBaseUrl =
        decoder.decodeStructPointer(url$.Url);
    val.originCalculationDebugInfo =
        decoder.decodeStruct(codec.String);
    val.permissionsPolicyHeader =
        decoder.decodeArrayPointer(new codec.PointerTo(permissions_policy$.ParsedPermissionsPolicyDeclaration));
    val.documentPolicyHeader =
        decoder.decodeMapPointer(new codec.Enum(document_policy_feature$.DocumentPolicyFeature), policy_value$.PolicyValue);
    val.insecureNavigationsSet =
        decoder.decodeArrayPointer(codec.Uint32);
    val.requestId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.navigationToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.embeddingToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.unloadStart =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.unloadEnd =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.commitNavigationEnd =
        decoder.decodeStructPointer(time$.TimeTicks);
    return val;
  };

  DidCommitProvisionalLoadParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DidCommitProvisionalLoadParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.itemSequenceNumber);
    encoder.encodeStruct(codec.Int64, val.documentSequenceNumber);
    encoder.encodeStruct(codec.String, val.navigationApiKey);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(referrer$.Referrer, val.referrer);
    encoder.encodeStruct(codec.Int32, val.transition);
    packed = 0;
    packed |= (val.shouldUpdateHistory & 1) << 0
    packed |= (val.didCreateNewEntry & 1) << 1
    packed |= (val.urlIsUnreachable & 1) << 2
    packed |= (val.isOverridingUserAgent & 1) << 3
    packed |= (val.historyListWasCleared & 1) << 4
    packed |= (val.hasPotentiallyTrustworthyUniqueOrigin & 1) << 5
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.contentsMimeType);
    encoder.encodeStruct(codec.String, val.method);
    encoder.encodeStruct(codec.Int64, val.postId);
    encoder.encodeStruct(codec.Int32, val.httpStatusCode);
    encoder.encodeStruct(codec.Int32, val.insecureRequestPolicy);
    encoder.encodeStructPointer(PageState, val.pageState);
    encoder.encodeStructPointer(origin$.Origin, val.origin);
    encoder.encodeStructPointer(url$.Url, val.initiatorBaseUrl);
    encoder.encodeStruct(codec.String, val.originCalculationDebugInfo);
    encoder.encodeArrayPointer(new codec.PointerTo(permissions_policy$.ParsedPermissionsPolicyDeclaration), val.permissionsPolicyHeader);
    encoder.encodeMapPointer(new codec.Enum(document_policy_feature$.DocumentPolicyFeature), policy_value$.PolicyValue, val.documentPolicyHeader);
    encoder.encodeArrayPointer(codec.Uint32, val.insecureNavigationsSet);
    encoder.encodeStruct(codec.Int32, val.requestId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.navigationToken);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.embeddingToken);
    encoder.encodeStructPointer(time$.TimeTicks, val.unloadStart);
    encoder.encodeStructPointer(time$.TimeTicks, val.unloadEnd);
    encoder.encodeStructPointer(time$.TimeTicks, val.commitNavigationEnd);
  };
  function DidCommitSameDocumentNavigationParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DidCommitSameDocumentNavigationParams.prototype.initDefaults_ = function() {
    this.sameDocumentNavigationType = 0;
    this.isClientRedirect = false;
    this.startedWithTransientActivation = false;
    this.shouldReplaceCurrentEntry = false;
  };
  DidCommitSameDocumentNavigationParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DidCommitSameDocumentNavigationParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DidCommitSameDocumentNavigationParams.sameDocumentNavigationType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, same_document_navigation_type$.SameDocumentNavigationType);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  DidCommitSameDocumentNavigationParams.encodedSize = codec.kStructHeaderSize + 8;

  DidCommitSameDocumentNavigationParams.decode = function(decoder) {
    var packed;
    var val = new DidCommitSameDocumentNavigationParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sameDocumentNavigationType =
        decoder.decodeStruct(new codec.Enum(same_document_navigation_type$.SameDocumentNavigationType));
    packed = decoder.readUint8();
    val.isClientRedirect = (packed >> 0) & 1 ? true : false;
    val.startedWithTransientActivation = (packed >> 1) & 1 ? true : false;
    val.shouldReplaceCurrentEntry = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DidCommitSameDocumentNavigationParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DidCommitSameDocumentNavigationParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.sameDocumentNavigationType);
    packed = 0;
    packed |= (val.isClientRedirect & 1) << 0
    packed |= (val.startedWithTransientActivation & 1) << 1
    packed |= (val.shouldReplaceCurrentEntry & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CookieManagerInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CookieManagerInfo.prototype.initDefaults_ = function() {
    this.origin = null;
    this.cookieManager = new restricted_cookie_manager$.RestrictedCookieManagerPtr();
  };
  CookieManagerInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CookieManagerInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CookieManagerInfo.origin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CookieManagerInfo.cookieManager
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CookieManagerInfo.encodedSize = codec.kStructHeaderSize + 16;

  CookieManagerInfo.decode = function(decoder) {
    var packed;
    var val = new CookieManagerInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.origin =
        decoder.decodeStructPointer(origin$.Origin);
    val.cookieManager =
        decoder.decodeStruct(new codec.Interface(restricted_cookie_manager$.RestrictedCookieManagerPtr));
    return val;
  };

  CookieManagerInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CookieManagerInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.origin);
    encoder.encodeStruct(new codec.Interface(restricted_cookie_manager$.RestrictedCookieManagerPtr), val.cookieManager);
  };
  function StorageInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  StorageInfo.prototype.initDefaults_ = function() {
    this.localStorageArea = new storage_area$.StorageAreaPtr();
    this.sessionStorageArea = new storage_area$.StorageAreaPtr();
  };
  StorageInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  StorageInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StorageInfo.localStorageArea
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate StorageInfo.sessionStorageArea
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  StorageInfo.encodedSize = codec.kStructHeaderSize + 16;

  StorageInfo.decode = function(decoder) {
    var packed;
    var val = new StorageInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.localStorageArea =
        decoder.decodeStruct(new codec.NullableInterface(storage_area$.StorageAreaPtr));
    val.sessionStorageArea =
        decoder.decodeStruct(new codec.NullableInterface(storage_area$.StorageAreaPtr));
    return val;
  };

  StorageInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(StorageInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.NullableInterface(storage_area$.StorageAreaPtr), val.localStorageArea);
    encoder.encodeStruct(new codec.NullableInterface(storage_area$.StorageAreaPtr), val.sessionStorageArea);
  };
  function NavigationClient_CommitNavigation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NavigationClient_CommitNavigation_Params.prototype.initDefaults_ = function() {
    this.commonParams = null;
    this.requestParams = null;
    this.responseHead = null;
    this.responseBody = null;
    this.urlLoaderClientEndpoints = null;
    this.subresourceLoaderFactories = null;
    this.subresourceOverrides = null;
    this.controllerServiceWorkerInfo = null;
    this.containerInfo = null;
    this.subresourceProxyingLoaderFactory = new url_loader_factory$.URLLoaderFactoryPtr();
    this.keepAliveLoaderFactory = new url_loader_factory$.URLLoaderFactoryPtr();
    this.documentToken = null;
    this.devtoolsNavigationToken = null;
    this.permissionsPolicy = null;
    this.policyContainer = null;
    this.codeCacheHost = new code_cache$.CodeCacheHostPtr();
    this.resourceCache = new resource_cache$.ResourceCachePtr();
    this.cookieManagerInfo = null;
    this.storageInfo = null;
  };
  NavigationClient_CommitNavigation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NavigationClient_CommitNavigation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 160}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.commonParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, navigation_params$.CommonNavigationParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.requestParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, navigation_params$.CommitNavigationParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.responseHead
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url_response_head$.URLResponseHead, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.responseBody
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 24, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.urlLoaderClientEndpoints
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, url_loader$.URLLoaderClientEndpoints, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.subresourceLoaderFactories
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, url_loader_factory_bundle$.URLLoaderFactoryBundle, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.subresourceOverrides
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 8, new codec.PointerTo(transferrable_url_loader$.TransferrableURLLoader), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.controllerServiceWorkerInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, controller_service_worker$.ControllerServiceWorkerInfo, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.containerInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, service_worker_container$.ServiceWorkerContainerInfoForClient, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.subresourceProxyingLoaderFactory
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 72, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.keepAliveLoaderFactory
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 80, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.documentToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, tokens$.DocumentToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.devtoolsNavigationToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.permissionsPolicy
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 104, 8, new codec.PointerTo(permissions_policy$.ParsedPermissionsPolicyDeclaration), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.policyContainer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 112, policy_container$.PolicyContainer, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.codeCacheHost
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 120, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.resourceCache
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 128, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.cookieManagerInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 136, CookieManagerInfo, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_Params.storageInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 144, StorageInfo, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NavigationClient_CommitNavigation_Params.encodedSize = codec.kStructHeaderSize + 152;

  NavigationClient_CommitNavigation_Params.decode = function(decoder) {
    var packed;
    var val = new NavigationClient_CommitNavigation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.commonParams =
        decoder.decodeStructPointer(navigation_params$.CommonNavigationParams);
    val.requestParams =
        decoder.decodeStructPointer(navigation_params$.CommitNavigationParams);
    val.responseHead =
        decoder.decodeStructPointer(url_response_head$.URLResponseHead);
    val.responseBody =
        decoder.decodeStruct(codec.NullableHandle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.urlLoaderClientEndpoints =
        decoder.decodeStructPointer(url_loader$.URLLoaderClientEndpoints);
    val.subresourceLoaderFactories =
        decoder.decodeStructPointer(url_loader_factory_bundle$.URLLoaderFactoryBundle);
    val.subresourceOverrides =
        decoder.decodeArrayPointer(new codec.PointerTo(transferrable_url_loader$.TransferrableURLLoader));
    val.controllerServiceWorkerInfo =
        decoder.decodeStructPointer(controller_service_worker$.ControllerServiceWorkerInfo);
    val.containerInfo =
        decoder.decodeStructPointer(service_worker_container$.ServiceWorkerContainerInfoForClient);
    val.subresourceProxyingLoaderFactory =
        decoder.decodeStruct(new codec.NullableInterface(url_loader_factory$.URLLoaderFactoryPtr));
    val.keepAliveLoaderFactory =
        decoder.decodeStruct(new codec.NullableInterface(url_loader_factory$.URLLoaderFactoryPtr));
    val.documentToken =
        decoder.decodeStructPointer(tokens$.DocumentToken);
    val.devtoolsNavigationToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.permissionsPolicy =
        decoder.decodeArrayPointer(new codec.PointerTo(permissions_policy$.ParsedPermissionsPolicyDeclaration));
    val.policyContainer =
        decoder.decodeStructPointer(policy_container$.PolicyContainer);
    val.codeCacheHost =
        decoder.decodeStruct(new codec.NullableInterface(code_cache$.CodeCacheHostPtr));
    val.resourceCache =
        decoder.decodeStruct(new codec.NullableInterface(resource_cache$.ResourceCachePtr));
    val.cookieManagerInfo =
        decoder.decodeStructPointer(CookieManagerInfo);
    val.storageInfo =
        decoder.decodeStructPointer(StorageInfo);
    return val;
  };

  NavigationClient_CommitNavigation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NavigationClient_CommitNavigation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(navigation_params$.CommonNavigationParams, val.commonParams);
    encoder.encodeStructPointer(navigation_params$.CommitNavigationParams, val.requestParams);
    encoder.encodeStructPointer(url_response_head$.URLResponseHead, val.responseHead);
    encoder.encodeStruct(codec.NullableHandle, val.responseBody);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url_loader$.URLLoaderClientEndpoints, val.urlLoaderClientEndpoints);
    encoder.encodeStructPointer(url_loader_factory_bundle$.URLLoaderFactoryBundle, val.subresourceLoaderFactories);
    encoder.encodeArrayPointer(new codec.PointerTo(transferrable_url_loader$.TransferrableURLLoader), val.subresourceOverrides);
    encoder.encodeStructPointer(controller_service_worker$.ControllerServiceWorkerInfo, val.controllerServiceWorkerInfo);
    encoder.encodeStructPointer(service_worker_container$.ServiceWorkerContainerInfoForClient, val.containerInfo);
    encoder.encodeStruct(new codec.NullableInterface(url_loader_factory$.URLLoaderFactoryPtr), val.subresourceProxyingLoaderFactory);
    encoder.encodeStruct(new codec.NullableInterface(url_loader_factory$.URLLoaderFactoryPtr), val.keepAliveLoaderFactory);
    encoder.encodeStructPointer(tokens$.DocumentToken, val.documentToken);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.devtoolsNavigationToken);
    encoder.encodeArrayPointer(new codec.PointerTo(permissions_policy$.ParsedPermissionsPolicyDeclaration), val.permissionsPolicy);
    encoder.encodeStructPointer(policy_container$.PolicyContainer, val.policyContainer);
    encoder.encodeStruct(new codec.NullableInterface(code_cache$.CodeCacheHostPtr), val.codeCacheHost);
    encoder.encodeStruct(new codec.NullableInterface(resource_cache$.ResourceCachePtr), val.resourceCache);
    encoder.encodeStructPointer(CookieManagerInfo, val.cookieManagerInfo);
    encoder.encodeStructPointer(StorageInfo, val.storageInfo);
  };
  function NavigationClient_CommitNavigation_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NavigationClient_CommitNavigation_ResponseParams.prototype.initDefaults_ = function() {
    this.params = null;
    this.interfaceParams = null;
  };
  NavigationClient_CommitNavigation_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NavigationClient_CommitNavigation_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_ResponseParams.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DidCommitProvisionalLoadParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitNavigation_ResponseParams.interfaceParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, frame_messages$.DidCommitProvisionalLoadInterfaceParams, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NavigationClient_CommitNavigation_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  NavigationClient_CommitNavigation_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new NavigationClient_CommitNavigation_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(DidCommitProvisionalLoadParams);
    val.interfaceParams =
        decoder.decodeStructPointer(frame_messages$.DidCommitProvisionalLoadInterfaceParams);
    return val;
  };

  NavigationClient_CommitNavigation_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NavigationClient_CommitNavigation_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DidCommitProvisionalLoadParams, val.params);
    encoder.encodeStructPointer(frame_messages$.DidCommitProvisionalLoadInterfaceParams, val.interfaceParams);
  };
  function NavigationClient_CommitFailedNavigation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NavigationClient_CommitFailedNavigation_Params.prototype.initDefaults_ = function() {
    this.commonParams = null;
    this.requestParams = null;
    this.hasStaleCopyInCache = false;
    this.errorCode = 0;
    this.extendedErrorCode = 0;
    this.resolveErrorInfo = null;
    this.errorPageContent = null;
    this.subresourceLoaderFactories = null;
    this.documentToken = null;
    this.policyContainer = null;
    this.alternativeErrorPageInfo = null;
  };
  NavigationClient_CommitFailedNavigation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NavigationClient_CommitFailedNavigation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 88}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitFailedNavigation_Params.commonParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, navigation_params$.CommonNavigationParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitFailedNavigation_Params.requestParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, navigation_params$.CommitNavigationParams, false);
    if (err !== validator.validationError.NONE)
        return err;





    // validate NavigationClient_CommitFailedNavigation_Params.resolveErrorInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, network_param$.ResolveErrorInfo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitFailedNavigation_Params.errorPageContent
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitFailedNavigation_Params.subresourceLoaderFactories
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, url_loader_factory_bundle$.URLLoaderFactoryBundle, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitFailedNavigation_Params.documentToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, tokens$.DocumentToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitFailedNavigation_Params.policyContainer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, policy_container$.PolicyContainer, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitFailedNavigation_Params.alternativeErrorPageInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, alternative_error_page_override_info$.AlternativeErrorPageOverrideInfo, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NavigationClient_CommitFailedNavigation_Params.encodedSize = codec.kStructHeaderSize + 80;

  NavigationClient_CommitFailedNavigation_Params.decode = function(decoder) {
    var packed;
    var val = new NavigationClient_CommitFailedNavigation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.commonParams =
        decoder.decodeStructPointer(navigation_params$.CommonNavigationParams);
    val.requestParams =
        decoder.decodeStructPointer(navigation_params$.CommitNavigationParams);
    packed = decoder.readUint8();
    val.hasStaleCopyInCache = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.errorCode =
        decoder.decodeStruct(codec.Int32);
    val.extendedErrorCode =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.resolveErrorInfo =
        decoder.decodeStructPointer(network_param$.ResolveErrorInfo);
    val.errorPageContent =
        decoder.decodeStruct(codec.NullableString);
    val.subresourceLoaderFactories =
        decoder.decodeStructPointer(url_loader_factory_bundle$.URLLoaderFactoryBundle);
    val.documentToken =
        decoder.decodeStructPointer(tokens$.DocumentToken);
    val.policyContainer =
        decoder.decodeStructPointer(policy_container$.PolicyContainer);
    val.alternativeErrorPageInfo =
        decoder.decodeStructPointer(alternative_error_page_override_info$.AlternativeErrorPageOverrideInfo);
    return val;
  };

  NavigationClient_CommitFailedNavigation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NavigationClient_CommitFailedNavigation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(navigation_params$.CommonNavigationParams, val.commonParams);
    encoder.encodeStructPointer(navigation_params$.CommitNavigationParams, val.requestParams);
    packed = 0;
    packed |= (val.hasStaleCopyInCache & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.errorCode);
    encoder.encodeStruct(codec.Int32, val.extendedErrorCode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(network_param$.ResolveErrorInfo, val.resolveErrorInfo);
    encoder.encodeStruct(codec.NullableString, val.errorPageContent);
    encoder.encodeStructPointer(url_loader_factory_bundle$.URLLoaderFactoryBundle, val.subresourceLoaderFactories);
    encoder.encodeStructPointer(tokens$.DocumentToken, val.documentToken);
    encoder.encodeStructPointer(policy_container$.PolicyContainer, val.policyContainer);
    encoder.encodeStructPointer(alternative_error_page_override_info$.AlternativeErrorPageOverrideInfo, val.alternativeErrorPageInfo);
  };
  function NavigationClient_CommitFailedNavigation_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NavigationClient_CommitFailedNavigation_ResponseParams.prototype.initDefaults_ = function() {
    this.params = null;
    this.interfaceParams = null;
  };
  NavigationClient_CommitFailedNavigation_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NavigationClient_CommitFailedNavigation_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitFailedNavigation_ResponseParams.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DidCommitProvisionalLoadParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate NavigationClient_CommitFailedNavigation_ResponseParams.interfaceParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, frame_messages$.DidCommitProvisionalLoadInterfaceParams, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  NavigationClient_CommitFailedNavigation_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  NavigationClient_CommitFailedNavigation_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new NavigationClient_CommitFailedNavigation_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(DidCommitProvisionalLoadParams);
    val.interfaceParams =
        decoder.decodeStructPointer(frame_messages$.DidCommitProvisionalLoadInterfaceParams);
    return val;
  };

  NavigationClient_CommitFailedNavigation_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NavigationClient_CommitFailedNavigation_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DidCommitProvisionalLoadParams, val.params);
    encoder.encodeStructPointer(frame_messages$.DidCommitProvisionalLoadInterfaceParams, val.interfaceParams);
  };
  var kNavigationClient_CommitNavigation_Name = 2046318800;
  var kNavigationClient_CommitFailedNavigation_Name = 2004644603;

  function NavigationClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(NavigationClient,
                                                   handleOrPtrInfo);
  }

  function NavigationClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        NavigationClient, associatedInterfacePtrInfo);
  }

  NavigationClientAssociatedPtr.prototype =
      Object.create(NavigationClientPtr.prototype);
  NavigationClientAssociatedPtr.prototype.constructor =
      NavigationClientAssociatedPtr;

  function NavigationClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  NavigationClientPtr.prototype.commitNavigation = function() {
    return NavigationClientProxy.prototype.commitNavigation
        .apply(this.ptr.getProxy(), arguments);
  };

  NavigationClientProxy.prototype.commitNavigation = function(commonParams, requestParams, responseHead, responseBody, urlLoaderClientEndpoints, subresourceLoaderFactories, subresourceOverrides, controllerServiceWorkerInfo, containerInfo, subresourceProxyingLoaderFactory, keepAliveLoaderFactory, documentToken, devtoolsNavigationToken, permissionsPolicy, policyContainer, codeCacheHost, resourceCache, cookieManagerInfo, storageInfo) {
    var params_ = new NavigationClient_CommitNavigation_Params();
    params_.commonParams = commonParams;
    params_.requestParams = requestParams;
    params_.responseHead = responseHead;
    params_.responseBody = responseBody;
    params_.urlLoaderClientEndpoints = urlLoaderClientEndpoints;
    params_.subresourceLoaderFactories = subresourceLoaderFactories;
    params_.subresourceOverrides = subresourceOverrides;
    params_.controllerServiceWorkerInfo = controllerServiceWorkerInfo;
    params_.containerInfo = containerInfo;
    params_.subresourceProxyingLoaderFactory = subresourceProxyingLoaderFactory;
    params_.keepAliveLoaderFactory = keepAliveLoaderFactory;
    params_.documentToken = documentToken;
    params_.devtoolsNavigationToken = devtoolsNavigationToken;
    params_.permissionsPolicy = permissionsPolicy;
    params_.policyContainer = policyContainer;
    params_.codeCacheHost = codeCacheHost;
    params_.resourceCache = resourceCache;
    params_.cookieManagerInfo = cookieManagerInfo;
    params_.storageInfo = storageInfo;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kNavigationClient_CommitNavigation_Name,
          codec.align(NavigationClient_CommitNavigation_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(NavigationClient_CommitNavigation_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(NavigationClient_CommitNavigation_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  NavigationClientPtr.prototype.commitFailedNavigation = function() {
    return NavigationClientProxy.prototype.commitFailedNavigation
        .apply(this.ptr.getProxy(), arguments);
  };

  NavigationClientProxy.prototype.commitFailedNavigation = function(commonParams, requestParams, hasStaleCopyInCache, errorCode, extendedErrorCode, resolveErrorInfo, errorPageContent, subresourceLoaderFactories, documentToken, policyContainer, alternativeErrorPageInfo) {
    var params_ = new NavigationClient_CommitFailedNavigation_Params();
    params_.commonParams = commonParams;
    params_.requestParams = requestParams;
    params_.hasStaleCopyInCache = hasStaleCopyInCache;
    params_.errorCode = errorCode;
    params_.extendedErrorCode = extendedErrorCode;
    params_.resolveErrorInfo = resolveErrorInfo;
    params_.errorPageContent = errorPageContent;
    params_.subresourceLoaderFactories = subresourceLoaderFactories;
    params_.documentToken = documentToken;
    params_.policyContainer = policyContainer;
    params_.alternativeErrorPageInfo = alternativeErrorPageInfo;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kNavigationClient_CommitFailedNavigation_Name,
          codec.align(NavigationClient_CommitFailedNavigation_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(NavigationClient_CommitFailedNavigation_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(NavigationClient_CommitFailedNavigation_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function NavigationClientStub(delegate) {
    this.delegate_ = delegate;
  }
  NavigationClientStub.prototype.commitNavigation = function(commonParams, requestParams, responseHead, responseBody, urlLoaderClientEndpoints, subresourceLoaderFactories, subresourceOverrides, controllerServiceWorkerInfo, containerInfo, subresourceProxyingLoaderFactory, keepAliveLoaderFactory, documentToken, devtoolsNavigationToken, permissionsPolicy, policyContainer, codeCacheHost, resourceCache, cookieManagerInfo, storageInfo) {
    return this.delegate_ && this.delegate_.commitNavigation && this.delegate_.commitNavigation(commonParams, requestParams, responseHead, responseBody, urlLoaderClientEndpoints, subresourceLoaderFactories, subresourceOverrides, controllerServiceWorkerInfo, containerInfo, subresourceProxyingLoaderFactory, keepAliveLoaderFactory, documentToken, devtoolsNavigationToken, permissionsPolicy, policyContainer, codeCacheHost, resourceCache, cookieManagerInfo, storageInfo);
  }
  NavigationClientStub.prototype.commitFailedNavigation = function(commonParams, requestParams, hasStaleCopyInCache, errorCode, extendedErrorCode, resolveErrorInfo, errorPageContent, subresourceLoaderFactories, documentToken, policyContainer, alternativeErrorPageInfo) {
    return this.delegate_ && this.delegate_.commitFailedNavigation && this.delegate_.commitFailedNavigation(commonParams, requestParams, hasStaleCopyInCache, errorCode, extendedErrorCode, resolveErrorInfo, errorPageContent, subresourceLoaderFactories, documentToken, policyContainer, alternativeErrorPageInfo);
  }

  NavigationClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  NavigationClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kNavigationClient_CommitNavigation_Name:
      var params = reader.decodeStruct(NavigationClient_CommitNavigation_Params);
      this.commitNavigation(params.commonParams, params.requestParams, params.responseHead, params.responseBody, params.urlLoaderClientEndpoints, params.subresourceLoaderFactories, params.subresourceOverrides, params.controllerServiceWorkerInfo, params.containerInfo, params.subresourceProxyingLoaderFactory, params.keepAliveLoaderFactory, params.documentToken, params.devtoolsNavigationToken, params.permissionsPolicy, params.policyContainer, params.codeCacheHost, params.resourceCache, params.cookieManagerInfo, params.storageInfo).then(function(response) {
        var responseParams =
            new NavigationClient_CommitNavigation_ResponseParams();
        responseParams.params = response.params;
        responseParams.interfaceParams = response.interfaceParams;
        var builder = new codec.MessageV2Builder(
            kNavigationClient_CommitNavigation_Name,
            codec.align(NavigationClient_CommitNavigation_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(NavigationClient_CommitNavigation_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kNavigationClient_CommitFailedNavigation_Name:
      var params = reader.decodeStruct(NavigationClient_CommitFailedNavigation_Params);
      this.commitFailedNavigation(params.commonParams, params.requestParams, params.hasStaleCopyInCache, params.errorCode, params.extendedErrorCode, params.resolveErrorInfo, params.errorPageContent, params.subresourceLoaderFactories, params.documentToken, params.policyContainer, params.alternativeErrorPageInfo).then(function(response) {
        var responseParams =
            new NavigationClient_CommitFailedNavigation_ResponseParams();
        responseParams.params = response.params;
        responseParams.interfaceParams = response.interfaceParams;
        var builder = new codec.MessageV2Builder(
            kNavigationClient_CommitFailedNavigation_Name,
            codec.align(NavigationClient_CommitFailedNavigation_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(NavigationClient_CommitFailedNavigation_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateNavigationClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kNavigationClient_CommitNavigation_Name:
        if (message.expectsResponse())
          paramsClass = NavigationClient_CommitNavigation_Params;
      break;
      case kNavigationClient_CommitFailedNavigation_Name:
        if (message.expectsResponse())
          paramsClass = NavigationClient_CommitFailedNavigation_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateNavigationClientResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kNavigationClient_CommitNavigation_Name:
        if (message.isResponse())
          paramsClass = NavigationClient_CommitNavigation_ResponseParams;
        break;
      case kNavigationClient_CommitFailedNavigation_Name:
        if (message.isResponse())
          paramsClass = NavigationClient_CommitFailedNavigation_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var NavigationClient = {
    name: 'content.mojom.NavigationClient',
    kVersion: 0,
    ptrClass: NavigationClientPtr,
    proxyClass: NavigationClientProxy,
    stubClass: NavigationClientStub,
    validateRequest: validateNavigationClientRequest,
    validateResponse: validateNavigationClientResponse,
  };
  NavigationClient.RESET_FOR_SWAP = 1,
  NavigationClientStub.prototype.validator = validateNavigationClientRequest;
  NavigationClientProxy.prototype.validator = validateNavigationClientResponse;
  exports.NavigationGesture = NavigationGesture;
  exports.PageTransition = PageTransition;
  exports.PageState = PageState;
  exports.DidCommitProvisionalLoadParams = DidCommitProvisionalLoadParams;
  exports.DidCommitSameDocumentNavigationParams = DidCommitSameDocumentNavigationParams;
  exports.CookieManagerInfo = CookieManagerInfo;
  exports.StorageInfo = StorageInfo;
  exports.NavigationClient = NavigationClient;
  exports.NavigationClientPtr = NavigationClientPtr;
  exports.NavigationClientAssociatedPtr = NavigationClientAssociatedPtr;
})();