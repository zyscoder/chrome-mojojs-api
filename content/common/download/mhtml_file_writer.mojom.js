// content/common/download/mhtml_file_writer.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/common/download/mhtml_file_writer.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');
  var file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file.mojom', '../../../mojo/public/mojom/base/file.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../mojo/public/mojom/base/time.mojom.js');
  }


  var MhtmlSaveStatus = {};
  MhtmlSaveStatus.kSuccess = 0;
  MhtmlSaveStatus.kFileClosingError = 1;
  MhtmlSaveStatus.kFileCreationError = 2;
  MhtmlSaveStatus.kFileWritingError = 3;
  MhtmlSaveStatus.kFrameNoLongerExists = 4;
  MhtmlSaveStatus.kDeprecatedFrameSerializationForbidden = 5;
  MhtmlSaveStatus.kRenderProcessExited = 6;
  MhtmlSaveStatus.kStreamingError = 7;
  MhtmlSaveStatus.MIN_VALUE = 0;
  MhtmlSaveStatus.MAX_VALUE = 7;

  MhtmlSaveStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    }
    return false;
  };

  MhtmlSaveStatus.toKnownEnumValue = function(value) {
    return value;
  };

  MhtmlSaveStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function SerializeAsMHTMLParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SerializeAsMHTMLParams.prototype.initDefaults_ = function() {
    this.mhtmlBoundaryMarker = null;
    this.mhtmlBinaryEncoding = false;
    this.mhtmlPopupOverlayRemoval = false;
    this.digestsOfUrisToSkip = null;
    this.salt = null;
    this.outputHandle = null;
  };
  SerializeAsMHTMLParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SerializeAsMHTMLParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SerializeAsMHTMLParams.mhtmlBoundaryMarker
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;




    // validate SerializeAsMHTMLParams.digestsOfUrisToSkip
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SerializeAsMHTMLParams.salt
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SerializeAsMHTMLParams.outputHandle
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 32, MhtmlOutputHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SerializeAsMHTMLParams.encodedSize = codec.kStructHeaderSize + 48;

  SerializeAsMHTMLParams.decode = function(decoder) {
    var packed;
    var val = new SerializeAsMHTMLParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.mhtmlBoundaryMarker =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.mhtmlBinaryEncoding = (packed >> 0) & 1 ? true : false;
    val.mhtmlPopupOverlayRemoval = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.digestsOfUrisToSkip =
        decoder.decodeArrayPointer(codec.String);
    val.salt =
        decoder.decodeStruct(codec.String);
    val.outputHandle =
        decoder.decodeStruct(MhtmlOutputHandle);
    return val;
  };

  SerializeAsMHTMLParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SerializeAsMHTMLParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.mhtmlBoundaryMarker);
    packed = 0;
    packed |= (val.mhtmlBinaryEncoding & 1) << 0
    packed |= (val.mhtmlPopupOverlayRemoval & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.String, val.digestsOfUrisToSkip);
    encoder.encodeStruct(codec.String, val.salt);
    encoder.encodeStruct(MhtmlOutputHandle, val.outputHandle);
  };
  function MhtmlFileWriter_SerializeAsMHTML_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MhtmlFileWriter_SerializeAsMHTML_Params.prototype.initDefaults_ = function() {
    this.params = null;
  };
  MhtmlFileWriter_SerializeAsMHTML_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MhtmlFileWriter_SerializeAsMHTML_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MhtmlFileWriter_SerializeAsMHTML_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SerializeAsMHTMLParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MhtmlFileWriter_SerializeAsMHTML_Params.encodedSize = codec.kStructHeaderSize + 8;

  MhtmlFileWriter_SerializeAsMHTML_Params.decode = function(decoder) {
    var packed;
    var val = new MhtmlFileWriter_SerializeAsMHTML_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(SerializeAsMHTMLParams);
    return val;
  };

  MhtmlFileWriter_SerializeAsMHTML_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MhtmlFileWriter_SerializeAsMHTML_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SerializeAsMHTMLParams, val.params);
  };
  function MhtmlFileWriter_SerializeAsMHTML_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MhtmlFileWriter_SerializeAsMHTML_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.digestsOfUrisToSkip = null;
  };
  MhtmlFileWriter_SerializeAsMHTML_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MhtmlFileWriter_SerializeAsMHTML_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MhtmlFileWriter_SerializeAsMHTML_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, MhtmlSaveStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MhtmlFileWriter_SerializeAsMHTML_ResponseParams.digestsOfUrisToSkip
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MhtmlFileWriter_SerializeAsMHTML_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  MhtmlFileWriter_SerializeAsMHTML_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new MhtmlFileWriter_SerializeAsMHTML_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(MhtmlSaveStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.digestsOfUrisToSkip =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  MhtmlFileWriter_SerializeAsMHTML_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MhtmlFileWriter_SerializeAsMHTML_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.String, val.digestsOfUrisToSkip);
  };

  function MhtmlOutputHandle(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  MhtmlOutputHandle.Tags = {
    fileHandle: 0,
    producerHandle: 1,
  };

  MhtmlOutputHandle.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  MhtmlOutputHandle.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "fileHandle",
        "producerHandle",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a MhtmlOutputHandle member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(MhtmlOutputHandle.prototype, "fileHandle", {
    get: function() {
      if (this.$tag != MhtmlOutputHandle.Tags.fileHandle) {
        throw new ReferenceError(
            "MhtmlOutputHandle.fileHandle is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = MhtmlOutputHandle.Tags.fileHandle;
      this.$data = value;
    }
  });
  Object.defineProperty(MhtmlOutputHandle.prototype, "producerHandle", {
    get: function() {
      if (this.$tag != MhtmlOutputHandle.Tags.producerHandle) {
        throw new ReferenceError(
            "MhtmlOutputHandle.producerHandle is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = MhtmlOutputHandle.Tags.producerHandle;
      this.$data = value;
    }
  });


    MhtmlOutputHandle.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case MhtmlOutputHandle.Tags.fileHandle:
          encoder.encodeStructPointer(file$.File, val.fileHandle);
          break;
        case MhtmlOutputHandle.Tags.producerHandle:
          encoder.encodeStruct(codec.Handle, val.producerHandle);
          break;
      }
      encoder.align();
    };


    MhtmlOutputHandle.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new MhtmlOutputHandle();
      var tag = decoder.readUint32();
      switch (tag) {
        case MhtmlOutputHandle.Tags.fileHandle:
          result.fileHandle = decoder.decodeStructPointer(file$.File);
          break;
        case MhtmlOutputHandle.Tags.producerHandle:
          result.producerHandle = decoder.decodeStruct(codec.Handle);
          break;
      }
      decoder.align();

      return result;
    };


    MhtmlOutputHandle.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case MhtmlOutputHandle.Tags.fileHandle:
          

    // validate MhtmlOutputHandle.fileHandle
    err = messageValidator.validateStructPointer(data_offset, file$.File, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case MhtmlOutputHandle.Tags.producerHandle:
          

    // validate MhtmlOutputHandle.producerHandle
    err = messageValidator.validateHandle(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  MhtmlOutputHandle.encodedSize = 16;
  var kMhtmlFileWriter_SerializeAsMHTML_Name = 1147045765;

  function MhtmlFileWriterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MhtmlFileWriter,
                                                   handleOrPtrInfo);
  }

  function MhtmlFileWriterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MhtmlFileWriter, associatedInterfacePtrInfo);
  }

  MhtmlFileWriterAssociatedPtr.prototype =
      Object.create(MhtmlFileWriterPtr.prototype);
  MhtmlFileWriterAssociatedPtr.prototype.constructor =
      MhtmlFileWriterAssociatedPtr;

  function MhtmlFileWriterProxy(receiver) {
    this.receiver_ = receiver;
  }
  MhtmlFileWriterPtr.prototype.serializeAsMHTML = function() {
    return MhtmlFileWriterProxy.prototype.serializeAsMHTML
        .apply(this.ptr.getProxy(), arguments);
  };

  MhtmlFileWriterProxy.prototype.serializeAsMHTML = function(params) {
    var params_ = new MhtmlFileWriter_SerializeAsMHTML_Params();
    params_.params = params;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kMhtmlFileWriter_SerializeAsMHTML_Name,
          codec.align(MhtmlFileWriter_SerializeAsMHTML_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(MhtmlFileWriter_SerializeAsMHTML_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(MhtmlFileWriter_SerializeAsMHTML_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function MhtmlFileWriterStub(delegate) {
    this.delegate_ = delegate;
  }
  MhtmlFileWriterStub.prototype.serializeAsMHTML = function(params) {
    return this.delegate_ && this.delegate_.serializeAsMHTML && this.delegate_.serializeAsMHTML(params);
  }

  MhtmlFileWriterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  MhtmlFileWriterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMhtmlFileWriter_SerializeAsMHTML_Name:
      var params = reader.decodeStruct(MhtmlFileWriter_SerializeAsMHTML_Params);
      this.serializeAsMHTML(params.params).then(function(response) {
        var responseParams =
            new MhtmlFileWriter_SerializeAsMHTML_ResponseParams();
        responseParams.status = response.status;
        responseParams.digestsOfUrisToSkip = response.digestsOfUrisToSkip;
        var builder = new codec.MessageV1Builder(
            kMhtmlFileWriter_SerializeAsMHTML_Name,
            codec.align(MhtmlFileWriter_SerializeAsMHTML_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(MhtmlFileWriter_SerializeAsMHTML_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateMhtmlFileWriterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMhtmlFileWriter_SerializeAsMHTML_Name:
        if (message.expectsResponse())
          paramsClass = MhtmlFileWriter_SerializeAsMHTML_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMhtmlFileWriterResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kMhtmlFileWriter_SerializeAsMHTML_Name:
        if (message.isResponse())
          paramsClass = MhtmlFileWriter_SerializeAsMHTML_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var MhtmlFileWriter = {
    name: 'content.mojom.MhtmlFileWriter',
    kVersion: 0,
    ptrClass: MhtmlFileWriterPtr,
    proxyClass: MhtmlFileWriterProxy,
    stubClass: MhtmlFileWriterStub,
    validateRequest: validateMhtmlFileWriterRequest,
    validateResponse: validateMhtmlFileWriterResponse,
  };
  MhtmlFileWriterStub.prototype.validator = validateMhtmlFileWriterRequest;
  MhtmlFileWriterProxy.prototype.validator = validateMhtmlFileWriterResponse;
  exports.MhtmlSaveStatus = MhtmlSaveStatus;
  exports.SerializeAsMHTMLParams = SerializeAsMHTMLParams;
  exports.MhtmlOutputHandle = MhtmlOutputHandle;
  exports.MhtmlFileWriter = MhtmlFileWriter;
  exports.MhtmlFileWriterPtr = MhtmlFileWriterPtr;
  exports.MhtmlFileWriterAssociatedPtr = MhtmlFileWriterAssociatedPtr;
})();