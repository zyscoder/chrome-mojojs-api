// content/web_test/common/mojo_optional_numerics_unittest.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/web_test/common/mojo_optional_numerics_unittest.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.optionalNumericsUnittest.mojom');


  var RegularEnum = {};
  RegularEnum.kFoo = 1;
  RegularEnum.kBar = 2;
  RegularEnum.MIN_VALUE = 1;
  RegularEnum.MAX_VALUE = 2;

  RegularEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  RegularEnum.toKnownEnumValue = function(value) {
    return value;
  };

  RegularEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function OptionalNumericsStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  OptionalNumericsStruct.prototype.initDefaults_ = function() {
    this.optional_bool_$flag = false;
    this.optional_bool_$value = false;
    this.optional_uint8_$flag = false;
    this.optional_int8_$flag = false;
    this.optional_uint16_$flag = false;
    this.optional_int16_$flag = false;
    this.optional_uint32_$flag = false;
    this.optional_int32_$flag = false;
    this.optional_uint8_$value = 0;
    this.optional_int8_$value = 0;
    this.optional_uint64_$flag = false;
    this.optional_int64_$flag = false;
    this.optional_float_$flag = false;
    this.optional_double_$flag = false;
    this.optional_enum_$flag = false;
    this.optional_uint16_$value = 0;
    this.optional_int16_$value = 0;
    this.optional_uint32_$value = 0;
    this.optional_int32_$value = 0;
    this.optional_uint64_$value = 0;
    this.optional_int64_$value = 0;
    this.optional_float_$value = 0;
    this.optional_enum_$value = 0;
    this.optional_double_$value = 0;
  };
  OptionalNumericsStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  OptionalNumericsStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

























    // validate OptionalNumericsStruct.optional_enum_$value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 36, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  OptionalNumericsStruct.encodedSize = codec.kStructHeaderSize + 48;

  OptionalNumericsStruct.decode = function(decoder) {
    var packed;
    var val = new OptionalNumericsStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_bool_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_bool_$value = (packed >> 1) & 1 ? true : false;
    val.optional_uint8_$flag = (packed >> 2) & 1 ? true : false;
    val.optional_int8_$flag = (packed >> 3) & 1 ? true : false;
    val.optional_uint16_$flag = (packed >> 4) & 1 ? true : false;
    val.optional_int16_$flag = (packed >> 5) & 1 ? true : false;
    val.optional_uint32_$flag = (packed >> 6) & 1 ? true : false;
    val.optional_int32_$flag = (packed >> 7) & 1 ? true : false;
    val.optional_uint8_$value =
        decoder.decodeStruct(codec.Uint8);
    val.optional_int8_$value =
        decoder.decodeStruct(codec.Int8);
    packed = decoder.readUint8();
    val.optional_uint64_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_int64_$flag = (packed >> 1) & 1 ? true : false;
    val.optional_float_$flag = (packed >> 2) & 1 ? true : false;
    val.optional_double_$flag = (packed >> 3) & 1 ? true : false;
    val.optional_enum_$flag = (packed >> 4) & 1 ? true : false;
    val.optional_uint16_$value =
        decoder.decodeStruct(codec.Uint16);
    val.optional_int16_$value =
        decoder.decodeStruct(codec.Int16);
    val.optional_uint32_$value =
        decoder.decodeStruct(codec.Uint32);
    val.optional_int32_$value =
        decoder.decodeStruct(codec.Int32);
    val.optional_uint64_$value =
        decoder.decodeStruct(codec.Uint64);
    val.optional_int64_$value =
        decoder.decodeStruct(codec.Int64);
    val.optional_float_$value =
        decoder.decodeStruct(codec.Float);
    val.optional_enum_$value =
        decoder.decodeStruct(new codec.Enum(RegularEnum));
    val.optional_double_$value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  OptionalNumericsStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(OptionalNumericsStruct.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_bool_$flag & 1) << 0
    packed |= (val.optional_bool_$value & 1) << 1
    packed |= (val.optional_uint8_$flag & 1) << 2
    packed |= (val.optional_int8_$flag & 1) << 3
    packed |= (val.optional_uint16_$flag & 1) << 4
    packed |= (val.optional_int16_$flag & 1) << 5
    packed |= (val.optional_uint32_$flag & 1) << 6
    packed |= (val.optional_int32_$flag & 1) << 7
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.optional_uint8_$value);
    encoder.encodeStruct(codec.Int8, val.optional_int8_$value);
    packed = 0;
    packed |= (val.optional_uint64_$flag & 1) << 0
    packed |= (val.optional_int64_$flag & 1) << 1
    packed |= (val.optional_float_$flag & 1) << 2
    packed |= (val.optional_double_$flag & 1) << 3
    packed |= (val.optional_enum_$flag & 1) << 4
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint16, val.optional_uint16_$value);
    encoder.encodeStruct(codec.Int16, val.optional_int16_$value);
    encoder.encodeStruct(codec.Uint32, val.optional_uint32_$value);
    encoder.encodeStruct(codec.Int32, val.optional_int32_$value);
    encoder.encodeStruct(codec.Uint64, val.optional_uint64_$value);
    encoder.encodeStruct(codec.Int64, val.optional_int64_$value);
    encoder.encodeStruct(codec.Float, val.optional_float_$value);
    encoder.encodeStruct(codec.Int32, val.optional_enum_$value);
    encoder.encodeStruct(codec.Double, val.optional_double_$value);
  };
  function VersionedStructV0(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VersionedStructV0.prototype.initDefaults_ = function() {
  };
  VersionedStructV0.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VersionedStructV0.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VersionedStructV0.encodedSize = codec.kStructHeaderSize + 0;

  VersionedStructV0.decode = function(decoder) {
    var packed;
    var val = new VersionedStructV0();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  VersionedStructV0.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VersionedStructV0.encodedSize);
    encoder.writeUint32(0);
  };
  function VersionedStructV2(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VersionedStructV2.prototype.initDefaults_ = function() {
    this.bool_value_$flag = false;
    this.bool_value_$value = false;
    this.uint8_value_$flag = false;
    this.int8_value_$flag = false;
    this.uint16_value_$flag = false;
    this.int16_value_$flag = false;
    this.uint32_value_$flag = false;
    this.int32_value_$flag = false;
    this.uint8_value_$value = 0;
    this.int8_value_$value = 0;
    this.uint64_value_$flag = false;
    this.int64_value_$flag = false;
    this.float_value_$flag = false;
    this.double_value_$flag = false;
    this.enum_value_$flag = false;
    this.uint16_value_$value = 0;
    this.int16_value_$value = 0;
    this.uint32_value_$value = 0;
    this.int32_value_$value = 0;
    this.uint64_value_$value = 0;
    this.int64_value_$value = 0;
    this.float_value_$value = 0;
    this.enum_value_$value = 0;
    this.double_value_$value = 0;
  };
  VersionedStructV2.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VersionedStructV2.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8},
      {version: 2, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


























    // version check VersionedStructV2.enum_value_$value
    if (!messageValidator.isFieldInStructVersion(offset, 2))
      return validator.validationError.NONE;
    // validate VersionedStructV2.enum_value_$value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 36, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VersionedStructV2.encodedSize = codec.kStructHeaderSize + 48;

  VersionedStructV2.decode = function(decoder) {
    var packed;
    var val = new VersionedStructV2();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.bool_value_$flag = (packed >> 0) & 1 ? true : false;
    val.bool_value_$value = (packed >> 1) & 1 ? true : false;
    val.uint8_value_$flag = (packed >> 2) & 1 ? true : false;
    val.int8_value_$flag = (packed >> 3) & 1 ? true : false;
    val.uint16_value_$flag = (packed >> 4) & 1 ? true : false;
    val.int16_value_$flag = (packed >> 5) & 1 ? true : false;
    val.uint32_value_$flag = (packed >> 6) & 1 ? true : false;
    val.int32_value_$flag = (packed >> 7) & 1 ? true : false;
    if (version >= 2) {
      val.uint8_value_$value =
          decoder.decodeStruct(codec.Uint8);
    } else {
      val.uint8_value_$value = null;
    }
    if (version >= 2) {
      val.int8_value_$value =
          decoder.decodeStruct(codec.Int8);
    } else {
      val.int8_value_$value = null;
    }
    packed = decoder.readUint8();
    val.uint64_value_$flag = (packed >> 0) & 1 ? true : false;
    val.int64_value_$flag = (packed >> 1) & 1 ? true : false;
    val.float_value_$flag = (packed >> 2) & 1 ? true : false;
    val.double_value_$flag = (packed >> 3) & 1 ? true : false;
    val.enum_value_$flag = (packed >> 4) & 1 ? true : false;
    if (version >= 2) {
      val.uint16_value_$value =
          decoder.decodeStruct(codec.Uint16);
    } else {
      val.uint16_value_$value = null;
    }
    if (version >= 2) {
      val.int16_value_$value =
          decoder.decodeStruct(codec.Int16);
    } else {
      val.int16_value_$value = null;
    }
    if (version >= 2) {
      val.uint32_value_$value =
          decoder.decodeStruct(codec.Uint32);
    } else {
      val.uint32_value_$value = null;
    }
    if (version >= 2) {
      val.int32_value_$value =
          decoder.decodeStruct(codec.Int32);
    } else {
      val.int32_value_$value = null;
    }
    if (version >= 2) {
      val.uint64_value_$value =
          decoder.decodeStruct(codec.Uint64);
    } else {
      val.uint64_value_$value = null;
    }
    if (version >= 2) {
      val.int64_value_$value =
          decoder.decodeStruct(codec.Int64);
    } else {
      val.int64_value_$value = null;
    }
    if (version >= 2) {
      val.float_value_$value =
          decoder.decodeStruct(codec.Float);
    } else {
      val.float_value_$value = null;
    }
    if (version >= 2) {
      val.enum_value_$value =
          decoder.decodeStruct(new codec.Enum(RegularEnum));
    } else {
      val.enum_value_$value = null;
    }
    if (version >= 2) {
      val.double_value_$value =
          decoder.decodeStruct(codec.Double);
    } else {
      val.double_value_$value = null;
    }
    return val;
  };

  VersionedStructV2.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VersionedStructV2.encodedSize);
    encoder.writeUint32(2);
    packed = 0;
    packed |= (val.bool_value_$flag & 1) << 0
    packed |= (val.bool_value_$value & 1) << 1
    packed |= (val.uint8_value_$flag & 1) << 2
    packed |= (val.int8_value_$flag & 1) << 3
    packed |= (val.uint16_value_$flag & 1) << 4
    packed |= (val.int16_value_$flag & 1) << 5
    packed |= (val.uint32_value_$flag & 1) << 6
    packed |= (val.int32_value_$flag & 1) << 7
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.uint8_value_$value);
    encoder.encodeStruct(codec.Int8, val.int8_value_$value);
    packed = 0;
    packed |= (val.uint64_value_$flag & 1) << 0
    packed |= (val.int64_value_$flag & 1) << 1
    packed |= (val.float_value_$flag & 1) << 2
    packed |= (val.double_value_$flag & 1) << 3
    packed |= (val.enum_value_$flag & 1) << 4
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint16, val.uint16_value_$value);
    encoder.encodeStruct(codec.Int16, val.int16_value_$value);
    encoder.encodeStruct(codec.Uint32, val.uint32_value_$value);
    encoder.encodeStruct(codec.Int32, val.int32_value_$value);
    encoder.encodeStruct(codec.Uint64, val.uint64_value_$value);
    encoder.encodeStruct(codec.Int64, val.int64_value_$value);
    encoder.encodeStruct(codec.Float, val.float_value_$value);
    encoder.encodeStruct(codec.Int32, val.enum_value_$value);
    encoder.encodeStruct(codec.Double, val.double_value_$value);
  };
  function Params_SendNullBool_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullBool_Params.prototype.initDefaults_ = function() {
    this.optional_bool_$flag = false;
    this.optional_bool_$value = false;
  };
  Params_SendNullBool_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullBool_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendNullBool_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendNullBool_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullBool_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_bool_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_bool_$value = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendNullBool_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullBool_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_bool_$flag & 1) << 0
    packed |= (val.optional_bool_$value & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendNullBool_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullBool_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullBool_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullBool_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullBool_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullBool_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullBool_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullBool_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullBool_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendNullUint8_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullUint8_Params.prototype.initDefaults_ = function() {
    this.optional_uint8_$flag = false;
    this.optional_uint8_$value = 0;
  };
  Params_SendNullUint8_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullUint8_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendNullUint8_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendNullUint8_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullUint8_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_uint8_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_uint8_$value =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendNullUint8_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullUint8_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_uint8_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.optional_uint8_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendNullUint8_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullUint8_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullUint8_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullUint8_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullUint8_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullUint8_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullUint8_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullUint8_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullUint8_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendNullInt8_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullInt8_Params.prototype.initDefaults_ = function() {
    this.optional_int8_$flag = false;
    this.optional_int8_$value = 0;
  };
  Params_SendNullInt8_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullInt8_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendNullInt8_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendNullInt8_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullInt8_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_int8_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_int8_$value =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendNullInt8_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullInt8_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_int8_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Int8, val.optional_int8_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendNullInt8_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullInt8_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullInt8_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullInt8_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullInt8_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullInt8_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullInt8_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullInt8_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullInt8_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendNullUint16_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullUint16_Params.prototype.initDefaults_ = function() {
    this.optional_uint16_$flag = false;
    this.optional_uint16_$value = 0;
  };
  Params_SendNullUint16_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullUint16_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendNullUint16_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendNullUint16_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullUint16_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_uint16_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    val.optional_uint16_$value =
        decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendNullUint16_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullUint16_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_uint16_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint16, val.optional_uint16_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendNullUint16_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullUint16_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullUint16_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullUint16_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullUint16_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullUint16_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullUint16_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullUint16_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullUint16_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendNullInt16_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullInt16_Params.prototype.initDefaults_ = function() {
    this.optional_int16_$flag = false;
    this.optional_int16_$value = 0;
  };
  Params_SendNullInt16_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullInt16_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendNullInt16_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendNullInt16_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullInt16_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_int16_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    val.optional_int16_$value =
        decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendNullInt16_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullInt16_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_int16_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int16, val.optional_int16_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendNullInt16_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullInt16_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullInt16_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullInt16_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullInt16_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullInt16_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullInt16_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullInt16_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullInt16_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendNullUint32_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullUint32_Params.prototype.initDefaults_ = function() {
    this.optional_uint32_$flag = false;
    this.optional_uint32_$value = 0;
  };
  Params_SendNullUint32_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullUint32_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendNullUint32_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendNullUint32_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullUint32_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_uint32_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_uint32_$value =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  Params_SendNullUint32_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullUint32_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_uint32_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint32, val.optional_uint32_$value);
  };
  function Params_SendNullUint32_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullUint32_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullUint32_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullUint32_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullUint32_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullUint32_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullUint32_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullUint32_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullUint32_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendNullInt32_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullInt32_Params.prototype.initDefaults_ = function() {
    this.optional_int32_$flag = false;
    this.optional_int32_$value = 0;
  };
  Params_SendNullInt32_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullInt32_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendNullInt32_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendNullInt32_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullInt32_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_int32_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_int32_$value =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  Params_SendNullInt32_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullInt32_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_int32_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.optional_int32_$value);
  };
  function Params_SendNullInt32_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullInt32_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullInt32_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullInt32_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullInt32_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullInt32_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullInt32_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullInt32_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullInt32_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendNullUint64_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullUint64_Params.prototype.initDefaults_ = function() {
    this.optional_uint64_$flag = false;
    this.optional_uint64_$value = 0;
  };
  Params_SendNullUint64_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullUint64_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendNullUint64_Params.encodedSize = codec.kStructHeaderSize + 16;

  Params_SendNullUint64_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullUint64_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_uint64_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_uint64_$value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  Params_SendNullUint64_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullUint64_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_uint64_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint64, val.optional_uint64_$value);
  };
  function Params_SendNullUint64_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullUint64_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullUint64_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullUint64_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullUint64_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullUint64_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullUint64_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullUint64_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullUint64_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendNullInt64_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullInt64_Params.prototype.initDefaults_ = function() {
    this.optional_int64_$flag = false;
    this.optional_int64_$value = 0;
  };
  Params_SendNullInt64_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullInt64_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendNullInt64_Params.encodedSize = codec.kStructHeaderSize + 16;

  Params_SendNullInt64_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullInt64_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_int64_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_int64_$value =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  Params_SendNullInt64_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullInt64_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_int64_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int64, val.optional_int64_$value);
  };
  function Params_SendNullInt64_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullInt64_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullInt64_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullInt64_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullInt64_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullInt64_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullInt64_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullInt64_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullInt64_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendNullFloat_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullFloat_Params.prototype.initDefaults_ = function() {
    this.optional_float_$flag = false;
    this.optional_float_$value = 0;
  };
  Params_SendNullFloat_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullFloat_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendNullFloat_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendNullFloat_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullFloat_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_float_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_float_$value =
        decoder.decodeStruct(codec.Float);
    return val;
  };

  Params_SendNullFloat_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullFloat_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_float_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Float, val.optional_float_$value);
  };
  function Params_SendNullFloat_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullFloat_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullFloat_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullFloat_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullFloat_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullFloat_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullFloat_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullFloat_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullFloat_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendNullDouble_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullDouble_Params.prototype.initDefaults_ = function() {
    this.optional_double_$flag = false;
    this.optional_double_$value = 0;
  };
  Params_SendNullDouble_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullDouble_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendNullDouble_Params.encodedSize = codec.kStructHeaderSize + 16;

  Params_SendNullDouble_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullDouble_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_double_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_double_$value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  Params_SendNullDouble_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullDouble_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_double_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Double, val.optional_double_$value);
  };
  function Params_SendNullDouble_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullDouble_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullDouble_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullDouble_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullDouble_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullDouble_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullDouble_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullDouble_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullDouble_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendNullEnum_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullEnum_Params.prototype.initDefaults_ = function() {
    this.optional_enum_$flag = false;
    this.optional_enum_$value = 0;
  };
  Params_SendNullEnum_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullEnum_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Params_SendNullEnum_Params.optional_enum_$value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullEnum_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendNullEnum_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullEnum_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_enum_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_enum_$value =
        decoder.decodeStruct(new codec.Enum(RegularEnum));
    return val;
  };

  Params_SendNullEnum_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullEnum_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_enum_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.optional_enum_$value);
  };
  function Params_SendNullEnum_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullEnum_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullEnum_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullEnum_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullEnum_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullEnum_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullEnum_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullEnum_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullEnum_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendOptionalBool_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalBool_Params.prototype.initDefaults_ = function() {
    this.optional_bool_$flag = false;
    this.optional_bool_$value = false;
  };
  Params_SendOptionalBool_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalBool_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendOptionalBool_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalBool_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalBool_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_bool_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_bool_$value = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalBool_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalBool_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_bool_$flag & 1) << 0
    packed |= (val.optional_bool_$value & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalBool_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalBool_ResponseParams.prototype.initDefaults_ = function() {
    this.value = false;
  };
  Params_SendOptionalBool_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalBool_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Params_SendOptionalBool_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalBool_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalBool_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.value = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalBool_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalBool_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.value & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalUint8_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalUint8_Params.prototype.initDefaults_ = function() {
    this.optional_uint8_$flag = false;
    this.optional_uint8_$value = 0;
  };
  Params_SendOptionalUint8_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalUint8_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendOptionalUint8_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalUint8_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalUint8_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_uint8_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_uint8_$value =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalUint8_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalUint8_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_uint8_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.optional_uint8_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalUint8_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalUint8_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Params_SendOptionalUint8_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalUint8_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Params_SendOptionalUint8_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalUint8_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalUint8_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalUint8_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalUint8_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint8, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalInt8_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalInt8_Params.prototype.initDefaults_ = function() {
    this.optional_int8_$flag = false;
    this.optional_int8_$value = 0;
  };
  Params_SendOptionalInt8_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalInt8_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendOptionalInt8_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalInt8_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalInt8_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_int8_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_int8_$value =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalInt8_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalInt8_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_int8_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Int8, val.optional_int8_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalInt8_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalInt8_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Params_SendOptionalInt8_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalInt8_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Params_SendOptionalInt8_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalInt8_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalInt8_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalInt8_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalInt8_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int8, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalUint16_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalUint16_Params.prototype.initDefaults_ = function() {
    this.optional_uint16_$flag = false;
    this.optional_uint16_$value = 0;
  };
  Params_SendOptionalUint16_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalUint16_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendOptionalUint16_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalUint16_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalUint16_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_uint16_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    val.optional_uint16_$value =
        decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalUint16_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalUint16_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_uint16_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint16, val.optional_uint16_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalUint16_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalUint16_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Params_SendOptionalUint16_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalUint16_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Params_SendOptionalUint16_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalUint16_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalUint16_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalUint16_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalUint16_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint16, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalInt16_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalInt16_Params.prototype.initDefaults_ = function() {
    this.optional_int16_$flag = false;
    this.optional_int16_$value = 0;
  };
  Params_SendOptionalInt16_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalInt16_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendOptionalInt16_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalInt16_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalInt16_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_int16_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    val.optional_int16_$value =
        decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalInt16_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalInt16_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_int16_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int16, val.optional_int16_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalInt16_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalInt16_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Params_SendOptionalInt16_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalInt16_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Params_SendOptionalInt16_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalInt16_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalInt16_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalInt16_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalInt16_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int16, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalUint32_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalUint32_Params.prototype.initDefaults_ = function() {
    this.optional_uint32_$flag = false;
    this.optional_uint32_$value = 0;
  };
  Params_SendOptionalUint32_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalUint32_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendOptionalUint32_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalUint32_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalUint32_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_uint32_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_uint32_$value =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  Params_SendOptionalUint32_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalUint32_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_uint32_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint32, val.optional_uint32_$value);
  };
  function Params_SendOptionalUint32_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalUint32_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Params_SendOptionalUint32_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalUint32_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Params_SendOptionalUint32_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalUint32_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalUint32_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalUint32_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalUint32_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalInt32_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalInt32_Params.prototype.initDefaults_ = function() {
    this.optional_int32_$flag = false;
    this.optional_int32_$value = 0;
  };
  Params_SendOptionalInt32_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalInt32_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendOptionalInt32_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalInt32_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalInt32_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_int32_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_int32_$value =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  Params_SendOptionalInt32_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalInt32_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_int32_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.optional_int32_$value);
  };
  function Params_SendOptionalInt32_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalInt32_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Params_SendOptionalInt32_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalInt32_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Params_SendOptionalInt32_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalInt32_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalInt32_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalInt32_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalInt32_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalUint64_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalUint64_Params.prototype.initDefaults_ = function() {
    this.optional_uint64_$flag = false;
    this.optional_uint64_$value = 0;
  };
  Params_SendOptionalUint64_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalUint64_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendOptionalUint64_Params.encodedSize = codec.kStructHeaderSize + 16;

  Params_SendOptionalUint64_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalUint64_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_uint64_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_uint64_$value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  Params_SendOptionalUint64_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalUint64_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_uint64_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint64, val.optional_uint64_$value);
  };
  function Params_SendOptionalUint64_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalUint64_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Params_SendOptionalUint64_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalUint64_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Params_SendOptionalUint64_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalUint64_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalUint64_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  Params_SendOptionalUint64_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalUint64_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.value);
  };
  function Params_SendOptionalInt64_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalInt64_Params.prototype.initDefaults_ = function() {
    this.optional_int64_$flag = false;
    this.optional_int64_$value = 0;
  };
  Params_SendOptionalInt64_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalInt64_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendOptionalInt64_Params.encodedSize = codec.kStructHeaderSize + 16;

  Params_SendOptionalInt64_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalInt64_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_int64_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_int64_$value =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  Params_SendOptionalInt64_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalInt64_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_int64_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int64, val.optional_int64_$value);
  };
  function Params_SendOptionalInt64_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalInt64_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Params_SendOptionalInt64_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalInt64_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Params_SendOptionalInt64_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalInt64_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalInt64_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  Params_SendOptionalInt64_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalInt64_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.value);
  };
  function Params_SendOptionalFloat_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalFloat_Params.prototype.initDefaults_ = function() {
    this.optional_float_$flag = false;
    this.optional_float_$value = 0;
  };
  Params_SendOptionalFloat_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalFloat_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendOptionalFloat_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalFloat_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalFloat_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_float_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_float_$value =
        decoder.decodeStruct(codec.Float);
    return val;
  };

  Params_SendOptionalFloat_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalFloat_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_float_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Float, val.optional_float_$value);
  };
  function Params_SendOptionalFloat_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalFloat_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Params_SendOptionalFloat_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalFloat_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Params_SendOptionalFloat_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalFloat_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalFloat_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalFloat_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalFloat_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Float, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendOptionalDouble_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalDouble_Params.prototype.initDefaults_ = function() {
    this.optional_double_$flag = false;
    this.optional_double_$value = 0;
  };
  Params_SendOptionalDouble_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalDouble_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  Params_SendOptionalDouble_Params.encodedSize = codec.kStructHeaderSize + 16;

  Params_SendOptionalDouble_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalDouble_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_double_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_double_$value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  Params_SendOptionalDouble_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalDouble_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_double_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Double, val.optional_double_$value);
  };
  function Params_SendOptionalDouble_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalDouble_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Params_SendOptionalDouble_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalDouble_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Params_SendOptionalDouble_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalDouble_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalDouble_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  Params_SendOptionalDouble_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalDouble_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.value);
  };
  function Params_SendOptionalEnum_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalEnum_Params.prototype.initDefaults_ = function() {
    this.optional_enum_$flag = false;
    this.optional_enum_$value = 0;
  };
  Params_SendOptionalEnum_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalEnum_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Params_SendOptionalEnum_Params.optional_enum_$value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendOptionalEnum_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalEnum_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalEnum_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_enum_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_enum_$value =
        decoder.decodeStruct(new codec.Enum(RegularEnum));
    return val;
  };

  Params_SendOptionalEnum_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalEnum_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_enum_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.optional_enum_$value);
  };
  function Params_SendOptionalEnum_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendOptionalEnum_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Params_SendOptionalEnum_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendOptionalEnum_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Params_SendOptionalEnum_ResponseParams.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendOptionalEnum_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendOptionalEnum_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendOptionalEnum_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(RegularEnum));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Params_SendOptionalEnum_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendOptionalEnum_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Params_SendNullStructWithOptionalNumerics_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullStructWithOptionalNumerics_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  Params_SendNullStructWithOptionalNumerics_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullStructWithOptionalNumerics_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Params_SendNullStructWithOptionalNumerics_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, OptionalNumericsStruct, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullStructWithOptionalNumerics_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendNullStructWithOptionalNumerics_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullStructWithOptionalNumerics_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(OptionalNumericsStruct);
    return val;
  };

  Params_SendNullStructWithOptionalNumerics_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullStructWithOptionalNumerics_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(OptionalNumericsStruct, val.s);
  };
  function Params_SendNullStructWithOptionalNumerics_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendNullStructWithOptionalNumerics_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendNullStructWithOptionalNumerics_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendNullStructWithOptionalNumerics_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendNullStructWithOptionalNumerics_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendNullStructWithOptionalNumerics_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendNullStructWithOptionalNumerics_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendNullStructWithOptionalNumerics_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendNullStructWithOptionalNumerics_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendStructWithNullOptionalNumerics_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendStructWithNullOptionalNumerics_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  Params_SendStructWithNullOptionalNumerics_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendStructWithNullOptionalNumerics_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Params_SendStructWithNullOptionalNumerics_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, OptionalNumericsStruct, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendStructWithNullOptionalNumerics_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendStructWithNullOptionalNumerics_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendStructWithNullOptionalNumerics_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(OptionalNumericsStruct);
    return val;
  };

  Params_SendStructWithNullOptionalNumerics_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendStructWithNullOptionalNumerics_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(OptionalNumericsStruct, val.s);
  };
  function Params_SendStructWithNullOptionalNumerics_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendStructWithNullOptionalNumerics_ResponseParams.prototype.initDefaults_ = function() {
  };
  Params_SendStructWithNullOptionalNumerics_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendStructWithNullOptionalNumerics_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendStructWithNullOptionalNumerics_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Params_SendStructWithNullOptionalNumerics_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendStructWithNullOptionalNumerics_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Params_SendStructWithNullOptionalNumerics_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendStructWithNullOptionalNumerics_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Params_SendStructWithOptionalNumerics_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendStructWithOptionalNumerics_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  Params_SendStructWithOptionalNumerics_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendStructWithOptionalNumerics_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Params_SendStructWithOptionalNumerics_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, OptionalNumericsStruct, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendStructWithOptionalNumerics_Params.encodedSize = codec.kStructHeaderSize + 8;

  Params_SendStructWithOptionalNumerics_Params.decode = function(decoder) {
    var packed;
    var val = new Params_SendStructWithOptionalNumerics_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(OptionalNumericsStruct);
    return val;
  };

  Params_SendStructWithOptionalNumerics_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendStructWithOptionalNumerics_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(OptionalNumericsStruct, val.s);
  };
  function Params_SendStructWithOptionalNumerics_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Params_SendStructWithOptionalNumerics_ResponseParams.prototype.initDefaults_ = function() {
    this.boolValue = false;
    this.uint8Value = 0;
    this.int8Value = 0;
    this.uint16Value = 0;
    this.int16Value = 0;
    this.uint32Value = 0;
    this.int32Value = 0;
    this.uint64Value = 0;
    this.int64Value = 0;
    this.floatValue = 0;
    this.enumValue = 0;
    this.doubleValue = 0;
  };
  Params_SendStructWithOptionalNumerics_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Params_SendStructWithOptionalNumerics_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;













    // validate Params_SendStructWithOptionalNumerics_ResponseParams.enumValue
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 36, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Params_SendStructWithOptionalNumerics_ResponseParams.encodedSize = codec.kStructHeaderSize + 48;

  Params_SendStructWithOptionalNumerics_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Params_SendStructWithOptionalNumerics_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.boolValue = (packed >> 0) & 1 ? true : false;
    val.uint8Value =
        decoder.decodeStruct(codec.Uint8);
    val.int8Value =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    val.uint16Value =
        decoder.decodeStruct(codec.Uint16);
    val.int16Value =
        decoder.decodeStruct(codec.Int16);
    val.uint32Value =
        decoder.decodeStruct(codec.Uint32);
    val.int32Value =
        decoder.decodeStruct(codec.Int32);
    val.uint64Value =
        decoder.decodeStruct(codec.Uint64);
    val.int64Value =
        decoder.decodeStruct(codec.Int64);
    val.floatValue =
        decoder.decodeStruct(codec.Float);
    val.enumValue =
        decoder.decodeStruct(new codec.Enum(RegularEnum));
    val.doubleValue =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  Params_SendStructWithOptionalNumerics_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Params_SendStructWithOptionalNumerics_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.boolValue & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.uint8Value);
    encoder.encodeStruct(codec.Int8, val.int8Value);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint16, val.uint16Value);
    encoder.encodeStruct(codec.Int16, val.int16Value);
    encoder.encodeStruct(codec.Uint32, val.uint32Value);
    encoder.encodeStruct(codec.Int32, val.int32Value);
    encoder.encodeStruct(codec.Uint64, val.uint64Value);
    encoder.encodeStruct(codec.Int64, val.int64Value);
    encoder.encodeStruct(codec.Float, val.floatValue);
    encoder.encodeStruct(codec.Int32, val.enumValue);
    encoder.encodeStruct(codec.Double, val.doubleValue);
  };
  function ResponseParams_GetNullBool_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullBool_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullBool_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullBool_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullBool_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullBool_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullBool_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullBool_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullBool_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullBool_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullBool_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = false;
  };
  ResponseParams_GetNullBool_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullBool_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetNullBool_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetNullBool_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullBool_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_value_$value = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetNullBool_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullBool_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    packed |= (val.optional_value_$value & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetNullUint8_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullUint8_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullUint8_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullUint8_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullUint8_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullUint8_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullUint8_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullUint8_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullUint8_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullUint8_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullUint8_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetNullUint8_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullUint8_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetNullUint8_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetNullUint8_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullUint8_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_value_$value =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetNullUint8_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullUint8_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.optional_value_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetNullInt8_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullInt8_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullInt8_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullInt8_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullInt8_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullInt8_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullInt8_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullInt8_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullInt8_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullInt8_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullInt8_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetNullInt8_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullInt8_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetNullInt8_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetNullInt8_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullInt8_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_value_$value =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetNullInt8_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullInt8_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Int8, val.optional_value_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetNullUint16_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullUint16_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullUint16_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullUint16_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullUint16_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullUint16_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullUint16_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullUint16_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullUint16_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullUint16_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullUint16_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetNullUint16_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullUint16_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetNullUint16_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetNullUint16_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullUint16_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetNullUint16_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullUint16_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint16, val.optional_value_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetNullInt16_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullInt16_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullInt16_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullInt16_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullInt16_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullInt16_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullInt16_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullInt16_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullInt16_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullInt16_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullInt16_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetNullInt16_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullInt16_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetNullInt16_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetNullInt16_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullInt16_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetNullInt16_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullInt16_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int16, val.optional_value_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetNullUint32_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullUint32_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullUint32_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullUint32_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullUint32_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullUint32_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullUint32_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullUint32_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullUint32_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullUint32_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullUint32_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetNullUint32_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullUint32_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetNullUint32_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetNullUint32_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullUint32_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  ResponseParams_GetNullUint32_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullUint32_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint32, val.optional_value_$value);
  };
  function ResponseParams_GetNullInt32_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullInt32_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullInt32_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullInt32_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullInt32_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullInt32_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullInt32_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullInt32_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullInt32_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullInt32_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullInt32_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetNullInt32_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullInt32_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetNullInt32_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetNullInt32_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullInt32_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  ResponseParams_GetNullInt32_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullInt32_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.optional_value_$value);
  };
  function ResponseParams_GetNullUint64_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullUint64_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullUint64_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullUint64_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullUint64_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullUint64_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullUint64_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullUint64_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullUint64_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullUint64_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullUint64_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetNullUint64_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullUint64_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetNullUint64_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  ResponseParams_GetNullUint64_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullUint64_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  ResponseParams_GetNullUint64_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullUint64_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint64, val.optional_value_$value);
  };
  function ResponseParams_GetNullInt64_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullInt64_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullInt64_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullInt64_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullInt64_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullInt64_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullInt64_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullInt64_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullInt64_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullInt64_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullInt64_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetNullInt64_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullInt64_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetNullInt64_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  ResponseParams_GetNullInt64_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullInt64_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  ResponseParams_GetNullInt64_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullInt64_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int64, val.optional_value_$value);
  };
  function ResponseParams_GetNullFloat_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullFloat_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullFloat_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullFloat_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullFloat_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullFloat_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullFloat_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullFloat_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullFloat_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullFloat_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullFloat_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetNullFloat_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullFloat_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetNullFloat_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetNullFloat_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullFloat_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Float);
    return val;
  };

  ResponseParams_GetNullFloat_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullFloat_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Float, val.optional_value_$value);
  };
  function ResponseParams_GetNullDouble_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullDouble_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullDouble_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullDouble_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullDouble_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullDouble_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullDouble_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullDouble_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullDouble_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullDouble_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullDouble_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetNullDouble_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullDouble_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetNullDouble_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  ResponseParams_GetNullDouble_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullDouble_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  ResponseParams_GetNullDouble_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullDouble_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Double, val.optional_value_$value);
  };
  function ResponseParams_GetNullEnum_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullEnum_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullEnum_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullEnum_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullEnum_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullEnum_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullEnum_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullEnum_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullEnum_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullEnum_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullEnum_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetNullEnum_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullEnum_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ResponseParams_GetNullEnum_ResponseParams.optional_value_$value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullEnum_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetNullEnum_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullEnum_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(new codec.Enum(RegularEnum));
    return val;
  };

  ResponseParams_GetNullEnum_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullEnum_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.optional_value_$value);
  };
  function ResponseParams_GetOptionalBool_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalBool_Params.prototype.initDefaults_ = function() {
    this.value = false;
  };
  ResponseParams_GetOptionalBool_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalBool_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalBool_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalBool_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalBool_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.value = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalBool_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalBool_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.value & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalBool_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalBool_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = false;
  };
  ResponseParams_GetOptionalBool_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalBool_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalBool_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalBool_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalBool_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_value_$value = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalBool_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalBool_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    packed |= (val.optional_value_$value & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalUint8_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalUint8_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ResponseParams_GetOptionalUint8_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalUint8_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalUint8_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalUint8_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalUint8_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalUint8_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalUint8_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint8, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalUint8_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalUint8_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetOptionalUint8_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalUint8_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalUint8_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalUint8_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalUint8_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_value_$value =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalUint8_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalUint8_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.optional_value_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalInt8_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalInt8_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ResponseParams_GetOptionalInt8_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalInt8_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalInt8_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalInt8_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalInt8_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalInt8_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalInt8_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int8, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalInt8_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalInt8_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetOptionalInt8_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalInt8_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalInt8_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalInt8_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalInt8_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    val.optional_value_$value =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalInt8_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalInt8_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Int8, val.optional_value_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalUint16_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalUint16_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ResponseParams_GetOptionalUint16_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalUint16_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalUint16_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalUint16_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalUint16_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalUint16_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalUint16_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint16, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalUint16_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalUint16_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetOptionalUint16_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalUint16_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalUint16_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalUint16_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalUint16_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalUint16_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalUint16_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint16, val.optional_value_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalInt16_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalInt16_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ResponseParams_GetOptionalInt16_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalInt16_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalInt16_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalInt16_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalInt16_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalInt16_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalInt16_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int16, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalInt16_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalInt16_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetOptionalInt16_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalInt16_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalInt16_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalInt16_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalInt16_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalInt16_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalInt16_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int16, val.optional_value_$value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalUint32_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalUint32_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ResponseParams_GetOptionalUint32_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalUint32_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalUint32_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalUint32_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalUint32_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalUint32_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalUint32_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalUint32_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalUint32_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetOptionalUint32_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalUint32_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalUint32_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalUint32_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalUint32_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  ResponseParams_GetOptionalUint32_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalUint32_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint32, val.optional_value_$value);
  };
  function ResponseParams_GetOptionalInt32_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalInt32_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ResponseParams_GetOptionalInt32_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalInt32_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalInt32_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalInt32_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalInt32_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalInt32_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalInt32_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalInt32_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalInt32_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetOptionalInt32_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalInt32_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalInt32_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalInt32_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalInt32_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  ResponseParams_GetOptionalInt32_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalInt32_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.optional_value_$value);
  };
  function ResponseParams_GetOptionalUint64_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalUint64_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ResponseParams_GetOptionalUint64_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalUint64_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalUint64_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalUint64_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalUint64_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  ResponseParams_GetOptionalUint64_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalUint64_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.value);
  };
  function ResponseParams_GetOptionalUint64_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalUint64_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetOptionalUint64_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalUint64_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalUint64_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  ResponseParams_GetOptionalUint64_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalUint64_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  ResponseParams_GetOptionalUint64_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalUint64_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint64, val.optional_value_$value);
  };
  function ResponseParams_GetOptionalInt64_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalInt64_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ResponseParams_GetOptionalInt64_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalInt64_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalInt64_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalInt64_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalInt64_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  ResponseParams_GetOptionalInt64_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalInt64_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.value);
  };
  function ResponseParams_GetOptionalInt64_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalInt64_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetOptionalInt64_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalInt64_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalInt64_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  ResponseParams_GetOptionalInt64_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalInt64_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  ResponseParams_GetOptionalInt64_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalInt64_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int64, val.optional_value_$value);
  };
  function ResponseParams_GetOptionalFloat_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalFloat_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ResponseParams_GetOptionalFloat_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalFloat_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalFloat_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalFloat_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalFloat_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalFloat_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalFloat_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Float, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalFloat_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalFloat_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetOptionalFloat_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalFloat_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalFloat_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalFloat_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalFloat_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Float);
    return val;
  };

  ResponseParams_GetOptionalFloat_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalFloat_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Float, val.optional_value_$value);
  };
  function ResponseParams_GetOptionalDouble_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalDouble_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ResponseParams_GetOptionalDouble_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalDouble_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalDouble_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalDouble_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalDouble_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  ResponseParams_GetOptionalDouble_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalDouble_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.value);
  };
  function ResponseParams_GetOptionalDouble_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalDouble_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetOptionalDouble_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalDouble_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalDouble_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  ResponseParams_GetOptionalDouble_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalDouble_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  ResponseParams_GetOptionalDouble_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalDouble_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Double, val.optional_value_$value);
  };
  function ResponseParams_GetOptionalEnum_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalEnum_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  ResponseParams_GetOptionalEnum_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalEnum_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResponseParams_GetOptionalEnum_Params.value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalEnum_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalEnum_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalEnum_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(new codec.Enum(RegularEnum));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ResponseParams_GetOptionalEnum_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalEnum_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ResponseParams_GetOptionalEnum_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetOptionalEnum_ResponseParams.prototype.initDefaults_ = function() {
    this.optional_value_$flag = false;
    this.optional_value_$value = 0;
  };
  ResponseParams_GetOptionalEnum_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetOptionalEnum_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ResponseParams_GetOptionalEnum_ResponseParams.optional_value_$value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetOptionalEnum_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetOptionalEnum_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetOptionalEnum_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.optional_value_$flag = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.optional_value_$value =
        decoder.decodeStruct(new codec.Enum(RegularEnum));
    return val;
  };

  ResponseParams_GetOptionalEnum_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetOptionalEnum_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.optional_value_$flag & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.optional_value_$value);
  };
  function ResponseParams_GetNullStructWithOptionalNumerics_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullStructWithOptionalNumerics_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetNullStructWithOptionalNumerics_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullStructWithOptionalNumerics_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullStructWithOptionalNumerics_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetNullStructWithOptionalNumerics_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullStructWithOptionalNumerics_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetNullStructWithOptionalNumerics_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullStructWithOptionalNumerics_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams.prototype.initDefaults_ = function() {
    this.s = null;
  };
  ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, OptionalNumericsStruct, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(OptionalNumericsStruct);
    return val;
  };

  ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(OptionalNumericsStruct, val.s);
  };
  function ResponseParams_GetStructWithNullOptionalNumerics_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetStructWithNullOptionalNumerics_Params.prototype.initDefaults_ = function() {
  };
  ResponseParams_GetStructWithNullOptionalNumerics_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetStructWithNullOptionalNumerics_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetStructWithNullOptionalNumerics_Params.encodedSize = codec.kStructHeaderSize + 0;

  ResponseParams_GetStructWithNullOptionalNumerics_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetStructWithNullOptionalNumerics_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ResponseParams_GetStructWithNullOptionalNumerics_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetStructWithNullOptionalNumerics_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams.prototype.initDefaults_ = function() {
    this.s = null;
  };
  ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, OptionalNumericsStruct, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(OptionalNumericsStruct);
    return val;
  };

  ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(OptionalNumericsStruct, val.s);
  };
  function ResponseParams_GetStructWithOptionalNumerics_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetStructWithOptionalNumerics_Params.prototype.initDefaults_ = function() {
    this.boolValue = false;
    this.uint8Value = 0;
    this.int8Value = 0;
    this.uint16Value = 0;
    this.int16Value = 0;
    this.uint32Value = 0;
    this.int32Value = 0;
    this.uint64Value = 0;
    this.int64Value = 0;
    this.floatValue = 0;
    this.enumValue = 0;
    this.doubleValue = 0;
  };
  ResponseParams_GetStructWithOptionalNumerics_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetStructWithOptionalNumerics_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;













    // validate ResponseParams_GetStructWithOptionalNumerics_Params.enumValue
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 36, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetStructWithOptionalNumerics_Params.encodedSize = codec.kStructHeaderSize + 48;

  ResponseParams_GetStructWithOptionalNumerics_Params.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetStructWithOptionalNumerics_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.boolValue = (packed >> 0) & 1 ? true : false;
    val.uint8Value =
        decoder.decodeStruct(codec.Uint8);
    val.int8Value =
        decoder.decodeStruct(codec.Int8);
    decoder.skip(1);
    val.uint16Value =
        decoder.decodeStruct(codec.Uint16);
    val.int16Value =
        decoder.decodeStruct(codec.Int16);
    val.uint32Value =
        decoder.decodeStruct(codec.Uint32);
    val.int32Value =
        decoder.decodeStruct(codec.Int32);
    val.uint64Value =
        decoder.decodeStruct(codec.Uint64);
    val.int64Value =
        decoder.decodeStruct(codec.Int64);
    val.floatValue =
        decoder.decodeStruct(codec.Float);
    val.enumValue =
        decoder.decodeStruct(new codec.Enum(RegularEnum));
    val.doubleValue =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  ResponseParams_GetStructWithOptionalNumerics_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetStructWithOptionalNumerics_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.boolValue & 1) << 0
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.uint8Value);
    encoder.encodeStruct(codec.Int8, val.int8Value);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint16, val.uint16Value);
    encoder.encodeStruct(codec.Int16, val.int16Value);
    encoder.encodeStruct(codec.Uint32, val.uint32Value);
    encoder.encodeStruct(codec.Int32, val.int32Value);
    encoder.encodeStruct(codec.Uint64, val.uint64Value);
    encoder.encodeStruct(codec.Int64, val.int64Value);
    encoder.encodeStruct(codec.Float, val.floatValue);
    encoder.encodeStruct(codec.Int32, val.enumValue);
    encoder.encodeStruct(codec.Double, val.doubleValue);
  };
  function ResponseParams_GetStructWithOptionalNumerics_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResponseParams_GetStructWithOptionalNumerics_ResponseParams.prototype.initDefaults_ = function() {
    this.s = null;
  };
  ResponseParams_GetStructWithOptionalNumerics_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResponseParams_GetStructWithOptionalNumerics_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResponseParams_GetStructWithOptionalNumerics_ResponseParams.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, OptionalNumericsStruct, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResponseParams_GetStructWithOptionalNumerics_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResponseParams_GetStructWithOptionalNumerics_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResponseParams_GetStructWithOptionalNumerics_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(OptionalNumericsStruct);
    return val;
  };

  ResponseParams_GetStructWithOptionalNumerics_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResponseParams_GetStructWithOptionalNumerics_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(OptionalNumericsStruct, val.s);
  };
  function InterfaceV0_MethodWithVersionedParams_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfaceV0_MethodWithVersionedParams_Params.prototype.initDefaults_ = function() {
  };
  InterfaceV0_MethodWithVersionedParams_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfaceV0_MethodWithVersionedParams_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfaceV0_MethodWithVersionedParams_Params.encodedSize = codec.kStructHeaderSize + 0;

  InterfaceV0_MethodWithVersionedParams_Params.decode = function(decoder) {
    var packed;
    var val = new InterfaceV0_MethodWithVersionedParams_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InterfaceV0_MethodWithVersionedParams_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfaceV0_MethodWithVersionedParams_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function InterfaceV0_MethodWithVersionedParams_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfaceV0_MethodWithVersionedParams_ResponseParams.prototype.initDefaults_ = function() {
  };
  InterfaceV0_MethodWithVersionedParams_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfaceV0_MethodWithVersionedParams_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfaceV0_MethodWithVersionedParams_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  InterfaceV0_MethodWithVersionedParams_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InterfaceV0_MethodWithVersionedParams_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  InterfaceV0_MethodWithVersionedParams_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfaceV0_MethodWithVersionedParams_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function InterfaceV0_MethodWithVersionedStruct_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfaceV0_MethodWithVersionedStruct_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  InterfaceV0_MethodWithVersionedStruct_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfaceV0_MethodWithVersionedStruct_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfaceV0_MethodWithVersionedStruct_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VersionedStructV0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfaceV0_MethodWithVersionedStruct_Params.encodedSize = codec.kStructHeaderSize + 8;

  InterfaceV0_MethodWithVersionedStruct_Params.decode = function(decoder) {
    var packed;
    var val = new InterfaceV0_MethodWithVersionedStruct_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(VersionedStructV0);
    return val;
  };

  InterfaceV0_MethodWithVersionedStruct_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfaceV0_MethodWithVersionedStruct_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VersionedStructV0, val.s);
  };
  function InterfaceV0_MethodWithVersionedStruct_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfaceV0_MethodWithVersionedStruct_ResponseParams.prototype.initDefaults_ = function() {
    this.s = null;
  };
  InterfaceV0_MethodWithVersionedStruct_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfaceV0_MethodWithVersionedStruct_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfaceV0_MethodWithVersionedStruct_ResponseParams.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VersionedStructV0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfaceV0_MethodWithVersionedStruct_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  InterfaceV0_MethodWithVersionedStruct_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InterfaceV0_MethodWithVersionedStruct_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(VersionedStructV0);
    return val;
  };

  InterfaceV0_MethodWithVersionedStruct_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfaceV0_MethodWithVersionedStruct_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VersionedStructV0, val.s);
  };
  function InterfaceV2_MethodWithVersionedParams_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfaceV2_MethodWithVersionedParams_Params.prototype.initDefaults_ = function() {
    this.bool_value_$flag = false;
    this.bool_value_$value = false;
    this.uint8_value_$flag = false;
    this.int8_value_$flag = false;
    this.uint16_value_$flag = false;
    this.int16_value_$flag = false;
    this.uint32_value_$flag = false;
    this.int32_value_$flag = false;
    this.uint8_value_$value = 0;
    this.int8_value_$value = 0;
    this.uint64_value_$flag = false;
    this.int64_value_$flag = false;
    this.float_value_$flag = false;
    this.double_value_$flag = false;
    this.enum_value_$flag = false;
    this.uint16_value_$value = 0;
    this.int16_value_$value = 0;
    this.uint32_value_$value = 0;
    this.int32_value_$value = 0;
    this.uint64_value_$value = 0;
    this.int64_value_$value = 0;
    this.float_value_$value = 0;
    this.enum_value_$value = 0;
    this.double_value_$value = 0;
  };
  InterfaceV2_MethodWithVersionedParams_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfaceV2_MethodWithVersionedParams_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8},
      {version: 2, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


























    // version check InterfaceV2_MethodWithVersionedParams_Params.enum_value_$value
    if (!messageValidator.isFieldInStructVersion(offset, 2))
      return validator.validationError.NONE;
    // validate InterfaceV2_MethodWithVersionedParams_Params.enum_value_$value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 36, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfaceV2_MethodWithVersionedParams_Params.encodedSize = codec.kStructHeaderSize + 48;

  InterfaceV2_MethodWithVersionedParams_Params.decode = function(decoder) {
    var packed;
    var val = new InterfaceV2_MethodWithVersionedParams_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.bool_value_$flag = (packed >> 0) & 1 ? true : false;
    val.bool_value_$value = (packed >> 1) & 1 ? true : false;
    val.uint8_value_$flag = (packed >> 2) & 1 ? true : false;
    val.int8_value_$flag = (packed >> 3) & 1 ? true : false;
    val.uint16_value_$flag = (packed >> 4) & 1 ? true : false;
    val.int16_value_$flag = (packed >> 5) & 1 ? true : false;
    val.uint32_value_$flag = (packed >> 6) & 1 ? true : false;
    val.int32_value_$flag = (packed >> 7) & 1 ? true : false;
    if (version >= 2) {
      val.uint8_value_$value =
          decoder.decodeStruct(codec.Uint8);
    } else {
      val.uint8_value_$value = null;
    }
    if (version >= 2) {
      val.int8_value_$value =
          decoder.decodeStruct(codec.Int8);
    } else {
      val.int8_value_$value = null;
    }
    packed = decoder.readUint8();
    val.uint64_value_$flag = (packed >> 0) & 1 ? true : false;
    val.int64_value_$flag = (packed >> 1) & 1 ? true : false;
    val.float_value_$flag = (packed >> 2) & 1 ? true : false;
    val.double_value_$flag = (packed >> 3) & 1 ? true : false;
    val.enum_value_$flag = (packed >> 4) & 1 ? true : false;
    if (version >= 2) {
      val.uint16_value_$value =
          decoder.decodeStruct(codec.Uint16);
    } else {
      val.uint16_value_$value = null;
    }
    if (version >= 2) {
      val.int16_value_$value =
          decoder.decodeStruct(codec.Int16);
    } else {
      val.int16_value_$value = null;
    }
    if (version >= 2) {
      val.uint32_value_$value =
          decoder.decodeStruct(codec.Uint32);
    } else {
      val.uint32_value_$value = null;
    }
    if (version >= 2) {
      val.int32_value_$value =
          decoder.decodeStruct(codec.Int32);
    } else {
      val.int32_value_$value = null;
    }
    if (version >= 2) {
      val.uint64_value_$value =
          decoder.decodeStruct(codec.Uint64);
    } else {
      val.uint64_value_$value = null;
    }
    if (version >= 2) {
      val.int64_value_$value =
          decoder.decodeStruct(codec.Int64);
    } else {
      val.int64_value_$value = null;
    }
    if (version >= 2) {
      val.float_value_$value =
          decoder.decodeStruct(codec.Float);
    } else {
      val.float_value_$value = null;
    }
    if (version >= 2) {
      val.enum_value_$value =
          decoder.decodeStruct(new codec.Enum(RegularEnum));
    } else {
      val.enum_value_$value = null;
    }
    if (version >= 2) {
      val.double_value_$value =
          decoder.decodeStruct(codec.Double);
    } else {
      val.double_value_$value = null;
    }
    return val;
  };

  InterfaceV2_MethodWithVersionedParams_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfaceV2_MethodWithVersionedParams_Params.encodedSize);
    encoder.writeUint32(2);
    packed = 0;
    packed |= (val.bool_value_$flag & 1) << 0
    packed |= (val.bool_value_$value & 1) << 1
    packed |= (val.uint8_value_$flag & 1) << 2
    packed |= (val.int8_value_$flag & 1) << 3
    packed |= (val.uint16_value_$flag & 1) << 4
    packed |= (val.int16_value_$flag & 1) << 5
    packed |= (val.uint32_value_$flag & 1) << 6
    packed |= (val.int32_value_$flag & 1) << 7
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.uint8_value_$value);
    encoder.encodeStruct(codec.Int8, val.int8_value_$value);
    packed = 0;
    packed |= (val.uint64_value_$flag & 1) << 0
    packed |= (val.int64_value_$flag & 1) << 1
    packed |= (val.float_value_$flag & 1) << 2
    packed |= (val.double_value_$flag & 1) << 3
    packed |= (val.enum_value_$flag & 1) << 4
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint16, val.uint16_value_$value);
    encoder.encodeStruct(codec.Int16, val.int16_value_$value);
    encoder.encodeStruct(codec.Uint32, val.uint32_value_$value);
    encoder.encodeStruct(codec.Int32, val.int32_value_$value);
    encoder.encodeStruct(codec.Uint64, val.uint64_value_$value);
    encoder.encodeStruct(codec.Int64, val.int64_value_$value);
    encoder.encodeStruct(codec.Float, val.float_value_$value);
    encoder.encodeStruct(codec.Int32, val.enum_value_$value);
    encoder.encodeStruct(codec.Double, val.double_value_$value);
  };
  function InterfaceV2_MethodWithVersionedParams_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfaceV2_MethodWithVersionedParams_ResponseParams.prototype.initDefaults_ = function() {
    this.bool_value_$flag = false;
    this.bool_value_$value = false;
    this.uint8_value_$flag = false;
    this.int8_value_$flag = false;
    this.uint16_value_$flag = false;
    this.int16_value_$flag = false;
    this.uint32_value_$flag = false;
    this.int32_value_$flag = false;
    this.uint8_value_$value = 0;
    this.int8_value_$value = 0;
    this.uint64_value_$flag = false;
    this.int64_value_$flag = false;
    this.float_value_$flag = false;
    this.double_value_$flag = false;
    this.enum_value_$flag = false;
    this.uint16_value_$value = 0;
    this.int16_value_$value = 0;
    this.uint32_value_$value = 0;
    this.int32_value_$value = 0;
    this.uint64_value_$value = 0;
    this.int64_value_$value = 0;
    this.float_value_$value = 0;
    this.enum_value_$value = 0;
    this.double_value_$value = 0;
  };
  InterfaceV2_MethodWithVersionedParams_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfaceV2_MethodWithVersionedParams_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8},
      {version: 2, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


























    // version check InterfaceV2_MethodWithVersionedParams_ResponseParams.enum_value_$value
    if (!messageValidator.isFieldInStructVersion(offset, 2))
      return validator.validationError.NONE;
    // validate InterfaceV2_MethodWithVersionedParams_ResponseParams.enum_value_$value
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 36, RegularEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfaceV2_MethodWithVersionedParams_ResponseParams.encodedSize = codec.kStructHeaderSize + 48;

  InterfaceV2_MethodWithVersionedParams_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InterfaceV2_MethodWithVersionedParams_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.bool_value_$flag = (packed >> 0) & 1 ? true : false;
    val.bool_value_$value = (packed >> 1) & 1 ? true : false;
    val.uint8_value_$flag = (packed >> 2) & 1 ? true : false;
    val.int8_value_$flag = (packed >> 3) & 1 ? true : false;
    val.uint16_value_$flag = (packed >> 4) & 1 ? true : false;
    val.int16_value_$flag = (packed >> 5) & 1 ? true : false;
    val.uint32_value_$flag = (packed >> 6) & 1 ? true : false;
    val.int32_value_$flag = (packed >> 7) & 1 ? true : false;
    if (version >= 2) {
      val.uint8_value_$value =
          decoder.decodeStruct(codec.Uint8);
    } else {
      val.uint8_value_$value = null;
    }
    if (version >= 2) {
      val.int8_value_$value =
          decoder.decodeStruct(codec.Int8);
    } else {
      val.int8_value_$value = null;
    }
    packed = decoder.readUint8();
    val.uint64_value_$flag = (packed >> 0) & 1 ? true : false;
    val.int64_value_$flag = (packed >> 1) & 1 ? true : false;
    val.float_value_$flag = (packed >> 2) & 1 ? true : false;
    val.double_value_$flag = (packed >> 3) & 1 ? true : false;
    val.enum_value_$flag = (packed >> 4) & 1 ? true : false;
    if (version >= 2) {
      val.uint16_value_$value =
          decoder.decodeStruct(codec.Uint16);
    } else {
      val.uint16_value_$value = null;
    }
    if (version >= 2) {
      val.int16_value_$value =
          decoder.decodeStruct(codec.Int16);
    } else {
      val.int16_value_$value = null;
    }
    if (version >= 2) {
      val.uint32_value_$value =
          decoder.decodeStruct(codec.Uint32);
    } else {
      val.uint32_value_$value = null;
    }
    if (version >= 2) {
      val.int32_value_$value =
          decoder.decodeStruct(codec.Int32);
    } else {
      val.int32_value_$value = null;
    }
    if (version >= 2) {
      val.uint64_value_$value =
          decoder.decodeStruct(codec.Uint64);
    } else {
      val.uint64_value_$value = null;
    }
    if (version >= 2) {
      val.int64_value_$value =
          decoder.decodeStruct(codec.Int64);
    } else {
      val.int64_value_$value = null;
    }
    if (version >= 2) {
      val.float_value_$value =
          decoder.decodeStruct(codec.Float);
    } else {
      val.float_value_$value = null;
    }
    if (version >= 2) {
      val.enum_value_$value =
          decoder.decodeStruct(new codec.Enum(RegularEnum));
    } else {
      val.enum_value_$value = null;
    }
    if (version >= 2) {
      val.double_value_$value =
          decoder.decodeStruct(codec.Double);
    } else {
      val.double_value_$value = null;
    }
    return val;
  };

  InterfaceV2_MethodWithVersionedParams_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfaceV2_MethodWithVersionedParams_ResponseParams.encodedSize);
    encoder.writeUint32(2);
    packed = 0;
    packed |= (val.bool_value_$flag & 1) << 0
    packed |= (val.bool_value_$value & 1) << 1
    packed |= (val.uint8_value_$flag & 1) << 2
    packed |= (val.int8_value_$flag & 1) << 3
    packed |= (val.uint16_value_$flag & 1) << 4
    packed |= (val.int16_value_$flag & 1) << 5
    packed |= (val.uint32_value_$flag & 1) << 6
    packed |= (val.int32_value_$flag & 1) << 7
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.uint8_value_$value);
    encoder.encodeStruct(codec.Int8, val.int8_value_$value);
    packed = 0;
    packed |= (val.uint64_value_$flag & 1) << 0
    packed |= (val.int64_value_$flag & 1) << 1
    packed |= (val.float_value_$flag & 1) << 2
    packed |= (val.double_value_$flag & 1) << 3
    packed |= (val.enum_value_$flag & 1) << 4
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint16, val.uint16_value_$value);
    encoder.encodeStruct(codec.Int16, val.int16_value_$value);
    encoder.encodeStruct(codec.Uint32, val.uint32_value_$value);
    encoder.encodeStruct(codec.Int32, val.int32_value_$value);
    encoder.encodeStruct(codec.Uint64, val.uint64_value_$value);
    encoder.encodeStruct(codec.Int64, val.int64_value_$value);
    encoder.encodeStruct(codec.Float, val.float_value_$value);
    encoder.encodeStruct(codec.Int32, val.enum_value_$value);
    encoder.encodeStruct(codec.Double, val.double_value_$value);
  };
  function InterfaceV2_MethodWithVersionedStruct_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfaceV2_MethodWithVersionedStruct_Params.prototype.initDefaults_ = function() {
    this.s = null;
  };
  InterfaceV2_MethodWithVersionedStruct_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfaceV2_MethodWithVersionedStruct_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfaceV2_MethodWithVersionedStruct_Params.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VersionedStructV2, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfaceV2_MethodWithVersionedStruct_Params.encodedSize = codec.kStructHeaderSize + 8;

  InterfaceV2_MethodWithVersionedStruct_Params.decode = function(decoder) {
    var packed;
    var val = new InterfaceV2_MethodWithVersionedStruct_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(VersionedStructV2);
    return val;
  };

  InterfaceV2_MethodWithVersionedStruct_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfaceV2_MethodWithVersionedStruct_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VersionedStructV2, val.s);
  };
  function InterfaceV2_MethodWithVersionedStruct_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterfaceV2_MethodWithVersionedStruct_ResponseParams.prototype.initDefaults_ = function() {
    this.s = null;
  };
  InterfaceV2_MethodWithVersionedStruct_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterfaceV2_MethodWithVersionedStruct_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterfaceV2_MethodWithVersionedStruct_ResponseParams.s
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VersionedStructV2, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterfaceV2_MethodWithVersionedStruct_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  InterfaceV2_MethodWithVersionedStruct_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new InterfaceV2_MethodWithVersionedStruct_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.s =
        decoder.decodeStructPointer(VersionedStructV2);
    return val;
  };

  InterfaceV2_MethodWithVersionedStruct_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterfaceV2_MethodWithVersionedStruct_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VersionedStructV2, val.s);
  };
  var kParams_SendNullBool_Name = 1207660817;
  var kParams_SendNullUint8_Name = 1961385977;
  var kParams_SendNullInt8_Name = 469772572;
  var kParams_SendNullUint16_Name = 615789324;
  var kParams_SendNullInt16_Name = 2136870946;
  var kParams_SendNullUint32_Name = 1662310850;
  var kParams_SendNullInt32_Name = 1022775598;
  var kParams_SendNullUint64_Name = 602852937;
  var kParams_SendNullInt64_Name = 499655118;
  var kParams_SendNullFloat_Name = 498351147;
  var kParams_SendNullDouble_Name = 1263929422;
  var kParams_SendNullEnum_Name = 1722010978;
  var kParams_SendOptionalBool_Name = 1330798100;
  var kParams_SendOptionalUint8_Name = 835969549;
  var kParams_SendOptionalInt8_Name = 214891245;
  var kParams_SendOptionalUint16_Name = 1364781101;
  var kParams_SendOptionalInt16_Name = 1410999453;
  var kParams_SendOptionalUint32_Name = 1102407519;
  var kParams_SendOptionalInt32_Name = 2048304750;
  var kParams_SendOptionalUint64_Name = 1191637475;
  var kParams_SendOptionalInt64_Name = 1759869260;
  var kParams_SendOptionalFloat_Name = 1753459316;
  var kParams_SendOptionalDouble_Name = 1422273118;
  var kParams_SendOptionalEnum_Name = 1253455270;
  var kParams_SendNullStructWithOptionalNumerics_Name = 1562476114;
  var kParams_SendStructWithNullOptionalNumerics_Name = 1628982471;
  var kParams_SendStructWithOptionalNumerics_Name = 1553872666;

  function ParamsPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Params,
                                                   handleOrPtrInfo);
  }

  function ParamsAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Params, associatedInterfacePtrInfo);
  }

  ParamsAssociatedPtr.prototype =
      Object.create(ParamsPtr.prototype);
  ParamsAssociatedPtr.prototype.constructor =
      ParamsAssociatedPtr;

  function ParamsProxy(receiver) {
    this.receiver_ = receiver;
  }
  ParamsPtr.prototype.sendNullBool = function() {
    return ParamsProxy.prototype.sendNullBool
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullBool = function(optionalBool) {
    var params_ = new Params_SendNullBool_Params();
    params_.optionalBool = optionalBool;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullBool_Name,
          codec.align(Params_SendNullBool_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullBool_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullBool_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullUint8 = function() {
    return ParamsProxy.prototype.sendNullUint8
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullUint8 = function(optionalUint8) {
    var params_ = new Params_SendNullUint8_Params();
    params_.optionalUint8 = optionalUint8;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullUint8_Name,
          codec.align(Params_SendNullUint8_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullUint8_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullUint8_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullInt8 = function() {
    return ParamsProxy.prototype.sendNullInt8
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullInt8 = function(optionalInt8) {
    var params_ = new Params_SendNullInt8_Params();
    params_.optionalInt8 = optionalInt8;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullInt8_Name,
          codec.align(Params_SendNullInt8_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullInt8_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullInt8_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullUint16 = function() {
    return ParamsProxy.prototype.sendNullUint16
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullUint16 = function(optionalUint16) {
    var params_ = new Params_SendNullUint16_Params();
    params_.optionalUint16 = optionalUint16;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullUint16_Name,
          codec.align(Params_SendNullUint16_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullUint16_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullUint16_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullInt16 = function() {
    return ParamsProxy.prototype.sendNullInt16
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullInt16 = function(optionalInt16) {
    var params_ = new Params_SendNullInt16_Params();
    params_.optionalInt16 = optionalInt16;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullInt16_Name,
          codec.align(Params_SendNullInt16_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullInt16_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullInt16_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullUint32 = function() {
    return ParamsProxy.prototype.sendNullUint32
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullUint32 = function(optionalUint32) {
    var params_ = new Params_SendNullUint32_Params();
    params_.optionalUint32 = optionalUint32;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullUint32_Name,
          codec.align(Params_SendNullUint32_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullUint32_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullUint32_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullInt32 = function() {
    return ParamsProxy.prototype.sendNullInt32
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullInt32 = function(optionalInt32) {
    var params_ = new Params_SendNullInt32_Params();
    params_.optionalInt32 = optionalInt32;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullInt32_Name,
          codec.align(Params_SendNullInt32_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullInt32_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullInt32_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullUint64 = function() {
    return ParamsProxy.prototype.sendNullUint64
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullUint64 = function(optionalUint64) {
    var params_ = new Params_SendNullUint64_Params();
    params_.optionalUint64 = optionalUint64;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullUint64_Name,
          codec.align(Params_SendNullUint64_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullUint64_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullUint64_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullInt64 = function() {
    return ParamsProxy.prototype.sendNullInt64
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullInt64 = function(optionalInt64) {
    var params_ = new Params_SendNullInt64_Params();
    params_.optionalInt64 = optionalInt64;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullInt64_Name,
          codec.align(Params_SendNullInt64_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullInt64_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullInt64_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullFloat = function() {
    return ParamsProxy.prototype.sendNullFloat
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullFloat = function(optionalFloat) {
    var params_ = new Params_SendNullFloat_Params();
    params_.optionalFloat = optionalFloat;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullFloat_Name,
          codec.align(Params_SendNullFloat_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullFloat_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullFloat_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullDouble = function() {
    return ParamsProxy.prototype.sendNullDouble
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullDouble = function(optionalDouble) {
    var params_ = new Params_SendNullDouble_Params();
    params_.optionalDouble = optionalDouble;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullDouble_Name,
          codec.align(Params_SendNullDouble_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullDouble_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullDouble_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullEnum = function() {
    return ParamsProxy.prototype.sendNullEnum
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullEnum = function(optionalEnum) {
    var params_ = new Params_SendNullEnum_Params();
    params_.optionalEnum = optionalEnum;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullEnum_Name,
          codec.align(Params_SendNullEnum_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullEnum_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullEnum_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalBool = function() {
    return ParamsProxy.prototype.sendOptionalBool
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalBool = function(optionalBool) {
    var params_ = new Params_SendOptionalBool_Params();
    params_.optionalBool = optionalBool;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalBool_Name,
          codec.align(Params_SendOptionalBool_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalBool_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalBool_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalUint8 = function() {
    return ParamsProxy.prototype.sendOptionalUint8
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalUint8 = function(optionalUint8) {
    var params_ = new Params_SendOptionalUint8_Params();
    params_.optionalUint8 = optionalUint8;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalUint8_Name,
          codec.align(Params_SendOptionalUint8_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalUint8_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalUint8_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalInt8 = function() {
    return ParamsProxy.prototype.sendOptionalInt8
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalInt8 = function(optionalInt8) {
    var params_ = new Params_SendOptionalInt8_Params();
    params_.optionalInt8 = optionalInt8;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalInt8_Name,
          codec.align(Params_SendOptionalInt8_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalInt8_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalInt8_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalUint16 = function() {
    return ParamsProxy.prototype.sendOptionalUint16
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalUint16 = function(optionalUint16) {
    var params_ = new Params_SendOptionalUint16_Params();
    params_.optionalUint16 = optionalUint16;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalUint16_Name,
          codec.align(Params_SendOptionalUint16_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalUint16_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalUint16_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalInt16 = function() {
    return ParamsProxy.prototype.sendOptionalInt16
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalInt16 = function(optionalInt16) {
    var params_ = new Params_SendOptionalInt16_Params();
    params_.optionalInt16 = optionalInt16;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalInt16_Name,
          codec.align(Params_SendOptionalInt16_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalInt16_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalInt16_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalUint32 = function() {
    return ParamsProxy.prototype.sendOptionalUint32
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalUint32 = function(optionalUint32) {
    var params_ = new Params_SendOptionalUint32_Params();
    params_.optionalUint32 = optionalUint32;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalUint32_Name,
          codec.align(Params_SendOptionalUint32_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalUint32_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalUint32_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalInt32 = function() {
    return ParamsProxy.prototype.sendOptionalInt32
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalInt32 = function(optionalInt32) {
    var params_ = new Params_SendOptionalInt32_Params();
    params_.optionalInt32 = optionalInt32;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalInt32_Name,
          codec.align(Params_SendOptionalInt32_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalInt32_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalInt32_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalUint64 = function() {
    return ParamsProxy.prototype.sendOptionalUint64
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalUint64 = function(optionalUint64) {
    var params_ = new Params_SendOptionalUint64_Params();
    params_.optionalUint64 = optionalUint64;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalUint64_Name,
          codec.align(Params_SendOptionalUint64_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalUint64_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalUint64_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalInt64 = function() {
    return ParamsProxy.prototype.sendOptionalInt64
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalInt64 = function(optionalInt64) {
    var params_ = new Params_SendOptionalInt64_Params();
    params_.optionalInt64 = optionalInt64;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalInt64_Name,
          codec.align(Params_SendOptionalInt64_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalInt64_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalInt64_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalFloat = function() {
    return ParamsProxy.prototype.sendOptionalFloat
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalFloat = function(optionalFloat) {
    var params_ = new Params_SendOptionalFloat_Params();
    params_.optionalFloat = optionalFloat;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalFloat_Name,
          codec.align(Params_SendOptionalFloat_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalFloat_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalFloat_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalDouble = function() {
    return ParamsProxy.prototype.sendOptionalDouble
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalDouble = function(optionalDouble) {
    var params_ = new Params_SendOptionalDouble_Params();
    params_.optionalDouble = optionalDouble;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalDouble_Name,
          codec.align(Params_SendOptionalDouble_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalDouble_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalDouble_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendOptionalEnum = function() {
    return ParamsProxy.prototype.sendOptionalEnum
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendOptionalEnum = function(optionalEnum) {
    var params_ = new Params_SendOptionalEnum_Params();
    params_.optionalEnum = optionalEnum;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendOptionalEnum_Name,
          codec.align(Params_SendOptionalEnum_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendOptionalEnum_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendOptionalEnum_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendNullStructWithOptionalNumerics = function() {
    return ParamsProxy.prototype.sendNullStructWithOptionalNumerics
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendNullStructWithOptionalNumerics = function(s) {
    var params_ = new Params_SendNullStructWithOptionalNumerics_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendNullStructWithOptionalNumerics_Name,
          codec.align(Params_SendNullStructWithOptionalNumerics_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendNullStructWithOptionalNumerics_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendNullStructWithOptionalNumerics_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendStructWithNullOptionalNumerics = function() {
    return ParamsProxy.prototype.sendStructWithNullOptionalNumerics
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendStructWithNullOptionalNumerics = function(s) {
    var params_ = new Params_SendStructWithNullOptionalNumerics_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendStructWithNullOptionalNumerics_Name,
          codec.align(Params_SendStructWithNullOptionalNumerics_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendStructWithNullOptionalNumerics_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendStructWithNullOptionalNumerics_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ParamsPtr.prototype.sendStructWithOptionalNumerics = function() {
    return ParamsProxy.prototype.sendStructWithOptionalNumerics
        .apply(this.ptr.getProxy(), arguments);
  };

  ParamsProxy.prototype.sendStructWithOptionalNumerics = function(s) {
    var params_ = new Params_SendStructWithOptionalNumerics_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kParams_SendStructWithOptionalNumerics_Name,
          codec.align(Params_SendStructWithOptionalNumerics_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Params_SendStructWithOptionalNumerics_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Params_SendStructWithOptionalNumerics_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ParamsStub(delegate) {
    this.delegate_ = delegate;
  }
  ParamsStub.prototype.sendNullBool = function(optionalBool) {
    return this.delegate_ && this.delegate_.sendNullBool && this.delegate_.sendNullBool(optionalBool);
  }
  ParamsStub.prototype.sendNullUint8 = function(optionalUint8) {
    return this.delegate_ && this.delegate_.sendNullUint8 && this.delegate_.sendNullUint8(optionalUint8);
  }
  ParamsStub.prototype.sendNullInt8 = function(optionalInt8) {
    return this.delegate_ && this.delegate_.sendNullInt8 && this.delegate_.sendNullInt8(optionalInt8);
  }
  ParamsStub.prototype.sendNullUint16 = function(optionalUint16) {
    return this.delegate_ && this.delegate_.sendNullUint16 && this.delegate_.sendNullUint16(optionalUint16);
  }
  ParamsStub.prototype.sendNullInt16 = function(optionalInt16) {
    return this.delegate_ && this.delegate_.sendNullInt16 && this.delegate_.sendNullInt16(optionalInt16);
  }
  ParamsStub.prototype.sendNullUint32 = function(optionalUint32) {
    return this.delegate_ && this.delegate_.sendNullUint32 && this.delegate_.sendNullUint32(optionalUint32);
  }
  ParamsStub.prototype.sendNullInt32 = function(optionalInt32) {
    return this.delegate_ && this.delegate_.sendNullInt32 && this.delegate_.sendNullInt32(optionalInt32);
  }
  ParamsStub.prototype.sendNullUint64 = function(optionalUint64) {
    return this.delegate_ && this.delegate_.sendNullUint64 && this.delegate_.sendNullUint64(optionalUint64);
  }
  ParamsStub.prototype.sendNullInt64 = function(optionalInt64) {
    return this.delegate_ && this.delegate_.sendNullInt64 && this.delegate_.sendNullInt64(optionalInt64);
  }
  ParamsStub.prototype.sendNullFloat = function(optionalFloat) {
    return this.delegate_ && this.delegate_.sendNullFloat && this.delegate_.sendNullFloat(optionalFloat);
  }
  ParamsStub.prototype.sendNullDouble = function(optionalDouble) {
    return this.delegate_ && this.delegate_.sendNullDouble && this.delegate_.sendNullDouble(optionalDouble);
  }
  ParamsStub.prototype.sendNullEnum = function(optionalEnum) {
    return this.delegate_ && this.delegate_.sendNullEnum && this.delegate_.sendNullEnum(optionalEnum);
  }
  ParamsStub.prototype.sendOptionalBool = function(optionalBool) {
    return this.delegate_ && this.delegate_.sendOptionalBool && this.delegate_.sendOptionalBool(optionalBool);
  }
  ParamsStub.prototype.sendOptionalUint8 = function(optionalUint8) {
    return this.delegate_ && this.delegate_.sendOptionalUint8 && this.delegate_.sendOptionalUint8(optionalUint8);
  }
  ParamsStub.prototype.sendOptionalInt8 = function(optionalInt8) {
    return this.delegate_ && this.delegate_.sendOptionalInt8 && this.delegate_.sendOptionalInt8(optionalInt8);
  }
  ParamsStub.prototype.sendOptionalUint16 = function(optionalUint16) {
    return this.delegate_ && this.delegate_.sendOptionalUint16 && this.delegate_.sendOptionalUint16(optionalUint16);
  }
  ParamsStub.prototype.sendOptionalInt16 = function(optionalInt16) {
    return this.delegate_ && this.delegate_.sendOptionalInt16 && this.delegate_.sendOptionalInt16(optionalInt16);
  }
  ParamsStub.prototype.sendOptionalUint32 = function(optionalUint32) {
    return this.delegate_ && this.delegate_.sendOptionalUint32 && this.delegate_.sendOptionalUint32(optionalUint32);
  }
  ParamsStub.prototype.sendOptionalInt32 = function(optionalInt32) {
    return this.delegate_ && this.delegate_.sendOptionalInt32 && this.delegate_.sendOptionalInt32(optionalInt32);
  }
  ParamsStub.prototype.sendOptionalUint64 = function(optionalUint64) {
    return this.delegate_ && this.delegate_.sendOptionalUint64 && this.delegate_.sendOptionalUint64(optionalUint64);
  }
  ParamsStub.prototype.sendOptionalInt64 = function(optionalInt64) {
    return this.delegate_ && this.delegate_.sendOptionalInt64 && this.delegate_.sendOptionalInt64(optionalInt64);
  }
  ParamsStub.prototype.sendOptionalFloat = function(optionalFloat) {
    return this.delegate_ && this.delegate_.sendOptionalFloat && this.delegate_.sendOptionalFloat(optionalFloat);
  }
  ParamsStub.prototype.sendOptionalDouble = function(optionalDouble) {
    return this.delegate_ && this.delegate_.sendOptionalDouble && this.delegate_.sendOptionalDouble(optionalDouble);
  }
  ParamsStub.prototype.sendOptionalEnum = function(optionalEnum) {
    return this.delegate_ && this.delegate_.sendOptionalEnum && this.delegate_.sendOptionalEnum(optionalEnum);
  }
  ParamsStub.prototype.sendNullStructWithOptionalNumerics = function(s) {
    return this.delegate_ && this.delegate_.sendNullStructWithOptionalNumerics && this.delegate_.sendNullStructWithOptionalNumerics(s);
  }
  ParamsStub.prototype.sendStructWithNullOptionalNumerics = function(s) {
    return this.delegate_ && this.delegate_.sendStructWithNullOptionalNumerics && this.delegate_.sendStructWithNullOptionalNumerics(s);
  }
  ParamsStub.prototype.sendStructWithOptionalNumerics = function(s) {
    return this.delegate_ && this.delegate_.sendStructWithOptionalNumerics && this.delegate_.sendStructWithOptionalNumerics(s);
  }

  ParamsStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ParamsStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kParams_SendNullBool_Name:
      var params = reader.decodeStruct(Params_SendNullBool_Params);
      this.sendNullBool(params.optionalBool).then(function(response) {
        var responseParams =
            new Params_SendNullBool_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullBool_Name,
            codec.align(Params_SendNullBool_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullBool_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullUint8_Name:
      var params = reader.decodeStruct(Params_SendNullUint8_Params);
      this.sendNullUint8(params.optionalUint8).then(function(response) {
        var responseParams =
            new Params_SendNullUint8_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullUint8_Name,
            codec.align(Params_SendNullUint8_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullUint8_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullInt8_Name:
      var params = reader.decodeStruct(Params_SendNullInt8_Params);
      this.sendNullInt8(params.optionalInt8).then(function(response) {
        var responseParams =
            new Params_SendNullInt8_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullInt8_Name,
            codec.align(Params_SendNullInt8_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullInt8_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullUint16_Name:
      var params = reader.decodeStruct(Params_SendNullUint16_Params);
      this.sendNullUint16(params.optionalUint16).then(function(response) {
        var responseParams =
            new Params_SendNullUint16_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullUint16_Name,
            codec.align(Params_SendNullUint16_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullUint16_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullInt16_Name:
      var params = reader.decodeStruct(Params_SendNullInt16_Params);
      this.sendNullInt16(params.optionalInt16).then(function(response) {
        var responseParams =
            new Params_SendNullInt16_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullInt16_Name,
            codec.align(Params_SendNullInt16_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullInt16_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullUint32_Name:
      var params = reader.decodeStruct(Params_SendNullUint32_Params);
      this.sendNullUint32(params.optionalUint32).then(function(response) {
        var responseParams =
            new Params_SendNullUint32_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullUint32_Name,
            codec.align(Params_SendNullUint32_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullUint32_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullInt32_Name:
      var params = reader.decodeStruct(Params_SendNullInt32_Params);
      this.sendNullInt32(params.optionalInt32).then(function(response) {
        var responseParams =
            new Params_SendNullInt32_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullInt32_Name,
            codec.align(Params_SendNullInt32_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullInt32_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullUint64_Name:
      var params = reader.decodeStruct(Params_SendNullUint64_Params);
      this.sendNullUint64(params.optionalUint64).then(function(response) {
        var responseParams =
            new Params_SendNullUint64_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullUint64_Name,
            codec.align(Params_SendNullUint64_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullUint64_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullInt64_Name:
      var params = reader.decodeStruct(Params_SendNullInt64_Params);
      this.sendNullInt64(params.optionalInt64).then(function(response) {
        var responseParams =
            new Params_SendNullInt64_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullInt64_Name,
            codec.align(Params_SendNullInt64_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullInt64_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullFloat_Name:
      var params = reader.decodeStruct(Params_SendNullFloat_Params);
      this.sendNullFloat(params.optionalFloat).then(function(response) {
        var responseParams =
            new Params_SendNullFloat_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullFloat_Name,
            codec.align(Params_SendNullFloat_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullFloat_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullDouble_Name:
      var params = reader.decodeStruct(Params_SendNullDouble_Params);
      this.sendNullDouble(params.optionalDouble).then(function(response) {
        var responseParams =
            new Params_SendNullDouble_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullDouble_Name,
            codec.align(Params_SendNullDouble_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullDouble_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullEnum_Name:
      var params = reader.decodeStruct(Params_SendNullEnum_Params);
      this.sendNullEnum(params.optionalEnum).then(function(response) {
        var responseParams =
            new Params_SendNullEnum_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullEnum_Name,
            codec.align(Params_SendNullEnum_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullEnum_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalBool_Name:
      var params = reader.decodeStruct(Params_SendOptionalBool_Params);
      this.sendOptionalBool(params.optionalBool).then(function(response) {
        var responseParams =
            new Params_SendOptionalBool_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalBool_Name,
            codec.align(Params_SendOptionalBool_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalBool_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalUint8_Name:
      var params = reader.decodeStruct(Params_SendOptionalUint8_Params);
      this.sendOptionalUint8(params.optionalUint8).then(function(response) {
        var responseParams =
            new Params_SendOptionalUint8_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalUint8_Name,
            codec.align(Params_SendOptionalUint8_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalUint8_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalInt8_Name:
      var params = reader.decodeStruct(Params_SendOptionalInt8_Params);
      this.sendOptionalInt8(params.optionalInt8).then(function(response) {
        var responseParams =
            new Params_SendOptionalInt8_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalInt8_Name,
            codec.align(Params_SendOptionalInt8_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalInt8_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalUint16_Name:
      var params = reader.decodeStruct(Params_SendOptionalUint16_Params);
      this.sendOptionalUint16(params.optionalUint16).then(function(response) {
        var responseParams =
            new Params_SendOptionalUint16_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalUint16_Name,
            codec.align(Params_SendOptionalUint16_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalUint16_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalInt16_Name:
      var params = reader.decodeStruct(Params_SendOptionalInt16_Params);
      this.sendOptionalInt16(params.optionalInt16).then(function(response) {
        var responseParams =
            new Params_SendOptionalInt16_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalInt16_Name,
            codec.align(Params_SendOptionalInt16_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalInt16_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalUint32_Name:
      var params = reader.decodeStruct(Params_SendOptionalUint32_Params);
      this.sendOptionalUint32(params.optionalUint32).then(function(response) {
        var responseParams =
            new Params_SendOptionalUint32_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalUint32_Name,
            codec.align(Params_SendOptionalUint32_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalUint32_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalInt32_Name:
      var params = reader.decodeStruct(Params_SendOptionalInt32_Params);
      this.sendOptionalInt32(params.optionalInt32).then(function(response) {
        var responseParams =
            new Params_SendOptionalInt32_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalInt32_Name,
            codec.align(Params_SendOptionalInt32_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalInt32_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalUint64_Name:
      var params = reader.decodeStruct(Params_SendOptionalUint64_Params);
      this.sendOptionalUint64(params.optionalUint64).then(function(response) {
        var responseParams =
            new Params_SendOptionalUint64_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalUint64_Name,
            codec.align(Params_SendOptionalUint64_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalUint64_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalInt64_Name:
      var params = reader.decodeStruct(Params_SendOptionalInt64_Params);
      this.sendOptionalInt64(params.optionalInt64).then(function(response) {
        var responseParams =
            new Params_SendOptionalInt64_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalInt64_Name,
            codec.align(Params_SendOptionalInt64_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalInt64_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalFloat_Name:
      var params = reader.decodeStruct(Params_SendOptionalFloat_Params);
      this.sendOptionalFloat(params.optionalFloat).then(function(response) {
        var responseParams =
            new Params_SendOptionalFloat_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalFloat_Name,
            codec.align(Params_SendOptionalFloat_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalFloat_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalDouble_Name:
      var params = reader.decodeStruct(Params_SendOptionalDouble_Params);
      this.sendOptionalDouble(params.optionalDouble).then(function(response) {
        var responseParams =
            new Params_SendOptionalDouble_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalDouble_Name,
            codec.align(Params_SendOptionalDouble_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalDouble_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendOptionalEnum_Name:
      var params = reader.decodeStruct(Params_SendOptionalEnum_Params);
      this.sendOptionalEnum(params.optionalEnum).then(function(response) {
        var responseParams =
            new Params_SendOptionalEnum_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kParams_SendOptionalEnum_Name,
            codec.align(Params_SendOptionalEnum_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendOptionalEnum_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendNullStructWithOptionalNumerics_Name:
      var params = reader.decodeStruct(Params_SendNullStructWithOptionalNumerics_Params);
      this.sendNullStructWithOptionalNumerics(params.s).then(function(response) {
        var responseParams =
            new Params_SendNullStructWithOptionalNumerics_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendNullStructWithOptionalNumerics_Name,
            codec.align(Params_SendNullStructWithOptionalNumerics_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendNullStructWithOptionalNumerics_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendStructWithNullOptionalNumerics_Name:
      var params = reader.decodeStruct(Params_SendStructWithNullOptionalNumerics_Params);
      this.sendStructWithNullOptionalNumerics(params.s).then(function(response) {
        var responseParams =
            new Params_SendStructWithNullOptionalNumerics_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kParams_SendStructWithNullOptionalNumerics_Name,
            codec.align(Params_SendStructWithNullOptionalNumerics_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendStructWithNullOptionalNumerics_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kParams_SendStructWithOptionalNumerics_Name:
      var params = reader.decodeStruct(Params_SendStructWithOptionalNumerics_Params);
      this.sendStructWithOptionalNumerics(params.s).then(function(response) {
        var responseParams =
            new Params_SendStructWithOptionalNumerics_ResponseParams();
        responseParams.boolValue = response.boolValue;
        responseParams.uint8Value = response.uint8Value;
        responseParams.int8Value = response.int8Value;
        responseParams.uint16Value = response.uint16Value;
        responseParams.int16Value = response.int16Value;
        responseParams.uint32Value = response.uint32Value;
        responseParams.int32Value = response.int32Value;
        responseParams.uint64Value = response.uint64Value;
        responseParams.int64Value = response.int64Value;
        responseParams.floatValue = response.floatValue;
        responseParams.doubleValue = response.doubleValue;
        responseParams.enumValue = response.enumValue;
        var builder = new codec.MessageV1Builder(
            kParams_SendStructWithOptionalNumerics_Name,
            codec.align(Params_SendStructWithOptionalNumerics_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Params_SendStructWithOptionalNumerics_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateParamsRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kParams_SendNullBool_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullBool_Params;
      break;
      case kParams_SendNullUint8_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullUint8_Params;
      break;
      case kParams_SendNullInt8_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullInt8_Params;
      break;
      case kParams_SendNullUint16_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullUint16_Params;
      break;
      case kParams_SendNullInt16_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullInt16_Params;
      break;
      case kParams_SendNullUint32_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullUint32_Params;
      break;
      case kParams_SendNullInt32_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullInt32_Params;
      break;
      case kParams_SendNullUint64_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullUint64_Params;
      break;
      case kParams_SendNullInt64_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullInt64_Params;
      break;
      case kParams_SendNullFloat_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullFloat_Params;
      break;
      case kParams_SendNullDouble_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullDouble_Params;
      break;
      case kParams_SendNullEnum_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullEnum_Params;
      break;
      case kParams_SendOptionalBool_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalBool_Params;
      break;
      case kParams_SendOptionalUint8_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalUint8_Params;
      break;
      case kParams_SendOptionalInt8_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalInt8_Params;
      break;
      case kParams_SendOptionalUint16_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalUint16_Params;
      break;
      case kParams_SendOptionalInt16_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalInt16_Params;
      break;
      case kParams_SendOptionalUint32_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalUint32_Params;
      break;
      case kParams_SendOptionalInt32_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalInt32_Params;
      break;
      case kParams_SendOptionalUint64_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalUint64_Params;
      break;
      case kParams_SendOptionalInt64_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalInt64_Params;
      break;
      case kParams_SendOptionalFloat_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalFloat_Params;
      break;
      case kParams_SendOptionalDouble_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalDouble_Params;
      break;
      case kParams_SendOptionalEnum_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendOptionalEnum_Params;
      break;
      case kParams_SendNullStructWithOptionalNumerics_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendNullStructWithOptionalNumerics_Params;
      break;
      case kParams_SendStructWithNullOptionalNumerics_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendStructWithNullOptionalNumerics_Params;
      break;
      case kParams_SendStructWithOptionalNumerics_Name:
        if (message.expectsResponse())
          paramsClass = Params_SendStructWithOptionalNumerics_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateParamsResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kParams_SendNullBool_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullBool_ResponseParams;
        break;
      case kParams_SendNullUint8_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullUint8_ResponseParams;
        break;
      case kParams_SendNullInt8_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullInt8_ResponseParams;
        break;
      case kParams_SendNullUint16_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullUint16_ResponseParams;
        break;
      case kParams_SendNullInt16_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullInt16_ResponseParams;
        break;
      case kParams_SendNullUint32_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullUint32_ResponseParams;
        break;
      case kParams_SendNullInt32_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullInt32_ResponseParams;
        break;
      case kParams_SendNullUint64_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullUint64_ResponseParams;
        break;
      case kParams_SendNullInt64_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullInt64_ResponseParams;
        break;
      case kParams_SendNullFloat_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullFloat_ResponseParams;
        break;
      case kParams_SendNullDouble_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullDouble_ResponseParams;
        break;
      case kParams_SendNullEnum_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullEnum_ResponseParams;
        break;
      case kParams_SendOptionalBool_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalBool_ResponseParams;
        break;
      case kParams_SendOptionalUint8_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalUint8_ResponseParams;
        break;
      case kParams_SendOptionalInt8_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalInt8_ResponseParams;
        break;
      case kParams_SendOptionalUint16_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalUint16_ResponseParams;
        break;
      case kParams_SendOptionalInt16_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalInt16_ResponseParams;
        break;
      case kParams_SendOptionalUint32_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalUint32_ResponseParams;
        break;
      case kParams_SendOptionalInt32_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalInt32_ResponseParams;
        break;
      case kParams_SendOptionalUint64_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalUint64_ResponseParams;
        break;
      case kParams_SendOptionalInt64_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalInt64_ResponseParams;
        break;
      case kParams_SendOptionalFloat_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalFloat_ResponseParams;
        break;
      case kParams_SendOptionalDouble_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalDouble_ResponseParams;
        break;
      case kParams_SendOptionalEnum_Name:
        if (message.isResponse())
          paramsClass = Params_SendOptionalEnum_ResponseParams;
        break;
      case kParams_SendNullStructWithOptionalNumerics_Name:
        if (message.isResponse())
          paramsClass = Params_SendNullStructWithOptionalNumerics_ResponseParams;
        break;
      case kParams_SendStructWithNullOptionalNumerics_Name:
        if (message.isResponse())
          paramsClass = Params_SendStructWithNullOptionalNumerics_ResponseParams;
        break;
      case kParams_SendStructWithOptionalNumerics_Name:
        if (message.isResponse())
          paramsClass = Params_SendStructWithOptionalNumerics_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Params = {
    name: 'content.optional_numerics_unittest.mojom.Params',
    kVersion: 0,
    ptrClass: ParamsPtr,
    proxyClass: ParamsProxy,
    stubClass: ParamsStub,
    validateRequest: validateParamsRequest,
    validateResponse: validateParamsResponse,
  };
  ParamsStub.prototype.validator = validateParamsRequest;
  ParamsProxy.prototype.validator = validateParamsResponse;
  var kResponseParams_GetNullBool_Name = 383197608;
  var kResponseParams_GetNullUint8_Name = 1122394575;
  var kResponseParams_GetNullInt8_Name = 1048461021;
  var kResponseParams_GetNullUint16_Name = 220377199;
  var kResponseParams_GetNullInt16_Name = 2059009633;
  var kResponseParams_GetNullUint32_Name = 1873636196;
  var kResponseParams_GetNullInt32_Name = 1836693928;
  var kResponseParams_GetNullUint64_Name = 11760641;
  var kResponseParams_GetNullInt64_Name = 1835768257;
  var kResponseParams_GetNullFloat_Name = 1581297918;
  var kResponseParams_GetNullDouble_Name = 342185422;
  var kResponseParams_GetNullEnum_Name = 1340279080;
  var kResponseParams_GetOptionalBool_Name = 1904003386;
  var kResponseParams_GetOptionalUint8_Name = 1432371718;
  var kResponseParams_GetOptionalInt8_Name = 1209009071;
  var kResponseParams_GetOptionalUint16_Name = 279613870;
  var kResponseParams_GetOptionalInt16_Name = 133356961;
  var kResponseParams_GetOptionalUint32_Name = 1228996948;
  var kResponseParams_GetOptionalInt32_Name = 12216949;
  var kResponseParams_GetOptionalUint64_Name = 1104004058;
  var kResponseParams_GetOptionalInt64_Name = 637918152;
  var kResponseParams_GetOptionalFloat_Name = 1320962956;
  var kResponseParams_GetOptionalDouble_Name = 1969581841;
  var kResponseParams_GetOptionalEnum_Name = 52141360;
  var kResponseParams_GetNullStructWithOptionalNumerics_Name = 1686314979;
  var kResponseParams_GetStructWithNullOptionalNumerics_Name = 1552282060;
  var kResponseParams_GetStructWithOptionalNumerics_Name = 765012868;

  function ResponseParamsPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ResponseParams,
                                                   handleOrPtrInfo);
  }

  function ResponseParamsAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ResponseParams, associatedInterfacePtrInfo);
  }

  ResponseParamsAssociatedPtr.prototype =
      Object.create(ResponseParamsPtr.prototype);
  ResponseParamsAssociatedPtr.prototype.constructor =
      ResponseParamsAssociatedPtr;

  function ResponseParamsProxy(receiver) {
    this.receiver_ = receiver;
  }
  ResponseParamsPtr.prototype.getNullBool = function() {
    return ResponseParamsProxy.prototype.getNullBool
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullBool = function() {
    var params_ = new ResponseParams_GetNullBool_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullBool_Name,
          codec.align(ResponseParams_GetNullBool_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullBool_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullBool_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullUint8 = function() {
    return ResponseParamsProxy.prototype.getNullUint8
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullUint8 = function() {
    var params_ = new ResponseParams_GetNullUint8_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullUint8_Name,
          codec.align(ResponseParams_GetNullUint8_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullUint8_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullUint8_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullInt8 = function() {
    return ResponseParamsProxy.prototype.getNullInt8
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullInt8 = function() {
    var params_ = new ResponseParams_GetNullInt8_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullInt8_Name,
          codec.align(ResponseParams_GetNullInt8_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullInt8_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullInt8_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullUint16 = function() {
    return ResponseParamsProxy.prototype.getNullUint16
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullUint16 = function() {
    var params_ = new ResponseParams_GetNullUint16_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullUint16_Name,
          codec.align(ResponseParams_GetNullUint16_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullUint16_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullUint16_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullInt16 = function() {
    return ResponseParamsProxy.prototype.getNullInt16
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullInt16 = function() {
    var params_ = new ResponseParams_GetNullInt16_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullInt16_Name,
          codec.align(ResponseParams_GetNullInt16_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullInt16_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullInt16_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullUint32 = function() {
    return ResponseParamsProxy.prototype.getNullUint32
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullUint32 = function() {
    var params_ = new ResponseParams_GetNullUint32_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullUint32_Name,
          codec.align(ResponseParams_GetNullUint32_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullUint32_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullUint32_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullInt32 = function() {
    return ResponseParamsProxy.prototype.getNullInt32
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullInt32 = function() {
    var params_ = new ResponseParams_GetNullInt32_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullInt32_Name,
          codec.align(ResponseParams_GetNullInt32_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullInt32_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullInt32_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullUint64 = function() {
    return ResponseParamsProxy.prototype.getNullUint64
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullUint64 = function() {
    var params_ = new ResponseParams_GetNullUint64_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullUint64_Name,
          codec.align(ResponseParams_GetNullUint64_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullUint64_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullUint64_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullInt64 = function() {
    return ResponseParamsProxy.prototype.getNullInt64
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullInt64 = function() {
    var params_ = new ResponseParams_GetNullInt64_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullInt64_Name,
          codec.align(ResponseParams_GetNullInt64_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullInt64_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullInt64_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullFloat = function() {
    return ResponseParamsProxy.prototype.getNullFloat
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullFloat = function() {
    var params_ = new ResponseParams_GetNullFloat_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullFloat_Name,
          codec.align(ResponseParams_GetNullFloat_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullFloat_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullFloat_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullDouble = function() {
    return ResponseParamsProxy.prototype.getNullDouble
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullDouble = function() {
    var params_ = new ResponseParams_GetNullDouble_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullDouble_Name,
          codec.align(ResponseParams_GetNullDouble_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullDouble_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullDouble_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullEnum = function() {
    return ResponseParamsProxy.prototype.getNullEnum
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullEnum = function() {
    var params_ = new ResponseParams_GetNullEnum_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullEnum_Name,
          codec.align(ResponseParams_GetNullEnum_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullEnum_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullEnum_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalBool = function() {
    return ResponseParamsProxy.prototype.getOptionalBool
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalBool = function(value) {
    var params_ = new ResponseParams_GetOptionalBool_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalBool_Name,
          codec.align(ResponseParams_GetOptionalBool_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalBool_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalBool_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalUint8 = function() {
    return ResponseParamsProxy.prototype.getOptionalUint8
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalUint8 = function(value) {
    var params_ = new ResponseParams_GetOptionalUint8_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalUint8_Name,
          codec.align(ResponseParams_GetOptionalUint8_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalUint8_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalUint8_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalInt8 = function() {
    return ResponseParamsProxy.prototype.getOptionalInt8
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalInt8 = function(value) {
    var params_ = new ResponseParams_GetOptionalInt8_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalInt8_Name,
          codec.align(ResponseParams_GetOptionalInt8_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalInt8_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalInt8_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalUint16 = function() {
    return ResponseParamsProxy.prototype.getOptionalUint16
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalUint16 = function(value) {
    var params_ = new ResponseParams_GetOptionalUint16_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalUint16_Name,
          codec.align(ResponseParams_GetOptionalUint16_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalUint16_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalUint16_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalInt16 = function() {
    return ResponseParamsProxy.prototype.getOptionalInt16
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalInt16 = function(value) {
    var params_ = new ResponseParams_GetOptionalInt16_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalInt16_Name,
          codec.align(ResponseParams_GetOptionalInt16_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalInt16_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalInt16_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalUint32 = function() {
    return ResponseParamsProxy.prototype.getOptionalUint32
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalUint32 = function(value) {
    var params_ = new ResponseParams_GetOptionalUint32_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalUint32_Name,
          codec.align(ResponseParams_GetOptionalUint32_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalUint32_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalUint32_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalInt32 = function() {
    return ResponseParamsProxy.prototype.getOptionalInt32
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalInt32 = function(value) {
    var params_ = new ResponseParams_GetOptionalInt32_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalInt32_Name,
          codec.align(ResponseParams_GetOptionalInt32_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalInt32_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalInt32_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalUint64 = function() {
    return ResponseParamsProxy.prototype.getOptionalUint64
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalUint64 = function(value) {
    var params_ = new ResponseParams_GetOptionalUint64_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalUint64_Name,
          codec.align(ResponseParams_GetOptionalUint64_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalUint64_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalUint64_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalInt64 = function() {
    return ResponseParamsProxy.prototype.getOptionalInt64
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalInt64 = function(value) {
    var params_ = new ResponseParams_GetOptionalInt64_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalInt64_Name,
          codec.align(ResponseParams_GetOptionalInt64_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalInt64_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalInt64_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalFloat = function() {
    return ResponseParamsProxy.prototype.getOptionalFloat
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalFloat = function(value) {
    var params_ = new ResponseParams_GetOptionalFloat_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalFloat_Name,
          codec.align(ResponseParams_GetOptionalFloat_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalFloat_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalFloat_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalDouble = function() {
    return ResponseParamsProxy.prototype.getOptionalDouble
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalDouble = function(value) {
    var params_ = new ResponseParams_GetOptionalDouble_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalDouble_Name,
          codec.align(ResponseParams_GetOptionalDouble_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalDouble_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalDouble_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getOptionalEnum = function() {
    return ResponseParamsProxy.prototype.getOptionalEnum
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getOptionalEnum = function(value) {
    var params_ = new ResponseParams_GetOptionalEnum_Params();
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetOptionalEnum_Name,
          codec.align(ResponseParams_GetOptionalEnum_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetOptionalEnum_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetOptionalEnum_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getNullStructWithOptionalNumerics = function() {
    return ResponseParamsProxy.prototype.getNullStructWithOptionalNumerics
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getNullStructWithOptionalNumerics = function() {
    var params_ = new ResponseParams_GetNullStructWithOptionalNumerics_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetNullStructWithOptionalNumerics_Name,
          codec.align(ResponseParams_GetNullStructWithOptionalNumerics_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetNullStructWithOptionalNumerics_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getStructWithNullOptionalNumerics = function() {
    return ResponseParamsProxy.prototype.getStructWithNullOptionalNumerics
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getStructWithNullOptionalNumerics = function() {
    var params_ = new ResponseParams_GetStructWithNullOptionalNumerics_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetStructWithNullOptionalNumerics_Name,
          codec.align(ResponseParams_GetStructWithNullOptionalNumerics_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetStructWithNullOptionalNumerics_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ResponseParamsPtr.prototype.getStructWithOptionalNumerics = function() {
    return ResponseParamsProxy.prototype.getStructWithOptionalNumerics
        .apply(this.ptr.getProxy(), arguments);
  };

  ResponseParamsProxy.prototype.getStructWithOptionalNumerics = function(boolValue, uint8Value, int8Value, uint16Value, int16Value, uint32Value, int32Value, uint64Value, int64Value, floatValue, doubleValue, enumValue) {
    var params_ = new ResponseParams_GetStructWithOptionalNumerics_Params();
    params_.boolValue = boolValue;
    params_.uint8Value = uint8Value;
    params_.int8Value = int8Value;
    params_.uint16Value = uint16Value;
    params_.int16Value = int16Value;
    params_.uint32Value = uint32Value;
    params_.int32Value = int32Value;
    params_.uint64Value = uint64Value;
    params_.int64Value = int64Value;
    params_.floatValue = floatValue;
    params_.doubleValue = doubleValue;
    params_.enumValue = enumValue;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResponseParams_GetStructWithOptionalNumerics_Name,
          codec.align(ResponseParams_GetStructWithOptionalNumerics_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResponseParams_GetStructWithOptionalNumerics_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResponseParams_GetStructWithOptionalNumerics_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ResponseParamsStub(delegate) {
    this.delegate_ = delegate;
  }
  ResponseParamsStub.prototype.getNullBool = function() {
    return this.delegate_ && this.delegate_.getNullBool && this.delegate_.getNullBool();
  }
  ResponseParamsStub.prototype.getNullUint8 = function() {
    return this.delegate_ && this.delegate_.getNullUint8 && this.delegate_.getNullUint8();
  }
  ResponseParamsStub.prototype.getNullInt8 = function() {
    return this.delegate_ && this.delegate_.getNullInt8 && this.delegate_.getNullInt8();
  }
  ResponseParamsStub.prototype.getNullUint16 = function() {
    return this.delegate_ && this.delegate_.getNullUint16 && this.delegate_.getNullUint16();
  }
  ResponseParamsStub.prototype.getNullInt16 = function() {
    return this.delegate_ && this.delegate_.getNullInt16 && this.delegate_.getNullInt16();
  }
  ResponseParamsStub.prototype.getNullUint32 = function() {
    return this.delegate_ && this.delegate_.getNullUint32 && this.delegate_.getNullUint32();
  }
  ResponseParamsStub.prototype.getNullInt32 = function() {
    return this.delegate_ && this.delegate_.getNullInt32 && this.delegate_.getNullInt32();
  }
  ResponseParamsStub.prototype.getNullUint64 = function() {
    return this.delegate_ && this.delegate_.getNullUint64 && this.delegate_.getNullUint64();
  }
  ResponseParamsStub.prototype.getNullInt64 = function() {
    return this.delegate_ && this.delegate_.getNullInt64 && this.delegate_.getNullInt64();
  }
  ResponseParamsStub.prototype.getNullFloat = function() {
    return this.delegate_ && this.delegate_.getNullFloat && this.delegate_.getNullFloat();
  }
  ResponseParamsStub.prototype.getNullDouble = function() {
    return this.delegate_ && this.delegate_.getNullDouble && this.delegate_.getNullDouble();
  }
  ResponseParamsStub.prototype.getNullEnum = function() {
    return this.delegate_ && this.delegate_.getNullEnum && this.delegate_.getNullEnum();
  }
  ResponseParamsStub.prototype.getOptionalBool = function(value) {
    return this.delegate_ && this.delegate_.getOptionalBool && this.delegate_.getOptionalBool(value);
  }
  ResponseParamsStub.prototype.getOptionalUint8 = function(value) {
    return this.delegate_ && this.delegate_.getOptionalUint8 && this.delegate_.getOptionalUint8(value);
  }
  ResponseParamsStub.prototype.getOptionalInt8 = function(value) {
    return this.delegate_ && this.delegate_.getOptionalInt8 && this.delegate_.getOptionalInt8(value);
  }
  ResponseParamsStub.prototype.getOptionalUint16 = function(value) {
    return this.delegate_ && this.delegate_.getOptionalUint16 && this.delegate_.getOptionalUint16(value);
  }
  ResponseParamsStub.prototype.getOptionalInt16 = function(value) {
    return this.delegate_ && this.delegate_.getOptionalInt16 && this.delegate_.getOptionalInt16(value);
  }
  ResponseParamsStub.prototype.getOptionalUint32 = function(value) {
    return this.delegate_ && this.delegate_.getOptionalUint32 && this.delegate_.getOptionalUint32(value);
  }
  ResponseParamsStub.prototype.getOptionalInt32 = function(value) {
    return this.delegate_ && this.delegate_.getOptionalInt32 && this.delegate_.getOptionalInt32(value);
  }
  ResponseParamsStub.prototype.getOptionalUint64 = function(value) {
    return this.delegate_ && this.delegate_.getOptionalUint64 && this.delegate_.getOptionalUint64(value);
  }
  ResponseParamsStub.prototype.getOptionalInt64 = function(value) {
    return this.delegate_ && this.delegate_.getOptionalInt64 && this.delegate_.getOptionalInt64(value);
  }
  ResponseParamsStub.prototype.getOptionalFloat = function(value) {
    return this.delegate_ && this.delegate_.getOptionalFloat && this.delegate_.getOptionalFloat(value);
  }
  ResponseParamsStub.prototype.getOptionalDouble = function(value) {
    return this.delegate_ && this.delegate_.getOptionalDouble && this.delegate_.getOptionalDouble(value);
  }
  ResponseParamsStub.prototype.getOptionalEnum = function(value) {
    return this.delegate_ && this.delegate_.getOptionalEnum && this.delegate_.getOptionalEnum(value);
  }
  ResponseParamsStub.prototype.getNullStructWithOptionalNumerics = function() {
    return this.delegate_ && this.delegate_.getNullStructWithOptionalNumerics && this.delegate_.getNullStructWithOptionalNumerics();
  }
  ResponseParamsStub.prototype.getStructWithNullOptionalNumerics = function() {
    return this.delegate_ && this.delegate_.getStructWithNullOptionalNumerics && this.delegate_.getStructWithNullOptionalNumerics();
  }
  ResponseParamsStub.prototype.getStructWithOptionalNumerics = function(boolValue, uint8Value, int8Value, uint16Value, int16Value, uint32Value, int32Value, uint64Value, int64Value, floatValue, doubleValue, enumValue) {
    return this.delegate_ && this.delegate_.getStructWithOptionalNumerics && this.delegate_.getStructWithOptionalNumerics(boolValue, uint8Value, int8Value, uint16Value, int16Value, uint32Value, int32Value, uint64Value, int64Value, floatValue, doubleValue, enumValue);
  }

  ResponseParamsStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ResponseParamsStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kResponseParams_GetNullBool_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullBool_Params);
      this.getNullBool().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullBool_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullBool_Name,
            codec.align(ResponseParams_GetNullBool_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullBool_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullUint8_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullUint8_Params);
      this.getNullUint8().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullUint8_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullUint8_Name,
            codec.align(ResponseParams_GetNullUint8_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullUint8_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullInt8_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullInt8_Params);
      this.getNullInt8().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullInt8_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullInt8_Name,
            codec.align(ResponseParams_GetNullInt8_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullInt8_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullUint16_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullUint16_Params);
      this.getNullUint16().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullUint16_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullUint16_Name,
            codec.align(ResponseParams_GetNullUint16_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullUint16_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullInt16_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullInt16_Params);
      this.getNullInt16().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullInt16_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullInt16_Name,
            codec.align(ResponseParams_GetNullInt16_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullInt16_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullUint32_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullUint32_Params);
      this.getNullUint32().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullUint32_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullUint32_Name,
            codec.align(ResponseParams_GetNullUint32_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullUint32_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullInt32_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullInt32_Params);
      this.getNullInt32().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullInt32_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullInt32_Name,
            codec.align(ResponseParams_GetNullInt32_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullInt32_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullUint64_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullUint64_Params);
      this.getNullUint64().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullUint64_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullUint64_Name,
            codec.align(ResponseParams_GetNullUint64_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullUint64_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullInt64_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullInt64_Params);
      this.getNullInt64().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullInt64_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullInt64_Name,
            codec.align(ResponseParams_GetNullInt64_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullInt64_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullFloat_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullFloat_Params);
      this.getNullFloat().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullFloat_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullFloat_Name,
            codec.align(ResponseParams_GetNullFloat_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullFloat_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullDouble_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullDouble_Params);
      this.getNullDouble().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullDouble_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullDouble_Name,
            codec.align(ResponseParams_GetNullDouble_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullDouble_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullEnum_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullEnum_Params);
      this.getNullEnum().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullEnum_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullEnum_Name,
            codec.align(ResponseParams_GetNullEnum_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullEnum_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalBool_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalBool_Params);
      this.getOptionalBool(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalBool_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalBool_Name,
            codec.align(ResponseParams_GetOptionalBool_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalBool_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalUint8_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalUint8_Params);
      this.getOptionalUint8(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalUint8_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalUint8_Name,
            codec.align(ResponseParams_GetOptionalUint8_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalUint8_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalInt8_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalInt8_Params);
      this.getOptionalInt8(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalInt8_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalInt8_Name,
            codec.align(ResponseParams_GetOptionalInt8_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalInt8_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalUint16_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalUint16_Params);
      this.getOptionalUint16(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalUint16_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalUint16_Name,
            codec.align(ResponseParams_GetOptionalUint16_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalUint16_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalInt16_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalInt16_Params);
      this.getOptionalInt16(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalInt16_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalInt16_Name,
            codec.align(ResponseParams_GetOptionalInt16_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalInt16_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalUint32_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalUint32_Params);
      this.getOptionalUint32(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalUint32_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalUint32_Name,
            codec.align(ResponseParams_GetOptionalUint32_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalUint32_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalInt32_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalInt32_Params);
      this.getOptionalInt32(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalInt32_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalInt32_Name,
            codec.align(ResponseParams_GetOptionalInt32_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalInt32_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalUint64_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalUint64_Params);
      this.getOptionalUint64(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalUint64_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalUint64_Name,
            codec.align(ResponseParams_GetOptionalUint64_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalUint64_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalInt64_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalInt64_Params);
      this.getOptionalInt64(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalInt64_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalInt64_Name,
            codec.align(ResponseParams_GetOptionalInt64_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalInt64_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalFloat_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalFloat_Params);
      this.getOptionalFloat(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalFloat_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalFloat_Name,
            codec.align(ResponseParams_GetOptionalFloat_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalFloat_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalDouble_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalDouble_Params);
      this.getOptionalDouble(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalDouble_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalDouble_Name,
            codec.align(ResponseParams_GetOptionalDouble_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalDouble_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetOptionalEnum_Name:
      var params = reader.decodeStruct(ResponseParams_GetOptionalEnum_Params);
      this.getOptionalEnum(params.value).then(function(response) {
        var responseParams =
            new ResponseParams_GetOptionalEnum_ResponseParams();
        responseParams.optionalValue = response.optionalValue;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetOptionalEnum_Name,
            codec.align(ResponseParams_GetOptionalEnum_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetOptionalEnum_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetNullStructWithOptionalNumerics_Name:
      var params = reader.decodeStruct(ResponseParams_GetNullStructWithOptionalNumerics_Params);
      this.getNullStructWithOptionalNumerics().then(function(response) {
        var responseParams =
            new ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams();
        responseParams.s = response.s;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetNullStructWithOptionalNumerics_Name,
            codec.align(ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetStructWithNullOptionalNumerics_Name:
      var params = reader.decodeStruct(ResponseParams_GetStructWithNullOptionalNumerics_Params);
      this.getStructWithNullOptionalNumerics().then(function(response) {
        var responseParams =
            new ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams();
        responseParams.s = response.s;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetStructWithNullOptionalNumerics_Name,
            codec.align(ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kResponseParams_GetStructWithOptionalNumerics_Name:
      var params = reader.decodeStruct(ResponseParams_GetStructWithOptionalNumerics_Params);
      this.getStructWithOptionalNumerics(params.boolValue, params.uint8Value, params.int8Value, params.uint16Value, params.int16Value, params.uint32Value, params.int32Value, params.uint64Value, params.int64Value, params.floatValue, params.doubleValue, params.enumValue).then(function(response) {
        var responseParams =
            new ResponseParams_GetStructWithOptionalNumerics_ResponseParams();
        responseParams.s = response.s;
        var builder = new codec.MessageV1Builder(
            kResponseParams_GetStructWithOptionalNumerics_Name,
            codec.align(ResponseParams_GetStructWithOptionalNumerics_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResponseParams_GetStructWithOptionalNumerics_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateResponseParamsRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kResponseParams_GetNullBool_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullBool_Params;
      break;
      case kResponseParams_GetNullUint8_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullUint8_Params;
      break;
      case kResponseParams_GetNullInt8_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullInt8_Params;
      break;
      case kResponseParams_GetNullUint16_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullUint16_Params;
      break;
      case kResponseParams_GetNullInt16_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullInt16_Params;
      break;
      case kResponseParams_GetNullUint32_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullUint32_Params;
      break;
      case kResponseParams_GetNullInt32_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullInt32_Params;
      break;
      case kResponseParams_GetNullUint64_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullUint64_Params;
      break;
      case kResponseParams_GetNullInt64_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullInt64_Params;
      break;
      case kResponseParams_GetNullFloat_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullFloat_Params;
      break;
      case kResponseParams_GetNullDouble_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullDouble_Params;
      break;
      case kResponseParams_GetNullEnum_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullEnum_Params;
      break;
      case kResponseParams_GetOptionalBool_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalBool_Params;
      break;
      case kResponseParams_GetOptionalUint8_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalUint8_Params;
      break;
      case kResponseParams_GetOptionalInt8_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalInt8_Params;
      break;
      case kResponseParams_GetOptionalUint16_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalUint16_Params;
      break;
      case kResponseParams_GetOptionalInt16_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalInt16_Params;
      break;
      case kResponseParams_GetOptionalUint32_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalUint32_Params;
      break;
      case kResponseParams_GetOptionalInt32_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalInt32_Params;
      break;
      case kResponseParams_GetOptionalUint64_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalUint64_Params;
      break;
      case kResponseParams_GetOptionalInt64_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalInt64_Params;
      break;
      case kResponseParams_GetOptionalFloat_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalFloat_Params;
      break;
      case kResponseParams_GetOptionalDouble_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalDouble_Params;
      break;
      case kResponseParams_GetOptionalEnum_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetOptionalEnum_Params;
      break;
      case kResponseParams_GetNullStructWithOptionalNumerics_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetNullStructWithOptionalNumerics_Params;
      break;
      case kResponseParams_GetStructWithNullOptionalNumerics_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetStructWithNullOptionalNumerics_Params;
      break;
      case kResponseParams_GetStructWithOptionalNumerics_Name:
        if (message.expectsResponse())
          paramsClass = ResponseParams_GetStructWithOptionalNumerics_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateResponseParamsResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kResponseParams_GetNullBool_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullBool_ResponseParams;
        break;
      case kResponseParams_GetNullUint8_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullUint8_ResponseParams;
        break;
      case kResponseParams_GetNullInt8_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullInt8_ResponseParams;
        break;
      case kResponseParams_GetNullUint16_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullUint16_ResponseParams;
        break;
      case kResponseParams_GetNullInt16_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullInt16_ResponseParams;
        break;
      case kResponseParams_GetNullUint32_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullUint32_ResponseParams;
        break;
      case kResponseParams_GetNullInt32_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullInt32_ResponseParams;
        break;
      case kResponseParams_GetNullUint64_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullUint64_ResponseParams;
        break;
      case kResponseParams_GetNullInt64_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullInt64_ResponseParams;
        break;
      case kResponseParams_GetNullFloat_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullFloat_ResponseParams;
        break;
      case kResponseParams_GetNullDouble_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullDouble_ResponseParams;
        break;
      case kResponseParams_GetNullEnum_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullEnum_ResponseParams;
        break;
      case kResponseParams_GetOptionalBool_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalBool_ResponseParams;
        break;
      case kResponseParams_GetOptionalUint8_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalUint8_ResponseParams;
        break;
      case kResponseParams_GetOptionalInt8_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalInt8_ResponseParams;
        break;
      case kResponseParams_GetOptionalUint16_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalUint16_ResponseParams;
        break;
      case kResponseParams_GetOptionalInt16_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalInt16_ResponseParams;
        break;
      case kResponseParams_GetOptionalUint32_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalUint32_ResponseParams;
        break;
      case kResponseParams_GetOptionalInt32_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalInt32_ResponseParams;
        break;
      case kResponseParams_GetOptionalUint64_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalUint64_ResponseParams;
        break;
      case kResponseParams_GetOptionalInt64_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalInt64_ResponseParams;
        break;
      case kResponseParams_GetOptionalFloat_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalFloat_ResponseParams;
        break;
      case kResponseParams_GetOptionalDouble_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalDouble_ResponseParams;
        break;
      case kResponseParams_GetOptionalEnum_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetOptionalEnum_ResponseParams;
        break;
      case kResponseParams_GetNullStructWithOptionalNumerics_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetNullStructWithOptionalNumerics_ResponseParams;
        break;
      case kResponseParams_GetStructWithNullOptionalNumerics_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetStructWithNullOptionalNumerics_ResponseParams;
        break;
      case kResponseParams_GetStructWithOptionalNumerics_Name:
        if (message.isResponse())
          paramsClass = ResponseParams_GetStructWithOptionalNumerics_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ResponseParams = {
    name: 'content.optional_numerics_unittest.mojom.ResponseParams',
    kVersion: 0,
    ptrClass: ResponseParamsPtr,
    proxyClass: ResponseParamsProxy,
    stubClass: ResponseParamsStub,
    validateRequest: validateResponseParamsRequest,
    validateResponse: validateResponseParamsResponse,
  };
  ResponseParamsStub.prototype.validator = validateResponseParamsRequest;
  ResponseParamsProxy.prototype.validator = validateResponseParamsResponse;
  var kInterfaceV0_MethodWithVersionedParams_Name = 1;
  var kInterfaceV0_MethodWithVersionedStruct_Name = 2;

  function InterfaceV0Ptr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(InterfaceV0,
                                                   handleOrPtrInfo);
  }

  function InterfaceV0AssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        InterfaceV0, associatedInterfacePtrInfo);
  }

  InterfaceV0AssociatedPtr.prototype =
      Object.create(InterfaceV0Ptr.prototype);
  InterfaceV0AssociatedPtr.prototype.constructor =
      InterfaceV0AssociatedPtr;

  function InterfaceV0Proxy(receiver) {
    this.receiver_ = receiver;
  }
  InterfaceV0Ptr.prototype.methodWithVersionedParams = function() {
    return InterfaceV0Proxy.prototype.methodWithVersionedParams
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfaceV0Proxy.prototype.methodWithVersionedParams = function() {
    var params_ = new InterfaceV0_MethodWithVersionedParams_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInterfaceV0_MethodWithVersionedParams_Name,
          codec.align(InterfaceV0_MethodWithVersionedParams_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(InterfaceV0_MethodWithVersionedParams_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InterfaceV0_MethodWithVersionedParams_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  InterfaceV0Ptr.prototype.methodWithVersionedStruct = function() {
    return InterfaceV0Proxy.prototype.methodWithVersionedStruct
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfaceV0Proxy.prototype.methodWithVersionedStruct = function(s) {
    var params_ = new InterfaceV0_MethodWithVersionedStruct_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInterfaceV0_MethodWithVersionedStruct_Name,
          codec.align(InterfaceV0_MethodWithVersionedStruct_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(InterfaceV0_MethodWithVersionedStruct_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InterfaceV0_MethodWithVersionedStruct_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function InterfaceV0Stub(delegate) {
    this.delegate_ = delegate;
  }
  InterfaceV0Stub.prototype.methodWithVersionedParams = function() {
    return this.delegate_ && this.delegate_.methodWithVersionedParams && this.delegate_.methodWithVersionedParams();
  }
  InterfaceV0Stub.prototype.methodWithVersionedStruct = function(s) {
    return this.delegate_ && this.delegate_.methodWithVersionedStruct && this.delegate_.methodWithVersionedStruct(s);
  }

  InterfaceV0Stub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  InterfaceV0Stub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kInterfaceV0_MethodWithVersionedParams_Name:
      var params = reader.decodeStruct(InterfaceV0_MethodWithVersionedParams_Params);
      this.methodWithVersionedParams().then(function(response) {
        var responseParams =
            new InterfaceV0_MethodWithVersionedParams_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kInterfaceV0_MethodWithVersionedParams_Name,
            codec.align(InterfaceV0_MethodWithVersionedParams_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(InterfaceV0_MethodWithVersionedParams_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kInterfaceV0_MethodWithVersionedStruct_Name:
      var params = reader.decodeStruct(InterfaceV0_MethodWithVersionedStruct_Params);
      this.methodWithVersionedStruct(params.s).then(function(response) {
        var responseParams =
            new InterfaceV0_MethodWithVersionedStruct_ResponseParams();
        responseParams.s = response.s;
        var builder = new codec.MessageV1Builder(
            kInterfaceV0_MethodWithVersionedStruct_Name,
            codec.align(InterfaceV0_MethodWithVersionedStruct_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(InterfaceV0_MethodWithVersionedStruct_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateInterfaceV0Request(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kInterfaceV0_MethodWithVersionedParams_Name:
        if (message.expectsResponse())
          paramsClass = InterfaceV0_MethodWithVersionedParams_Params;
      break;
      case kInterfaceV0_MethodWithVersionedStruct_Name:
        if (message.expectsResponse())
          paramsClass = InterfaceV0_MethodWithVersionedStruct_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateInterfaceV0Response(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kInterfaceV0_MethodWithVersionedParams_Name:
        if (message.isResponse())
          paramsClass = InterfaceV0_MethodWithVersionedParams_ResponseParams;
        break;
      case kInterfaceV0_MethodWithVersionedStruct_Name:
        if (message.isResponse())
          paramsClass = InterfaceV0_MethodWithVersionedStruct_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var InterfaceV0 = {
    name: 'content.optional_numerics_unittest.mojom.InterfaceV0',
    kVersion: 0,
    ptrClass: InterfaceV0Ptr,
    proxyClass: InterfaceV0Proxy,
    stubClass: InterfaceV0Stub,
    validateRequest: validateInterfaceV0Request,
    validateResponse: validateInterfaceV0Response,
  };
  InterfaceV0Stub.prototype.validator = validateInterfaceV0Request;
  InterfaceV0Proxy.prototype.validator = validateInterfaceV0Response;
  var kInterfaceV2_MethodWithVersionedParams_Name = 1;
  var kInterfaceV2_MethodWithVersionedStruct_Name = 2;

  function InterfaceV2Ptr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(InterfaceV2,
                                                   handleOrPtrInfo);
  }

  function InterfaceV2AssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        InterfaceV2, associatedInterfacePtrInfo);
  }

  InterfaceV2AssociatedPtr.prototype =
      Object.create(InterfaceV2Ptr.prototype);
  InterfaceV2AssociatedPtr.prototype.constructor =
      InterfaceV2AssociatedPtr;

  function InterfaceV2Proxy(receiver) {
    this.receiver_ = receiver;
  }
  InterfaceV2Ptr.prototype.methodWithVersionedParams = function() {
    return InterfaceV2Proxy.prototype.methodWithVersionedParams
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfaceV2Proxy.prototype.methodWithVersionedParams = function(boolValue, uint8Value, int8Value, uint16Value, int16Value, uint32Value, int32Value, uint64Value, int64Value, floatValue, doubleValue, enumValue) {
    var params_ = new InterfaceV2_MethodWithVersionedParams_Params();
    params_.boolValue = boolValue;
    params_.uint8Value = uint8Value;
    params_.int8Value = int8Value;
    params_.uint16Value = uint16Value;
    params_.int16Value = int16Value;
    params_.uint32Value = uint32Value;
    params_.int32Value = int32Value;
    params_.uint64Value = uint64Value;
    params_.int64Value = int64Value;
    params_.floatValue = floatValue;
    params_.doubleValue = doubleValue;
    params_.enumValue = enumValue;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInterfaceV2_MethodWithVersionedParams_Name,
          codec.align(InterfaceV2_MethodWithVersionedParams_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(InterfaceV2_MethodWithVersionedParams_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InterfaceV2_MethodWithVersionedParams_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  InterfaceV2Ptr.prototype.methodWithVersionedStruct = function() {
    return InterfaceV2Proxy.prototype.methodWithVersionedStruct
        .apply(this.ptr.getProxy(), arguments);
  };

  InterfaceV2Proxy.prototype.methodWithVersionedStruct = function(s) {
    var params_ = new InterfaceV2_MethodWithVersionedStruct_Params();
    params_.s = s;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kInterfaceV2_MethodWithVersionedStruct_Name,
          codec.align(InterfaceV2_MethodWithVersionedStruct_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(InterfaceV2_MethodWithVersionedStruct_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(InterfaceV2_MethodWithVersionedStruct_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function InterfaceV2Stub(delegate) {
    this.delegate_ = delegate;
  }
  InterfaceV2Stub.prototype.methodWithVersionedParams = function(boolValue, uint8Value, int8Value, uint16Value, int16Value, uint32Value, int32Value, uint64Value, int64Value, floatValue, doubleValue, enumValue) {
    return this.delegate_ && this.delegate_.methodWithVersionedParams && this.delegate_.methodWithVersionedParams(boolValue, uint8Value, int8Value, uint16Value, int16Value, uint32Value, int32Value, uint64Value, int64Value, floatValue, doubleValue, enumValue);
  }
  InterfaceV2Stub.prototype.methodWithVersionedStruct = function(s) {
    return this.delegate_ && this.delegate_.methodWithVersionedStruct && this.delegate_.methodWithVersionedStruct(s);
  }

  InterfaceV2Stub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  InterfaceV2Stub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kInterfaceV2_MethodWithVersionedParams_Name:
      var params = reader.decodeStruct(InterfaceV2_MethodWithVersionedParams_Params);
      this.methodWithVersionedParams(params.boolValue, params.uint8Value, params.int8Value, params.uint16Value, params.int16Value, params.uint32Value, params.int32Value, params.uint64Value, params.int64Value, params.floatValue, params.doubleValue, params.enumValue).then(function(response) {
        var responseParams =
            new InterfaceV2_MethodWithVersionedParams_ResponseParams();
        responseParams.boolValue = response.boolValue;
        responseParams.uint8Value = response.uint8Value;
        responseParams.int8Value = response.int8Value;
        responseParams.uint16Value = response.uint16Value;
        responseParams.int16Value = response.int16Value;
        responseParams.uint32Value = response.uint32Value;
        responseParams.int32Value = response.int32Value;
        responseParams.uint64Value = response.uint64Value;
        responseParams.int64Value = response.int64Value;
        responseParams.floatValue = response.floatValue;
        responseParams.doubleValue = response.doubleValue;
        responseParams.enumValue = response.enumValue;
        var builder = new codec.MessageV1Builder(
            kInterfaceV2_MethodWithVersionedParams_Name,
            codec.align(InterfaceV2_MethodWithVersionedParams_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(InterfaceV2_MethodWithVersionedParams_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kInterfaceV2_MethodWithVersionedStruct_Name:
      var params = reader.decodeStruct(InterfaceV2_MethodWithVersionedStruct_Params);
      this.methodWithVersionedStruct(params.s).then(function(response) {
        var responseParams =
            new InterfaceV2_MethodWithVersionedStruct_ResponseParams();
        responseParams.s = response.s;
        var builder = new codec.MessageV1Builder(
            kInterfaceV2_MethodWithVersionedStruct_Name,
            codec.align(InterfaceV2_MethodWithVersionedStruct_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(InterfaceV2_MethodWithVersionedStruct_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateInterfaceV2Request(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kInterfaceV2_MethodWithVersionedParams_Name:
        if (message.expectsResponse())
          paramsClass = InterfaceV2_MethodWithVersionedParams_Params;
      break;
      case kInterfaceV2_MethodWithVersionedStruct_Name:
        if (message.expectsResponse())
          paramsClass = InterfaceV2_MethodWithVersionedStruct_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateInterfaceV2Response(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kInterfaceV2_MethodWithVersionedParams_Name:
        if (message.isResponse())
          paramsClass = InterfaceV2_MethodWithVersionedParams_ResponseParams;
        break;
      case kInterfaceV2_MethodWithVersionedStruct_Name:
        if (message.isResponse())
          paramsClass = InterfaceV2_MethodWithVersionedStruct_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var InterfaceV2 = {
    name: 'content.optional_numerics_unittest.mojom.InterfaceV2',
    kVersion: 2,
    ptrClass: InterfaceV2Ptr,
    proxyClass: InterfaceV2Proxy,
    stubClass: InterfaceV2Stub,
    validateRequest: validateInterfaceV2Request,
    validateResponse: validateInterfaceV2Response,
  };
  InterfaceV2Stub.prototype.validator = validateInterfaceV2Request;
  InterfaceV2Proxy.prototype.validator = validateInterfaceV2Response;
  exports.RegularEnum = RegularEnum;
  exports.OptionalNumericsStruct = OptionalNumericsStruct;
  exports.VersionedStructV0 = VersionedStructV0;
  exports.VersionedStructV2 = VersionedStructV2;
  exports.Params = Params;
  exports.ParamsPtr = ParamsPtr;
  exports.ParamsAssociatedPtr = ParamsAssociatedPtr;
  exports.ResponseParams = ResponseParams;
  exports.ResponseParamsPtr = ResponseParamsPtr;
  exports.ResponseParamsAssociatedPtr = ResponseParamsAssociatedPtr;
  exports.InterfaceV0 = InterfaceV0;
  exports.InterfaceV0Ptr = InterfaceV0Ptr;
  exports.InterfaceV0AssociatedPtr = InterfaceV0AssociatedPtr;
  exports.InterfaceV2 = InterfaceV2;
  exports.InterfaceV2Ptr = InterfaceV2Ptr;
  exports.InterfaceV2AssociatedPtr = InterfaceV2AssociatedPtr;
})();