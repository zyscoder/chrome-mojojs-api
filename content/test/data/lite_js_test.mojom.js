// content/test/data/lite_js_test.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/test/data/lite_js_test.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('liteJsTest.mojom');



  function TestStruct(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  TestStruct.StructEnum = {};
  TestStruct.StructEnum.kZero = 0;
  TestStruct.StructEnum.kOne = 1;
  TestStruct.StructEnum.MIN_VALUE = 0;
  TestStruct.StructEnum.MAX_VALUE = 1;

  TestStruct.StructEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  TestStruct.StructEnum.toKnownEnumValue = function(value) {
    return value;
  };

  TestStruct.StructEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  TestStruct.STRUCT_CONST = 2;
  TestStruct.IS_VALID = false;
  TestStruct.prototype.initDefaults_ = function() {
    this.x = 0;
    this.y = TestStruct.STRUCT_CONST;
    this.z = TestStruct.StructEnum.kOne;
  };
  TestStruct.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestStruct.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate TestStruct.z
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, TestStruct.StructEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestStruct.encodedSize = codec.kStructHeaderSize + 16;

  TestStruct.decode = function(decoder) {
    var packed;
    var val = new TestStruct();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.x =
        decoder.decodeStruct(codec.Int32);
    val.y =
        decoder.decodeStruct(codec.Int32);
    val.z =
        decoder.decodeStruct(new codec.Enum(TestStruct.StructEnum));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestStruct.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestStruct.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.x);
    encoder.encodeStruct(codec.Int32, val.y);
    encoder.encodeStruct(codec.Int32, val.z);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestMessageTarget_Poke_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_Poke_Params.prototype.initDefaults_ = function() {
  };
  TestMessageTarget_Poke_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_Poke_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_Poke_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestMessageTarget_Poke_Params.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_Poke_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestMessageTarget_Poke_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_Poke_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestMessageTarget_Ping_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_Ping_Params.prototype.initDefaults_ = function() {
  };
  TestMessageTarget_Ping_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_Ping_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_Ping_Params.encodedSize = codec.kStructHeaderSize + 0;

  TestMessageTarget_Ping_Params.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_Ping_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestMessageTarget_Ping_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_Ping_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TestMessageTarget_Ping_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_Ping_ResponseParams.prototype.initDefaults_ = function() {
  };
  TestMessageTarget_Ping_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_Ping_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_Ping_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TestMessageTarget_Ping_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_Ping_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TestMessageTarget_Ping_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_Ping_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TestMessageTarget_Repeat_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_Repeat_Params.prototype.initDefaults_ = function() {
    this.message = null;
    this.numbers = null;
  };
  TestMessageTarget_Repeat_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_Repeat_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_Repeat_Params.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_Repeat_Params.numbers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 4, codec.Int32, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_Repeat_Params.encodedSize = codec.kStructHeaderSize + 16;

  TestMessageTarget_Repeat_Params.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_Repeat_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message =
        decoder.decodeStruct(codec.NullableString);
    val.numbers =
        decoder.decodeArrayPointer(codec.Int32);
    return val;
  };

  TestMessageTarget_Repeat_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_Repeat_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.message);
    encoder.encodeArrayPointer(codec.Int32, val.numbers);
  };
  function TestMessageTarget_Repeat_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_Repeat_ResponseParams.prototype.initDefaults_ = function() {
    this.message = null;
    this.numbers = null;
  };
  TestMessageTarget_Repeat_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_Repeat_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_Repeat_ResponseParams.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_Repeat_ResponseParams.numbers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 4, codec.Int32, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_Repeat_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  TestMessageTarget_Repeat_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_Repeat_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message =
        decoder.decodeStruct(codec.NullableString);
    val.numbers =
        decoder.decodeArrayPointer(codec.Int32);
    return val;
  };

  TestMessageTarget_Repeat_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_Repeat_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.message);
    encoder.encodeArrayPointer(codec.Int32, val.numbers);
  };
  function TestMessageTarget_Echo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_Echo_Params.prototype.initDefaults_ = function() {
    this.nested = 0;
  };
  TestMessageTarget_Echo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_Echo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_Echo_Params.nested
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, TestMessageTarget.NestedEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_Echo_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestMessageTarget_Echo_Params.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_Echo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nested =
        decoder.decodeStruct(new codec.Enum(TestMessageTarget.NestedEnum));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestMessageTarget_Echo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_Echo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.nested);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestMessageTarget_Echo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_Echo_ResponseParams.prototype.initDefaults_ = function() {
    this.nested = 0;
  };
  TestMessageTarget_Echo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_Echo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_Echo_ResponseParams.nested
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, TestMessageTarget.NestedEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_Echo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestMessageTarget_Echo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_Echo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.nested =
        decoder.decodeStruct(new codec.Enum(TestMessageTarget.NestedEnum));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestMessageTarget_Echo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_Echo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.nested);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestMessageTarget_Deconstruct_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_Deconstruct_Params.prototype.initDefaults_ = function() {
    this.testStruct = null;
  };
  TestMessageTarget_Deconstruct_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_Deconstruct_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_Deconstruct_Params.testStruct
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TestStruct, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_Deconstruct_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestMessageTarget_Deconstruct_Params.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_Deconstruct_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.testStruct =
        decoder.decodeStructPointer(TestStruct);
    return val;
  };

  TestMessageTarget_Deconstruct_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_Deconstruct_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TestStruct, val.testStruct);
  };
  function TestMessageTarget_Deconstruct_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_Deconstruct_ResponseParams.prototype.initDefaults_ = function() {
    this.x = 0;
    this.y = 0;
    this.z = 0;
  };
  TestMessageTarget_Deconstruct_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_Deconstruct_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  TestMessageTarget_Deconstruct_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  TestMessageTarget_Deconstruct_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_Deconstruct_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.x =
        decoder.decodeStruct(codec.Int32);
    val.y =
        decoder.decodeStruct(codec.Int32);
    val.z =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestMessageTarget_Deconstruct_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_Deconstruct_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.x);
    encoder.encodeStruct(codec.Int32, val.y);
    encoder.encodeStruct(codec.Int32, val.z);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TestMessageTarget_Flatten_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_Flatten_Params.prototype.initDefaults_ = function() {
    this.values = null;
  };
  TestMessageTarget_Flatten_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_Flatten_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_Flatten_Params.values
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(TestStruct), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_Flatten_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestMessageTarget_Flatten_Params.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_Flatten_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.values =
        decoder.decodeArrayPointer(new codec.PointerTo(TestStruct));
    return val;
  };

  TestMessageTarget_Flatten_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_Flatten_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(TestStruct), val.values);
  };
  function TestMessageTarget_Flatten_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_Flatten_ResponseParams.prototype.initDefaults_ = function() {
    this.values = null;
  };
  TestMessageTarget_Flatten_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_Flatten_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_Flatten_ResponseParams.values
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_Flatten_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TestMessageTarget_Flatten_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_Flatten_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.values =
        decoder.decodeArrayPointer(codec.Int32);
    return val;
  };

  TestMessageTarget_Flatten_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_Flatten_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Int32, val.values);
  };
  function TestMessageTarget_FlattenUnions_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_FlattenUnions_Params.prototype.initDefaults_ = function() {
    this.unions = null;
  };
  TestMessageTarget_FlattenUnions_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_FlattenUnions_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_FlattenUnions_Params.unions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 16, TestUnion, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_FlattenUnions_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestMessageTarget_FlattenUnions_Params.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_FlattenUnions_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.unions =
        decoder.decodeArrayPointer(TestUnion);
    return val;
  };

  TestMessageTarget_FlattenUnions_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_FlattenUnions_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(TestUnion, val.unions);
  };
  function TestMessageTarget_FlattenUnions_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_FlattenUnions_ResponseParams.prototype.initDefaults_ = function() {
    this.x = null;
    this.s = null;
  };
  TestMessageTarget_FlattenUnions_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_FlattenUnions_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_FlattenUnions_ResponseParams.x
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_FlattenUnions_ResponseParams.s
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_FlattenUnions_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  TestMessageTarget_FlattenUnions_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_FlattenUnions_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.x =
        decoder.decodeArrayPointer(codec.Int32);
    val.s =
        decoder.decodeArrayPointer(codec.Int32);
    return val;
  };

  TestMessageTarget_FlattenUnions_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_FlattenUnions_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Int32, val.x);
    encoder.encodeArrayPointer(codec.Int32, val.s);
  };
  function TestMessageTarget_FlattenMap_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_FlattenMap_Params.prototype.initDefaults_ = function() {
    this.testMap = null;
  };
  TestMessageTarget_FlattenMap_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_FlattenMap_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_FlattenMap_Params.testMap
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, codec.Int32, codec.Int32, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_FlattenMap_Params.encodedSize = codec.kStructHeaderSize + 8;

  TestMessageTarget_FlattenMap_Params.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_FlattenMap_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.testMap =
        decoder.decodeMapPointer(codec.Int32, codec.Int32);
    return val;
  };

  TestMessageTarget_FlattenMap_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_FlattenMap_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(codec.Int32, codec.Int32, val.testMap);
  };
  function TestMessageTarget_FlattenMap_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_FlattenMap_ResponseParams.prototype.initDefaults_ = function() {
    this.keys = null;
    this.values = null;
  };
  TestMessageTarget_FlattenMap_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_FlattenMap_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_FlattenMap_ResponseParams.keys
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_FlattenMap_ResponseParams.values
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_FlattenMap_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  TestMessageTarget_FlattenMap_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_FlattenMap_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.keys =
        decoder.decodeArrayPointer(codec.Int32);
    val.values =
        decoder.decodeArrayPointer(codec.Int32);
    return val;
  };

  TestMessageTarget_FlattenMap_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_FlattenMap_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Int32, val.keys);
    encoder.encodeArrayPointer(codec.Int32, val.values);
  };
  function TestMessageTarget_RequestSubinterface_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TestMessageTarget_RequestSubinterface_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
    this.client = new SubinterfaceClientPtr();
  };
  TestMessageTarget_RequestSubinterface_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TestMessageTarget_RequestSubinterface_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_RequestSubinterface_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TestMessageTarget_RequestSubinterface_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TestMessageTarget_RequestSubinterface_Params.encodedSize = codec.kStructHeaderSize + 16;

  TestMessageTarget_RequestSubinterface_Params.decode = function(decoder) {
    var packed;
    var val = new TestMessageTarget_RequestSubinterface_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.client =
        decoder.decodeStruct(new codec.Interface(SubinterfaceClientPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TestMessageTarget_RequestSubinterface_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TestMessageTarget_RequestSubinterface_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(new codec.Interface(SubinterfaceClientPtr), val.client);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Subinterface_Push_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Subinterface_Push_Params.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  Subinterface_Push_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Subinterface_Push_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Subinterface_Push_Params.encodedSize = codec.kStructHeaderSize + 8;

  Subinterface_Push_Params.decode = function(decoder) {
    var packed;
    var val = new Subinterface_Push_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Subinterface_Push_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Subinterface_Push_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.value);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Subinterface_Flush_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Subinterface_Flush_Params.prototype.initDefaults_ = function() {
  };
  Subinterface_Flush_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Subinterface_Flush_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Subinterface_Flush_Params.encodedSize = codec.kStructHeaderSize + 0;

  Subinterface_Flush_Params.decode = function(decoder) {
    var packed;
    var val = new Subinterface_Flush_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Subinterface_Flush_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Subinterface_Flush_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SubinterfaceClient_DidFlush_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SubinterfaceClient_DidFlush_Params.prototype.initDefaults_ = function() {
    this.values = null;
  };
  SubinterfaceClient_DidFlush_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SubinterfaceClient_DidFlush_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SubinterfaceClient_DidFlush_Params.values
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 4, codec.Int32, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SubinterfaceClient_DidFlush_Params.encodedSize = codec.kStructHeaderSize + 8;

  SubinterfaceClient_DidFlush_Params.decode = function(decoder) {
    var packed;
    var val = new SubinterfaceClient_DidFlush_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.values =
        decoder.decodeArrayPointer(codec.Int32);
    return val;
  };

  SubinterfaceClient_DidFlush_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SubinterfaceClient_DidFlush_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Int32, val.values);
  };

  function TestUnion(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  TestUnion.Tags = {
    x: 0,
    s: 1,
  };

  TestUnion.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  TestUnion.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "x",
        "s",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a TestUnion member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(TestUnion.prototype, "x", {
    get: function() {
      if (this.$tag != TestUnion.Tags.x) {
        throw new ReferenceError(
            "TestUnion.x is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = TestUnion.Tags.x;
      this.$data = value;
    }
  });
  Object.defineProperty(TestUnion.prototype, "s", {
    get: function() {
      if (this.$tag != TestUnion.Tags.s) {
        throw new ReferenceError(
            "TestUnion.s is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = TestUnion.Tags.s;
      this.$data = value;
    }
  });


    TestUnion.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case TestUnion.Tags.x:
          encoder.encodeStruct(codec.Int32, val.x);
          break;
        case TestUnion.Tags.s:
          encoder.encodeStructPointer(TestStruct, val.s);
          break;
      }
      encoder.align();
    };


    TestUnion.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new TestUnion();
      var tag = decoder.readUint32();
      switch (tag) {
        case TestUnion.Tags.x:
          result.x = decoder.decodeStruct(codec.Int32);
          break;
        case TestUnion.Tags.s:
          result.s = decoder.decodeStructPointer(TestStruct);
          break;
      }
      decoder.align();

      return result;
    };


    TestUnion.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case TestUnion.Tags.x:
          

          break;
        case TestUnion.Tags.s:
          

    // validate TestUnion.s
    err = messageValidator.validateStructPointer(data_offset, TestStruct, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  TestUnion.encodedSize = 16;
  var kTestMessageTarget_Poke_Name = 0;
  var kTestMessageTarget_Ping_Name = 1;
  var kTestMessageTarget_Repeat_Name = 2;
  var kTestMessageTarget_Echo_Name = 3;
  var kTestMessageTarget_Deconstruct_Name = 4;
  var kTestMessageTarget_Flatten_Name = 5;
  var kTestMessageTarget_FlattenUnions_Name = 6;
  var kTestMessageTarget_FlattenMap_Name = 7;
  var kTestMessageTarget_RequestSubinterface_Name = 8;

  function TestMessageTargetPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TestMessageTarget,
                                                   handleOrPtrInfo);
  }

  function TestMessageTargetAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TestMessageTarget, associatedInterfacePtrInfo);
  }

  TestMessageTargetAssociatedPtr.prototype =
      Object.create(TestMessageTargetPtr.prototype);
  TestMessageTargetAssociatedPtr.prototype.constructor =
      TestMessageTargetAssociatedPtr;

  function TestMessageTargetProxy(receiver) {
    this.receiver_ = receiver;
  }
  TestMessageTargetPtr.prototype.poke = function() {
    return TestMessageTargetProxy.prototype.poke
        .apply(this.ptr.getProxy(), arguments);
  };

  TestMessageTargetProxy.prototype.poke = function() {
    var params_ = new TestMessageTarget_Poke_Params();
    var builder = new codec.MessageV0Builder(
        kTestMessageTarget_Poke_Name,
        codec.align(TestMessageTarget_Poke_Params.encodedSize));
    builder.encodeStruct(TestMessageTarget_Poke_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TestMessageTargetPtr.prototype.ping = function() {
    return TestMessageTargetProxy.prototype.ping
        .apply(this.ptr.getProxy(), arguments);
  };

  TestMessageTargetProxy.prototype.ping = function() {
    var params_ = new TestMessageTarget_Ping_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestMessageTarget_Ping_Name,
          codec.align(TestMessageTarget_Ping_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestMessageTarget_Ping_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestMessageTarget_Ping_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestMessageTargetPtr.prototype.repeat = function() {
    return TestMessageTargetProxy.prototype.repeat
        .apply(this.ptr.getProxy(), arguments);
  };

  TestMessageTargetProxy.prototype.repeat = function(message, numbers) {
    var params_ = new TestMessageTarget_Repeat_Params();
    params_.message = message;
    params_.numbers = numbers;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestMessageTarget_Repeat_Name,
          codec.align(TestMessageTarget_Repeat_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestMessageTarget_Repeat_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestMessageTarget_Repeat_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestMessageTargetPtr.prototype.echo = function() {
    return TestMessageTargetProxy.prototype.echo
        .apply(this.ptr.getProxy(), arguments);
  };

  TestMessageTargetProxy.prototype.echo = function(nested) {
    var params_ = new TestMessageTarget_Echo_Params();
    params_.nested = nested;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestMessageTarget_Echo_Name,
          codec.align(TestMessageTarget_Echo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestMessageTarget_Echo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestMessageTarget_Echo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestMessageTargetPtr.prototype.deconstruct = function() {
    return TestMessageTargetProxy.prototype.deconstruct
        .apply(this.ptr.getProxy(), arguments);
  };

  TestMessageTargetProxy.prototype.deconstruct = function(testStruct) {
    var params_ = new TestMessageTarget_Deconstruct_Params();
    params_.testStruct = testStruct;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestMessageTarget_Deconstruct_Name,
          codec.align(TestMessageTarget_Deconstruct_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestMessageTarget_Deconstruct_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestMessageTarget_Deconstruct_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestMessageTargetPtr.prototype.flatten = function() {
    return TestMessageTargetProxy.prototype.flatten
        .apply(this.ptr.getProxy(), arguments);
  };

  TestMessageTargetProxy.prototype.flatten = function(values) {
    var params_ = new TestMessageTarget_Flatten_Params();
    params_.values = values;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestMessageTarget_Flatten_Name,
          codec.align(TestMessageTarget_Flatten_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestMessageTarget_Flatten_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestMessageTarget_Flatten_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestMessageTargetPtr.prototype.flattenUnions = function() {
    return TestMessageTargetProxy.prototype.flattenUnions
        .apply(this.ptr.getProxy(), arguments);
  };

  TestMessageTargetProxy.prototype.flattenUnions = function(unions) {
    var params_ = new TestMessageTarget_FlattenUnions_Params();
    params_.unions = unions;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestMessageTarget_FlattenUnions_Name,
          codec.align(TestMessageTarget_FlattenUnions_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestMessageTarget_FlattenUnions_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestMessageTarget_FlattenUnions_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestMessageTargetPtr.prototype.flattenMap = function() {
    return TestMessageTargetProxy.prototype.flattenMap
        .apply(this.ptr.getProxy(), arguments);
  };

  TestMessageTargetProxy.prototype.flattenMap = function(testMap) {
    var params_ = new TestMessageTarget_FlattenMap_Params();
    params_.testMap = testMap;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTestMessageTarget_FlattenMap_Name,
          codec.align(TestMessageTarget_FlattenMap_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TestMessageTarget_FlattenMap_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TestMessageTarget_FlattenMap_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TestMessageTargetPtr.prototype.requestSubinterface = function() {
    return TestMessageTargetProxy.prototype.requestSubinterface
        .apply(this.ptr.getProxy(), arguments);
  };

  TestMessageTargetProxy.prototype.requestSubinterface = function(receiver, client) {
    var params_ = new TestMessageTarget_RequestSubinterface_Params();
    params_.receiver = receiver;
    params_.client = client;
    var builder = new codec.MessageV0Builder(
        kTestMessageTarget_RequestSubinterface_Name,
        codec.align(TestMessageTarget_RequestSubinterface_Params.encodedSize));
    builder.encodeStruct(TestMessageTarget_RequestSubinterface_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TestMessageTargetStub(delegate) {
    this.delegate_ = delegate;
  }
  TestMessageTargetStub.prototype.poke = function() {
    return this.delegate_ && this.delegate_.poke && this.delegate_.poke();
  }
  TestMessageTargetStub.prototype.ping = function() {
    return this.delegate_ && this.delegate_.ping && this.delegate_.ping();
  }
  TestMessageTargetStub.prototype.repeat = function(message, numbers) {
    return this.delegate_ && this.delegate_.repeat && this.delegate_.repeat(message, numbers);
  }
  TestMessageTargetStub.prototype.echo = function(nested) {
    return this.delegate_ && this.delegate_.echo && this.delegate_.echo(nested);
  }
  TestMessageTargetStub.prototype.deconstruct = function(testStruct) {
    return this.delegate_ && this.delegate_.deconstruct && this.delegate_.deconstruct(testStruct);
  }
  TestMessageTargetStub.prototype.flatten = function(values) {
    return this.delegate_ && this.delegate_.flatten && this.delegate_.flatten(values);
  }
  TestMessageTargetStub.prototype.flattenUnions = function(unions) {
    return this.delegate_ && this.delegate_.flattenUnions && this.delegate_.flattenUnions(unions);
  }
  TestMessageTargetStub.prototype.flattenMap = function(testMap) {
    return this.delegate_ && this.delegate_.flattenMap && this.delegate_.flattenMap(testMap);
  }
  TestMessageTargetStub.prototype.requestSubinterface = function(receiver, client) {
    return this.delegate_ && this.delegate_.requestSubinterface && this.delegate_.requestSubinterface(receiver, client);
  }

  TestMessageTargetStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestMessageTarget_Poke_Name:
      var params = reader.decodeStruct(TestMessageTarget_Poke_Params);
      this.poke();
      return true;
    case kTestMessageTarget_RequestSubinterface_Name:
      var params = reader.decodeStruct(TestMessageTarget_RequestSubinterface_Params);
      this.requestSubinterface(params.receiver, params.client);
      return true;
    default:
      return false;
    }
  };

  TestMessageTargetStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTestMessageTarget_Ping_Name:
      var params = reader.decodeStruct(TestMessageTarget_Ping_Params);
      this.ping().then(function(response) {
        var responseParams =
            new TestMessageTarget_Ping_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTestMessageTarget_Ping_Name,
            codec.align(TestMessageTarget_Ping_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestMessageTarget_Ping_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestMessageTarget_Repeat_Name:
      var params = reader.decodeStruct(TestMessageTarget_Repeat_Params);
      this.repeat(params.message, params.numbers).then(function(response) {
        var responseParams =
            new TestMessageTarget_Repeat_ResponseParams();
        responseParams.message = response.message;
        responseParams.numbers = response.numbers;
        var builder = new codec.MessageV1Builder(
            kTestMessageTarget_Repeat_Name,
            codec.align(TestMessageTarget_Repeat_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestMessageTarget_Repeat_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestMessageTarget_Echo_Name:
      var params = reader.decodeStruct(TestMessageTarget_Echo_Params);
      this.echo(params.nested).then(function(response) {
        var responseParams =
            new TestMessageTarget_Echo_ResponseParams();
        responseParams.nested = response.nested;
        var builder = new codec.MessageV1Builder(
            kTestMessageTarget_Echo_Name,
            codec.align(TestMessageTarget_Echo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestMessageTarget_Echo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestMessageTarget_Deconstruct_Name:
      var params = reader.decodeStruct(TestMessageTarget_Deconstruct_Params);
      this.deconstruct(params.testStruct).then(function(response) {
        var responseParams =
            new TestMessageTarget_Deconstruct_ResponseParams();
        responseParams.x = response.x;
        responseParams.y = response.y;
        responseParams.z = response.z;
        var builder = new codec.MessageV1Builder(
            kTestMessageTarget_Deconstruct_Name,
            codec.align(TestMessageTarget_Deconstruct_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestMessageTarget_Deconstruct_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestMessageTarget_Flatten_Name:
      var params = reader.decodeStruct(TestMessageTarget_Flatten_Params);
      this.flatten(params.values).then(function(response) {
        var responseParams =
            new TestMessageTarget_Flatten_ResponseParams();
        responseParams.values = response.values;
        var builder = new codec.MessageV1Builder(
            kTestMessageTarget_Flatten_Name,
            codec.align(TestMessageTarget_Flatten_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestMessageTarget_Flatten_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestMessageTarget_FlattenUnions_Name:
      var params = reader.decodeStruct(TestMessageTarget_FlattenUnions_Params);
      this.flattenUnions(params.unions).then(function(response) {
        var responseParams =
            new TestMessageTarget_FlattenUnions_ResponseParams();
        responseParams.x = response.x;
        responseParams.s = response.s;
        var builder = new codec.MessageV1Builder(
            kTestMessageTarget_FlattenUnions_Name,
            codec.align(TestMessageTarget_FlattenUnions_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestMessageTarget_FlattenUnions_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTestMessageTarget_FlattenMap_Name:
      var params = reader.decodeStruct(TestMessageTarget_FlattenMap_Params);
      this.flattenMap(params.testMap).then(function(response) {
        var responseParams =
            new TestMessageTarget_FlattenMap_ResponseParams();
        responseParams.keys = response.keys;
        responseParams.values = response.values;
        var builder = new codec.MessageV1Builder(
            kTestMessageTarget_FlattenMap_Name,
            codec.align(TestMessageTarget_FlattenMap_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TestMessageTarget_FlattenMap_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTestMessageTargetRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTestMessageTarget_Poke_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestMessageTarget_Poke_Params;
      break;
      case kTestMessageTarget_Ping_Name:
        if (message.expectsResponse())
          paramsClass = TestMessageTarget_Ping_Params;
      break;
      case kTestMessageTarget_Repeat_Name:
        if (message.expectsResponse())
          paramsClass = TestMessageTarget_Repeat_Params;
      break;
      case kTestMessageTarget_Echo_Name:
        if (message.expectsResponse())
          paramsClass = TestMessageTarget_Echo_Params;
      break;
      case kTestMessageTarget_Deconstruct_Name:
        if (message.expectsResponse())
          paramsClass = TestMessageTarget_Deconstruct_Params;
      break;
      case kTestMessageTarget_Flatten_Name:
        if (message.expectsResponse())
          paramsClass = TestMessageTarget_Flatten_Params;
      break;
      case kTestMessageTarget_FlattenUnions_Name:
        if (message.expectsResponse())
          paramsClass = TestMessageTarget_FlattenUnions_Params;
      break;
      case kTestMessageTarget_FlattenMap_Name:
        if (message.expectsResponse())
          paramsClass = TestMessageTarget_FlattenMap_Params;
      break;
      case kTestMessageTarget_RequestSubinterface_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TestMessageTarget_RequestSubinterface_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTestMessageTargetResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTestMessageTarget_Ping_Name:
        if (message.isResponse())
          paramsClass = TestMessageTarget_Ping_ResponseParams;
        break;
      case kTestMessageTarget_Repeat_Name:
        if (message.isResponse())
          paramsClass = TestMessageTarget_Repeat_ResponseParams;
        break;
      case kTestMessageTarget_Echo_Name:
        if (message.isResponse())
          paramsClass = TestMessageTarget_Echo_ResponseParams;
        break;
      case kTestMessageTarget_Deconstruct_Name:
        if (message.isResponse())
          paramsClass = TestMessageTarget_Deconstruct_ResponseParams;
        break;
      case kTestMessageTarget_Flatten_Name:
        if (message.isResponse())
          paramsClass = TestMessageTarget_Flatten_ResponseParams;
        break;
      case kTestMessageTarget_FlattenUnions_Name:
        if (message.isResponse())
          paramsClass = TestMessageTarget_FlattenUnions_ResponseParams;
        break;
      case kTestMessageTarget_FlattenMap_Name:
        if (message.isResponse())
          paramsClass = TestMessageTarget_FlattenMap_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TestMessageTarget = {
    name: 'lite_js_test.mojom.TestMessageTarget',
    kVersion: 0,
    ptrClass: TestMessageTargetPtr,
    proxyClass: TestMessageTargetProxy,
    stubClass: TestMessageTargetStub,
    validateRequest: validateTestMessageTargetRequest,
    validateResponse: validateTestMessageTargetResponse,
  };
  TestMessageTarget.NestedEnum = {};
  TestMessageTarget.NestedEnum.kFoo = 0;
  TestMessageTarget.NestedEnum.kBar = 1;
  TestMessageTarget.NestedEnum.MIN_VALUE = 0;
  TestMessageTarget.NestedEnum.MAX_VALUE = 1;

  TestMessageTarget.NestedEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  TestMessageTarget.NestedEnum.toKnownEnumValue = function(value) {
    return value;
  };

  TestMessageTarget.NestedEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  TestMessageTargetStub.prototype.validator = validateTestMessageTargetRequest;
  TestMessageTargetProxy.prototype.validator = validateTestMessageTargetResponse;
  var kSubinterface_Push_Name = 0;
  var kSubinterface_Flush_Name = 1;

  function SubinterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Subinterface,
                                                   handleOrPtrInfo);
  }

  function SubinterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Subinterface, associatedInterfacePtrInfo);
  }

  SubinterfaceAssociatedPtr.prototype =
      Object.create(SubinterfacePtr.prototype);
  SubinterfaceAssociatedPtr.prototype.constructor =
      SubinterfaceAssociatedPtr;

  function SubinterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  SubinterfacePtr.prototype.push = function() {
    return SubinterfaceProxy.prototype.push
        .apply(this.ptr.getProxy(), arguments);
  };

  SubinterfaceProxy.prototype.push = function(value) {
    var params_ = new Subinterface_Push_Params();
    params_.value = value;
    var builder = new codec.MessageV0Builder(
        kSubinterface_Push_Name,
        codec.align(Subinterface_Push_Params.encodedSize));
    builder.encodeStruct(Subinterface_Push_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SubinterfacePtr.prototype.flush = function() {
    return SubinterfaceProxy.prototype.flush
        .apply(this.ptr.getProxy(), arguments);
  };

  SubinterfaceProxy.prototype.flush = function() {
    var params_ = new Subinterface_Flush_Params();
    var builder = new codec.MessageV0Builder(
        kSubinterface_Flush_Name,
        codec.align(Subinterface_Flush_Params.encodedSize));
    builder.encodeStruct(Subinterface_Flush_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function SubinterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  SubinterfaceStub.prototype.push = function(value) {
    return this.delegate_ && this.delegate_.push && this.delegate_.push(value);
  }
  SubinterfaceStub.prototype.flush = function() {
    return this.delegate_ && this.delegate_.flush && this.delegate_.flush();
  }

  SubinterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSubinterface_Push_Name:
      var params = reader.decodeStruct(Subinterface_Push_Params);
      this.push(params.value);
      return true;
    case kSubinterface_Flush_Name:
      var params = reader.decodeStruct(Subinterface_Flush_Params);
      this.flush();
      return true;
    default:
      return false;
    }
  };

  SubinterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateSubinterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSubinterface_Push_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Subinterface_Push_Params;
      break;
      case kSubinterface_Flush_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Subinterface_Flush_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSubinterfaceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Subinterface = {
    name: 'lite_js_test.mojom.Subinterface',
    kVersion: 0,
    ptrClass: SubinterfacePtr,
    proxyClass: SubinterfaceProxy,
    stubClass: SubinterfaceStub,
    validateRequest: validateSubinterfaceRequest,
    validateResponse: null,
  };
  SubinterfaceStub.prototype.validator = validateSubinterfaceRequest;
  SubinterfaceProxy.prototype.validator = null;
  var kSubinterfaceClient_DidFlush_Name = 0;

  function SubinterfaceClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SubinterfaceClient,
                                                   handleOrPtrInfo);
  }

  function SubinterfaceClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SubinterfaceClient, associatedInterfacePtrInfo);
  }

  SubinterfaceClientAssociatedPtr.prototype =
      Object.create(SubinterfaceClientPtr.prototype);
  SubinterfaceClientAssociatedPtr.prototype.constructor =
      SubinterfaceClientAssociatedPtr;

  function SubinterfaceClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  SubinterfaceClientPtr.prototype.didFlush = function() {
    return SubinterfaceClientProxy.prototype.didFlush
        .apply(this.ptr.getProxy(), arguments);
  };

  SubinterfaceClientProxy.prototype.didFlush = function(values) {
    var params_ = new SubinterfaceClient_DidFlush_Params();
    params_.values = values;
    var builder = new codec.MessageV0Builder(
        kSubinterfaceClient_DidFlush_Name,
        codec.align(SubinterfaceClient_DidFlush_Params.encodedSize));
    builder.encodeStruct(SubinterfaceClient_DidFlush_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function SubinterfaceClientStub(delegate) {
    this.delegate_ = delegate;
  }
  SubinterfaceClientStub.prototype.didFlush = function(values) {
    return this.delegate_ && this.delegate_.didFlush && this.delegate_.didFlush(values);
  }

  SubinterfaceClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSubinterfaceClient_DidFlush_Name:
      var params = reader.decodeStruct(SubinterfaceClient_DidFlush_Params);
      this.didFlush(params.values);
      return true;
    default:
      return false;
    }
  };

  SubinterfaceClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateSubinterfaceClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSubinterfaceClient_DidFlush_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SubinterfaceClient_DidFlush_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSubinterfaceClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var SubinterfaceClient = {
    name: 'lite_js_test.mojom.SubinterfaceClient',
    kVersion: 0,
    ptrClass: SubinterfaceClientPtr,
    proxyClass: SubinterfaceClientProxy,
    stubClass: SubinterfaceClientStub,
    validateRequest: validateSubinterfaceClientRequest,
    validateResponse: null,
  };
  SubinterfaceClientStub.prototype.validator = validateSubinterfaceClientRequest;
  SubinterfaceClientProxy.prototype.validator = null;
  exports.TestStruct = TestStruct;
  exports.TestUnion = TestUnion;
  exports.TestMessageTarget = TestMessageTarget;
  exports.TestMessageTargetPtr = TestMessageTargetPtr;
  exports.TestMessageTargetAssociatedPtr = TestMessageTargetAssociatedPtr;
  exports.Subinterface = Subinterface;
  exports.SubinterfacePtr = SubinterfacePtr;
  exports.SubinterfaceAssociatedPtr = SubinterfaceAssociatedPtr;
  exports.SubinterfaceClient = SubinterfaceClient;
  exports.SubinterfaceClientPtr = SubinterfaceClientPtr;
  exports.SubinterfaceClientAssociatedPtr = SubinterfaceClientAssociatedPtr;
})();