// content/test/frame_host_test_interface.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'content/test/frame_host_test_interface.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('content.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../url/mojom/url.mojom.js');
  }



  function FrameHostTestInterface_Ping_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FrameHostTestInterface_Ping_Params.prototype.initDefaults_ = function() {
    this.sourceUrl = null;
    this.sourceEvent = null;
  };
  FrameHostTestInterface_Ping_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FrameHostTestInterface_Ping_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHostTestInterface_Ping_Params.sourceUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FrameHostTestInterface_Ping_Params.sourceEvent
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FrameHostTestInterface_Ping_Params.encodedSize = codec.kStructHeaderSize + 16;

  FrameHostTestInterface_Ping_Params.decode = function(decoder) {
    var packed;
    var val = new FrameHostTestInterface_Ping_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sourceUrl =
        decoder.decodeStructPointer(url$.Url);
    val.sourceEvent =
        decoder.decodeStruct(codec.String);
    return val;
  };

  FrameHostTestInterface_Ping_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FrameHostTestInterface_Ping_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.sourceUrl);
    encoder.encodeStruct(codec.String, val.sourceEvent);
  };
  var kFrameHostTestInterface_Ping_Name = 1522440293;

  function FrameHostTestInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FrameHostTestInterface,
                                                   handleOrPtrInfo);
  }

  function FrameHostTestInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FrameHostTestInterface, associatedInterfacePtrInfo);
  }

  FrameHostTestInterfaceAssociatedPtr.prototype =
      Object.create(FrameHostTestInterfacePtr.prototype);
  FrameHostTestInterfaceAssociatedPtr.prototype.constructor =
      FrameHostTestInterfaceAssociatedPtr;

  function FrameHostTestInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  FrameHostTestInterfacePtr.prototype.ping = function() {
    return FrameHostTestInterfaceProxy.prototype.ping
        .apply(this.ptr.getProxy(), arguments);
  };

  FrameHostTestInterfaceProxy.prototype.ping = function(sourceUrl, sourceEvent) {
    var params_ = new FrameHostTestInterface_Ping_Params();
    params_.sourceUrl = sourceUrl;
    params_.sourceEvent = sourceEvent;
    var builder = new codec.MessageV0Builder(
        kFrameHostTestInterface_Ping_Name,
        codec.align(FrameHostTestInterface_Ping_Params.encodedSize));
    builder.encodeStruct(FrameHostTestInterface_Ping_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function FrameHostTestInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  FrameHostTestInterfaceStub.prototype.ping = function(sourceUrl, sourceEvent) {
    return this.delegate_ && this.delegate_.ping && this.delegate_.ping(sourceUrl, sourceEvent);
  }

  FrameHostTestInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFrameHostTestInterface_Ping_Name:
      var params = reader.decodeStruct(FrameHostTestInterface_Ping_Params);
      this.ping(params.sourceUrl, params.sourceEvent);
      return true;
    default:
      return false;
    }
  };

  FrameHostTestInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateFrameHostTestInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFrameHostTestInterface_Ping_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FrameHostTestInterface_Ping_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFrameHostTestInterfaceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var FrameHostTestInterface = {
    name: 'content.mojom.FrameHostTestInterface',
    kVersion: 0,
    ptrClass: FrameHostTestInterfacePtr,
    proxyClass: FrameHostTestInterfaceProxy,
    stubClass: FrameHostTestInterfaceStub,
    validateRequest: validateFrameHostTestInterfaceRequest,
    validateResponse: null,
  };
  FrameHostTestInterfaceStub.prototype.validator = validateFrameHostTestInterfaceRequest;
  FrameHostTestInterfaceProxy.prototype.validator = null;
  exports.FrameHostTestInterface = FrameHostTestInterface;
  exports.FrameHostTestInterfacePtr = FrameHostTestInterfacePtr;
  exports.FrameHostTestInterfaceAssociatedPtr = FrameHostTestInterfaceAssociatedPtr;
})();