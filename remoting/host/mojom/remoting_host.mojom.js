// remoting/host/mojom/remoting_host.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'remoting/host/mojom/remoting_host.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('remoting.mojom');
  var values$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/values.mojom', '../../../mojo/public/mojom/base/values.mojom.js');
  }
  var chromoting_host_services$ =
      mojo.internal.exposeNamespace('remoting.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'remoting/host/mojom/chromoting_host_services.mojom', 'chromoting_host_services.mojom.js');
  }
  var ip_endpoint$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/ip_endpoint.mojom', '../../../services/network/public/mojom/ip_endpoint.mojom.js');
  }


  var TransportRouteType = {};
  TransportRouteType.kUndefined = 0;
  TransportRouteType.kDirect = 1;
  TransportRouteType.kStun = 2;
  TransportRouteType.kRelay = 3;
  TransportRouteType.MIN_VALUE = 0;
  TransportRouteType.MAX_VALUE = 3;

  TransportRouteType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  TransportRouteType.toKnownEnumValue = function(value) {
    return value;
  };

  TransportRouteType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function TransportRoute(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TransportRoute.prototype.initDefaults_ = function() {
    this.type = 0;
    this.remoteAddress = null;
    this.localAddress = null;
  };
  TransportRoute.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TransportRoute.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TransportRoute.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, TransportRouteType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TransportRoute.remoteAddress
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ip_endpoint$.IPEndPoint, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TransportRoute.localAddress
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, ip_endpoint$.IPEndPoint, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TransportRoute.encodedSize = codec.kStructHeaderSize + 24;

  TransportRoute.decode = function(decoder) {
    var packed;
    var val = new TransportRoute();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(new codec.Enum(TransportRouteType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.remoteAddress =
        decoder.decodeStructPointer(ip_endpoint$.IPEndPoint);
    val.localAddress =
        decoder.decodeStructPointer(ip_endpoint$.IPEndPoint);
    return val;
  };

  TransportRoute.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TransportRoute.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(ip_endpoint$.IPEndPoint, val.remoteAddress);
    encoder.encodeStructPointer(ip_endpoint$.IPEndPoint, val.localAddress);
  };
  function HostStatusObserver_OnClientAccessDenied_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HostStatusObserver_OnClientAccessDenied_Params.prototype.initDefaults_ = function() {
    this.signalingId = null;
  };
  HostStatusObserver_OnClientAccessDenied_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HostStatusObserver_OnClientAccessDenied_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate HostStatusObserver_OnClientAccessDenied_Params.signalingId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HostStatusObserver_OnClientAccessDenied_Params.encodedSize = codec.kStructHeaderSize + 8;

  HostStatusObserver_OnClientAccessDenied_Params.decode = function(decoder) {
    var packed;
    var val = new HostStatusObserver_OnClientAccessDenied_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.signalingId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  HostStatusObserver_OnClientAccessDenied_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HostStatusObserver_OnClientAccessDenied_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.signalingId);
  };
  function HostStatusObserver_OnClientAuthenticated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HostStatusObserver_OnClientAuthenticated_Params.prototype.initDefaults_ = function() {
    this.signalingId = null;
  };
  HostStatusObserver_OnClientAuthenticated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HostStatusObserver_OnClientAuthenticated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate HostStatusObserver_OnClientAuthenticated_Params.signalingId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HostStatusObserver_OnClientAuthenticated_Params.encodedSize = codec.kStructHeaderSize + 8;

  HostStatusObserver_OnClientAuthenticated_Params.decode = function(decoder) {
    var packed;
    var val = new HostStatusObserver_OnClientAuthenticated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.signalingId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  HostStatusObserver_OnClientAuthenticated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HostStatusObserver_OnClientAuthenticated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.signalingId);
  };
  function HostStatusObserver_OnClientConnected_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HostStatusObserver_OnClientConnected_Params.prototype.initDefaults_ = function() {
    this.signalingId = null;
  };
  HostStatusObserver_OnClientConnected_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HostStatusObserver_OnClientConnected_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate HostStatusObserver_OnClientConnected_Params.signalingId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HostStatusObserver_OnClientConnected_Params.encodedSize = codec.kStructHeaderSize + 8;

  HostStatusObserver_OnClientConnected_Params.decode = function(decoder) {
    var packed;
    var val = new HostStatusObserver_OnClientConnected_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.signalingId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  HostStatusObserver_OnClientConnected_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HostStatusObserver_OnClientConnected_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.signalingId);
  };
  function HostStatusObserver_OnClientDisconnected_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HostStatusObserver_OnClientDisconnected_Params.prototype.initDefaults_ = function() {
    this.signalingId = null;
  };
  HostStatusObserver_OnClientDisconnected_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HostStatusObserver_OnClientDisconnected_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate HostStatusObserver_OnClientDisconnected_Params.signalingId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HostStatusObserver_OnClientDisconnected_Params.encodedSize = codec.kStructHeaderSize + 8;

  HostStatusObserver_OnClientDisconnected_Params.decode = function(decoder) {
    var packed;
    var val = new HostStatusObserver_OnClientDisconnected_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.signalingId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  HostStatusObserver_OnClientDisconnected_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HostStatusObserver_OnClientDisconnected_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.signalingId);
  };
  function HostStatusObserver_OnClientRouteChange_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HostStatusObserver_OnClientRouteChange_Params.prototype.initDefaults_ = function() {
    this.signalingId = null;
    this.channelName = null;
    this.route = null;
  };
  HostStatusObserver_OnClientRouteChange_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HostStatusObserver_OnClientRouteChange_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate HostStatusObserver_OnClientRouteChange_Params.signalingId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate HostStatusObserver_OnClientRouteChange_Params.channelName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate HostStatusObserver_OnClientRouteChange_Params.route
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, TransportRoute, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HostStatusObserver_OnClientRouteChange_Params.encodedSize = codec.kStructHeaderSize + 24;

  HostStatusObserver_OnClientRouteChange_Params.decode = function(decoder) {
    var packed;
    var val = new HostStatusObserver_OnClientRouteChange_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.signalingId =
        decoder.decodeStruct(codec.String);
    val.channelName =
        decoder.decodeStruct(codec.String);
    val.route =
        decoder.decodeStructPointer(TransportRoute);
    return val;
  };

  HostStatusObserver_OnClientRouteChange_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HostStatusObserver_OnClientRouteChange_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.signalingId);
    encoder.encodeStruct(codec.String, val.channelName);
    encoder.encodeStructPointer(TransportRoute, val.route);
  };
  function HostStatusObserver_OnHostStarted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HostStatusObserver_OnHostStarted_Params.prototype.initDefaults_ = function() {
    this.ownerEmail = null;
  };
  HostStatusObserver_OnHostStarted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HostStatusObserver_OnHostStarted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate HostStatusObserver_OnHostStarted_Params.ownerEmail
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HostStatusObserver_OnHostStarted_Params.encodedSize = codec.kStructHeaderSize + 8;

  HostStatusObserver_OnHostStarted_Params.decode = function(decoder) {
    var packed;
    var val = new HostStatusObserver_OnHostStarted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.ownerEmail =
        decoder.decodeStruct(codec.String);
    return val;
  };

  HostStatusObserver_OnHostStarted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HostStatusObserver_OnHostStarted_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.ownerEmail);
  };
  function HostStatusObserver_OnHostShutdown_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  HostStatusObserver_OnHostShutdown_Params.prototype.initDefaults_ = function() {
  };
  HostStatusObserver_OnHostShutdown_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  HostStatusObserver_OnHostShutdown_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  HostStatusObserver_OnHostShutdown_Params.encodedSize = codec.kStructHeaderSize + 0;

  HostStatusObserver_OnHostShutdown_Params.decode = function(decoder) {
    var packed;
    var val = new HostStatusObserver_OnHostShutdown_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  HostStatusObserver_OnHostShutdown_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(HostStatusObserver_OnHostShutdown_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function RemotingHostControlPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(RemotingHostControl,
                                                   handleOrPtrInfo);
  }

  function RemotingHostControlAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        RemotingHostControl, associatedInterfacePtrInfo);
  }

  RemotingHostControlAssociatedPtr.prototype =
      Object.create(RemotingHostControlPtr.prototype);
  RemotingHostControlAssociatedPtr.prototype.constructor =
      RemotingHostControlAssociatedPtr;

  function RemotingHostControlProxy(receiver) {
    this.receiver_ = receiver;
  }

  function RemotingHostControlStub(delegate) {
    this.delegate_ = delegate;
  }

  RemotingHostControlStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  RemotingHostControlStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateRemotingHostControlRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateRemotingHostControlResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var RemotingHostControl = {
    name: 'remoting.mojom.RemotingHostControl',
    kVersion: 0,
    ptrClass: RemotingHostControlPtr,
    proxyClass: RemotingHostControlProxy,
    stubClass: RemotingHostControlStub,
    validateRequest: validateRemotingHostControlRequest,
    validateResponse: null,
  };
  RemotingHostControlStub.prototype.validator = validateRemotingHostControlRequest;
  RemotingHostControlProxy.prototype.validator = null;

  function DesktopSessionConnectionEventsPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DesktopSessionConnectionEvents,
                                                   handleOrPtrInfo);
  }

  function DesktopSessionConnectionEventsAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DesktopSessionConnectionEvents, associatedInterfacePtrInfo);
  }

  DesktopSessionConnectionEventsAssociatedPtr.prototype =
      Object.create(DesktopSessionConnectionEventsPtr.prototype);
  DesktopSessionConnectionEventsAssociatedPtr.prototype.constructor =
      DesktopSessionConnectionEventsAssociatedPtr;

  function DesktopSessionConnectionEventsProxy(receiver) {
    this.receiver_ = receiver;
  }

  function DesktopSessionConnectionEventsStub(delegate) {
    this.delegate_ = delegate;
  }

  DesktopSessionConnectionEventsStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  DesktopSessionConnectionEventsStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDesktopSessionConnectionEventsRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateDesktopSessionConnectionEventsResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DesktopSessionConnectionEvents = {
    name: 'remoting.mojom.DesktopSessionConnectionEvents',
    kVersion: 0,
    ptrClass: DesktopSessionConnectionEventsPtr,
    proxyClass: DesktopSessionConnectionEventsProxy,
    stubClass: DesktopSessionConnectionEventsStub,
    validateRequest: validateDesktopSessionConnectionEventsRequest,
    validateResponse: null,
  };
  DesktopSessionConnectionEventsStub.prototype.validator = validateDesktopSessionConnectionEventsRequest;
  DesktopSessionConnectionEventsProxy.prototype.validator = null;
  var kHostStatusObserver_OnClientAccessDenied_Name = 503613865;
  var kHostStatusObserver_OnClientAuthenticated_Name = 1408843254;
  var kHostStatusObserver_OnClientConnected_Name = 1536811399;
  var kHostStatusObserver_OnClientDisconnected_Name = 761678287;
  var kHostStatusObserver_OnClientRouteChange_Name = 611179838;
  var kHostStatusObserver_OnHostStarted_Name = 288582995;
  var kHostStatusObserver_OnHostShutdown_Name = 152228372;

  function HostStatusObserverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(HostStatusObserver,
                                                   handleOrPtrInfo);
  }

  function HostStatusObserverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        HostStatusObserver, associatedInterfacePtrInfo);
  }

  HostStatusObserverAssociatedPtr.prototype =
      Object.create(HostStatusObserverPtr.prototype);
  HostStatusObserverAssociatedPtr.prototype.constructor =
      HostStatusObserverAssociatedPtr;

  function HostStatusObserverProxy(receiver) {
    this.receiver_ = receiver;
  }
  HostStatusObserverPtr.prototype.onClientAccessDenied = function() {
    return HostStatusObserverProxy.prototype.onClientAccessDenied
        .apply(this.ptr.getProxy(), arguments);
  };

  HostStatusObserverProxy.prototype.onClientAccessDenied = function(signalingId) {
    var params_ = new HostStatusObserver_OnClientAccessDenied_Params();
    params_.signalingId = signalingId;
    var builder = new codec.MessageV0Builder(
        kHostStatusObserver_OnClientAccessDenied_Name,
        codec.align(HostStatusObserver_OnClientAccessDenied_Params.encodedSize));
    builder.encodeStruct(HostStatusObserver_OnClientAccessDenied_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  HostStatusObserverPtr.prototype.onClientAuthenticated = function() {
    return HostStatusObserverProxy.prototype.onClientAuthenticated
        .apply(this.ptr.getProxy(), arguments);
  };

  HostStatusObserverProxy.prototype.onClientAuthenticated = function(signalingId) {
    var params_ = new HostStatusObserver_OnClientAuthenticated_Params();
    params_.signalingId = signalingId;
    var builder = new codec.MessageV0Builder(
        kHostStatusObserver_OnClientAuthenticated_Name,
        codec.align(HostStatusObserver_OnClientAuthenticated_Params.encodedSize));
    builder.encodeStruct(HostStatusObserver_OnClientAuthenticated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  HostStatusObserverPtr.prototype.onClientConnected = function() {
    return HostStatusObserverProxy.prototype.onClientConnected
        .apply(this.ptr.getProxy(), arguments);
  };

  HostStatusObserverProxy.prototype.onClientConnected = function(signalingId) {
    var params_ = new HostStatusObserver_OnClientConnected_Params();
    params_.signalingId = signalingId;
    var builder = new codec.MessageV0Builder(
        kHostStatusObserver_OnClientConnected_Name,
        codec.align(HostStatusObserver_OnClientConnected_Params.encodedSize));
    builder.encodeStruct(HostStatusObserver_OnClientConnected_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  HostStatusObserverPtr.prototype.onClientDisconnected = function() {
    return HostStatusObserverProxy.prototype.onClientDisconnected
        .apply(this.ptr.getProxy(), arguments);
  };

  HostStatusObserverProxy.prototype.onClientDisconnected = function(signalingId) {
    var params_ = new HostStatusObserver_OnClientDisconnected_Params();
    params_.signalingId = signalingId;
    var builder = new codec.MessageV0Builder(
        kHostStatusObserver_OnClientDisconnected_Name,
        codec.align(HostStatusObserver_OnClientDisconnected_Params.encodedSize));
    builder.encodeStruct(HostStatusObserver_OnClientDisconnected_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  HostStatusObserverPtr.prototype.onClientRouteChange = function() {
    return HostStatusObserverProxy.prototype.onClientRouteChange
        .apply(this.ptr.getProxy(), arguments);
  };

  HostStatusObserverProxy.prototype.onClientRouteChange = function(signalingId, channelName, route) {
    var params_ = new HostStatusObserver_OnClientRouteChange_Params();
    params_.signalingId = signalingId;
    params_.channelName = channelName;
    params_.route = route;
    var builder = new codec.MessageV0Builder(
        kHostStatusObserver_OnClientRouteChange_Name,
        codec.align(HostStatusObserver_OnClientRouteChange_Params.encodedSize));
    builder.encodeStruct(HostStatusObserver_OnClientRouteChange_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  HostStatusObserverPtr.prototype.onHostStarted = function() {
    return HostStatusObserverProxy.prototype.onHostStarted
        .apply(this.ptr.getProxy(), arguments);
  };

  HostStatusObserverProxy.prototype.onHostStarted = function(ownerEmail) {
    var params_ = new HostStatusObserver_OnHostStarted_Params();
    params_.ownerEmail = ownerEmail;
    var builder = new codec.MessageV0Builder(
        kHostStatusObserver_OnHostStarted_Name,
        codec.align(HostStatusObserver_OnHostStarted_Params.encodedSize));
    builder.encodeStruct(HostStatusObserver_OnHostStarted_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  HostStatusObserverPtr.prototype.onHostShutdown = function() {
    return HostStatusObserverProxy.prototype.onHostShutdown
        .apply(this.ptr.getProxy(), arguments);
  };

  HostStatusObserverProxy.prototype.onHostShutdown = function() {
    var params_ = new HostStatusObserver_OnHostShutdown_Params();
    var builder = new codec.MessageV0Builder(
        kHostStatusObserver_OnHostShutdown_Name,
        codec.align(HostStatusObserver_OnHostShutdown_Params.encodedSize));
    builder.encodeStruct(HostStatusObserver_OnHostShutdown_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function HostStatusObserverStub(delegate) {
    this.delegate_ = delegate;
  }
  HostStatusObserverStub.prototype.onClientAccessDenied = function(signalingId) {
    return this.delegate_ && this.delegate_.onClientAccessDenied && this.delegate_.onClientAccessDenied(signalingId);
  }
  HostStatusObserverStub.prototype.onClientAuthenticated = function(signalingId) {
    return this.delegate_ && this.delegate_.onClientAuthenticated && this.delegate_.onClientAuthenticated(signalingId);
  }
  HostStatusObserverStub.prototype.onClientConnected = function(signalingId) {
    return this.delegate_ && this.delegate_.onClientConnected && this.delegate_.onClientConnected(signalingId);
  }
  HostStatusObserverStub.prototype.onClientDisconnected = function(signalingId) {
    return this.delegate_ && this.delegate_.onClientDisconnected && this.delegate_.onClientDisconnected(signalingId);
  }
  HostStatusObserverStub.prototype.onClientRouteChange = function(signalingId, channelName, route) {
    return this.delegate_ && this.delegate_.onClientRouteChange && this.delegate_.onClientRouteChange(signalingId, channelName, route);
  }
  HostStatusObserverStub.prototype.onHostStarted = function(ownerEmail) {
    return this.delegate_ && this.delegate_.onHostStarted && this.delegate_.onHostStarted(ownerEmail);
  }
  HostStatusObserverStub.prototype.onHostShutdown = function() {
    return this.delegate_ && this.delegate_.onHostShutdown && this.delegate_.onHostShutdown();
  }

  HostStatusObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kHostStatusObserver_OnClientAccessDenied_Name:
      var params = reader.decodeStruct(HostStatusObserver_OnClientAccessDenied_Params);
      this.onClientAccessDenied(params.signalingId);
      return true;
    case kHostStatusObserver_OnClientAuthenticated_Name:
      var params = reader.decodeStruct(HostStatusObserver_OnClientAuthenticated_Params);
      this.onClientAuthenticated(params.signalingId);
      return true;
    case kHostStatusObserver_OnClientConnected_Name:
      var params = reader.decodeStruct(HostStatusObserver_OnClientConnected_Params);
      this.onClientConnected(params.signalingId);
      return true;
    case kHostStatusObserver_OnClientDisconnected_Name:
      var params = reader.decodeStruct(HostStatusObserver_OnClientDisconnected_Params);
      this.onClientDisconnected(params.signalingId);
      return true;
    case kHostStatusObserver_OnClientRouteChange_Name:
      var params = reader.decodeStruct(HostStatusObserver_OnClientRouteChange_Params);
      this.onClientRouteChange(params.signalingId, params.channelName, params.route);
      return true;
    case kHostStatusObserver_OnHostStarted_Name:
      var params = reader.decodeStruct(HostStatusObserver_OnHostStarted_Params);
      this.onHostStarted(params.ownerEmail);
      return true;
    case kHostStatusObserver_OnHostShutdown_Name:
      var params = reader.decodeStruct(HostStatusObserver_OnHostShutdown_Params);
      this.onHostShutdown();
      return true;
    default:
      return false;
    }
  };

  HostStatusObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateHostStatusObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kHostStatusObserver_OnClientAccessDenied_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = HostStatusObserver_OnClientAccessDenied_Params;
      break;
      case kHostStatusObserver_OnClientAuthenticated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = HostStatusObserver_OnClientAuthenticated_Params;
      break;
      case kHostStatusObserver_OnClientConnected_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = HostStatusObserver_OnClientConnected_Params;
      break;
      case kHostStatusObserver_OnClientDisconnected_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = HostStatusObserver_OnClientDisconnected_Params;
      break;
      case kHostStatusObserver_OnClientRouteChange_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = HostStatusObserver_OnClientRouteChange_Params;
      break;
      case kHostStatusObserver_OnHostStarted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = HostStatusObserver_OnHostStarted_Params;
      break;
      case kHostStatusObserver_OnHostShutdown_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = HostStatusObserver_OnHostShutdown_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateHostStatusObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var HostStatusObserver = {
    name: 'remoting.mojom.HostStatusObserver',
    kVersion: 0,
    ptrClass: HostStatusObserverPtr,
    proxyClass: HostStatusObserverProxy,
    stubClass: HostStatusObserverStub,
    validateRequest: validateHostStatusObserverRequest,
    validateResponse: null,
  };
  HostStatusObserverStub.prototype.validator = validateHostStatusObserverRequest;
  HostStatusObserverProxy.prototype.validator = null;
  exports.TransportRouteType = TransportRouteType;
  exports.TransportRoute = TransportRoute;
  exports.RemotingHostControl = RemotingHostControl;
  exports.RemotingHostControlPtr = RemotingHostControlPtr;
  exports.RemotingHostControlAssociatedPtr = RemotingHostControlAssociatedPtr;
  exports.DesktopSessionConnectionEvents = DesktopSessionConnectionEvents;
  exports.DesktopSessionConnectionEventsPtr = DesktopSessionConnectionEventsPtr;
  exports.DesktopSessionConnectionEventsAssociatedPtr = DesktopSessionConnectionEventsAssociatedPtr;
  exports.HostStatusObserver = HostStatusObserver;
  exports.HostStatusObserverPtr = HostStatusObserverPtr;
  exports.HostStatusObserverAssociatedPtr = HostStatusObserverAssociatedPtr;
})();