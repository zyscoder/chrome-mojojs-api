// remoting/host/mojom/desktop_session.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'remoting/host/mojom/desktop_session.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('remoting.mojom');
  var byte_string$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/byte_string.mojom', '../../../mojo/public/mojom/base/byte_string.mojom.js');
  }
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }
  var keyboard_layout$ =
      mojo.internal.exposeNamespace('remoting.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'remoting/host/mojom/keyboard_layout.mojom', 'keyboard_layout.mojom.js');
  }
  var webrtc_types$ =
      mojo.internal.exposeNamespace('remoting.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'remoting/host/mojom/webrtc_types.mojom', 'webrtc_types.mojom.js');
  }
  var wrapped_primitives$ =
      mojo.internal.exposeNamespace('remoting.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'remoting/host/mojom/wrapped_primitives.mojom', 'wrapped_primitives.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }


  var MouseButton = {};
  MouseButton.kUndefined = 0;
  MouseButton.kLeft = 1;
  MouseButton.kMiddle = 2;
  MouseButton.kRight = 3;
  MouseButton.kBack = 4;
  MouseButton.kForward = 5;
  MouseButton.MIN_VALUE = 0;
  MouseButton.MAX_VALUE = 5;

  MouseButton.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    }
    return false;
  };

  MouseButton.toKnownEnumValue = function(value) {
    return value;
  };

  MouseButton.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var TouchEventType = {};
  TouchEventType.kUndefined = 0;
  TouchEventType.kStart = 1;
  TouchEventType.kMove = 2;
  TouchEventType.kEnd = 3;
  TouchEventType.kCancel = 4;
  TouchEventType.MIN_VALUE = 0;
  TouchEventType.MAX_VALUE = 4;

  TouchEventType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  TouchEventType.toKnownEnumValue = function(value) {
    return value;
  };

  TouchEventType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var UrlForwarderState = {};
  UrlForwarderState.kUnknown = 0;
  UrlForwarderState.kSetUp = 1;
  UrlForwarderState.kNotSetUp = 2;
  UrlForwarderState.kFailed = 3;
  UrlForwarderState.kSetupPendingUserIntervention = 4;
  UrlForwarderState.MIN_VALUE = 0;
  UrlForwarderState.MAX_VALUE = 4;

  UrlForwarderState.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  UrlForwarderState.toKnownEnumValue = function(value) {
    return value;
  };

  UrlForwarderState.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var ProtocolErrorCode = {};
  ProtocolErrorCode.kOk = 0;
  ProtocolErrorCode.kPeerIsOffline = 1;
  ProtocolErrorCode.kSessionRejected = 2;
  ProtocolErrorCode.kIncompatibleProtocol = 3;
  ProtocolErrorCode.kAuthenticationFailed = 4;
  ProtocolErrorCode.kInvalidAccount = 5;
  ProtocolErrorCode.kChannelConnectionError = 6;
  ProtocolErrorCode.kSignalingError = 7;
  ProtocolErrorCode.kSignalingTimeout = 8;
  ProtocolErrorCode.kHostOverload = 9;
  ProtocolErrorCode.kMaxSessionLength = 10;
  ProtocolErrorCode.kHostConfigurationError = 11;
  ProtocolErrorCode.kUnknownError = 12;
  ProtocolErrorCode.kElevationError = 13;
  ProtocolErrorCode.kHostCertificateError = 14;
  ProtocolErrorCode.kHostRegistrationError = 15;
  ProtocolErrorCode.kExistingAdminSession = 16;
  ProtocolErrorCode.kAuthzPolicyCheckFailed = 17;
  ProtocolErrorCode.kDisallowedByPolicy = 18;
  ProtocolErrorCode.kLocationAuthzPolicyCheckFailed = 19;
  ProtocolErrorCode.kUnauthorizedAccount = 20;
  ProtocolErrorCode.MIN_VALUE = 0;
  ProtocolErrorCode.MAX_VALUE = 20;

  ProtocolErrorCode.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    }
    return false;
  };

  ProtocolErrorCode.toKnownEnumValue = function(value) {
    return value;
  };

  ProtocolErrorCode.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function AudioPacket(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  AudioPacket.Encoding = {};
  AudioPacket.Encoding.kInvalid = -1;
  AudioPacket.Encoding.kRaw = 0;
  AudioPacket.Encoding.kOpus = 1;
  AudioPacket.Encoding.MIN_VALUE = -1;
  AudioPacket.Encoding.MAX_VALUE = 1;

  AudioPacket.Encoding.isKnownEnumValue = function(value) {
    switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  AudioPacket.Encoding.toKnownEnumValue = function(value) {
    return value;
  };

  AudioPacket.Encoding.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  AudioPacket.SamplingRate = {};
  AudioPacket.SamplingRate.kInvalid = -1;
  AudioPacket.SamplingRate.kRate_44100 = 44100;
  AudioPacket.SamplingRate.kRate_48000 = 48000;
  AudioPacket.SamplingRate.MIN_VALUE = -1;
  AudioPacket.SamplingRate.MAX_VALUE = 48000;

  AudioPacket.SamplingRate.isKnownEnumValue = function(value) {
    switch (value) {
    case -1:
    case 44100:
    case 48000:
      return true;
    }
    return false;
  };

  AudioPacket.SamplingRate.toKnownEnumValue = function(value) {
    return value;
  };

  AudioPacket.SamplingRate.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  AudioPacket.BytesPerSample = {};
  AudioPacket.BytesPerSample.kInvalid = -1;
  AudioPacket.BytesPerSample.kBytesPerSample_2 = 2;
  AudioPacket.BytesPerSample.MIN_VALUE = -1;
  AudioPacket.BytesPerSample.MAX_VALUE = 2;

  AudioPacket.BytesPerSample.isKnownEnumValue = function(value) {
    switch (value) {
    case -1:
    case 2:
      return true;
    }
    return false;
  };

  AudioPacket.BytesPerSample.toKnownEnumValue = function(value) {
    return value;
  };

  AudioPacket.BytesPerSample.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  AudioPacket.Channels = {};
  AudioPacket.Channels.kInvalid = -1;
  AudioPacket.Channels.kMono = 1;
  AudioPacket.Channels.kStereo = 2;
  AudioPacket.Channels.kSurround = 3;
  AudioPacket.Channels.kChannel_4_0 = 4;
  AudioPacket.Channels.kChannel_4_1 = 5;
  AudioPacket.Channels.kChannel_5_1 = 6;
  AudioPacket.Channels.kChannel_6_1 = 7;
  AudioPacket.Channels.kChannel_7_1 = 8;
  AudioPacket.Channels.MIN_VALUE = -1;
  AudioPacket.Channels.MAX_VALUE = 8;

  AudioPacket.Channels.isKnownEnumValue = function(value) {
    switch (value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    }
    return false;
  };

  AudioPacket.Channels.toKnownEnumValue = function(value) {
    return value;
  };

  AudioPacket.Channels.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  AudioPacket.prototype.initDefaults_ = function() {
    this.timestamp = 0;
    this.encoding = AudioPacket.Encoding.kInvalid;
    this.data = null;
    this.samplingRate = AudioPacket.SamplingRate.kInvalid;
    this.bytesPerSample = AudioPacket.BytesPerSample.kInvalid;
    this.channels = AudioPacket.Channels.kInvalid;
  };
  AudioPacket.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AudioPacket.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate AudioPacket.data
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(byte_string$.ByteString), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioPacket.encoding
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, AudioPacket.Encoding);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioPacket.samplingRate
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, AudioPacket.SamplingRate);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioPacket.bytesPerSample
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 20, AudioPacket.BytesPerSample);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AudioPacket.channels
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 24, AudioPacket.Channels);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AudioPacket.encodedSize = codec.kStructHeaderSize + 32;

  AudioPacket.decode = function(decoder) {
    var packed;
    var val = new AudioPacket();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.timestamp =
        decoder.decodeStruct(codec.Int32);
    val.encoding =
        decoder.decodeStruct(new codec.Enum(AudioPacket.Encoding));
    val.data =
        decoder.decodeArrayPointer(new codec.PointerTo(byte_string$.ByteString));
    val.samplingRate =
        decoder.decodeStruct(new codec.Enum(AudioPacket.SamplingRate));
    val.bytesPerSample =
        decoder.decodeStruct(new codec.Enum(AudioPacket.BytesPerSample));
    val.channels =
        decoder.decodeStruct(new codec.Enum(AudioPacket.Channels));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  AudioPacket.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AudioPacket.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.timestamp);
    encoder.encodeStruct(codec.Int32, val.encoding);
    encoder.encodeArrayPointer(new codec.PointerTo(byte_string$.ByteString), val.data);
    encoder.encodeStruct(codec.Int32, val.samplingRate);
    encoder.encodeStruct(codec.Int32, val.bytesPerSample);
    encoder.encodeStruct(codec.Int32, val.channels);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ClipboardEvent(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ClipboardEvent.prototype.initDefaults_ = function() {
    this.mimeType = null;
    this.data = null;
  };
  ClipboardEvent.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ClipboardEvent.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ClipboardEvent.mimeType
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ClipboardEvent.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, byte_string$.ByteString, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ClipboardEvent.encodedSize = codec.kStructHeaderSize + 16;

  ClipboardEvent.decode = function(decoder) {
    var packed;
    var val = new ClipboardEvent();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.mimeType =
        decoder.decodeStruct(codec.String);
    val.data =
        decoder.decodeStructPointer(byte_string$.ByteString);
    return val;
  };

  ClipboardEvent.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ClipboardEvent.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.mimeType);
    encoder.encodeStructPointer(byte_string$.ByteString, val.data);
  };
  function KeyEvent(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  KeyEvent.prototype.initDefaults_ = function() {
    this.pressed = false;
    this.usbKeycode = 0;
    this.lockStates = 0;
    this.capsLockState = null;
    this.numLockState = null;
  };
  KeyEvent.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  KeyEvent.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    // validate KeyEvent.capsLockState
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, wrapped_primitives$.Bool, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate KeyEvent.numLockState
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, wrapped_primitives$.Bool, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  KeyEvent.encodedSize = codec.kStructHeaderSize + 32;

  KeyEvent.decode = function(decoder) {
    var packed;
    var val = new KeyEvent();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.pressed = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.usbKeycode =
        decoder.decodeStruct(codec.Uint32);
    val.lockStates =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.capsLockState =
        decoder.decodeStructPointer(wrapped_primitives$.Bool);
    val.numLockState =
        decoder.decodeStructPointer(wrapped_primitives$.Bool);
    return val;
  };

  KeyEvent.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(KeyEvent.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.pressed & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint32, val.usbKeycode);
    encoder.encodeStruct(codec.Uint32, val.lockStates);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(wrapped_primitives$.Bool, val.capsLockState);
    encoder.encodeStructPointer(wrapped_primitives$.Bool, val.numLockState);
  };
  function MouseEvent(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MouseEvent.prototype.initDefaults_ = function() {
    this.x = null;
    this.y = null;
    this.button = 0;
    this.buttonDown = null;
    this.wheelDeltaX = null;
    this.wheelDeltaY = null;
    this.wheelTicksX = null;
    this.wheelTicksY = null;
    this.deltaX = null;
    this.deltaY = null;
  };
  MouseEvent.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MouseEvent.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 88}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MouseEvent.x
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, wrapped_primitives$.Int32, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MouseEvent.y
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, wrapped_primitives$.Int32, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MouseEvent.button
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, MouseButton);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MouseEvent.buttonDown
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, wrapped_primitives$.Bool, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MouseEvent.wheelDeltaX
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, wrapped_primitives$.Float, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MouseEvent.wheelDeltaY
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, wrapped_primitives$.Float, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MouseEvent.wheelTicksX
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, wrapped_primitives$.Float, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MouseEvent.wheelTicksY
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, wrapped_primitives$.Float, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MouseEvent.deltaX
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, wrapped_primitives$.Int32, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MouseEvent.deltaY
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, wrapped_primitives$.Int32, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MouseEvent.encodedSize = codec.kStructHeaderSize + 80;

  MouseEvent.decode = function(decoder) {
    var packed;
    var val = new MouseEvent();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.x =
        decoder.decodeStructPointer(wrapped_primitives$.Int32);
    val.y =
        decoder.decodeStructPointer(wrapped_primitives$.Int32);
    val.button =
        decoder.decodeStruct(new codec.Enum(MouseButton));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.buttonDown =
        decoder.decodeStructPointer(wrapped_primitives$.Bool);
    val.wheelDeltaX =
        decoder.decodeStructPointer(wrapped_primitives$.Float);
    val.wheelDeltaY =
        decoder.decodeStructPointer(wrapped_primitives$.Float);
    val.wheelTicksX =
        decoder.decodeStructPointer(wrapped_primitives$.Float);
    val.wheelTicksY =
        decoder.decodeStructPointer(wrapped_primitives$.Float);
    val.deltaX =
        decoder.decodeStructPointer(wrapped_primitives$.Int32);
    val.deltaY =
        decoder.decodeStructPointer(wrapped_primitives$.Int32);
    return val;
  };

  MouseEvent.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MouseEvent.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(wrapped_primitives$.Int32, val.x);
    encoder.encodeStructPointer(wrapped_primitives$.Int32, val.y);
    encoder.encodeStruct(codec.Int32, val.button);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(wrapped_primitives$.Bool, val.buttonDown);
    encoder.encodeStructPointer(wrapped_primitives$.Float, val.wheelDeltaX);
    encoder.encodeStructPointer(wrapped_primitives$.Float, val.wheelDeltaY);
    encoder.encodeStructPointer(wrapped_primitives$.Float, val.wheelTicksX);
    encoder.encodeStructPointer(wrapped_primitives$.Float, val.wheelTicksY);
    encoder.encodeStructPointer(wrapped_primitives$.Int32, val.deltaX);
    encoder.encodeStructPointer(wrapped_primitives$.Int32, val.deltaY);
  };
  function TextEvent(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TextEvent.prototype.initDefaults_ = function() {
    this.text = null;
  };
  TextEvent.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TextEvent.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TextEvent.text
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TextEvent.encodedSize = codec.kStructHeaderSize + 8;

  TextEvent.decode = function(decoder) {
    var packed;
    var val = new TextEvent();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.text =
        decoder.decodeStruct(codec.String);
    return val;
  };

  TextEvent.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TextEvent.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.text);
  };
  function TouchEventPoint(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TouchEventPoint.prototype.initDefaults_ = function() {
    this.id = 0;
    this.angle = 0;
    this.position = null;
    this.radius = null;
    this.pressure = 0;
  };
  TouchEventPoint.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TouchEventPoint.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate TouchEventPoint.position
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.PointF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TouchEventPoint.radius
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.PointF, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  TouchEventPoint.encodedSize = codec.kStructHeaderSize + 32;

  TouchEventPoint.decode = function(decoder) {
    var packed;
    var val = new TouchEventPoint();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Uint32);
    val.angle =
        decoder.decodeStruct(codec.Float);
    val.position =
        decoder.decodeStructPointer(geometry$.PointF);
    val.radius =
        decoder.decodeStructPointer(geometry$.PointF);
    val.pressure =
        decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TouchEventPoint.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TouchEventPoint.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.id);
    encoder.encodeStruct(codec.Float, val.angle);
    encoder.encodeStructPointer(geometry$.PointF, val.position);
    encoder.encodeStructPointer(geometry$.PointF, val.radius);
    encoder.encodeStruct(codec.Float, val.pressure);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TouchEvent(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TouchEvent.prototype.initDefaults_ = function() {
    this.eventType = 0;
    this.touchPoints = null;
  };
  TouchEvent.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TouchEvent.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TouchEvent.eventType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, TouchEventType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TouchEvent.touchPoints
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(TouchEventPoint), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TouchEvent.encodedSize = codec.kStructHeaderSize + 16;

  TouchEvent.decode = function(decoder) {
    var packed;
    var val = new TouchEvent();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.eventType =
        decoder.decodeStruct(new codec.Enum(TouchEventType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.touchPoints =
        decoder.decodeArrayPointer(new codec.PointerTo(TouchEventPoint));
    return val;
  };

  TouchEvent.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TouchEvent.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.eventType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(TouchEventPoint), val.touchPoints);
  };
  function DesktopEnvironmentOptions(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopEnvironmentOptions.prototype.initDefaults_ = function() {
    this.enableCurtaining = false;
    this.enableUserInterface = false;
    this.enableNotifications = false;
    this.terminateUponInput = false;
    this.enableFileTransfer = false;
    this.enableRemoteOpenUrl = false;
    this.enableRemoteWebauthn = false;
    this.clipboardSize = null;
    this.desktopCaptureOptions = null;
  };
  DesktopEnvironmentOptions.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopEnvironmentOptions.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;









    // validate DesktopEnvironmentOptions.clipboardSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, wrapped_primitives$.UInt32, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopEnvironmentOptions.desktopCaptureOptions
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, webrtc_types$.DesktopCaptureOptions, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopEnvironmentOptions.encodedSize = codec.kStructHeaderSize + 24;

  DesktopEnvironmentOptions.decode = function(decoder) {
    var packed;
    var val = new DesktopEnvironmentOptions();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.enableCurtaining = (packed >> 0) & 1 ? true : false;
    val.enableUserInterface = (packed >> 1) & 1 ? true : false;
    val.enableNotifications = (packed >> 2) & 1 ? true : false;
    val.terminateUponInput = (packed >> 3) & 1 ? true : false;
    val.enableFileTransfer = (packed >> 4) & 1 ? true : false;
    val.enableRemoteOpenUrl = (packed >> 5) & 1 ? true : false;
    val.enableRemoteWebauthn = (packed >> 6) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.clipboardSize =
        decoder.decodeStructPointer(wrapped_primitives$.UInt32);
    val.desktopCaptureOptions =
        decoder.decodeStructPointer(webrtc_types$.DesktopCaptureOptions);
    return val;
  };

  DesktopEnvironmentOptions.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopEnvironmentOptions.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.enableCurtaining & 1) << 0
    packed |= (val.enableUserInterface & 1) << 1
    packed |= (val.enableNotifications & 1) << 2
    packed |= (val.terminateUponInput & 1) << 3
    packed |= (val.enableFileTransfer & 1) << 4
    packed |= (val.enableRemoteOpenUrl & 1) << 5
    packed |= (val.enableRemoteWebauthn & 1) << 6
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(wrapped_primitives$.UInt32, val.clipboardSize);
    encoder.encodeStructPointer(webrtc_types$.DesktopCaptureOptions, val.desktopCaptureOptions);
  };
  function ScreenResolution(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ScreenResolution.prototype.initDefaults_ = function() {
    this.dimensions = null;
    this.dpi = null;
  };
  ScreenResolution.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ScreenResolution.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenResolution.dimensions
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, webrtc_types$.DesktopSize, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ScreenResolution.dpi
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, webrtc_types$.DesktopVector, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ScreenResolution.encodedSize = codec.kStructHeaderSize + 16;

  ScreenResolution.decode = function(decoder) {
    var packed;
    var val = new ScreenResolution();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dimensions =
        decoder.decodeStructPointer(webrtc_types$.DesktopSize);
    val.dpi =
        decoder.decodeStructPointer(webrtc_types$.DesktopVector);
    return val;
  };

  ScreenResolution.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ScreenResolution.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(webrtc_types$.DesktopSize, val.dimensions);
    encoder.encodeStructPointer(webrtc_types$.DesktopVector, val.dpi);
  };
  function FileTransferError(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  FileTransferError.Type = {};
  FileTransferError.Type.kUnknown = 0;
  FileTransferError.Type.kCanceled = 1;
  FileTransferError.Type.kUnexpectedError = 2;
  FileTransferError.Type.kProtocolError = 3;
  FileTransferError.Type.kPermissionDenied = 4;
  FileTransferError.Type.kOutOfDiskSpace = 5;
  FileTransferError.Type.kIoError = 6;
  FileTransferError.Type.kNotLoggedIn = 7;
  FileTransferError.Type.MIN_VALUE = 0;
  FileTransferError.Type.MAX_VALUE = 7;

  FileTransferError.Type.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    }
    return false;
  };

  FileTransferError.Type.toKnownEnumValue = function(value) {
    return value;
  };

  FileTransferError.Type.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  FileTransferError.prototype.initDefaults_ = function() {
    this.type = 0;
    this.lineNumber = 0;
    this.apiErrorCode = null;
    this.function = null;
    this.sourceFile = null;
  };
  FileTransferError.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileTransferError.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileTransferError.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, FileTransferError.Type);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileTransferError.apiErrorCode
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, wrapped_primitives$.Int32, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileTransferError.function
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileTransferError.sourceFile
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FileTransferError.encodedSize = codec.kStructHeaderSize + 32;

  FileTransferError.decode = function(decoder) {
    var packed;
    var val = new FileTransferError();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(new codec.Enum(FileTransferError.Type));
    val.lineNumber =
        decoder.decodeStruct(codec.Uint32);
    val.apiErrorCode =
        decoder.decodeStructPointer(wrapped_primitives$.Int32);
    val.function =
        decoder.decodeStruct(codec.String);
    val.sourceFile =
        decoder.decodeStruct(codec.String);
    return val;
  };

  FileTransferError.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileTransferError.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.encodeStruct(codec.Uint32, val.lineNumber);
    encoder.encodeStructPointer(wrapped_primitives$.Int32, val.apiErrorCode);
    encoder.encodeStruct(codec.String, val.function);
    encoder.encodeStruct(codec.String, val.sourceFile);
  };
  function BeginFileReadSuccess(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BeginFileReadSuccess.prototype.initDefaults_ = function() {
    this.fileReader = new associatedBindings.AssociatedInterfacePtrInfo();
    this.filename = null;
    this.size = 0;
  };
  BeginFileReadSuccess.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BeginFileReadSuccess.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BeginFileReadSuccess.fileReader
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BeginFileReadSuccess.filename
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  BeginFileReadSuccess.encodedSize = codec.kStructHeaderSize + 24;

  BeginFileReadSuccess.decode = function(decoder) {
    var packed;
    var val = new BeginFileReadSuccess();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fileReader =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.filename =
        decoder.decodeStructPointer(file_path$.FilePath);
    val.size =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  BeginFileReadSuccess.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BeginFileReadSuccess.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.fileReader);
    encoder.encodeStructPointer(file_path$.FilePath, val.filename);
    encoder.encodeStruct(codec.Uint64, val.size);
  };
  function BeginFileWriteSuccess(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BeginFileWriteSuccess.prototype.initDefaults_ = function() {
    this.fileWriter = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  BeginFileWriteSuccess.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BeginFileWriteSuccess.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BeginFileWriteSuccess.fileWriter
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BeginFileWriteSuccess.encodedSize = codec.kStructHeaderSize + 8;

  BeginFileWriteSuccess.decode = function(decoder) {
    var packed;
    var val = new BeginFileWriteSuccess();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fileWriter =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  BeginFileWriteSuccess.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BeginFileWriteSuccess.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.fileWriter);
  };
  function VideoTrackLayout(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoTrackLayout.prototype.initDefaults_ = function() {
    this.screenId = 0;
    this.mediaStreamId = null;
    this.position = null;
    this.size = null;
    this.dpi = null;
  };
  VideoTrackLayout.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoTrackLayout.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate VideoTrackLayout.mediaStreamId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoTrackLayout.position
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Point, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoTrackLayout.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, webrtc_types$.DesktopSize, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoTrackLayout.dpi
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, webrtc_types$.DesktopVector, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoTrackLayout.encodedSize = codec.kStructHeaderSize + 40;

  VideoTrackLayout.decode = function(decoder) {
    var packed;
    var val = new VideoTrackLayout();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.screenId =
        decoder.decodeStruct(codec.Int64);
    val.mediaStreamId =
        decoder.decodeStruct(codec.String);
    val.position =
        decoder.decodeStructPointer(geometry$.Point);
    val.size =
        decoder.decodeStructPointer(webrtc_types$.DesktopSize);
    val.dpi =
        decoder.decodeStructPointer(webrtc_types$.DesktopVector);
    return val;
  };

  VideoTrackLayout.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoTrackLayout.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.screenId);
    encoder.encodeStruct(codec.String, val.mediaStreamId);
    encoder.encodeStructPointer(geometry$.Point, val.position);
    encoder.encodeStructPointer(webrtc_types$.DesktopSize, val.size);
    encoder.encodeStructPointer(webrtc_types$.DesktopVector, val.dpi);
  };
  function VideoLayout(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoLayout.prototype.initDefaults_ = function() {
    this.tracks = null;
    this.supportsFullDesktopCapture = false;
    this.primaryScreenId = 0;
  };
  VideoLayout.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoLayout.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoLayout.tracks
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(VideoTrackLayout), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  VideoLayout.encodedSize = codec.kStructHeaderSize + 24;

  VideoLayout.decode = function(decoder) {
    var packed;
    var val = new VideoLayout();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tracks =
        decoder.decodeArrayPointer(new codec.PointerTo(VideoTrackLayout));
    packed = decoder.readUint8();
    val.supportsFullDesktopCapture = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.primaryScreenId =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  VideoLayout.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoLayout.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(VideoTrackLayout), val.tracks);
    packed = 0;
    packed |= (val.supportsFullDesktopCapture & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int64, val.primaryScreenId);
  };
  function DesktopSessionRequestHandler_ConnectDesktopChannel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionRequestHandler_ConnectDesktopChannel_Params.prototype.initDefaults_ = function() {
    this.desktopPipe = null;
  };
  DesktopSessionRequestHandler_ConnectDesktopChannel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionRequestHandler_ConnectDesktopChannel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionRequestHandler_ConnectDesktopChannel_Params.desktopPipe
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionRequestHandler_ConnectDesktopChannel_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionRequestHandler_ConnectDesktopChannel_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionRequestHandler_ConnectDesktopChannel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.desktopPipe =
        decoder.decodeStruct(codec.Handle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DesktopSessionRequestHandler_ConnectDesktopChannel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionRequestHandler_ConnectDesktopChannel_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Handle, val.desktopPipe);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params.prototype.initDefaults_ = function() {
  };
  DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params.encodedSize = codec.kStructHeaderSize + 0;

  DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DesktopSessionRequestHandler_CrashNetworkProcess_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionRequestHandler_CrashNetworkProcess_Params.prototype.initDefaults_ = function() {
  };
  DesktopSessionRequestHandler_CrashNetworkProcess_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionRequestHandler_CrashNetworkProcess_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionRequestHandler_CrashNetworkProcess_Params.encodedSize = codec.kStructHeaderSize + 0;

  DesktopSessionRequestHandler_CrashNetworkProcess_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionRequestHandler_CrashNetworkProcess_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DesktopSessionRequestHandler_CrashNetworkProcess_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionRequestHandler_CrashNetworkProcess_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DesktopSessionManager_CreateDesktopSession_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionManager_CreateDesktopSession_Params.prototype.initDefaults_ = function() {
    this.terminalId = 0;
    this.isVirtualTerminal = false;
    this.screenResolution = null;
  };
  DesktopSessionManager_CreateDesktopSession_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionManager_CreateDesktopSession_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DesktopSessionManager_CreateDesktopSession_Params.screenResolution
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ScreenResolution, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DesktopSessionManager_CreateDesktopSession_Params.encodedSize = codec.kStructHeaderSize + 16;

  DesktopSessionManager_CreateDesktopSession_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionManager_CreateDesktopSession_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.terminalId =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.isVirtualTerminal = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.screenResolution =
        decoder.decodeStructPointer(ScreenResolution);
    return val;
  };

  DesktopSessionManager_CreateDesktopSession_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionManager_CreateDesktopSession_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.terminalId);
    packed = 0;
    packed |= (val.isVirtualTerminal & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(ScreenResolution, val.screenResolution);
  };
  function DesktopSessionManager_CloseDesktopSession_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionManager_CloseDesktopSession_Params.prototype.initDefaults_ = function() {
    this.terminalId = 0;
  };
  DesktopSessionManager_CloseDesktopSession_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionManager_CloseDesktopSession_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DesktopSessionManager_CloseDesktopSession_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionManager_CloseDesktopSession_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionManager_CloseDesktopSession_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.terminalId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DesktopSessionManager_CloseDesktopSession_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionManager_CloseDesktopSession_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.terminalId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DesktopSessionManager_SetScreenResolution_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionManager_SetScreenResolution_Params.prototype.initDefaults_ = function() {
    this.terminalId = 0;
    this.screenResolution = null;
  };
  DesktopSessionManager_SetScreenResolution_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionManager_SetScreenResolution_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DesktopSessionManager_SetScreenResolution_Params.screenResolution
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ScreenResolution, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionManager_SetScreenResolution_Params.encodedSize = codec.kStructHeaderSize + 16;

  DesktopSessionManager_SetScreenResolution_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionManager_SetScreenResolution_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.terminalId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.screenResolution =
        decoder.decodeStructPointer(ScreenResolution);
    return val;
  };

  DesktopSessionManager_SetScreenResolution_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionManager_SetScreenResolution_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.terminalId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(ScreenResolution, val.screenResolution);
  };
  function DesktopSessionAgent_Start_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionAgent_Start_Params.prototype.initDefaults_ = function() {
    this.authenticatedJid = null;
    this.resolution = null;
    this.options = null;
  };
  DesktopSessionAgent_Start_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionAgent_Start_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionAgent_Start_Params.authenticatedJid
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionAgent_Start_Params.resolution
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, ScreenResolution, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionAgent_Start_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, DesktopEnvironmentOptions, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionAgent_Start_Params.encodedSize = codec.kStructHeaderSize + 24;

  DesktopSessionAgent_Start_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionAgent_Start_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.authenticatedJid =
        decoder.decodeStruct(codec.String);
    val.resolution =
        decoder.decodeStructPointer(ScreenResolution);
    val.options =
        decoder.decodeStructPointer(DesktopEnvironmentOptions);
    return val;
  };

  DesktopSessionAgent_Start_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionAgent_Start_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.authenticatedJid);
    encoder.encodeStructPointer(ScreenResolution, val.resolution);
    encoder.encodeStructPointer(DesktopEnvironmentOptions, val.options);
  };
  function DesktopSessionAgent_Start_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionAgent_Start_ResponseParams.prototype.initDefaults_ = function() {
    this.desktopSessionControl = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  DesktopSessionAgent_Start_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionAgent_Start_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionAgent_Start_ResponseParams.desktopSessionControl
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionAgent_Start_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionAgent_Start_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionAgent_Start_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.desktopSessionControl =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  DesktopSessionAgent_Start_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionAgent_Start_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.desktopSessionControl);
  };
  function FileWriter_WriteChunk_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileWriter_WriteChunk_Params.prototype.initDefaults_ = function() {
    this.data = null;
  };
  FileWriter_WriteChunk_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileWriter_WriteChunk_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileWriter_WriteChunk_Params.data
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileWriter_WriteChunk_Params.encodedSize = codec.kStructHeaderSize + 8;

  FileWriter_WriteChunk_Params.decode = function(decoder) {
    var packed;
    var val = new FileWriter_WriteChunk_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  FileWriter_WriteChunk_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileWriter_WriteChunk_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.data);
  };
  function FileWriter_WriteChunk_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileWriter_WriteChunk_ResponseParams.prototype.initDefaults_ = function() {
    this.error = null;
  };
  FileWriter_WriteChunk_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileWriter_WriteChunk_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileWriter_WriteChunk_ResponseParams.error
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FileTransferError, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileWriter_WriteChunk_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FileWriter_WriteChunk_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FileWriter_WriteChunk_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.error =
        decoder.decodeStructPointer(FileTransferError);
    return val;
  };

  FileWriter_WriteChunk_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileWriter_WriteChunk_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FileTransferError, val.error);
  };
  function FileWriter_CloseFile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileWriter_CloseFile_Params.prototype.initDefaults_ = function() {
  };
  FileWriter_CloseFile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileWriter_CloseFile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileWriter_CloseFile_Params.encodedSize = codec.kStructHeaderSize + 0;

  FileWriter_CloseFile_Params.decode = function(decoder) {
    var packed;
    var val = new FileWriter_CloseFile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FileWriter_CloseFile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileWriter_CloseFile_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FileWriter_CloseFile_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileWriter_CloseFile_ResponseParams.prototype.initDefaults_ = function() {
    this.error = null;
  };
  FileWriter_CloseFile_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileWriter_CloseFile_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileWriter_CloseFile_ResponseParams.error
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, FileTransferError, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileWriter_CloseFile_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FileWriter_CloseFile_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FileWriter_CloseFile_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.error =
        decoder.decodeStructPointer(FileTransferError);
    return val;
  };

  FileWriter_CloseFile_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileWriter_CloseFile_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(FileTransferError, val.error);
  };
  function FileReader_ReadChunk_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileReader_ReadChunk_Params.prototype.initDefaults_ = function() {
    this.bytesToRead = 0;
  };
  FileReader_ReadChunk_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileReader_ReadChunk_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FileReader_ReadChunk_Params.encodedSize = codec.kStructHeaderSize + 8;

  FileReader_ReadChunk_Params.decode = function(decoder) {
    var packed;
    var val = new FileReader_ReadChunk_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bytesToRead =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  FileReader_ReadChunk_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileReader_ReadChunk_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.bytesToRead);
  };
  function FileReader_ReadChunk_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileReader_ReadChunk_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  FileReader_ReadChunk_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileReader_ReadChunk_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FileReader_ReadChunk_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, ReadChunkResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FileReader_ReadChunk_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  FileReader_ReadChunk_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FileReader_ReadChunk_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(ReadChunkResult);
    return val;
  };

  FileReader_ReadChunk_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileReader_ReadChunk_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(ReadChunkResult, val.result);
  };
  function DesktopSessionControl_CaptureFrame_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_CaptureFrame_Params.prototype.initDefaults_ = function() {
  };
  DesktopSessionControl_CaptureFrame_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_CaptureFrame_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_CaptureFrame_Params.encodedSize = codec.kStructHeaderSize + 0;

  DesktopSessionControl_CaptureFrame_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_CaptureFrame_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DesktopSessionControl_CaptureFrame_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_CaptureFrame_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DesktopSessionControl_SelectSource_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_SelectSource_Params.prototype.initDefaults_ = function() {
    this.desktopDisplayId = 0;
  };
  DesktopSessionControl_SelectSource_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_SelectSource_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DesktopSessionControl_SelectSource_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionControl_SelectSource_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_SelectSource_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.desktopDisplayId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DesktopSessionControl_SelectSource_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_SelectSource_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.desktopDisplayId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DesktopSessionControl_SetScreenResolution_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_SetScreenResolution_Params.prototype.initDefaults_ = function() {
    this.newResolution = null;
  };
  DesktopSessionControl_SetScreenResolution_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_SetScreenResolution_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionControl_SetScreenResolution_Params.newResolution
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ScreenResolution, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_SetScreenResolution_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionControl_SetScreenResolution_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_SetScreenResolution_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.newResolution =
        decoder.decodeStructPointer(ScreenResolution);
    return val;
  };

  DesktopSessionControl_SetScreenResolution_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_SetScreenResolution_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ScreenResolution, val.newResolution);
  };
  function DesktopSessionControl_LockWorkstation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_LockWorkstation_Params.prototype.initDefaults_ = function() {
  };
  DesktopSessionControl_LockWorkstation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_LockWorkstation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_LockWorkstation_Params.encodedSize = codec.kStructHeaderSize + 0;

  DesktopSessionControl_LockWorkstation_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_LockWorkstation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DesktopSessionControl_LockWorkstation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_LockWorkstation_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DesktopSessionControl_InjectSendAttentionSequence_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_InjectSendAttentionSequence_Params.prototype.initDefaults_ = function() {
  };
  DesktopSessionControl_InjectSendAttentionSequence_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_InjectSendAttentionSequence_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_InjectSendAttentionSequence_Params.encodedSize = codec.kStructHeaderSize + 0;

  DesktopSessionControl_InjectSendAttentionSequence_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_InjectSendAttentionSequence_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DesktopSessionControl_InjectSendAttentionSequence_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_InjectSendAttentionSequence_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DesktopSessionControl_InjectClipboardEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_InjectClipboardEvent_Params.prototype.initDefaults_ = function() {
    this.event = null;
  };
  DesktopSessionControl_InjectClipboardEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_InjectClipboardEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionControl_InjectClipboardEvent_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ClipboardEvent, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_InjectClipboardEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionControl_InjectClipboardEvent_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_InjectClipboardEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event =
        decoder.decodeStructPointer(ClipboardEvent);
    return val;
  };

  DesktopSessionControl_InjectClipboardEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_InjectClipboardEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ClipboardEvent, val.event);
  };
  function DesktopSessionControl_InjectKeyEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_InjectKeyEvent_Params.prototype.initDefaults_ = function() {
    this.event = null;
  };
  DesktopSessionControl_InjectKeyEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_InjectKeyEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionControl_InjectKeyEvent_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, KeyEvent, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_InjectKeyEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionControl_InjectKeyEvent_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_InjectKeyEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event =
        decoder.decodeStructPointer(KeyEvent);
    return val;
  };

  DesktopSessionControl_InjectKeyEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_InjectKeyEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(KeyEvent, val.event);
  };
  function DesktopSessionControl_InjectMouseEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_InjectMouseEvent_Params.prototype.initDefaults_ = function() {
    this.event = null;
  };
  DesktopSessionControl_InjectMouseEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_InjectMouseEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionControl_InjectMouseEvent_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, MouseEvent, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_InjectMouseEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionControl_InjectMouseEvent_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_InjectMouseEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event =
        decoder.decodeStructPointer(MouseEvent);
    return val;
  };

  DesktopSessionControl_InjectMouseEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_InjectMouseEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(MouseEvent, val.event);
  };
  function DesktopSessionControl_InjectTextEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_InjectTextEvent_Params.prototype.initDefaults_ = function() {
    this.event = null;
  };
  DesktopSessionControl_InjectTextEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_InjectTextEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionControl_InjectTextEvent_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TextEvent, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_InjectTextEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionControl_InjectTextEvent_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_InjectTextEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event =
        decoder.decodeStructPointer(TextEvent);
    return val;
  };

  DesktopSessionControl_InjectTextEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_InjectTextEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TextEvent, val.event);
  };
  function DesktopSessionControl_InjectTouchEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_InjectTouchEvent_Params.prototype.initDefaults_ = function() {
    this.event = null;
  };
  DesktopSessionControl_InjectTouchEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_InjectTouchEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionControl_InjectTouchEvent_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TouchEvent, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_InjectTouchEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionControl_InjectTouchEvent_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_InjectTouchEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event =
        decoder.decodeStructPointer(TouchEvent);
    return val;
  };

  DesktopSessionControl_InjectTouchEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_InjectTouchEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TouchEvent, val.event);
  };
  function DesktopSessionControl_SetUpUrlForwarder_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_SetUpUrlForwarder_Params.prototype.initDefaults_ = function() {
  };
  DesktopSessionControl_SetUpUrlForwarder_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_SetUpUrlForwarder_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_SetUpUrlForwarder_Params.encodedSize = codec.kStructHeaderSize + 0;

  DesktopSessionControl_SetUpUrlForwarder_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_SetUpUrlForwarder_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DesktopSessionControl_SetUpUrlForwarder_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_SetUpUrlForwarder_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DesktopSessionControl_SignalWebAuthnExtension_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_SignalWebAuthnExtension_Params.prototype.initDefaults_ = function() {
  };
  DesktopSessionControl_SignalWebAuthnExtension_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_SignalWebAuthnExtension_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_SignalWebAuthnExtension_Params.encodedSize = codec.kStructHeaderSize + 0;

  DesktopSessionControl_SignalWebAuthnExtension_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_SignalWebAuthnExtension_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DesktopSessionControl_SignalWebAuthnExtension_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_SignalWebAuthnExtension_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DesktopSessionControl_BeginFileRead_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_BeginFileRead_Params.prototype.initDefaults_ = function() {
  };
  DesktopSessionControl_BeginFileRead_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_BeginFileRead_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_BeginFileRead_Params.encodedSize = codec.kStructHeaderSize + 0;

  DesktopSessionControl_BeginFileRead_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_BeginFileRead_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DesktopSessionControl_BeginFileRead_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_BeginFileRead_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DesktopSessionControl_BeginFileRead_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_BeginFileRead_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  DesktopSessionControl_BeginFileRead_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_BeginFileRead_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionControl_BeginFileRead_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, BeginFileReadResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_BeginFileRead_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  DesktopSessionControl_BeginFileRead_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_BeginFileRead_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(BeginFileReadResult);
    return val;
  };

  DesktopSessionControl_BeginFileRead_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_BeginFileRead_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(BeginFileReadResult, val.result);
  };
  function DesktopSessionControl_BeginFileWrite_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_BeginFileWrite_Params.prototype.initDefaults_ = function() {
    this.filePath = null;
  };
  DesktopSessionControl_BeginFileWrite_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_BeginFileWrite_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionControl_BeginFileWrite_Params.filePath
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_BeginFileWrite_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionControl_BeginFileWrite_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_BeginFileWrite_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.filePath =
        decoder.decodeStructPointer(file_path$.FilePath);
    return val;
  };

  DesktopSessionControl_BeginFileWrite_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_BeginFileWrite_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file_path$.FilePath, val.filePath);
  };
  function DesktopSessionControl_BeginFileWrite_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionControl_BeginFileWrite_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  DesktopSessionControl_BeginFileWrite_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionControl_BeginFileWrite_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionControl_BeginFileWrite_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, BeginFileWriteResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionControl_BeginFileWrite_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  DesktopSessionControl_BeginFileWrite_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionControl_BeginFileWrite_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(BeginFileWriteResult);
    return val;
  };

  DesktopSessionControl_BeginFileWrite_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionControl_BeginFileWrite_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(BeginFileWriteResult, val.result);
  };
  function DesktopSessionEventHandler_OnClipboardEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionEventHandler_OnClipboardEvent_Params.prototype.initDefaults_ = function() {
    this.event = null;
  };
  DesktopSessionEventHandler_OnClipboardEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionEventHandler_OnClipboardEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionEventHandler_OnClipboardEvent_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ClipboardEvent, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionEventHandler_OnClipboardEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionEventHandler_OnClipboardEvent_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionEventHandler_OnClipboardEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event =
        decoder.decodeStructPointer(ClipboardEvent);
    return val;
  };

  DesktopSessionEventHandler_OnClipboardEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionEventHandler_OnClipboardEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ClipboardEvent, val.event);
  };
  function DesktopSessionEventHandler_OnUrlForwarderStateChange_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionEventHandler_OnUrlForwarderStateChange_Params.prototype.initDefaults_ = function() {
    this.state = 0;
  };
  DesktopSessionEventHandler_OnUrlForwarderStateChange_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionEventHandler_OnUrlForwarderStateChange_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionEventHandler_OnUrlForwarderStateChange_Params.state
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, UrlForwarderState);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionEventHandler_OnUrlForwarderStateChange_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionEventHandler_OnUrlForwarderStateChange_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionEventHandler_OnUrlForwarderStateChange_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.state =
        decoder.decodeStruct(new codec.Enum(UrlForwarderState));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DesktopSessionEventHandler_OnUrlForwarderStateChange_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionEventHandler_OnUrlForwarderStateChange_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.state);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DesktopSessionEventHandler_OnAudioPacket_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionEventHandler_OnAudioPacket_Params.prototype.initDefaults_ = function() {
    this.audioPacket = null;
  };
  DesktopSessionEventHandler_OnAudioPacket_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionEventHandler_OnAudioPacket_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionEventHandler_OnAudioPacket_Params.audioPacket
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, AudioPacket, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionEventHandler_OnAudioPacket_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionEventHandler_OnAudioPacket_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionEventHandler_OnAudioPacket_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.audioPacket =
        decoder.decodeStructPointer(AudioPacket);
    return val;
  };

  DesktopSessionEventHandler_OnAudioPacket_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionEventHandler_OnAudioPacket_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(AudioPacket, val.audioPacket);
  };
  function DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params.prototype.initDefaults_ = function() {
    this.id = 0;
    this.size = 0;
    this.region = null;
  };
  DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params.region
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.ReadOnlySharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params.encodedSize = codec.kStructHeaderSize + 16;

  DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int32);
    val.size =
        decoder.decodeStruct(codec.Uint32);
    val.region =
        decoder.decodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion);
    return val;
  };

  DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.id);
    encoder.encodeStruct(codec.Uint32, val.size);
    encoder.encodeStructPointer(shared_memory$.ReadOnlySharedMemoryRegion, val.region);
  };
  function DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params.prototype.initDefaults_ = function() {
    this.id = 0;
  };
  DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DesktopSessionEventHandler_OnCaptureResult_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionEventHandler_OnCaptureResult_Params.prototype.initDefaults_ = function() {
    this.result = null;
  };
  DesktopSessionEventHandler_OnCaptureResult_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionEventHandler_OnCaptureResult_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionEventHandler_OnCaptureResult_Params.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, CaptureResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionEventHandler_OnCaptureResult_Params.encodedSize = codec.kStructHeaderSize + 16;

  DesktopSessionEventHandler_OnCaptureResult_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionEventHandler_OnCaptureResult_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(CaptureResult);
    return val;
  };

  DesktopSessionEventHandler_OnCaptureResult_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionEventHandler_OnCaptureResult_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(CaptureResult, val.result);
  };
  function DesktopSessionEventHandler_OnDesktopDisplayChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionEventHandler_OnDesktopDisplayChanged_Params.prototype.initDefaults_ = function() {
    this.layout = null;
  };
  DesktopSessionEventHandler_OnDesktopDisplayChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionEventHandler_OnDesktopDisplayChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionEventHandler_OnDesktopDisplayChanged_Params.layout
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, VideoLayout, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionEventHandler_OnDesktopDisplayChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionEventHandler_OnDesktopDisplayChanged_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionEventHandler_OnDesktopDisplayChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.layout =
        decoder.decodeStructPointer(VideoLayout);
    return val;
  };

  DesktopSessionEventHandler_OnDesktopDisplayChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionEventHandler_OnDesktopDisplayChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(VideoLayout, val.layout);
  };
  function DesktopSessionEventHandler_OnMouseCursorChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionEventHandler_OnMouseCursorChanged_Params.prototype.initDefaults_ = function() {
    this.mouseCursor = null;
  };
  DesktopSessionEventHandler_OnMouseCursorChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionEventHandler_OnMouseCursorChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionEventHandler_OnMouseCursorChanged_Params.mouseCursor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, webrtc_types$.MouseCursor, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionEventHandler_OnMouseCursorChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionEventHandler_OnMouseCursorChanged_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionEventHandler_OnMouseCursorChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.mouseCursor =
        decoder.decodeStructPointer(webrtc_types$.MouseCursor);
    return val;
  };

  DesktopSessionEventHandler_OnMouseCursorChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionEventHandler_OnMouseCursorChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(webrtc_types$.MouseCursor, val.mouseCursor);
  };
  function DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params.prototype.initDefaults_ = function() {
    this.keyboardLayout = null;
  };
  DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params.keyboardLayout
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, keyboard_layout$.KeyboardLayout, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.keyboardLayout =
        decoder.decodeStructPointer(keyboard_layout$.KeyboardLayout);
    return val;
  };

  DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(keyboard_layout$.KeyboardLayout, val.keyboardLayout);
  };
  function DesktopSessionStateHandler_DisconnectSession_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DesktopSessionStateHandler_DisconnectSession_Params.prototype.initDefaults_ = function() {
    this.errorCode = 0;
  };
  DesktopSessionStateHandler_DisconnectSession_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DesktopSessionStateHandler_DisconnectSession_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DesktopSessionStateHandler_DisconnectSession_Params.errorCode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ProtocolErrorCode);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DesktopSessionStateHandler_DisconnectSession_Params.encodedSize = codec.kStructHeaderSize + 8;

  DesktopSessionStateHandler_DisconnectSession_Params.decode = function(decoder) {
    var packed;
    var val = new DesktopSessionStateHandler_DisconnectSession_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.errorCode =
        decoder.decodeStruct(new codec.Enum(ProtocolErrorCode));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DesktopSessionStateHandler_DisconnectSession_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DesktopSessionStateHandler_DisconnectSession_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.errorCode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WorkerProcessControl_CrashProcess_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WorkerProcessControl_CrashProcess_Params.prototype.initDefaults_ = function() {
    this.functionName = null;
    this.fileName = null;
    this.lineNumber = 0;
  };
  WorkerProcessControl_CrashProcess_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WorkerProcessControl_CrashProcess_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WorkerProcessControl_CrashProcess_Params.functionName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WorkerProcessControl_CrashProcess_Params.fileName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  WorkerProcessControl_CrashProcess_Params.encodedSize = codec.kStructHeaderSize + 24;

  WorkerProcessControl_CrashProcess_Params.decode = function(decoder) {
    var packed;
    var val = new WorkerProcessControl_CrashProcess_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.functionName =
        decoder.decodeStruct(codec.String);
    val.fileName =
        decoder.decodeStruct(codec.String);
    val.lineNumber =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WorkerProcessControl_CrashProcess_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WorkerProcessControl_CrashProcess_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.functionName);
    encoder.encodeStruct(codec.String, val.fileName);
    encoder.encodeStruct(codec.Int32, val.lineNumber);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function ReadChunkResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  ReadChunkResult.Tags = {
    data: 0,
    error: 1,
  };

  ReadChunkResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  ReadChunkResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "data",
        "error",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a ReadChunkResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(ReadChunkResult.prototype, "data", {
    get: function() {
      if (this.$tag != ReadChunkResult.Tags.data) {
        throw new ReferenceError(
            "ReadChunkResult.data is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ReadChunkResult.Tags.data;
      this.$data = value;
    }
  });
  Object.defineProperty(ReadChunkResult.prototype, "error", {
    get: function() {
      if (this.$tag != ReadChunkResult.Tags.error) {
        throw new ReferenceError(
            "ReadChunkResult.error is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ReadChunkResult.Tags.error;
      this.$data = value;
    }
  });


    ReadChunkResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case ReadChunkResult.Tags.data:
          encoder.encodeArrayPointer(codec.Uint8, val.data);
          break;
        case ReadChunkResult.Tags.error:
          encoder.encodeStructPointer(FileTransferError, val.error);
          break;
      }
      encoder.align();
    };


    ReadChunkResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new ReadChunkResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case ReadChunkResult.Tags.data:
          result.data = decoder.decodeArrayPointer(codec.Uint8);
          break;
        case ReadChunkResult.Tags.error:
          result.error = decoder.decodeStructPointer(FileTransferError);
          break;
      }
      decoder.align();

      return result;
    };


    ReadChunkResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case ReadChunkResult.Tags.data:
          

    // validate ReadChunkResult.data
    err = messageValidator.validateArrayPointer(data_offset, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ReadChunkResult.Tags.error:
          

    // validate ReadChunkResult.error
    err = messageValidator.validateStructPointer(data_offset, FileTransferError, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  ReadChunkResult.encodedSize = 16;

  function BeginFileReadResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  BeginFileReadResult.Tags = {
    success: 0,
    error: 1,
  };

  BeginFileReadResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  BeginFileReadResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "success",
        "error",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a BeginFileReadResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(BeginFileReadResult.prototype, "success", {
    get: function() {
      if (this.$tag != BeginFileReadResult.Tags.success) {
        throw new ReferenceError(
            "BeginFileReadResult.success is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = BeginFileReadResult.Tags.success;
      this.$data = value;
    }
  });
  Object.defineProperty(BeginFileReadResult.prototype, "error", {
    get: function() {
      if (this.$tag != BeginFileReadResult.Tags.error) {
        throw new ReferenceError(
            "BeginFileReadResult.error is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = BeginFileReadResult.Tags.error;
      this.$data = value;
    }
  });


    BeginFileReadResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case BeginFileReadResult.Tags.success:
          encoder.encodeStructPointer(BeginFileReadSuccess, val.success);
          break;
        case BeginFileReadResult.Tags.error:
          encoder.encodeStructPointer(FileTransferError, val.error);
          break;
      }
      encoder.align();
    };


    BeginFileReadResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new BeginFileReadResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case BeginFileReadResult.Tags.success:
          result.success = decoder.decodeStructPointer(BeginFileReadSuccess);
          break;
        case BeginFileReadResult.Tags.error:
          result.error = decoder.decodeStructPointer(FileTransferError);
          break;
      }
      decoder.align();

      return result;
    };


    BeginFileReadResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case BeginFileReadResult.Tags.success:
          

    // validate BeginFileReadResult.success
    err = messageValidator.validateStructPointer(data_offset, BeginFileReadSuccess, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case BeginFileReadResult.Tags.error:
          

    // validate BeginFileReadResult.error
    err = messageValidator.validateStructPointer(data_offset, FileTransferError, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  BeginFileReadResult.encodedSize = 16;

  function BeginFileWriteResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  BeginFileWriteResult.Tags = {
    success: 0,
    error: 1,
  };

  BeginFileWriteResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  BeginFileWriteResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "success",
        "error",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a BeginFileWriteResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(BeginFileWriteResult.prototype, "success", {
    get: function() {
      if (this.$tag != BeginFileWriteResult.Tags.success) {
        throw new ReferenceError(
            "BeginFileWriteResult.success is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = BeginFileWriteResult.Tags.success;
      this.$data = value;
    }
  });
  Object.defineProperty(BeginFileWriteResult.prototype, "error", {
    get: function() {
      if (this.$tag != BeginFileWriteResult.Tags.error) {
        throw new ReferenceError(
            "BeginFileWriteResult.error is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = BeginFileWriteResult.Tags.error;
      this.$data = value;
    }
  });


    BeginFileWriteResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case BeginFileWriteResult.Tags.success:
          encoder.encodeStructPointer(BeginFileWriteSuccess, val.success);
          break;
        case BeginFileWriteResult.Tags.error:
          encoder.encodeStructPointer(FileTransferError, val.error);
          break;
      }
      encoder.align();
    };


    BeginFileWriteResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new BeginFileWriteResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case BeginFileWriteResult.Tags.success:
          result.success = decoder.decodeStructPointer(BeginFileWriteSuccess);
          break;
        case BeginFileWriteResult.Tags.error:
          result.error = decoder.decodeStructPointer(FileTransferError);
          break;
      }
      decoder.align();

      return result;
    };


    BeginFileWriteResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case BeginFileWriteResult.Tags.success:
          

    // validate BeginFileWriteResult.success
    err = messageValidator.validateStructPointer(data_offset, BeginFileWriteSuccess, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case BeginFileWriteResult.Tags.error:
          

    // validate BeginFileWriteResult.error
    err = messageValidator.validateStructPointer(data_offset, FileTransferError, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  BeginFileWriteResult.encodedSize = 16;

  function CaptureResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  CaptureResult.Tags = {
    desktopFrame: 0,
    captureError: 1,
  };

  CaptureResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  CaptureResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "desktopFrame",
        "captureError",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a CaptureResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(CaptureResult.prototype, "desktopFrame", {
    get: function() {
      if (this.$tag != CaptureResult.Tags.desktopFrame) {
        throw new ReferenceError(
            "CaptureResult.desktopFrame is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = CaptureResult.Tags.desktopFrame;
      this.$data = value;
    }
  });
  Object.defineProperty(CaptureResult.prototype, "captureError", {
    get: function() {
      if (this.$tag != CaptureResult.Tags.captureError) {
        throw new ReferenceError(
            "CaptureResult.captureError is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = CaptureResult.Tags.captureError;
      this.$data = value;
    }
  });


    CaptureResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case CaptureResult.Tags.desktopFrame:
          encoder.encodeStructPointer(webrtc_types$.DesktopFrame, val.desktopFrame);
          break;
        case CaptureResult.Tags.captureError:
          encoder.encodeStruct(codec.Int32, val.captureError);
          break;
      }
      encoder.align();
    };


    CaptureResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new CaptureResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case CaptureResult.Tags.desktopFrame:
          result.desktopFrame = decoder.decodeStructPointer(webrtc_types$.DesktopFrame);
          break;
        case CaptureResult.Tags.captureError:
          result.captureError = decoder.decodeStruct(new codec.Enum(webrtc_types$.DesktopCaptureResult));
          break;
      }
      decoder.align();

      return result;
    };


    CaptureResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case CaptureResult.Tags.desktopFrame:
          

    // validate CaptureResult.desktopFrame
    err = messageValidator.validateStructPointer(data_offset, webrtc_types$.DesktopFrame, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case CaptureResult.Tags.captureError:
          

    // validate CaptureResult.captureError
    err = messageValidator.validateEnum(data_offset, webrtc_types$.DesktopCaptureResult);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  CaptureResult.encodedSize = 16;
  var kDesktopSessionRequestHandler_ConnectDesktopChannel_Name = 182979825;
  var kDesktopSessionRequestHandler_InjectSecureAttentionSequence_Name = 606397375;
  var kDesktopSessionRequestHandler_CrashNetworkProcess_Name = 1983833009;

  function DesktopSessionRequestHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DesktopSessionRequestHandler,
                                                   handleOrPtrInfo);
  }

  function DesktopSessionRequestHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DesktopSessionRequestHandler, associatedInterfacePtrInfo);
  }

  DesktopSessionRequestHandlerAssociatedPtr.prototype =
      Object.create(DesktopSessionRequestHandlerPtr.prototype);
  DesktopSessionRequestHandlerAssociatedPtr.prototype.constructor =
      DesktopSessionRequestHandlerAssociatedPtr;

  function DesktopSessionRequestHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  DesktopSessionRequestHandlerPtr.prototype.connectDesktopChannel = function() {
    return DesktopSessionRequestHandlerProxy.prototype.connectDesktopChannel
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionRequestHandlerProxy.prototype.connectDesktopChannel = function(desktopPipe) {
    var params_ = new DesktopSessionRequestHandler_ConnectDesktopChannel_Params();
    params_.desktopPipe = desktopPipe;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionRequestHandler_ConnectDesktopChannel_Name,
        codec.align(DesktopSessionRequestHandler_ConnectDesktopChannel_Params.encodedSize));
    builder.encodeStruct(DesktopSessionRequestHandler_ConnectDesktopChannel_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionRequestHandlerPtr.prototype.injectSecureAttentionSequence = function() {
    return DesktopSessionRequestHandlerProxy.prototype.injectSecureAttentionSequence
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionRequestHandlerProxy.prototype.injectSecureAttentionSequence = function() {
    var params_ = new DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params();
    var builder = new codec.MessageV0Builder(
        kDesktopSessionRequestHandler_InjectSecureAttentionSequence_Name,
        codec.align(DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params.encodedSize));
    builder.encodeStruct(DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionRequestHandlerPtr.prototype.crashNetworkProcess = function() {
    return DesktopSessionRequestHandlerProxy.prototype.crashNetworkProcess
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionRequestHandlerProxy.prototype.crashNetworkProcess = function() {
    var params_ = new DesktopSessionRequestHandler_CrashNetworkProcess_Params();
    var builder = new codec.MessageV0Builder(
        kDesktopSessionRequestHandler_CrashNetworkProcess_Name,
        codec.align(DesktopSessionRequestHandler_CrashNetworkProcess_Params.encodedSize));
    builder.encodeStruct(DesktopSessionRequestHandler_CrashNetworkProcess_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DesktopSessionRequestHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  DesktopSessionRequestHandlerStub.prototype.connectDesktopChannel = function(desktopPipe) {
    return this.delegate_ && this.delegate_.connectDesktopChannel && this.delegate_.connectDesktopChannel(desktopPipe);
  }
  DesktopSessionRequestHandlerStub.prototype.injectSecureAttentionSequence = function() {
    return this.delegate_ && this.delegate_.injectSecureAttentionSequence && this.delegate_.injectSecureAttentionSequence();
  }
  DesktopSessionRequestHandlerStub.prototype.crashNetworkProcess = function() {
    return this.delegate_ && this.delegate_.crashNetworkProcess && this.delegate_.crashNetworkProcess();
  }

  DesktopSessionRequestHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDesktopSessionRequestHandler_ConnectDesktopChannel_Name:
      var params = reader.decodeStruct(DesktopSessionRequestHandler_ConnectDesktopChannel_Params);
      this.connectDesktopChannel(params.desktopPipe);
      return true;
    case kDesktopSessionRequestHandler_InjectSecureAttentionSequence_Name:
      var params = reader.decodeStruct(DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params);
      this.injectSecureAttentionSequence();
      return true;
    case kDesktopSessionRequestHandler_CrashNetworkProcess_Name:
      var params = reader.decodeStruct(DesktopSessionRequestHandler_CrashNetworkProcess_Params);
      this.crashNetworkProcess();
      return true;
    default:
      return false;
    }
  };

  DesktopSessionRequestHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDesktopSessionRequestHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDesktopSessionRequestHandler_ConnectDesktopChannel_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionRequestHandler_ConnectDesktopChannel_Params;
      break;
      case kDesktopSessionRequestHandler_InjectSecureAttentionSequence_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionRequestHandler_InjectSecureAttentionSequence_Params;
      break;
      case kDesktopSessionRequestHandler_CrashNetworkProcess_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionRequestHandler_CrashNetworkProcess_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDesktopSessionRequestHandlerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DesktopSessionRequestHandler = {
    name: 'remoting.mojom.DesktopSessionRequestHandler',
    kVersion: 0,
    ptrClass: DesktopSessionRequestHandlerPtr,
    proxyClass: DesktopSessionRequestHandlerProxy,
    stubClass: DesktopSessionRequestHandlerStub,
    validateRequest: validateDesktopSessionRequestHandlerRequest,
    validateResponse: null,
  };
  DesktopSessionRequestHandlerStub.prototype.validator = validateDesktopSessionRequestHandlerRequest;
  DesktopSessionRequestHandlerProxy.prototype.validator = null;
  var kDesktopSessionManager_CreateDesktopSession_Name = 1048586576;
  var kDesktopSessionManager_CloseDesktopSession_Name = 1714466606;
  var kDesktopSessionManager_SetScreenResolution_Name = 861162515;

  function DesktopSessionManagerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DesktopSessionManager,
                                                   handleOrPtrInfo);
  }

  function DesktopSessionManagerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DesktopSessionManager, associatedInterfacePtrInfo);
  }

  DesktopSessionManagerAssociatedPtr.prototype =
      Object.create(DesktopSessionManagerPtr.prototype);
  DesktopSessionManagerAssociatedPtr.prototype.constructor =
      DesktopSessionManagerAssociatedPtr;

  function DesktopSessionManagerProxy(receiver) {
    this.receiver_ = receiver;
  }
  DesktopSessionManagerPtr.prototype.createDesktopSession = function() {
    return DesktopSessionManagerProxy.prototype.createDesktopSession
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionManagerProxy.prototype.createDesktopSession = function(terminalId, screenResolution, isVirtualTerminal) {
    var params_ = new DesktopSessionManager_CreateDesktopSession_Params();
    params_.terminalId = terminalId;
    params_.screenResolution = screenResolution;
    params_.isVirtualTerminal = isVirtualTerminal;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionManager_CreateDesktopSession_Name,
        codec.align(DesktopSessionManager_CreateDesktopSession_Params.encodedSize));
    builder.encodeStruct(DesktopSessionManager_CreateDesktopSession_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionManagerPtr.prototype.closeDesktopSession = function() {
    return DesktopSessionManagerProxy.prototype.closeDesktopSession
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionManagerProxy.prototype.closeDesktopSession = function(terminalId) {
    var params_ = new DesktopSessionManager_CloseDesktopSession_Params();
    params_.terminalId = terminalId;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionManager_CloseDesktopSession_Name,
        codec.align(DesktopSessionManager_CloseDesktopSession_Params.encodedSize));
    builder.encodeStruct(DesktopSessionManager_CloseDesktopSession_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionManagerPtr.prototype.setScreenResolution = function() {
    return DesktopSessionManagerProxy.prototype.setScreenResolution
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionManagerProxy.prototype.setScreenResolution = function(terminalId, screenResolution) {
    var params_ = new DesktopSessionManager_SetScreenResolution_Params();
    params_.terminalId = terminalId;
    params_.screenResolution = screenResolution;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionManager_SetScreenResolution_Name,
        codec.align(DesktopSessionManager_SetScreenResolution_Params.encodedSize));
    builder.encodeStruct(DesktopSessionManager_SetScreenResolution_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DesktopSessionManagerStub(delegate) {
    this.delegate_ = delegate;
  }
  DesktopSessionManagerStub.prototype.createDesktopSession = function(terminalId, screenResolution, isVirtualTerminal) {
    return this.delegate_ && this.delegate_.createDesktopSession && this.delegate_.createDesktopSession(terminalId, screenResolution, isVirtualTerminal);
  }
  DesktopSessionManagerStub.prototype.closeDesktopSession = function(terminalId) {
    return this.delegate_ && this.delegate_.closeDesktopSession && this.delegate_.closeDesktopSession(terminalId);
  }
  DesktopSessionManagerStub.prototype.setScreenResolution = function(terminalId, screenResolution) {
    return this.delegate_ && this.delegate_.setScreenResolution && this.delegate_.setScreenResolution(terminalId, screenResolution);
  }

  DesktopSessionManagerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDesktopSessionManager_CreateDesktopSession_Name:
      var params = reader.decodeStruct(DesktopSessionManager_CreateDesktopSession_Params);
      this.createDesktopSession(params.terminalId, params.screenResolution, params.isVirtualTerminal);
      return true;
    case kDesktopSessionManager_CloseDesktopSession_Name:
      var params = reader.decodeStruct(DesktopSessionManager_CloseDesktopSession_Params);
      this.closeDesktopSession(params.terminalId);
      return true;
    case kDesktopSessionManager_SetScreenResolution_Name:
      var params = reader.decodeStruct(DesktopSessionManager_SetScreenResolution_Params);
      this.setScreenResolution(params.terminalId, params.screenResolution);
      return true;
    default:
      return false;
    }
  };

  DesktopSessionManagerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDesktopSessionManagerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDesktopSessionManager_CreateDesktopSession_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionManager_CreateDesktopSession_Params;
      break;
      case kDesktopSessionManager_CloseDesktopSession_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionManager_CloseDesktopSession_Params;
      break;
      case kDesktopSessionManager_SetScreenResolution_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionManager_SetScreenResolution_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDesktopSessionManagerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DesktopSessionManager = {
    name: 'remoting.mojom.DesktopSessionManager',
    kVersion: 0,
    ptrClass: DesktopSessionManagerPtr,
    proxyClass: DesktopSessionManagerProxy,
    stubClass: DesktopSessionManagerStub,
    validateRequest: validateDesktopSessionManagerRequest,
    validateResponse: null,
  };
  DesktopSessionManagerStub.prototype.validator = validateDesktopSessionManagerRequest;
  DesktopSessionManagerProxy.prototype.validator = null;
  var kDesktopSessionAgent_Start_Name = 2059347133;

  function DesktopSessionAgentPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DesktopSessionAgent,
                                                   handleOrPtrInfo);
  }

  function DesktopSessionAgentAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DesktopSessionAgent, associatedInterfacePtrInfo);
  }

  DesktopSessionAgentAssociatedPtr.prototype =
      Object.create(DesktopSessionAgentPtr.prototype);
  DesktopSessionAgentAssociatedPtr.prototype.constructor =
      DesktopSessionAgentAssociatedPtr;

  function DesktopSessionAgentProxy(receiver) {
    this.receiver_ = receiver;
  }
  DesktopSessionAgentPtr.prototype.start = function() {
    return DesktopSessionAgentProxy.prototype.start
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionAgentProxy.prototype.start = function(authenticatedJid, resolution, options) {
    var params_ = new DesktopSessionAgent_Start_Params();
    params_.authenticatedJid = authenticatedJid;
    params_.resolution = resolution;
    params_.options = options;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kDesktopSessionAgent_Start_Name,
          codec.align(DesktopSessionAgent_Start_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(DesktopSessionAgent_Start_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DesktopSessionAgent_Start_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function DesktopSessionAgentStub(delegate) {
    this.delegate_ = delegate;
  }
  DesktopSessionAgentStub.prototype.start = function(authenticatedJid, resolution, options) {
    return this.delegate_ && this.delegate_.start && this.delegate_.start(authenticatedJid, resolution, options);
  }

  DesktopSessionAgentStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  DesktopSessionAgentStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDesktopSessionAgent_Start_Name:
      var params = reader.decodeStruct(DesktopSessionAgent_Start_Params);
      this.start(params.authenticatedJid, params.resolution, params.options).then(function(response) {
        var responseParams =
            new DesktopSessionAgent_Start_ResponseParams();
        responseParams.desktopSessionControl = response.desktopSessionControl;
        var builder = new codec.MessageV2Builder(
            kDesktopSessionAgent_Start_Name,
            codec.align(DesktopSessionAgent_Start_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(DesktopSessionAgent_Start_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateDesktopSessionAgentRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDesktopSessionAgent_Start_Name:
        if (message.expectsResponse())
          paramsClass = DesktopSessionAgent_Start_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDesktopSessionAgentResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kDesktopSessionAgent_Start_Name:
        if (message.isResponse())
          paramsClass = DesktopSessionAgent_Start_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var DesktopSessionAgent = {
    name: 'remoting.mojom.DesktopSessionAgent',
    kVersion: 0,
    ptrClass: DesktopSessionAgentPtr,
    proxyClass: DesktopSessionAgentProxy,
    stubClass: DesktopSessionAgentStub,
    validateRequest: validateDesktopSessionAgentRequest,
    validateResponse: validateDesktopSessionAgentResponse,
  };
  DesktopSessionAgentStub.prototype.validator = validateDesktopSessionAgentRequest;
  DesktopSessionAgentProxy.prototype.validator = validateDesktopSessionAgentResponse;
  var kFileWriter_WriteChunk_Name = 614143792;
  var kFileWriter_CloseFile_Name = 819980449;

  function FileWriterPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FileWriter,
                                                   handleOrPtrInfo);
  }

  function FileWriterAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FileWriter, associatedInterfacePtrInfo);
  }

  FileWriterAssociatedPtr.prototype =
      Object.create(FileWriterPtr.prototype);
  FileWriterAssociatedPtr.prototype.constructor =
      FileWriterAssociatedPtr;

  function FileWriterProxy(receiver) {
    this.receiver_ = receiver;
  }
  FileWriterPtr.prototype.writeChunk = function() {
    return FileWriterProxy.prototype.writeChunk
        .apply(this.ptr.getProxy(), arguments);
  };

  FileWriterProxy.prototype.writeChunk = function(data) {
    var params_ = new FileWriter_WriteChunk_Params();
    params_.data = data;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFileWriter_WriteChunk_Name,
          codec.align(FileWriter_WriteChunk_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FileWriter_WriteChunk_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FileWriter_WriteChunk_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FileWriterPtr.prototype.closeFile = function() {
    return FileWriterProxy.prototype.closeFile
        .apply(this.ptr.getProxy(), arguments);
  };

  FileWriterProxy.prototype.closeFile = function() {
    var params_ = new FileWriter_CloseFile_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFileWriter_CloseFile_Name,
          codec.align(FileWriter_CloseFile_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FileWriter_CloseFile_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FileWriter_CloseFile_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function FileWriterStub(delegate) {
    this.delegate_ = delegate;
  }
  FileWriterStub.prototype.writeChunk = function(data) {
    return this.delegate_ && this.delegate_.writeChunk && this.delegate_.writeChunk(data);
  }
  FileWriterStub.prototype.closeFile = function() {
    return this.delegate_ && this.delegate_.closeFile && this.delegate_.closeFile();
  }

  FileWriterStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  FileWriterStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFileWriter_WriteChunk_Name:
      var params = reader.decodeStruct(FileWriter_WriteChunk_Params);
      this.writeChunk(params.data).then(function(response) {
        var responseParams =
            new FileWriter_WriteChunk_ResponseParams();
        responseParams.error = response.error;
        var builder = new codec.MessageV1Builder(
            kFileWriter_WriteChunk_Name,
            codec.align(FileWriter_WriteChunk_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FileWriter_WriteChunk_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFileWriter_CloseFile_Name:
      var params = reader.decodeStruct(FileWriter_CloseFile_Params);
      this.closeFile().then(function(response) {
        var responseParams =
            new FileWriter_CloseFile_ResponseParams();
        responseParams.error = response.error;
        var builder = new codec.MessageV1Builder(
            kFileWriter_CloseFile_Name,
            codec.align(FileWriter_CloseFile_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FileWriter_CloseFile_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFileWriterRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFileWriter_WriteChunk_Name:
        if (message.expectsResponse())
          paramsClass = FileWriter_WriteChunk_Params;
      break;
      case kFileWriter_CloseFile_Name:
        if (message.expectsResponse())
          paramsClass = FileWriter_CloseFile_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFileWriterResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFileWriter_WriteChunk_Name:
        if (message.isResponse())
          paramsClass = FileWriter_WriteChunk_ResponseParams;
        break;
      case kFileWriter_CloseFile_Name:
        if (message.isResponse())
          paramsClass = FileWriter_CloseFile_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var FileWriter = {
    name: 'remoting.mojom.FileWriter',
    kVersion: 0,
    ptrClass: FileWriterPtr,
    proxyClass: FileWriterProxy,
    stubClass: FileWriterStub,
    validateRequest: validateFileWriterRequest,
    validateResponse: validateFileWriterResponse,
  };
  FileWriterStub.prototype.validator = validateFileWriterRequest;
  FileWriterProxy.prototype.validator = validateFileWriterResponse;
  var kFileReader_ReadChunk_Name = 249233914;

  function FileReaderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FileReader,
                                                   handleOrPtrInfo);
  }

  function FileReaderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FileReader, associatedInterfacePtrInfo);
  }

  FileReaderAssociatedPtr.prototype =
      Object.create(FileReaderPtr.prototype);
  FileReaderAssociatedPtr.prototype.constructor =
      FileReaderAssociatedPtr;

  function FileReaderProxy(receiver) {
    this.receiver_ = receiver;
  }
  FileReaderPtr.prototype.readChunk = function() {
    return FileReaderProxy.prototype.readChunk
        .apply(this.ptr.getProxy(), arguments);
  };

  FileReaderProxy.prototype.readChunk = function(bytesToRead) {
    var params_ = new FileReader_ReadChunk_Params();
    params_.bytesToRead = bytesToRead;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFileReader_ReadChunk_Name,
          codec.align(FileReader_ReadChunk_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FileReader_ReadChunk_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FileReader_ReadChunk_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function FileReaderStub(delegate) {
    this.delegate_ = delegate;
  }
  FileReaderStub.prototype.readChunk = function(bytesToRead) {
    return this.delegate_ && this.delegate_.readChunk && this.delegate_.readChunk(bytesToRead);
  }

  FileReaderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  FileReaderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFileReader_ReadChunk_Name:
      var params = reader.decodeStruct(FileReader_ReadChunk_Params);
      this.readChunk(params.bytesToRead).then(function(response) {
        var responseParams =
            new FileReader_ReadChunk_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kFileReader_ReadChunk_Name,
            codec.align(FileReader_ReadChunk_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FileReader_ReadChunk_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFileReaderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFileReader_ReadChunk_Name:
        if (message.expectsResponse())
          paramsClass = FileReader_ReadChunk_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFileReaderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFileReader_ReadChunk_Name:
        if (message.isResponse())
          paramsClass = FileReader_ReadChunk_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var FileReader = {
    name: 'remoting.mojom.FileReader',
    kVersion: 0,
    ptrClass: FileReaderPtr,
    proxyClass: FileReaderProxy,
    stubClass: FileReaderStub,
    validateRequest: validateFileReaderRequest,
    validateResponse: validateFileReaderResponse,
  };
  FileReaderStub.prototype.validator = validateFileReaderRequest;
  FileReaderProxy.prototype.validator = validateFileReaderResponse;
  var kDesktopSessionControl_CaptureFrame_Name = 595944212;
  var kDesktopSessionControl_SelectSource_Name = 2085396555;
  var kDesktopSessionControl_SetScreenResolution_Name = 1147257963;
  var kDesktopSessionControl_LockWorkstation_Name = 894662946;
  var kDesktopSessionControl_InjectSendAttentionSequence_Name = 1272722832;
  var kDesktopSessionControl_InjectClipboardEvent_Name = 2101964849;
  var kDesktopSessionControl_InjectKeyEvent_Name = 1443217592;
  var kDesktopSessionControl_InjectMouseEvent_Name = 490076462;
  var kDesktopSessionControl_InjectTextEvent_Name = 2017324668;
  var kDesktopSessionControl_InjectTouchEvent_Name = 571074432;
  var kDesktopSessionControl_SetUpUrlForwarder_Name = 402309181;
  var kDesktopSessionControl_SignalWebAuthnExtension_Name = 1059563168;
  var kDesktopSessionControl_BeginFileRead_Name = 1939674211;
  var kDesktopSessionControl_BeginFileWrite_Name = 1474563216;

  function DesktopSessionControlPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DesktopSessionControl,
                                                   handleOrPtrInfo);
  }

  function DesktopSessionControlAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DesktopSessionControl, associatedInterfacePtrInfo);
  }

  DesktopSessionControlAssociatedPtr.prototype =
      Object.create(DesktopSessionControlPtr.prototype);
  DesktopSessionControlAssociatedPtr.prototype.constructor =
      DesktopSessionControlAssociatedPtr;

  function DesktopSessionControlProxy(receiver) {
    this.receiver_ = receiver;
  }
  DesktopSessionControlPtr.prototype.captureFrame = function() {
    return DesktopSessionControlProxy.prototype.captureFrame
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.captureFrame = function() {
    var params_ = new DesktopSessionControl_CaptureFrame_Params();
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_CaptureFrame_Name,
        codec.align(DesktopSessionControl_CaptureFrame_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_CaptureFrame_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.selectSource = function() {
    return DesktopSessionControlProxy.prototype.selectSource
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.selectSource = function(desktopDisplayId) {
    var params_ = new DesktopSessionControl_SelectSource_Params();
    params_.desktopDisplayId = desktopDisplayId;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_SelectSource_Name,
        codec.align(DesktopSessionControl_SelectSource_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_SelectSource_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.setScreenResolution = function() {
    return DesktopSessionControlProxy.prototype.setScreenResolution
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.setScreenResolution = function(newResolution) {
    var params_ = new DesktopSessionControl_SetScreenResolution_Params();
    params_.newResolution = newResolution;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_SetScreenResolution_Name,
        codec.align(DesktopSessionControl_SetScreenResolution_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_SetScreenResolution_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.lockWorkstation = function() {
    return DesktopSessionControlProxy.prototype.lockWorkstation
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.lockWorkstation = function() {
    var params_ = new DesktopSessionControl_LockWorkstation_Params();
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_LockWorkstation_Name,
        codec.align(DesktopSessionControl_LockWorkstation_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_LockWorkstation_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.injectSendAttentionSequence = function() {
    return DesktopSessionControlProxy.prototype.injectSendAttentionSequence
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.injectSendAttentionSequence = function() {
    var params_ = new DesktopSessionControl_InjectSendAttentionSequence_Params();
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_InjectSendAttentionSequence_Name,
        codec.align(DesktopSessionControl_InjectSendAttentionSequence_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_InjectSendAttentionSequence_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.injectClipboardEvent = function() {
    return DesktopSessionControlProxy.prototype.injectClipboardEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.injectClipboardEvent = function(event) {
    var params_ = new DesktopSessionControl_InjectClipboardEvent_Params();
    params_.event = event;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_InjectClipboardEvent_Name,
        codec.align(DesktopSessionControl_InjectClipboardEvent_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_InjectClipboardEvent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.injectKeyEvent = function() {
    return DesktopSessionControlProxy.prototype.injectKeyEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.injectKeyEvent = function(event) {
    var params_ = new DesktopSessionControl_InjectKeyEvent_Params();
    params_.event = event;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_InjectKeyEvent_Name,
        codec.align(DesktopSessionControl_InjectKeyEvent_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_InjectKeyEvent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.injectMouseEvent = function() {
    return DesktopSessionControlProxy.prototype.injectMouseEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.injectMouseEvent = function(event) {
    var params_ = new DesktopSessionControl_InjectMouseEvent_Params();
    params_.event = event;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_InjectMouseEvent_Name,
        codec.align(DesktopSessionControl_InjectMouseEvent_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_InjectMouseEvent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.injectTextEvent = function() {
    return DesktopSessionControlProxy.prototype.injectTextEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.injectTextEvent = function(event) {
    var params_ = new DesktopSessionControl_InjectTextEvent_Params();
    params_.event = event;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_InjectTextEvent_Name,
        codec.align(DesktopSessionControl_InjectTextEvent_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_InjectTextEvent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.injectTouchEvent = function() {
    return DesktopSessionControlProxy.prototype.injectTouchEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.injectTouchEvent = function(event) {
    var params_ = new DesktopSessionControl_InjectTouchEvent_Params();
    params_.event = event;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_InjectTouchEvent_Name,
        codec.align(DesktopSessionControl_InjectTouchEvent_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_InjectTouchEvent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.setUpUrlForwarder = function() {
    return DesktopSessionControlProxy.prototype.setUpUrlForwarder
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.setUpUrlForwarder = function() {
    var params_ = new DesktopSessionControl_SetUpUrlForwarder_Params();
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_SetUpUrlForwarder_Name,
        codec.align(DesktopSessionControl_SetUpUrlForwarder_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_SetUpUrlForwarder_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.signalWebAuthnExtension = function() {
    return DesktopSessionControlProxy.prototype.signalWebAuthnExtension
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.signalWebAuthnExtension = function() {
    var params_ = new DesktopSessionControl_SignalWebAuthnExtension_Params();
    var builder = new codec.MessageV0Builder(
        kDesktopSessionControl_SignalWebAuthnExtension_Name,
        codec.align(DesktopSessionControl_SignalWebAuthnExtension_Params.encodedSize));
    builder.encodeStruct(DesktopSessionControl_SignalWebAuthnExtension_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionControlPtr.prototype.beginFileRead = function() {
    return DesktopSessionControlProxy.prototype.beginFileRead
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.beginFileRead = function() {
    var params_ = new DesktopSessionControl_BeginFileRead_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kDesktopSessionControl_BeginFileRead_Name,
          codec.align(DesktopSessionControl_BeginFileRead_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(DesktopSessionControl_BeginFileRead_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DesktopSessionControl_BeginFileRead_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  DesktopSessionControlPtr.prototype.beginFileWrite = function() {
    return DesktopSessionControlProxy.prototype.beginFileWrite
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionControlProxy.prototype.beginFileWrite = function(filePath) {
    var params_ = new DesktopSessionControl_BeginFileWrite_Params();
    params_.filePath = filePath;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kDesktopSessionControl_BeginFileWrite_Name,
          codec.align(DesktopSessionControl_BeginFileWrite_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(DesktopSessionControl_BeginFileWrite_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(DesktopSessionControl_BeginFileWrite_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function DesktopSessionControlStub(delegate) {
    this.delegate_ = delegate;
  }
  DesktopSessionControlStub.prototype.captureFrame = function() {
    return this.delegate_ && this.delegate_.captureFrame && this.delegate_.captureFrame();
  }
  DesktopSessionControlStub.prototype.selectSource = function(desktopDisplayId) {
    return this.delegate_ && this.delegate_.selectSource && this.delegate_.selectSource(desktopDisplayId);
  }
  DesktopSessionControlStub.prototype.setScreenResolution = function(newResolution) {
    return this.delegate_ && this.delegate_.setScreenResolution && this.delegate_.setScreenResolution(newResolution);
  }
  DesktopSessionControlStub.prototype.lockWorkstation = function() {
    return this.delegate_ && this.delegate_.lockWorkstation && this.delegate_.lockWorkstation();
  }
  DesktopSessionControlStub.prototype.injectSendAttentionSequence = function() {
    return this.delegate_ && this.delegate_.injectSendAttentionSequence && this.delegate_.injectSendAttentionSequence();
  }
  DesktopSessionControlStub.prototype.injectClipboardEvent = function(event) {
    return this.delegate_ && this.delegate_.injectClipboardEvent && this.delegate_.injectClipboardEvent(event);
  }
  DesktopSessionControlStub.prototype.injectKeyEvent = function(event) {
    return this.delegate_ && this.delegate_.injectKeyEvent && this.delegate_.injectKeyEvent(event);
  }
  DesktopSessionControlStub.prototype.injectMouseEvent = function(event) {
    return this.delegate_ && this.delegate_.injectMouseEvent && this.delegate_.injectMouseEvent(event);
  }
  DesktopSessionControlStub.prototype.injectTextEvent = function(event) {
    return this.delegate_ && this.delegate_.injectTextEvent && this.delegate_.injectTextEvent(event);
  }
  DesktopSessionControlStub.prototype.injectTouchEvent = function(event) {
    return this.delegate_ && this.delegate_.injectTouchEvent && this.delegate_.injectTouchEvent(event);
  }
  DesktopSessionControlStub.prototype.setUpUrlForwarder = function() {
    return this.delegate_ && this.delegate_.setUpUrlForwarder && this.delegate_.setUpUrlForwarder();
  }
  DesktopSessionControlStub.prototype.signalWebAuthnExtension = function() {
    return this.delegate_ && this.delegate_.signalWebAuthnExtension && this.delegate_.signalWebAuthnExtension();
  }
  DesktopSessionControlStub.prototype.beginFileRead = function() {
    return this.delegate_ && this.delegate_.beginFileRead && this.delegate_.beginFileRead();
  }
  DesktopSessionControlStub.prototype.beginFileWrite = function(filePath) {
    return this.delegate_ && this.delegate_.beginFileWrite && this.delegate_.beginFileWrite(filePath);
  }

  DesktopSessionControlStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDesktopSessionControl_CaptureFrame_Name:
      var params = reader.decodeStruct(DesktopSessionControl_CaptureFrame_Params);
      this.captureFrame();
      return true;
    case kDesktopSessionControl_SelectSource_Name:
      var params = reader.decodeStruct(DesktopSessionControl_SelectSource_Params);
      this.selectSource(params.desktopDisplayId);
      return true;
    case kDesktopSessionControl_SetScreenResolution_Name:
      var params = reader.decodeStruct(DesktopSessionControl_SetScreenResolution_Params);
      this.setScreenResolution(params.newResolution);
      return true;
    case kDesktopSessionControl_LockWorkstation_Name:
      var params = reader.decodeStruct(DesktopSessionControl_LockWorkstation_Params);
      this.lockWorkstation();
      return true;
    case kDesktopSessionControl_InjectSendAttentionSequence_Name:
      var params = reader.decodeStruct(DesktopSessionControl_InjectSendAttentionSequence_Params);
      this.injectSendAttentionSequence();
      return true;
    case kDesktopSessionControl_InjectClipboardEvent_Name:
      var params = reader.decodeStruct(DesktopSessionControl_InjectClipboardEvent_Params);
      this.injectClipboardEvent(params.event);
      return true;
    case kDesktopSessionControl_InjectKeyEvent_Name:
      var params = reader.decodeStruct(DesktopSessionControl_InjectKeyEvent_Params);
      this.injectKeyEvent(params.event);
      return true;
    case kDesktopSessionControl_InjectMouseEvent_Name:
      var params = reader.decodeStruct(DesktopSessionControl_InjectMouseEvent_Params);
      this.injectMouseEvent(params.event);
      return true;
    case kDesktopSessionControl_InjectTextEvent_Name:
      var params = reader.decodeStruct(DesktopSessionControl_InjectTextEvent_Params);
      this.injectTextEvent(params.event);
      return true;
    case kDesktopSessionControl_InjectTouchEvent_Name:
      var params = reader.decodeStruct(DesktopSessionControl_InjectTouchEvent_Params);
      this.injectTouchEvent(params.event);
      return true;
    case kDesktopSessionControl_SetUpUrlForwarder_Name:
      var params = reader.decodeStruct(DesktopSessionControl_SetUpUrlForwarder_Params);
      this.setUpUrlForwarder();
      return true;
    case kDesktopSessionControl_SignalWebAuthnExtension_Name:
      var params = reader.decodeStruct(DesktopSessionControl_SignalWebAuthnExtension_Params);
      this.signalWebAuthnExtension();
      return true;
    default:
      return false;
    }
  };

  DesktopSessionControlStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDesktopSessionControl_BeginFileRead_Name:
      var params = reader.decodeStruct(DesktopSessionControl_BeginFileRead_Params);
      this.beginFileRead().then(function(response) {
        var responseParams =
            new DesktopSessionControl_BeginFileRead_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV2Builder(
            kDesktopSessionControl_BeginFileRead_Name,
            codec.align(DesktopSessionControl_BeginFileRead_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(DesktopSessionControl_BeginFileRead_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kDesktopSessionControl_BeginFileWrite_Name:
      var params = reader.decodeStruct(DesktopSessionControl_BeginFileWrite_Params);
      this.beginFileWrite(params.filePath).then(function(response) {
        var responseParams =
            new DesktopSessionControl_BeginFileWrite_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV2Builder(
            kDesktopSessionControl_BeginFileWrite_Name,
            codec.align(DesktopSessionControl_BeginFileWrite_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(DesktopSessionControl_BeginFileWrite_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateDesktopSessionControlRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDesktopSessionControl_CaptureFrame_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_CaptureFrame_Params;
      break;
      case kDesktopSessionControl_SelectSource_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_SelectSource_Params;
      break;
      case kDesktopSessionControl_SetScreenResolution_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_SetScreenResolution_Params;
      break;
      case kDesktopSessionControl_LockWorkstation_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_LockWorkstation_Params;
      break;
      case kDesktopSessionControl_InjectSendAttentionSequence_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_InjectSendAttentionSequence_Params;
      break;
      case kDesktopSessionControl_InjectClipboardEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_InjectClipboardEvent_Params;
      break;
      case kDesktopSessionControl_InjectKeyEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_InjectKeyEvent_Params;
      break;
      case kDesktopSessionControl_InjectMouseEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_InjectMouseEvent_Params;
      break;
      case kDesktopSessionControl_InjectTextEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_InjectTextEvent_Params;
      break;
      case kDesktopSessionControl_InjectTouchEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_InjectTouchEvent_Params;
      break;
      case kDesktopSessionControl_SetUpUrlForwarder_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_SetUpUrlForwarder_Params;
      break;
      case kDesktopSessionControl_SignalWebAuthnExtension_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionControl_SignalWebAuthnExtension_Params;
      break;
      case kDesktopSessionControl_BeginFileRead_Name:
        if (message.expectsResponse())
          paramsClass = DesktopSessionControl_BeginFileRead_Params;
      break;
      case kDesktopSessionControl_BeginFileWrite_Name:
        if (message.expectsResponse())
          paramsClass = DesktopSessionControl_BeginFileWrite_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDesktopSessionControlResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kDesktopSessionControl_BeginFileRead_Name:
        if (message.isResponse())
          paramsClass = DesktopSessionControl_BeginFileRead_ResponseParams;
        break;
      case kDesktopSessionControl_BeginFileWrite_Name:
        if (message.isResponse())
          paramsClass = DesktopSessionControl_BeginFileWrite_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var DesktopSessionControl = {
    name: 'remoting.mojom.DesktopSessionControl',
    kVersion: 0,
    ptrClass: DesktopSessionControlPtr,
    proxyClass: DesktopSessionControlProxy,
    stubClass: DesktopSessionControlStub,
    validateRequest: validateDesktopSessionControlRequest,
    validateResponse: validateDesktopSessionControlResponse,
  };
  DesktopSessionControlStub.prototype.validator = validateDesktopSessionControlRequest;
  DesktopSessionControlProxy.prototype.validator = validateDesktopSessionControlResponse;
  var kDesktopSessionEventHandler_OnClipboardEvent_Name = 498605669;
  var kDesktopSessionEventHandler_OnUrlForwarderStateChange_Name = 524655666;
  var kDesktopSessionEventHandler_OnAudioPacket_Name = 1179060931;
  var kDesktopSessionEventHandler_OnSharedMemoryRegionCreated_Name = 172646714;
  var kDesktopSessionEventHandler_OnSharedMemoryRegionReleased_Name = 72569629;
  var kDesktopSessionEventHandler_OnCaptureResult_Name = 592943638;
  var kDesktopSessionEventHandler_OnDesktopDisplayChanged_Name = 813548430;
  var kDesktopSessionEventHandler_OnMouseCursorChanged_Name = 290637209;
  var kDesktopSessionEventHandler_OnKeyboardLayoutChanged_Name = 1094030195;

  function DesktopSessionEventHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DesktopSessionEventHandler,
                                                   handleOrPtrInfo);
  }

  function DesktopSessionEventHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DesktopSessionEventHandler, associatedInterfacePtrInfo);
  }

  DesktopSessionEventHandlerAssociatedPtr.prototype =
      Object.create(DesktopSessionEventHandlerPtr.prototype);
  DesktopSessionEventHandlerAssociatedPtr.prototype.constructor =
      DesktopSessionEventHandlerAssociatedPtr;

  function DesktopSessionEventHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  DesktopSessionEventHandlerPtr.prototype.onClipboardEvent = function() {
    return DesktopSessionEventHandlerProxy.prototype.onClipboardEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionEventHandlerProxy.prototype.onClipboardEvent = function(event) {
    var params_ = new DesktopSessionEventHandler_OnClipboardEvent_Params();
    params_.event = event;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionEventHandler_OnClipboardEvent_Name,
        codec.align(DesktopSessionEventHandler_OnClipboardEvent_Params.encodedSize));
    builder.encodeStruct(DesktopSessionEventHandler_OnClipboardEvent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionEventHandlerPtr.prototype.onUrlForwarderStateChange = function() {
    return DesktopSessionEventHandlerProxy.prototype.onUrlForwarderStateChange
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionEventHandlerProxy.prototype.onUrlForwarderStateChange = function(state) {
    var params_ = new DesktopSessionEventHandler_OnUrlForwarderStateChange_Params();
    params_.state = state;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionEventHandler_OnUrlForwarderStateChange_Name,
        codec.align(DesktopSessionEventHandler_OnUrlForwarderStateChange_Params.encodedSize));
    builder.encodeStruct(DesktopSessionEventHandler_OnUrlForwarderStateChange_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionEventHandlerPtr.prototype.onAudioPacket = function() {
    return DesktopSessionEventHandlerProxy.prototype.onAudioPacket
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionEventHandlerProxy.prototype.onAudioPacket = function(audioPacket) {
    var params_ = new DesktopSessionEventHandler_OnAudioPacket_Params();
    params_.audioPacket = audioPacket;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionEventHandler_OnAudioPacket_Name,
        codec.align(DesktopSessionEventHandler_OnAudioPacket_Params.encodedSize));
    builder.encodeStruct(DesktopSessionEventHandler_OnAudioPacket_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionEventHandlerPtr.prototype.onSharedMemoryRegionCreated = function() {
    return DesktopSessionEventHandlerProxy.prototype.onSharedMemoryRegionCreated
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionEventHandlerProxy.prototype.onSharedMemoryRegionCreated = function(id, region, size) {
    var params_ = new DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params();
    params_.id = id;
    params_.region = region;
    params_.size = size;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionEventHandler_OnSharedMemoryRegionCreated_Name,
        codec.align(DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params.encodedSize));
    builder.encodeStruct(DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionEventHandlerPtr.prototype.onSharedMemoryRegionReleased = function() {
    return DesktopSessionEventHandlerProxy.prototype.onSharedMemoryRegionReleased
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionEventHandlerProxy.prototype.onSharedMemoryRegionReleased = function(id) {
    var params_ = new DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionEventHandler_OnSharedMemoryRegionReleased_Name,
        codec.align(DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params.encodedSize));
    builder.encodeStruct(DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionEventHandlerPtr.prototype.onCaptureResult = function() {
    return DesktopSessionEventHandlerProxy.prototype.onCaptureResult
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionEventHandlerProxy.prototype.onCaptureResult = function(result) {
    var params_ = new DesktopSessionEventHandler_OnCaptureResult_Params();
    params_.result = result;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionEventHandler_OnCaptureResult_Name,
        codec.align(DesktopSessionEventHandler_OnCaptureResult_Params.encodedSize));
    builder.encodeStruct(DesktopSessionEventHandler_OnCaptureResult_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionEventHandlerPtr.prototype.onDesktopDisplayChanged = function() {
    return DesktopSessionEventHandlerProxy.prototype.onDesktopDisplayChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionEventHandlerProxy.prototype.onDesktopDisplayChanged = function(layout) {
    var params_ = new DesktopSessionEventHandler_OnDesktopDisplayChanged_Params();
    params_.layout = layout;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionEventHandler_OnDesktopDisplayChanged_Name,
        codec.align(DesktopSessionEventHandler_OnDesktopDisplayChanged_Params.encodedSize));
    builder.encodeStruct(DesktopSessionEventHandler_OnDesktopDisplayChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionEventHandlerPtr.prototype.onMouseCursorChanged = function() {
    return DesktopSessionEventHandlerProxy.prototype.onMouseCursorChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionEventHandlerProxy.prototype.onMouseCursorChanged = function(mouseCursor) {
    var params_ = new DesktopSessionEventHandler_OnMouseCursorChanged_Params();
    params_.mouseCursor = mouseCursor;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionEventHandler_OnMouseCursorChanged_Name,
        codec.align(DesktopSessionEventHandler_OnMouseCursorChanged_Params.encodedSize));
    builder.encodeStruct(DesktopSessionEventHandler_OnMouseCursorChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DesktopSessionEventHandlerPtr.prototype.onKeyboardLayoutChanged = function() {
    return DesktopSessionEventHandlerProxy.prototype.onKeyboardLayoutChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionEventHandlerProxy.prototype.onKeyboardLayoutChanged = function(keyboardLayout) {
    var params_ = new DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params();
    params_.keyboardLayout = keyboardLayout;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionEventHandler_OnKeyboardLayoutChanged_Name,
        codec.align(DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params.encodedSize));
    builder.encodeStruct(DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DesktopSessionEventHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  DesktopSessionEventHandlerStub.prototype.onClipboardEvent = function(event) {
    return this.delegate_ && this.delegate_.onClipboardEvent && this.delegate_.onClipboardEvent(event);
  }
  DesktopSessionEventHandlerStub.prototype.onUrlForwarderStateChange = function(state) {
    return this.delegate_ && this.delegate_.onUrlForwarderStateChange && this.delegate_.onUrlForwarderStateChange(state);
  }
  DesktopSessionEventHandlerStub.prototype.onAudioPacket = function(audioPacket) {
    return this.delegate_ && this.delegate_.onAudioPacket && this.delegate_.onAudioPacket(audioPacket);
  }
  DesktopSessionEventHandlerStub.prototype.onSharedMemoryRegionCreated = function(id, region, size) {
    return this.delegate_ && this.delegate_.onSharedMemoryRegionCreated && this.delegate_.onSharedMemoryRegionCreated(id, region, size);
  }
  DesktopSessionEventHandlerStub.prototype.onSharedMemoryRegionReleased = function(id) {
    return this.delegate_ && this.delegate_.onSharedMemoryRegionReleased && this.delegate_.onSharedMemoryRegionReleased(id);
  }
  DesktopSessionEventHandlerStub.prototype.onCaptureResult = function(result) {
    return this.delegate_ && this.delegate_.onCaptureResult && this.delegate_.onCaptureResult(result);
  }
  DesktopSessionEventHandlerStub.prototype.onDesktopDisplayChanged = function(layout) {
    return this.delegate_ && this.delegate_.onDesktopDisplayChanged && this.delegate_.onDesktopDisplayChanged(layout);
  }
  DesktopSessionEventHandlerStub.prototype.onMouseCursorChanged = function(mouseCursor) {
    return this.delegate_ && this.delegate_.onMouseCursorChanged && this.delegate_.onMouseCursorChanged(mouseCursor);
  }
  DesktopSessionEventHandlerStub.prototype.onKeyboardLayoutChanged = function(keyboardLayout) {
    return this.delegate_ && this.delegate_.onKeyboardLayoutChanged && this.delegate_.onKeyboardLayoutChanged(keyboardLayout);
  }

  DesktopSessionEventHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDesktopSessionEventHandler_OnClipboardEvent_Name:
      var params = reader.decodeStruct(DesktopSessionEventHandler_OnClipboardEvent_Params);
      this.onClipboardEvent(params.event);
      return true;
    case kDesktopSessionEventHandler_OnUrlForwarderStateChange_Name:
      var params = reader.decodeStruct(DesktopSessionEventHandler_OnUrlForwarderStateChange_Params);
      this.onUrlForwarderStateChange(params.state);
      return true;
    case kDesktopSessionEventHandler_OnAudioPacket_Name:
      var params = reader.decodeStruct(DesktopSessionEventHandler_OnAudioPacket_Params);
      this.onAudioPacket(params.audioPacket);
      return true;
    case kDesktopSessionEventHandler_OnSharedMemoryRegionCreated_Name:
      var params = reader.decodeStruct(DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params);
      this.onSharedMemoryRegionCreated(params.id, params.region, params.size);
      return true;
    case kDesktopSessionEventHandler_OnSharedMemoryRegionReleased_Name:
      var params = reader.decodeStruct(DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params);
      this.onSharedMemoryRegionReleased(params.id);
      return true;
    case kDesktopSessionEventHandler_OnCaptureResult_Name:
      var params = reader.decodeStruct(DesktopSessionEventHandler_OnCaptureResult_Params);
      this.onCaptureResult(params.result);
      return true;
    case kDesktopSessionEventHandler_OnDesktopDisplayChanged_Name:
      var params = reader.decodeStruct(DesktopSessionEventHandler_OnDesktopDisplayChanged_Params);
      this.onDesktopDisplayChanged(params.layout);
      return true;
    case kDesktopSessionEventHandler_OnMouseCursorChanged_Name:
      var params = reader.decodeStruct(DesktopSessionEventHandler_OnMouseCursorChanged_Params);
      this.onMouseCursorChanged(params.mouseCursor);
      return true;
    case kDesktopSessionEventHandler_OnKeyboardLayoutChanged_Name:
      var params = reader.decodeStruct(DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params);
      this.onKeyboardLayoutChanged(params.keyboardLayout);
      return true;
    default:
      return false;
    }
  };

  DesktopSessionEventHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDesktopSessionEventHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDesktopSessionEventHandler_OnClipboardEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionEventHandler_OnClipboardEvent_Params;
      break;
      case kDesktopSessionEventHandler_OnUrlForwarderStateChange_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionEventHandler_OnUrlForwarderStateChange_Params;
      break;
      case kDesktopSessionEventHandler_OnAudioPacket_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionEventHandler_OnAudioPacket_Params;
      break;
      case kDesktopSessionEventHandler_OnSharedMemoryRegionCreated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionEventHandler_OnSharedMemoryRegionCreated_Params;
      break;
      case kDesktopSessionEventHandler_OnSharedMemoryRegionReleased_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionEventHandler_OnSharedMemoryRegionReleased_Params;
      break;
      case kDesktopSessionEventHandler_OnCaptureResult_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionEventHandler_OnCaptureResult_Params;
      break;
      case kDesktopSessionEventHandler_OnDesktopDisplayChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionEventHandler_OnDesktopDisplayChanged_Params;
      break;
      case kDesktopSessionEventHandler_OnMouseCursorChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionEventHandler_OnMouseCursorChanged_Params;
      break;
      case kDesktopSessionEventHandler_OnKeyboardLayoutChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionEventHandler_OnKeyboardLayoutChanged_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDesktopSessionEventHandlerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DesktopSessionEventHandler = {
    name: 'remoting.mojom.DesktopSessionEventHandler',
    kVersion: 0,
    ptrClass: DesktopSessionEventHandlerPtr,
    proxyClass: DesktopSessionEventHandlerProxy,
    stubClass: DesktopSessionEventHandlerStub,
    validateRequest: validateDesktopSessionEventHandlerRequest,
    validateResponse: null,
  };
  DesktopSessionEventHandlerStub.prototype.validator = validateDesktopSessionEventHandlerRequest;
  DesktopSessionEventHandlerProxy.prototype.validator = null;
  var kDesktopSessionStateHandler_DisconnectSession_Name = 116312925;

  function DesktopSessionStateHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DesktopSessionStateHandler,
                                                   handleOrPtrInfo);
  }

  function DesktopSessionStateHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DesktopSessionStateHandler, associatedInterfacePtrInfo);
  }

  DesktopSessionStateHandlerAssociatedPtr.prototype =
      Object.create(DesktopSessionStateHandlerPtr.prototype);
  DesktopSessionStateHandlerAssociatedPtr.prototype.constructor =
      DesktopSessionStateHandlerAssociatedPtr;

  function DesktopSessionStateHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  DesktopSessionStateHandlerPtr.prototype.disconnectSession = function() {
    return DesktopSessionStateHandlerProxy.prototype.disconnectSession
        .apply(this.ptr.getProxy(), arguments);
  };

  DesktopSessionStateHandlerProxy.prototype.disconnectSession = function(errorCode) {
    var params_ = new DesktopSessionStateHandler_DisconnectSession_Params();
    params_.errorCode = errorCode;
    var builder = new codec.MessageV0Builder(
        kDesktopSessionStateHandler_DisconnectSession_Name,
        codec.align(DesktopSessionStateHandler_DisconnectSession_Params.encodedSize));
    builder.encodeStruct(DesktopSessionStateHandler_DisconnectSession_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DesktopSessionStateHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  DesktopSessionStateHandlerStub.prototype.disconnectSession = function(errorCode) {
    return this.delegate_ && this.delegate_.disconnectSession && this.delegate_.disconnectSession(errorCode);
  }

  DesktopSessionStateHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDesktopSessionStateHandler_DisconnectSession_Name:
      var params = reader.decodeStruct(DesktopSessionStateHandler_DisconnectSession_Params);
      this.disconnectSession(params.errorCode);
      return true;
    default:
      return false;
    }
  };

  DesktopSessionStateHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDesktopSessionStateHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDesktopSessionStateHandler_DisconnectSession_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DesktopSessionStateHandler_DisconnectSession_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDesktopSessionStateHandlerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DesktopSessionStateHandler = {
    name: 'remoting.mojom.DesktopSessionStateHandler',
    kVersion: 0,
    ptrClass: DesktopSessionStateHandlerPtr,
    proxyClass: DesktopSessionStateHandlerProxy,
    stubClass: DesktopSessionStateHandlerStub,
    validateRequest: validateDesktopSessionStateHandlerRequest,
    validateResponse: null,
  };
  DesktopSessionStateHandlerStub.prototype.validator = validateDesktopSessionStateHandlerRequest;
  DesktopSessionStateHandlerProxy.prototype.validator = null;
  var kWorkerProcessControl_CrashProcess_Name = 1603318214;

  function WorkerProcessControlPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WorkerProcessControl,
                                                   handleOrPtrInfo);
  }

  function WorkerProcessControlAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WorkerProcessControl, associatedInterfacePtrInfo);
  }

  WorkerProcessControlAssociatedPtr.prototype =
      Object.create(WorkerProcessControlPtr.prototype);
  WorkerProcessControlAssociatedPtr.prototype.constructor =
      WorkerProcessControlAssociatedPtr;

  function WorkerProcessControlProxy(receiver) {
    this.receiver_ = receiver;
  }
  WorkerProcessControlPtr.prototype.crashProcess = function() {
    return WorkerProcessControlProxy.prototype.crashProcess
        .apply(this.ptr.getProxy(), arguments);
  };

  WorkerProcessControlProxy.prototype.crashProcess = function(functionName, fileName, lineNumber) {
    var params_ = new WorkerProcessControl_CrashProcess_Params();
    params_.functionName = functionName;
    params_.fileName = fileName;
    params_.lineNumber = lineNumber;
    var builder = new codec.MessageV0Builder(
        kWorkerProcessControl_CrashProcess_Name,
        codec.align(WorkerProcessControl_CrashProcess_Params.encodedSize));
    builder.encodeStruct(WorkerProcessControl_CrashProcess_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function WorkerProcessControlStub(delegate) {
    this.delegate_ = delegate;
  }
  WorkerProcessControlStub.prototype.crashProcess = function(functionName, fileName, lineNumber) {
    return this.delegate_ && this.delegate_.crashProcess && this.delegate_.crashProcess(functionName, fileName, lineNumber);
  }

  WorkerProcessControlStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWorkerProcessControl_CrashProcess_Name:
      var params = reader.decodeStruct(WorkerProcessControl_CrashProcess_Params);
      this.crashProcess(params.functionName, params.fileName, params.lineNumber);
      return true;
    default:
      return false;
    }
  };

  WorkerProcessControlStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateWorkerProcessControlRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWorkerProcessControl_CrashProcess_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WorkerProcessControl_CrashProcess_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWorkerProcessControlResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var WorkerProcessControl = {
    name: 'remoting.mojom.WorkerProcessControl',
    kVersion: 0,
    ptrClass: WorkerProcessControlPtr,
    proxyClass: WorkerProcessControlProxy,
    stubClass: WorkerProcessControlStub,
    validateRequest: validateWorkerProcessControlRequest,
    validateResponse: null,
  };
  WorkerProcessControlStub.prototype.validator = validateWorkerProcessControlRequest;
  WorkerProcessControlProxy.prototype.validator = null;
  exports.MouseButton = MouseButton;
  exports.TouchEventType = TouchEventType;
  exports.UrlForwarderState = UrlForwarderState;
  exports.ProtocolErrorCode = ProtocolErrorCode;
  exports.AudioPacket = AudioPacket;
  exports.ClipboardEvent = ClipboardEvent;
  exports.KeyEvent = KeyEvent;
  exports.MouseEvent = MouseEvent;
  exports.TextEvent = TextEvent;
  exports.TouchEventPoint = TouchEventPoint;
  exports.TouchEvent = TouchEvent;
  exports.DesktopEnvironmentOptions = DesktopEnvironmentOptions;
  exports.ScreenResolution = ScreenResolution;
  exports.FileTransferError = FileTransferError;
  exports.BeginFileReadSuccess = BeginFileReadSuccess;
  exports.BeginFileWriteSuccess = BeginFileWriteSuccess;
  exports.VideoTrackLayout = VideoTrackLayout;
  exports.VideoLayout = VideoLayout;
  exports.ReadChunkResult = ReadChunkResult;
  exports.BeginFileReadResult = BeginFileReadResult;
  exports.BeginFileWriteResult = BeginFileWriteResult;
  exports.CaptureResult = CaptureResult;
  exports.DesktopSessionRequestHandler = DesktopSessionRequestHandler;
  exports.DesktopSessionRequestHandlerPtr = DesktopSessionRequestHandlerPtr;
  exports.DesktopSessionRequestHandlerAssociatedPtr = DesktopSessionRequestHandlerAssociatedPtr;
  exports.DesktopSessionManager = DesktopSessionManager;
  exports.DesktopSessionManagerPtr = DesktopSessionManagerPtr;
  exports.DesktopSessionManagerAssociatedPtr = DesktopSessionManagerAssociatedPtr;
  exports.DesktopSessionAgent = DesktopSessionAgent;
  exports.DesktopSessionAgentPtr = DesktopSessionAgentPtr;
  exports.DesktopSessionAgentAssociatedPtr = DesktopSessionAgentAssociatedPtr;
  exports.FileWriter = FileWriter;
  exports.FileWriterPtr = FileWriterPtr;
  exports.FileWriterAssociatedPtr = FileWriterAssociatedPtr;
  exports.FileReader = FileReader;
  exports.FileReaderPtr = FileReaderPtr;
  exports.FileReaderAssociatedPtr = FileReaderAssociatedPtr;
  exports.DesktopSessionControl = DesktopSessionControl;
  exports.DesktopSessionControlPtr = DesktopSessionControlPtr;
  exports.DesktopSessionControlAssociatedPtr = DesktopSessionControlAssociatedPtr;
  exports.DesktopSessionEventHandler = DesktopSessionEventHandler;
  exports.DesktopSessionEventHandlerPtr = DesktopSessionEventHandlerPtr;
  exports.DesktopSessionEventHandlerAssociatedPtr = DesktopSessionEventHandlerAssociatedPtr;
  exports.DesktopSessionStateHandler = DesktopSessionStateHandler;
  exports.DesktopSessionStateHandlerPtr = DesktopSessionStateHandlerPtr;
  exports.DesktopSessionStateHandlerAssociatedPtr = DesktopSessionStateHandlerAssociatedPtr;
  exports.WorkerProcessControl = WorkerProcessControl;
  exports.WorkerProcessControlPtr = WorkerProcessControlPtr;
  exports.WorkerProcessControlAssociatedPtr = WorkerProcessControlAssociatedPtr;
})();