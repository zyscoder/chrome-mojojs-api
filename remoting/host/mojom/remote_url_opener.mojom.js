// remoting/host/mojom/remote_url_opener.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'remoting/host/mojom/remote_url_opener.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('remoting.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../url/mojom/url.mojom.js');
  }


  var OpenUrlResult = {};
  OpenUrlResult.UNSPECIFIED_OPEN_URL_RESULT = 0;
  OpenUrlResult.SUCCESS = 1;
  OpenUrlResult.FAILURE = 2;
  OpenUrlResult.LOCAL_FALLBACK = 3;
  OpenUrlResult.MIN_VALUE = 0;
  OpenUrlResult.MAX_VALUE = 3;

  OpenUrlResult.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  OpenUrlResult.toKnownEnumValue = function(value) {
    return value;
  };

  OpenUrlResult.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function RemoteUrlOpener_OpenUrl_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RemoteUrlOpener_OpenUrl_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  RemoteUrlOpener_OpenUrl_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RemoteUrlOpener_OpenUrl_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RemoteUrlOpener_OpenUrl_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RemoteUrlOpener_OpenUrl_Params.encodedSize = codec.kStructHeaderSize + 8;

  RemoteUrlOpener_OpenUrl_Params.decode = function(decoder) {
    var packed;
    var val = new RemoteUrlOpener_OpenUrl_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  RemoteUrlOpener_OpenUrl_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RemoteUrlOpener_OpenUrl_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function RemoteUrlOpener_OpenUrl_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RemoteUrlOpener_OpenUrl_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  RemoteUrlOpener_OpenUrl_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RemoteUrlOpener_OpenUrl_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate RemoteUrlOpener_OpenUrl_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, OpenUrlResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RemoteUrlOpener_OpenUrl_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  RemoteUrlOpener_OpenUrl_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new RemoteUrlOpener_OpenUrl_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(OpenUrlResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  RemoteUrlOpener_OpenUrl_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RemoteUrlOpener_OpenUrl_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kRemoteUrlOpener_OpenUrl_Name = 208818985;

  function RemoteUrlOpenerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(RemoteUrlOpener,
                                                   handleOrPtrInfo);
  }

  function RemoteUrlOpenerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        RemoteUrlOpener, associatedInterfacePtrInfo);
  }

  RemoteUrlOpenerAssociatedPtr.prototype =
      Object.create(RemoteUrlOpenerPtr.prototype);
  RemoteUrlOpenerAssociatedPtr.prototype.constructor =
      RemoteUrlOpenerAssociatedPtr;

  function RemoteUrlOpenerProxy(receiver) {
    this.receiver_ = receiver;
  }
  RemoteUrlOpenerPtr.prototype.openUrl = function() {
    return RemoteUrlOpenerProxy.prototype.openUrl
        .apply(this.ptr.getProxy(), arguments);
  };

  RemoteUrlOpenerProxy.prototype.openUrl = function(url) {
    var params_ = new RemoteUrlOpener_OpenUrl_Params();
    params_.url = url;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kRemoteUrlOpener_OpenUrl_Name,
          codec.align(RemoteUrlOpener_OpenUrl_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(RemoteUrlOpener_OpenUrl_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(RemoteUrlOpener_OpenUrl_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function RemoteUrlOpenerStub(delegate) {
    this.delegate_ = delegate;
  }
  RemoteUrlOpenerStub.prototype.openUrl = function(url) {
    return this.delegate_ && this.delegate_.openUrl && this.delegate_.openUrl(url);
  }

  RemoteUrlOpenerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  RemoteUrlOpenerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kRemoteUrlOpener_OpenUrl_Name:
      var params = reader.decodeStruct(RemoteUrlOpener_OpenUrl_Params);
      this.openUrl(params.url).then(function(response) {
        var responseParams =
            new RemoteUrlOpener_OpenUrl_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kRemoteUrlOpener_OpenUrl_Name,
            codec.align(RemoteUrlOpener_OpenUrl_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(RemoteUrlOpener_OpenUrl_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateRemoteUrlOpenerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kRemoteUrlOpener_OpenUrl_Name:
        if (message.expectsResponse())
          paramsClass = RemoteUrlOpener_OpenUrl_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateRemoteUrlOpenerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kRemoteUrlOpener_OpenUrl_Name:
        if (message.isResponse())
          paramsClass = RemoteUrlOpener_OpenUrl_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var RemoteUrlOpener = {
    name: 'remoting.mojom.RemoteUrlOpener',
    kVersion: 0,
    ptrClass: RemoteUrlOpenerPtr,
    proxyClass: RemoteUrlOpenerProxy,
    stubClass: RemoteUrlOpenerStub,
    validateRequest: validateRemoteUrlOpenerRequest,
    validateResponse: validateRemoteUrlOpenerResponse,
  };
  RemoteUrlOpenerStub.prototype.validator = validateRemoteUrlOpenerRequest;
  RemoteUrlOpenerProxy.prototype.validator = validateRemoteUrlOpenerResponse;
  exports.OpenUrlResult = OpenUrlResult;
  exports.RemoteUrlOpener = RemoteUrlOpener;
  exports.RemoteUrlOpenerPtr = RemoteUrlOpenerPtr;
  exports.RemoteUrlOpenerAssociatedPtr = RemoteUrlOpenerAssociatedPtr;
})();