// remoting/host/mojom/keyboard_layout.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'remoting/host/mojom/keyboard_layout.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('remoting.mojom');


  var LayoutKeyFunction = {};
  LayoutKeyFunction.kUnknown = 0;
  LayoutKeyFunction.kControl = 1;
  LayoutKeyFunction.kAlt = 2;
  LayoutKeyFunction.kShift = 3;
  LayoutKeyFunction.kMeta = 4;
  LayoutKeyFunction.kAltGr = 5;
  LayoutKeyFunction.kMod5 = 6;
  LayoutKeyFunction.kCompose = 7;
  LayoutKeyFunction.kNumLock = 8;
  LayoutKeyFunction.kCapsLock = 9;
  LayoutKeyFunction.kScrollLock = 10;
  LayoutKeyFunction.kBackspace = 11;
  LayoutKeyFunction.kEnter = 12;
  LayoutKeyFunction.kTab = 13;
  LayoutKeyFunction.kInsert = 14;
  LayoutKeyFunction.kDelete = 15;
  LayoutKeyFunction.kHome = 16;
  LayoutKeyFunction.kEnd = 17;
  LayoutKeyFunction.kPageUp = 18;
  LayoutKeyFunction.kPageDown = 19;
  LayoutKeyFunction.kClear = 20;
  LayoutKeyFunction.kArrowUp = 21;
  LayoutKeyFunction.kArrowDown = 22;
  LayoutKeyFunction.kArrowLeft = 23;
  LayoutKeyFunction.kArrowRight = 24;
  LayoutKeyFunction.kF1 = 25;
  LayoutKeyFunction.kF2 = 26;
  LayoutKeyFunction.kF3 = 27;
  LayoutKeyFunction.kF4 = 28;
  LayoutKeyFunction.kF5 = 29;
  LayoutKeyFunction.kF6 = 30;
  LayoutKeyFunction.kF7 = 31;
  LayoutKeyFunction.kF8 = 32;
  LayoutKeyFunction.kF9 = 33;
  LayoutKeyFunction.kF10 = 34;
  LayoutKeyFunction.kF11 = 35;
  LayoutKeyFunction.kF12 = 36;
  LayoutKeyFunction.kF13 = 37;
  LayoutKeyFunction.kF14 = 38;
  LayoutKeyFunction.kF15 = 39;
  LayoutKeyFunction.kF16 = 40;
  LayoutKeyFunction.kF17 = 41;
  LayoutKeyFunction.kF18 = 42;
  LayoutKeyFunction.kF19 = 43;
  LayoutKeyFunction.kF20 = 44;
  LayoutKeyFunction.kF21 = 45;
  LayoutKeyFunction.kF22 = 46;
  LayoutKeyFunction.kF23 = 47;
  LayoutKeyFunction.kF24 = 48;
  LayoutKeyFunction.kEscape = 49;
  LayoutKeyFunction.kContextMenu = 50;
  LayoutKeyFunction.kPause = 51;
  LayoutKeyFunction.kPrintScreen = 52;
  LayoutKeyFunction.kHankakuZenkakuKanji = 53;
  LayoutKeyFunction.kHenkan = 54;
  LayoutKeyFunction.kMuhenkan = 55;
  LayoutKeyFunction.kKatakanaHiriganaRomaji = 56;
  LayoutKeyFunction.kKana = 57;
  LayoutKeyFunction.kEisu = 58;
  LayoutKeyFunction.kHanYeong = 59;
  LayoutKeyFunction.kHanja = 60;
  LayoutKeyFunction.kOption = 61;
  LayoutKeyFunction.kCommand = 62;
  LayoutKeyFunction.kSearch = 63;
  LayoutKeyFunction.MIN_VALUE = 0;
  LayoutKeyFunction.MAX_VALUE = 63;

  LayoutKeyFunction.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      return true;
    }
    return false;
  };

  LayoutKeyFunction.toKnownEnumValue = function(value) {
    return value;
  };

  LayoutKeyFunction.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function KeyBehavior(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  KeyBehavior.prototype.initDefaults_ = function() {
    this.actions = null;
  };
  KeyBehavior.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  KeyBehavior.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate KeyBehavior.actions
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, codec.Uint32, KeyAction, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  KeyBehavior.encodedSize = codec.kStructHeaderSize + 8;

  KeyBehavior.decode = function(decoder) {
    var packed;
    var val = new KeyBehavior();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.actions =
        decoder.decodeMapPointer(codec.Uint32, KeyAction);
    return val;
  };

  KeyBehavior.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(KeyBehavior.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(codec.Uint32, KeyAction, val.actions);
  };
  function KeyboardLayout(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  KeyboardLayout.prototype.initDefaults_ = function() {
    this.keys = null;
  };
  KeyboardLayout.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  KeyboardLayout.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate KeyboardLayout.keys
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, codec.Uint32, new codec.PointerTo(KeyBehavior), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  KeyboardLayout.encodedSize = codec.kStructHeaderSize + 8;

  KeyboardLayout.decode = function(decoder) {
    var packed;
    var val = new KeyboardLayout();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.keys =
        decoder.decodeMapPointer(codec.Uint32, new codec.PointerTo(KeyBehavior));
    return val;
  };

  KeyboardLayout.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(KeyboardLayout.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(codec.Uint32, new codec.PointerTo(KeyBehavior), val.keys);
  };

  function KeyAction(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  KeyAction.Tags = {
    function: 0,
    character: 1,
  };

  KeyAction.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  KeyAction.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "function",
        "character",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a KeyAction member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(KeyAction.prototype, "function", {
    get: function() {
      if (this.$tag != KeyAction.Tags.function) {
        throw new ReferenceError(
            "KeyAction.function is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = KeyAction.Tags.function;
      this.$data = value;
    }
  });
  Object.defineProperty(KeyAction.prototype, "character", {
    get: function() {
      if (this.$tag != KeyAction.Tags.character) {
        throw new ReferenceError(
            "KeyAction.character is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = KeyAction.Tags.character;
      this.$data = value;
    }
  });


    KeyAction.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case KeyAction.Tags.function:
          encoder.encodeStruct(codec.Int32, val.function);
          break;
        case KeyAction.Tags.character:
          encoder.encodeStruct(codec.String, val.character);
          break;
      }
      encoder.align();
    };


    KeyAction.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new KeyAction();
      var tag = decoder.readUint32();
      switch (tag) {
        case KeyAction.Tags.function:
          result.function = decoder.decodeStruct(new codec.Enum(LayoutKeyFunction));
          break;
        case KeyAction.Tags.character:
          result.character = decoder.decodeStruct(codec.String);
          break;
      }
      decoder.align();

      return result;
    };


    KeyAction.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case KeyAction.Tags.function:
          

    // validate KeyAction.function
    err = messageValidator.validateEnum(data_offset, LayoutKeyFunction);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case KeyAction.Tags.character:
          

    // validate KeyAction.character
    err = messageValidator.validateStringPointer(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  KeyAction.encodedSize = 16;
  exports.LayoutKeyFunction = LayoutKeyFunction;
  exports.KeyBehavior = KeyBehavior;
  exports.KeyboardLayout = KeyboardLayout;
  exports.KeyAction = KeyAction;
})();