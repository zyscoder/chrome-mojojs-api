// remoting/host/mojom/remote_support.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'remoting/host/mojom/remote_support.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('remoting.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../mojo/public/mojom/base/time.mojom.js');
  }


  var StartSupportSessionError = {};
  StartSupportSessionError.kUnknown = 0;
  StartSupportSessionError.kExistingAdminSession = 1;
  StartSupportSessionError.MIN_VALUE = 0;
  StartSupportSessionError.MAX_VALUE = 1;
  StartSupportSessionError.DEFAULT_VALUE = 0;

  StartSupportSessionError.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  StartSupportSessionError.toKnownEnumValue = function(value) {
    if (this.isKnownEnumValue(value))
      return value;
    return this.DEFAULT_VALUE;
  };

  StartSupportSessionError.validate = function(enumValue) {
    const isExtensible = true;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function SupportHostDetails(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportHostDetails.prototype.initDefaults_ = function() {
    this.hostVersion = null;
    this.supportedFeatures = null;
  };
  SupportHostDetails.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportHostDetails.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SupportHostDetails.hostVersion
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SupportHostDetails.supportedFeatures
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SupportHostDetails.encodedSize = codec.kStructHeaderSize + 16;

  SupportHostDetails.decode = function(decoder) {
    var packed;
    var val = new SupportHostDetails();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.hostVersion =
        decoder.decodeStruct(codec.String);
    val.supportedFeatures =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  SupportHostDetails.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportHostDetails.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.hostVersion);
    encoder.encodeArrayPointer(codec.String, val.supportedFeatures);
  };
  function SupportSessionParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportSessionParams.prototype.initDefaults_ = function() {
    this.userName = null;
    this.oauthAccessToken = null;
    this.authorizedHelper = null;
  };
  SupportSessionParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportSessionParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24},
      {version: 2, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SupportSessionParams.userName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SupportSessionParams.oauthAccessToken
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;



    // version check SupportSessionParams.authorizedHelper
    if (!messageValidator.isFieldInStructVersion(offset, 2))
      return validator.validationError.NONE;
    // validate SupportSessionParams.authorizedHelper
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SupportSessionParams.encodedSize = codec.kStructHeaderSize + 24;

  SupportSessionParams.decode = function(decoder) {
    var packed;
    var val = new SupportSessionParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.userName =
        decoder.decodeStruct(codec.String);
    val.oauthAccessToken =
        decoder.decodeStruct(codec.String);
    if (version >= 2) {
      val.authorizedHelper =
          decoder.decodeStruct(codec.NullableString);
    } else {
      val.authorizedHelper = null;
    }
    return val;
  };

  SupportSessionParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportSessionParams.encodedSize);
    encoder.writeUint32(2);
    encoder.encodeStruct(codec.String, val.userName);
    encoder.encodeStruct(codec.String, val.oauthAccessToken);
    encoder.encodeStruct(codec.NullableString, val.authorizedHelper);
  };
  function NatPolicyState(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  NatPolicyState.prototype.initDefaults_ = function() {
    this.natEnabled = false;
    this.relayEnabled = false;
  };
  NatPolicyState.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  NatPolicyState.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  NatPolicyState.encodedSize = codec.kStructHeaderSize + 8;

  NatPolicyState.decode = function(decoder) {
    var packed;
    var val = new NatPolicyState();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.natEnabled = (packed >> 0) & 1 ? true : false;
    val.relayEnabled = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  NatPolicyState.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(NatPolicyState.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.natEnabled & 1) << 0
    packed |= (val.relayEnabled & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SupportHostObserver_OnHostStateStarting_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportHostObserver_OnHostStateStarting_Params.prototype.initDefaults_ = function() {
  };
  SupportHostObserver_OnHostStateStarting_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportHostObserver_OnHostStateStarting_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SupportHostObserver_OnHostStateStarting_Params.encodedSize = codec.kStructHeaderSize + 0;

  SupportHostObserver_OnHostStateStarting_Params.decode = function(decoder) {
    var packed;
    var val = new SupportHostObserver_OnHostStateStarting_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SupportHostObserver_OnHostStateStarting_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportHostObserver_OnHostStateStarting_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SupportHostObserver_OnHostStateRequestedAccessCode_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportHostObserver_OnHostStateRequestedAccessCode_Params.prototype.initDefaults_ = function() {
  };
  SupportHostObserver_OnHostStateRequestedAccessCode_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportHostObserver_OnHostStateRequestedAccessCode_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SupportHostObserver_OnHostStateRequestedAccessCode_Params.encodedSize = codec.kStructHeaderSize + 0;

  SupportHostObserver_OnHostStateRequestedAccessCode_Params.decode = function(decoder) {
    var packed;
    var val = new SupportHostObserver_OnHostStateRequestedAccessCode_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SupportHostObserver_OnHostStateRequestedAccessCode_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportHostObserver_OnHostStateRequestedAccessCode_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SupportHostObserver_OnHostStateReceivedAccessCode_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportHostObserver_OnHostStateReceivedAccessCode_Params.prototype.initDefaults_ = function() {
    this.accessCode = null;
    this.lifetime = null;
  };
  SupportHostObserver_OnHostStateReceivedAccessCode_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportHostObserver_OnHostStateReceivedAccessCode_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SupportHostObserver_OnHostStateReceivedAccessCode_Params.accessCode
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SupportHostObserver_OnHostStateReceivedAccessCode_Params.lifetime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SupportHostObserver_OnHostStateReceivedAccessCode_Params.encodedSize = codec.kStructHeaderSize + 16;

  SupportHostObserver_OnHostStateReceivedAccessCode_Params.decode = function(decoder) {
    var packed;
    var val = new SupportHostObserver_OnHostStateReceivedAccessCode_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.accessCode =
        decoder.decodeStruct(codec.String);
    val.lifetime =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  SupportHostObserver_OnHostStateReceivedAccessCode_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportHostObserver_OnHostStateReceivedAccessCode_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.accessCode);
    encoder.encodeStructPointer(time$.TimeDelta, val.lifetime);
  };
  function SupportHostObserver_OnHostStateConnecting_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportHostObserver_OnHostStateConnecting_Params.prototype.initDefaults_ = function() {
  };
  SupportHostObserver_OnHostStateConnecting_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportHostObserver_OnHostStateConnecting_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SupportHostObserver_OnHostStateConnecting_Params.encodedSize = codec.kStructHeaderSize + 0;

  SupportHostObserver_OnHostStateConnecting_Params.decode = function(decoder) {
    var packed;
    var val = new SupportHostObserver_OnHostStateConnecting_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SupportHostObserver_OnHostStateConnecting_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportHostObserver_OnHostStateConnecting_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SupportHostObserver_OnHostStateConnected_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportHostObserver_OnHostStateConnected_Params.prototype.initDefaults_ = function() {
    this.remoteUsername = null;
  };
  SupportHostObserver_OnHostStateConnected_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportHostObserver_OnHostStateConnected_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SupportHostObserver_OnHostStateConnected_Params.remoteUsername
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SupportHostObserver_OnHostStateConnected_Params.encodedSize = codec.kStructHeaderSize + 8;

  SupportHostObserver_OnHostStateConnected_Params.decode = function(decoder) {
    var packed;
    var val = new SupportHostObserver_OnHostStateConnected_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remoteUsername =
        decoder.decodeStruct(codec.String);
    return val;
  };

  SupportHostObserver_OnHostStateConnected_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportHostObserver_OnHostStateConnected_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.remoteUsername);
  };
  function SupportHostObserver_OnHostStateDisconnected_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportHostObserver_OnHostStateDisconnected_Params.prototype.initDefaults_ = function() {
    this.disconnectReason = null;
  };
  SupportHostObserver_OnHostStateDisconnected_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportHostObserver_OnHostStateDisconnected_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8},
      {version: 1, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // version check SupportHostObserver_OnHostStateDisconnected_Params.disconnectReason
    if (!messageValidator.isFieldInStructVersion(offset, 1))
      return validator.validationError.NONE;
    // validate SupportHostObserver_OnHostStateDisconnected_Params.disconnectReason
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SupportHostObserver_OnHostStateDisconnected_Params.encodedSize = codec.kStructHeaderSize + 8;

  SupportHostObserver_OnHostStateDisconnected_Params.decode = function(decoder) {
    var packed;
    var val = new SupportHostObserver_OnHostStateDisconnected_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    if (version >= 1) {
      val.disconnectReason =
          decoder.decodeStruct(codec.NullableString);
    } else {
      val.disconnectReason = null;
    }
    return val;
  };

  SupportHostObserver_OnHostStateDisconnected_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportHostObserver_OnHostStateDisconnected_Params.encodedSize);
    encoder.writeUint32(1);
    encoder.encodeStruct(codec.NullableString, val.disconnectReason);
  };
  function SupportHostObserver_OnNatPolicyChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportHostObserver_OnNatPolicyChanged_Params.prototype.initDefaults_ = function() {
    this.natPolicyState = null;
  };
  SupportHostObserver_OnNatPolicyChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportHostObserver_OnNatPolicyChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SupportHostObserver_OnNatPolicyChanged_Params.natPolicyState
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, NatPolicyState, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SupportHostObserver_OnNatPolicyChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  SupportHostObserver_OnNatPolicyChanged_Params.decode = function(decoder) {
    var packed;
    var val = new SupportHostObserver_OnNatPolicyChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.natPolicyState =
        decoder.decodeStructPointer(NatPolicyState);
    return val;
  };

  SupportHostObserver_OnNatPolicyChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportHostObserver_OnNatPolicyChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(NatPolicyState, val.natPolicyState);
  };
  function SupportHostObserver_OnHostStateError_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportHostObserver_OnHostStateError_Params.prototype.initDefaults_ = function() {
    this.errorCode = 0;
  };
  SupportHostObserver_OnHostStateError_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportHostObserver_OnHostStateError_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SupportHostObserver_OnHostStateError_Params.encodedSize = codec.kStructHeaderSize + 8;

  SupportHostObserver_OnHostStateError_Params.decode = function(decoder) {
    var packed;
    var val = new SupportHostObserver_OnHostStateError_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.errorCode =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  SupportHostObserver_OnHostStateError_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportHostObserver_OnHostStateError_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.errorCode);
  };
  function SupportHostObserver_OnPolicyError_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportHostObserver_OnPolicyError_Params.prototype.initDefaults_ = function() {
  };
  SupportHostObserver_OnPolicyError_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportHostObserver_OnPolicyError_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SupportHostObserver_OnPolicyError_Params.encodedSize = codec.kStructHeaderSize + 0;

  SupportHostObserver_OnPolicyError_Params.decode = function(decoder) {
    var packed;
    var val = new SupportHostObserver_OnPolicyError_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SupportHostObserver_OnPolicyError_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportHostObserver_OnPolicyError_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SupportHostObserver_OnInvalidDomainError_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SupportHostObserver_OnInvalidDomainError_Params.prototype.initDefaults_ = function() {
  };
  SupportHostObserver_OnInvalidDomainError_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SupportHostObserver_OnInvalidDomainError_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SupportHostObserver_OnInvalidDomainError_Params.encodedSize = codec.kStructHeaderSize + 0;

  SupportHostObserver_OnInvalidDomainError_Params.decode = function(decoder) {
    var packed;
    var val = new SupportHostObserver_OnInvalidDomainError_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SupportHostObserver_OnInvalidDomainError_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SupportHostObserver_OnInvalidDomainError_Params.encodedSize);
    encoder.writeUint32(0);
  };

  function StartSupportSessionResponse(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  StartSupportSessionResponse.Tags = {
    observer: 0,
    supportSessionError: 1,
  };

  StartSupportSessionResponse.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  StartSupportSessionResponse.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "observer",
        "supportSessionError",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a StartSupportSessionResponse member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(StartSupportSessionResponse.prototype, "observer", {
    get: function() {
      if (this.$tag != StartSupportSessionResponse.Tags.observer) {
        throw new ReferenceError(
            "StartSupportSessionResponse.observer is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = StartSupportSessionResponse.Tags.observer;
      this.$data = value;
    }
  });
  Object.defineProperty(StartSupportSessionResponse.prototype, "supportSessionError", {
    get: function() {
      if (this.$tag != StartSupportSessionResponse.Tags.supportSessionError) {
        throw new ReferenceError(
            "StartSupportSessionResponse.supportSessionError is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = StartSupportSessionResponse.Tags.supportSessionError;
      this.$data = value;
    }
  });


    StartSupportSessionResponse.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case StartSupportSessionResponse.Tags.observer:
          encoder.encodeStruct(codec.InterfaceRequest, val.observer);
          break;
        case StartSupportSessionResponse.Tags.supportSessionError:
          encoder.encodeStruct(codec.Int32, val.supportSessionError);
          break;
      }
      encoder.align();
    };


    StartSupportSessionResponse.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new StartSupportSessionResponse();
      var tag = decoder.readUint32();
      switch (tag) {
        case StartSupportSessionResponse.Tags.observer:
          result.observer = decoder.decodeStruct(codec.InterfaceRequest);
          break;
        case StartSupportSessionResponse.Tags.supportSessionError:
          result.supportSessionError = decoder.decodeStruct(new codec.Enum(StartSupportSessionError));
          break;
      }
      decoder.align();

      return result;
    };


    StartSupportSessionResponse.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case StartSupportSessionResponse.Tags.observer:
          

    // validate StartSupportSessionResponse.observer
    err = messageValidator.validateInterfaceRequest(data_offset, false)
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case StartSupportSessionResponse.Tags.supportSessionError:
          

    // validate StartSupportSessionResponse.supportSessionError
    err = messageValidator.validateEnum(data_offset, StartSupportSessionError);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  StartSupportSessionResponse.encodedSize = 16;
  var kSupportHostObserver_OnHostStateStarting_Name = 0;
  var kSupportHostObserver_OnHostStateRequestedAccessCode_Name = 1;
  var kSupportHostObserver_OnHostStateReceivedAccessCode_Name = 2;
  var kSupportHostObserver_OnHostStateConnecting_Name = 3;
  var kSupportHostObserver_OnHostStateConnected_Name = 4;
  var kSupportHostObserver_OnHostStateDisconnected_Name = 6;
  var kSupportHostObserver_OnNatPolicyChanged_Name = 7;
  var kSupportHostObserver_OnHostStateError_Name = 8;
  var kSupportHostObserver_OnPolicyError_Name = 9;
  var kSupportHostObserver_OnInvalidDomainError_Name = 10;

  function SupportHostObserverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SupportHostObserver,
                                                   handleOrPtrInfo);
  }

  function SupportHostObserverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SupportHostObserver, associatedInterfacePtrInfo);
  }

  SupportHostObserverAssociatedPtr.prototype =
      Object.create(SupportHostObserverPtr.prototype);
  SupportHostObserverAssociatedPtr.prototype.constructor =
      SupportHostObserverAssociatedPtr;

  function SupportHostObserverProxy(receiver) {
    this.receiver_ = receiver;
  }
  SupportHostObserverPtr.prototype.onHostStateStarting = function() {
    return SupportHostObserverProxy.prototype.onHostStateStarting
        .apply(this.ptr.getProxy(), arguments);
  };

  SupportHostObserverProxy.prototype.onHostStateStarting = function() {
    var params_ = new SupportHostObserver_OnHostStateStarting_Params();
    var builder = new codec.MessageV0Builder(
        kSupportHostObserver_OnHostStateStarting_Name,
        codec.align(SupportHostObserver_OnHostStateStarting_Params.encodedSize));
    builder.encodeStruct(SupportHostObserver_OnHostStateStarting_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SupportHostObserverPtr.prototype.onHostStateRequestedAccessCode = function() {
    return SupportHostObserverProxy.prototype.onHostStateRequestedAccessCode
        .apply(this.ptr.getProxy(), arguments);
  };

  SupportHostObserverProxy.prototype.onHostStateRequestedAccessCode = function() {
    var params_ = new SupportHostObserver_OnHostStateRequestedAccessCode_Params();
    var builder = new codec.MessageV0Builder(
        kSupportHostObserver_OnHostStateRequestedAccessCode_Name,
        codec.align(SupportHostObserver_OnHostStateRequestedAccessCode_Params.encodedSize));
    builder.encodeStruct(SupportHostObserver_OnHostStateRequestedAccessCode_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SupportHostObserverPtr.prototype.onHostStateReceivedAccessCode = function() {
    return SupportHostObserverProxy.prototype.onHostStateReceivedAccessCode
        .apply(this.ptr.getProxy(), arguments);
  };

  SupportHostObserverProxy.prototype.onHostStateReceivedAccessCode = function(accessCode, lifetime) {
    var params_ = new SupportHostObserver_OnHostStateReceivedAccessCode_Params();
    params_.accessCode = accessCode;
    params_.lifetime = lifetime;
    var builder = new codec.MessageV0Builder(
        kSupportHostObserver_OnHostStateReceivedAccessCode_Name,
        codec.align(SupportHostObserver_OnHostStateReceivedAccessCode_Params.encodedSize));
    builder.encodeStruct(SupportHostObserver_OnHostStateReceivedAccessCode_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SupportHostObserverPtr.prototype.onHostStateConnecting = function() {
    return SupportHostObserverProxy.prototype.onHostStateConnecting
        .apply(this.ptr.getProxy(), arguments);
  };

  SupportHostObserverProxy.prototype.onHostStateConnecting = function() {
    var params_ = new SupportHostObserver_OnHostStateConnecting_Params();
    var builder = new codec.MessageV0Builder(
        kSupportHostObserver_OnHostStateConnecting_Name,
        codec.align(SupportHostObserver_OnHostStateConnecting_Params.encodedSize));
    builder.encodeStruct(SupportHostObserver_OnHostStateConnecting_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SupportHostObserverPtr.prototype.onHostStateConnected = function() {
    return SupportHostObserverProxy.prototype.onHostStateConnected
        .apply(this.ptr.getProxy(), arguments);
  };

  SupportHostObserverProxy.prototype.onHostStateConnected = function(remoteUsername) {
    var params_ = new SupportHostObserver_OnHostStateConnected_Params();
    params_.remoteUsername = remoteUsername;
    var builder = new codec.MessageV0Builder(
        kSupportHostObserver_OnHostStateConnected_Name,
        codec.align(SupportHostObserver_OnHostStateConnected_Params.encodedSize));
    builder.encodeStruct(SupportHostObserver_OnHostStateConnected_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SupportHostObserverPtr.prototype.onHostStateDisconnected = function() {
    return SupportHostObserverProxy.prototype.onHostStateDisconnected
        .apply(this.ptr.getProxy(), arguments);
  };

  SupportHostObserverProxy.prototype.onHostStateDisconnected = function(disconnectReason) {
    var params_ = new SupportHostObserver_OnHostStateDisconnected_Params();
    params_.disconnectReason = disconnectReason;
    var builder = new codec.MessageV0Builder(
        kSupportHostObserver_OnHostStateDisconnected_Name,
        codec.align(SupportHostObserver_OnHostStateDisconnected_Params.encodedSize));
    builder.encodeStruct(SupportHostObserver_OnHostStateDisconnected_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SupportHostObserverPtr.prototype.onNatPolicyChanged = function() {
    return SupportHostObserverProxy.prototype.onNatPolicyChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  SupportHostObserverProxy.prototype.onNatPolicyChanged = function(natPolicyState) {
    var params_ = new SupportHostObserver_OnNatPolicyChanged_Params();
    params_.natPolicyState = natPolicyState;
    var builder = new codec.MessageV0Builder(
        kSupportHostObserver_OnNatPolicyChanged_Name,
        codec.align(SupportHostObserver_OnNatPolicyChanged_Params.encodedSize));
    builder.encodeStruct(SupportHostObserver_OnNatPolicyChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SupportHostObserverPtr.prototype.onHostStateError = function() {
    return SupportHostObserverProxy.prototype.onHostStateError
        .apply(this.ptr.getProxy(), arguments);
  };

  SupportHostObserverProxy.prototype.onHostStateError = function(errorCode) {
    var params_ = new SupportHostObserver_OnHostStateError_Params();
    params_.errorCode = errorCode;
    var builder = new codec.MessageV0Builder(
        kSupportHostObserver_OnHostStateError_Name,
        codec.align(SupportHostObserver_OnHostStateError_Params.encodedSize));
    builder.encodeStruct(SupportHostObserver_OnHostStateError_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SupportHostObserverPtr.prototype.onPolicyError = function() {
    return SupportHostObserverProxy.prototype.onPolicyError
        .apply(this.ptr.getProxy(), arguments);
  };

  SupportHostObserverProxy.prototype.onPolicyError = function() {
    var params_ = new SupportHostObserver_OnPolicyError_Params();
    var builder = new codec.MessageV0Builder(
        kSupportHostObserver_OnPolicyError_Name,
        codec.align(SupportHostObserver_OnPolicyError_Params.encodedSize));
    builder.encodeStruct(SupportHostObserver_OnPolicyError_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  SupportHostObserverPtr.prototype.onInvalidDomainError = function() {
    return SupportHostObserverProxy.prototype.onInvalidDomainError
        .apply(this.ptr.getProxy(), arguments);
  };

  SupportHostObserverProxy.prototype.onInvalidDomainError = function() {
    var params_ = new SupportHostObserver_OnInvalidDomainError_Params();
    var builder = new codec.MessageV0Builder(
        kSupportHostObserver_OnInvalidDomainError_Name,
        codec.align(SupportHostObserver_OnInvalidDomainError_Params.encodedSize));
    builder.encodeStruct(SupportHostObserver_OnInvalidDomainError_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function SupportHostObserverStub(delegate) {
    this.delegate_ = delegate;
  }
  SupportHostObserverStub.prototype.onHostStateStarting = function() {
    return this.delegate_ && this.delegate_.onHostStateStarting && this.delegate_.onHostStateStarting();
  }
  SupportHostObserverStub.prototype.onHostStateRequestedAccessCode = function() {
    return this.delegate_ && this.delegate_.onHostStateRequestedAccessCode && this.delegate_.onHostStateRequestedAccessCode();
  }
  SupportHostObserverStub.prototype.onHostStateReceivedAccessCode = function(accessCode, lifetime) {
    return this.delegate_ && this.delegate_.onHostStateReceivedAccessCode && this.delegate_.onHostStateReceivedAccessCode(accessCode, lifetime);
  }
  SupportHostObserverStub.prototype.onHostStateConnecting = function() {
    return this.delegate_ && this.delegate_.onHostStateConnecting && this.delegate_.onHostStateConnecting();
  }
  SupportHostObserverStub.prototype.onHostStateConnected = function(remoteUsername) {
    return this.delegate_ && this.delegate_.onHostStateConnected && this.delegate_.onHostStateConnected(remoteUsername);
  }
  SupportHostObserverStub.prototype.onHostStateDisconnected = function(disconnectReason) {
    return this.delegate_ && this.delegate_.onHostStateDisconnected && this.delegate_.onHostStateDisconnected(disconnectReason);
  }
  SupportHostObserverStub.prototype.onNatPolicyChanged = function(natPolicyState) {
    return this.delegate_ && this.delegate_.onNatPolicyChanged && this.delegate_.onNatPolicyChanged(natPolicyState);
  }
  SupportHostObserverStub.prototype.onHostStateError = function(errorCode) {
    return this.delegate_ && this.delegate_.onHostStateError && this.delegate_.onHostStateError(errorCode);
  }
  SupportHostObserverStub.prototype.onPolicyError = function() {
    return this.delegate_ && this.delegate_.onPolicyError && this.delegate_.onPolicyError();
  }
  SupportHostObserverStub.prototype.onInvalidDomainError = function() {
    return this.delegate_ && this.delegate_.onInvalidDomainError && this.delegate_.onInvalidDomainError();
  }

  SupportHostObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSupportHostObserver_OnHostStateStarting_Name:
      var params = reader.decodeStruct(SupportHostObserver_OnHostStateStarting_Params);
      this.onHostStateStarting();
      return true;
    case kSupportHostObserver_OnHostStateRequestedAccessCode_Name:
      var params = reader.decodeStruct(SupportHostObserver_OnHostStateRequestedAccessCode_Params);
      this.onHostStateRequestedAccessCode();
      return true;
    case kSupportHostObserver_OnHostStateReceivedAccessCode_Name:
      var params = reader.decodeStruct(SupportHostObserver_OnHostStateReceivedAccessCode_Params);
      this.onHostStateReceivedAccessCode(params.accessCode, params.lifetime);
      return true;
    case kSupportHostObserver_OnHostStateConnecting_Name:
      var params = reader.decodeStruct(SupportHostObserver_OnHostStateConnecting_Params);
      this.onHostStateConnecting();
      return true;
    case kSupportHostObserver_OnHostStateConnected_Name:
      var params = reader.decodeStruct(SupportHostObserver_OnHostStateConnected_Params);
      this.onHostStateConnected(params.remoteUsername);
      return true;
    case kSupportHostObserver_OnHostStateDisconnected_Name:
      var params = reader.decodeStruct(SupportHostObserver_OnHostStateDisconnected_Params);
      this.onHostStateDisconnected(params.disconnectReason);
      return true;
    case kSupportHostObserver_OnNatPolicyChanged_Name:
      var params = reader.decodeStruct(SupportHostObserver_OnNatPolicyChanged_Params);
      this.onNatPolicyChanged(params.natPolicyState);
      return true;
    case kSupportHostObserver_OnHostStateError_Name:
      var params = reader.decodeStruct(SupportHostObserver_OnHostStateError_Params);
      this.onHostStateError(params.errorCode);
      return true;
    case kSupportHostObserver_OnPolicyError_Name:
      var params = reader.decodeStruct(SupportHostObserver_OnPolicyError_Params);
      this.onPolicyError();
      return true;
    case kSupportHostObserver_OnInvalidDomainError_Name:
      var params = reader.decodeStruct(SupportHostObserver_OnInvalidDomainError_Params);
      this.onInvalidDomainError();
      return true;
    default:
      return false;
    }
  };

  SupportHostObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateSupportHostObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSupportHostObserver_OnHostStateStarting_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SupportHostObserver_OnHostStateStarting_Params;
      break;
      case kSupportHostObserver_OnHostStateRequestedAccessCode_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SupportHostObserver_OnHostStateRequestedAccessCode_Params;
      break;
      case kSupportHostObserver_OnHostStateReceivedAccessCode_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SupportHostObserver_OnHostStateReceivedAccessCode_Params;
      break;
      case kSupportHostObserver_OnHostStateConnecting_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SupportHostObserver_OnHostStateConnecting_Params;
      break;
      case kSupportHostObserver_OnHostStateConnected_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SupportHostObserver_OnHostStateConnected_Params;
      break;
      case kSupportHostObserver_OnHostStateDisconnected_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SupportHostObserver_OnHostStateDisconnected_Params;
      break;
      case kSupportHostObserver_OnNatPolicyChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SupportHostObserver_OnNatPolicyChanged_Params;
      break;
      case kSupportHostObserver_OnHostStateError_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SupportHostObserver_OnHostStateError_Params;
      break;
      case kSupportHostObserver_OnPolicyError_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SupportHostObserver_OnPolicyError_Params;
      break;
      case kSupportHostObserver_OnInvalidDomainError_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SupportHostObserver_OnInvalidDomainError_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSupportHostObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var SupportHostObserver = {
    name: 'remoting.mojom.SupportHostObserver',
    kVersion: 1,
    ptrClass: SupportHostObserverPtr,
    proxyClass: SupportHostObserverProxy,
    stubClass: SupportHostObserverStub,
    validateRequest: validateSupportHostObserverRequest,
    validateResponse: null,
  };
  SupportHostObserverStub.prototype.validator = validateSupportHostObserverRequest;
  SupportHostObserverProxy.prototype.validator = null;
  exports.StartSupportSessionError = StartSupportSessionError;
  exports.SupportHostDetails = SupportHostDetails;
  exports.SupportSessionParams = SupportSessionParams;
  exports.NatPolicyState = NatPolicyState;
  exports.StartSupportSessionResponse = StartSupportSessionResponse;
  exports.SupportHostObserver = SupportHostObserver;
  exports.SupportHostObserverPtr = SupportHostObserverPtr;
  exports.SupportHostObserverAssociatedPtr = SupportHostObserverAssociatedPtr;
})();