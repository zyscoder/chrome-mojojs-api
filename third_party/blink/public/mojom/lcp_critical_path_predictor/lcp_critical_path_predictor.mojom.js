// third_party/blink/public/mojom/lcp_critical_path_predictor/lcp_critical_path_predictor.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/lcp_critical_path_predictor/lcp_critical_path_predictor.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var byte_string$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/byte_string.mojom', '../../../../../mojo/public/mojom/base/byte_string.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function LCPCriticalPathPredictorNavigationTimeHint(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LCPCriticalPathPredictorNavigationTimeHint.prototype.initDefaults_ = function() {
    this.lcpElementLocators = null;
    this.lcpInfluencerScripts = null;
    this.fetchedFonts = null;
  };
  LCPCriticalPathPredictorNavigationTimeHint.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LCPCriticalPathPredictorNavigationTimeHint.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LCPCriticalPathPredictorNavigationTimeHint.lcpElementLocators
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(byte_string$.ByteString), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LCPCriticalPathPredictorNavigationTimeHint.lcpInfluencerScripts
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(url$.Url), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LCPCriticalPathPredictorNavigationTimeHint.fetchedFonts
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(url$.Url), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LCPCriticalPathPredictorNavigationTimeHint.encodedSize = codec.kStructHeaderSize + 24;

  LCPCriticalPathPredictorNavigationTimeHint.decode = function(decoder) {
    var packed;
    var val = new LCPCriticalPathPredictorNavigationTimeHint();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.lcpElementLocators =
        decoder.decodeArrayPointer(new codec.PointerTo(byte_string$.ByteString));
    val.lcpInfluencerScripts =
        decoder.decodeArrayPointer(new codec.PointerTo(url$.Url));
    val.fetchedFonts =
        decoder.decodeArrayPointer(new codec.PointerTo(url$.Url));
    return val;
  };

  LCPCriticalPathPredictorNavigationTimeHint.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LCPCriticalPathPredictorNavigationTimeHint.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(byte_string$.ByteString), val.lcpElementLocators);
    encoder.encodeArrayPointer(new codec.PointerTo(url$.Url), val.lcpInfluencerScripts);
    encoder.encodeArrayPointer(new codec.PointerTo(url$.Url), val.fetchedFonts);
  };
  function LCPCriticalPathPredictorHost_SetLcpElementLocator_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LCPCriticalPathPredictorHost_SetLcpElementLocator_Params.prototype.initDefaults_ = function() {
    this.lcpElementLocator = null;
  };
  LCPCriticalPathPredictorHost_SetLcpElementLocator_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LCPCriticalPathPredictorHost_SetLcpElementLocator_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LCPCriticalPathPredictorHost_SetLcpElementLocator_Params.lcpElementLocator
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, byte_string$.ByteString, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LCPCriticalPathPredictorHost_SetLcpElementLocator_Params.encodedSize = codec.kStructHeaderSize + 8;

  LCPCriticalPathPredictorHost_SetLcpElementLocator_Params.decode = function(decoder) {
    var packed;
    var val = new LCPCriticalPathPredictorHost_SetLcpElementLocator_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.lcpElementLocator =
        decoder.decodeStructPointer(byte_string$.ByteString);
    return val;
  };

  LCPCriticalPathPredictorHost_SetLcpElementLocator_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LCPCriticalPathPredictorHost_SetLcpElementLocator_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(byte_string$.ByteString, val.lcpElementLocator);
  };
  function LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params.prototype.initDefaults_ = function() {
    this.lcpInfluencerScripts = null;
  };
  LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params.lcpInfluencerScripts
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(url$.Url), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params.encodedSize = codec.kStructHeaderSize + 8;

  LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params.decode = function(decoder) {
    var packed;
    var val = new LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.lcpInfluencerScripts =
        decoder.decodeArrayPointer(new codec.PointerTo(url$.Url));
    return val;
  };

  LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(url$.Url), val.lcpInfluencerScripts);
  };
  function LCPCriticalPathPredictorHost_NotifyFetchedFont_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LCPCriticalPathPredictorHost_NotifyFetchedFont_Params.prototype.initDefaults_ = function() {
    this.fontUrl = null;
  };
  LCPCriticalPathPredictorHost_NotifyFetchedFont_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LCPCriticalPathPredictorHost_NotifyFetchedFont_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LCPCriticalPathPredictorHost_NotifyFetchedFont_Params.fontUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LCPCriticalPathPredictorHost_NotifyFetchedFont_Params.encodedSize = codec.kStructHeaderSize + 8;

  LCPCriticalPathPredictorHost_NotifyFetchedFont_Params.decode = function(decoder) {
    var packed;
    var val = new LCPCriticalPathPredictorHost_NotifyFetchedFont_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.fontUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  LCPCriticalPathPredictorHost_NotifyFetchedFont_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LCPCriticalPathPredictorHost_NotifyFetchedFont_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.fontUrl);
  };
  var kLCPCriticalPathPredictorHost_SetLcpElementLocator_Name = 0;
  var kLCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Name = 1;
  var kLCPCriticalPathPredictorHost_NotifyFetchedFont_Name = 2;

  function LCPCriticalPathPredictorHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(LCPCriticalPathPredictorHost,
                                                   handleOrPtrInfo);
  }

  function LCPCriticalPathPredictorHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        LCPCriticalPathPredictorHost, associatedInterfacePtrInfo);
  }

  LCPCriticalPathPredictorHostAssociatedPtr.prototype =
      Object.create(LCPCriticalPathPredictorHostPtr.prototype);
  LCPCriticalPathPredictorHostAssociatedPtr.prototype.constructor =
      LCPCriticalPathPredictorHostAssociatedPtr;

  function LCPCriticalPathPredictorHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  LCPCriticalPathPredictorHostPtr.prototype.setLcpElementLocator = function() {
    return LCPCriticalPathPredictorHostProxy.prototype.setLcpElementLocator
        .apply(this.ptr.getProxy(), arguments);
  };

  LCPCriticalPathPredictorHostProxy.prototype.setLcpElementLocator = function(lcpElementLocator) {
    var params_ = new LCPCriticalPathPredictorHost_SetLcpElementLocator_Params();
    params_.lcpElementLocator = lcpElementLocator;
    var builder = new codec.MessageV0Builder(
        kLCPCriticalPathPredictorHost_SetLcpElementLocator_Name,
        codec.align(LCPCriticalPathPredictorHost_SetLcpElementLocator_Params.encodedSize));
    builder.encodeStruct(LCPCriticalPathPredictorHost_SetLcpElementLocator_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  LCPCriticalPathPredictorHostPtr.prototype.setLcpInfluencerScriptUrls = function() {
    return LCPCriticalPathPredictorHostProxy.prototype.setLcpInfluencerScriptUrls
        .apply(this.ptr.getProxy(), arguments);
  };

  LCPCriticalPathPredictorHostProxy.prototype.setLcpInfluencerScriptUrls = function(lcpInfluencerScripts) {
    var params_ = new LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params();
    params_.lcpInfluencerScripts = lcpInfluencerScripts;
    var builder = new codec.MessageV0Builder(
        kLCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Name,
        codec.align(LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params.encodedSize));
    builder.encodeStruct(LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  LCPCriticalPathPredictorHostPtr.prototype.notifyFetchedFont = function() {
    return LCPCriticalPathPredictorHostProxy.prototype.notifyFetchedFont
        .apply(this.ptr.getProxy(), arguments);
  };

  LCPCriticalPathPredictorHostProxy.prototype.notifyFetchedFont = function(fontUrl) {
    var params_ = new LCPCriticalPathPredictorHost_NotifyFetchedFont_Params();
    params_.fontUrl = fontUrl;
    var builder = new codec.MessageV0Builder(
        kLCPCriticalPathPredictorHost_NotifyFetchedFont_Name,
        codec.align(LCPCriticalPathPredictorHost_NotifyFetchedFont_Params.encodedSize));
    builder.encodeStruct(LCPCriticalPathPredictorHost_NotifyFetchedFont_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function LCPCriticalPathPredictorHostStub(delegate) {
    this.delegate_ = delegate;
  }
  LCPCriticalPathPredictorHostStub.prototype.setLcpElementLocator = function(lcpElementLocator) {
    return this.delegate_ && this.delegate_.setLcpElementLocator && this.delegate_.setLcpElementLocator(lcpElementLocator);
  }
  LCPCriticalPathPredictorHostStub.prototype.setLcpInfluencerScriptUrls = function(lcpInfluencerScripts) {
    return this.delegate_ && this.delegate_.setLcpInfluencerScriptUrls && this.delegate_.setLcpInfluencerScriptUrls(lcpInfluencerScripts);
  }
  LCPCriticalPathPredictorHostStub.prototype.notifyFetchedFont = function(fontUrl) {
    return this.delegate_ && this.delegate_.notifyFetchedFont && this.delegate_.notifyFetchedFont(fontUrl);
  }

  LCPCriticalPathPredictorHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kLCPCriticalPathPredictorHost_SetLcpElementLocator_Name:
      var params = reader.decodeStruct(LCPCriticalPathPredictorHost_SetLcpElementLocator_Params);
      this.setLcpElementLocator(params.lcpElementLocator);
      return true;
    case kLCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Name:
      var params = reader.decodeStruct(LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params);
      this.setLcpInfluencerScriptUrls(params.lcpInfluencerScripts);
      return true;
    case kLCPCriticalPathPredictorHost_NotifyFetchedFont_Name:
      var params = reader.decodeStruct(LCPCriticalPathPredictorHost_NotifyFetchedFont_Params);
      this.notifyFetchedFont(params.fontUrl);
      return true;
    default:
      return false;
    }
  };

  LCPCriticalPathPredictorHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateLCPCriticalPathPredictorHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kLCPCriticalPathPredictorHost_SetLcpElementLocator_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = LCPCriticalPathPredictorHost_SetLcpElementLocator_Params;
      break;
      case kLCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = LCPCriticalPathPredictorHost_SetLcpInfluencerScriptUrls_Params;
      break;
      case kLCPCriticalPathPredictorHost_NotifyFetchedFont_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = LCPCriticalPathPredictorHost_NotifyFetchedFont_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateLCPCriticalPathPredictorHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var LCPCriticalPathPredictorHost = {
    name: 'blink.mojom.LCPCriticalPathPredictorHost',
    kVersion: 0,
    ptrClass: LCPCriticalPathPredictorHostPtr,
    proxyClass: LCPCriticalPathPredictorHostProxy,
    stubClass: LCPCriticalPathPredictorHostStub,
    validateRequest: validateLCPCriticalPathPredictorHostRequest,
    validateResponse: null,
  };
  LCPCriticalPathPredictorHostStub.prototype.validator = validateLCPCriticalPathPredictorHostRequest;
  LCPCriticalPathPredictorHostProxy.prototype.validator = null;
  exports.LCPCriticalPathPredictorNavigationTimeHint = LCPCriticalPathPredictorNavigationTimeHint;
  exports.LCPCriticalPathPredictorHost = LCPCriticalPathPredictorHost;
  exports.LCPCriticalPathPredictorHostPtr = LCPCriticalPathPredictorHostPtr;
  exports.LCPCriticalPathPredictorHostAssociatedPtr = LCPCriticalPathPredictorHostAssociatedPtr;
})();