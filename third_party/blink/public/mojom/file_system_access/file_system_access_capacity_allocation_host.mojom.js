// third_party/blink/public/mojom/file_system_access/file_system_access_capacity_allocation_host.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/file_system_access/file_system_access_capacity_allocation_host.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');



  function FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params.prototype.initDefaults_ = function() {
    this.capacityDelta = 0;
  };
  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params.encodedSize = codec.kStructHeaderSize + 8;

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params.decode = function(decoder) {
    var packed;
    var val = new FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.capacityDelta =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.capacityDelta);
  };
  function FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams.prototype.initDefaults_ = function() {
    this.grantedCapacityDelta = 0;
  };
  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.grantedCapacityDelta =
        decoder.decodeStruct(codec.Int64);
    return val;
  };

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.grantedCapacityDelta);
  };
  var kFileSystemAccessCapacityAllocationHost_RequestCapacityChange_Name = 0;

  function FileSystemAccessCapacityAllocationHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FileSystemAccessCapacityAllocationHost,
                                                   handleOrPtrInfo);
  }

  function FileSystemAccessCapacityAllocationHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FileSystemAccessCapacityAllocationHost, associatedInterfacePtrInfo);
  }

  FileSystemAccessCapacityAllocationHostAssociatedPtr.prototype =
      Object.create(FileSystemAccessCapacityAllocationHostPtr.prototype);
  FileSystemAccessCapacityAllocationHostAssociatedPtr.prototype.constructor =
      FileSystemAccessCapacityAllocationHostAssociatedPtr;

  function FileSystemAccessCapacityAllocationHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  FileSystemAccessCapacityAllocationHostPtr.prototype.requestCapacityChange = function() {
    return FileSystemAccessCapacityAllocationHostProxy.prototype.requestCapacityChange
        .apply(this.ptr.getProxy(), arguments);
  };

  FileSystemAccessCapacityAllocationHostProxy.prototype.requestCapacityChange = function(capacityDelta) {
    var params_ = new FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params();
    params_.capacityDelta = capacityDelta;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFileSystemAccessCapacityAllocationHost_RequestCapacityChange_Name,
          codec.align(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function FileSystemAccessCapacityAllocationHostStub(delegate) {
    this.delegate_ = delegate;
  }
  FileSystemAccessCapacityAllocationHostStub.prototype.requestCapacityChange = function(capacityDelta) {
    return this.delegate_ && this.delegate_.requestCapacityChange && this.delegate_.requestCapacityChange(capacityDelta);
  }

  FileSystemAccessCapacityAllocationHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  FileSystemAccessCapacityAllocationHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFileSystemAccessCapacityAllocationHost_RequestCapacityChange_Name:
      var params = reader.decodeStruct(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params);
      this.requestCapacityChange(params.capacityDelta).then(function(response) {
        var responseParams =
            new FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams();
        responseParams.grantedCapacityDelta = response.grantedCapacityDelta;
        var builder = new codec.MessageV1Builder(
            kFileSystemAccessCapacityAllocationHost_RequestCapacityChange_Name,
            codec.align(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFileSystemAccessCapacityAllocationHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFileSystemAccessCapacityAllocationHost_RequestCapacityChange_Name:
        if (message.expectsResponse())
          paramsClass = FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFileSystemAccessCapacityAllocationHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFileSystemAccessCapacityAllocationHost_RequestCapacityChange_Name:
        if (message.isResponse())
          paramsClass = FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var FileSystemAccessCapacityAllocationHost = {
    name: 'blink.mojom.FileSystemAccessCapacityAllocationHost',
    kVersion: 0,
    ptrClass: FileSystemAccessCapacityAllocationHostPtr,
    proxyClass: FileSystemAccessCapacityAllocationHostProxy,
    stubClass: FileSystemAccessCapacityAllocationHostStub,
    validateRequest: validateFileSystemAccessCapacityAllocationHostRequest,
    validateResponse: validateFileSystemAccessCapacityAllocationHostResponse,
  };
  FileSystemAccessCapacityAllocationHostStub.prototype.validator = validateFileSystemAccessCapacityAllocationHostRequest;
  FileSystemAccessCapacityAllocationHostProxy.prototype.validator = validateFileSystemAccessCapacityAllocationHostResponse;
  exports.FileSystemAccessCapacityAllocationHost = FileSystemAccessCapacityAllocationHost;
  exports.FileSystemAccessCapacityAllocationHostPtr = FileSystemAccessCapacityAllocationHostPtr;
  exports.FileSystemAccessCapacityAllocationHostAssociatedPtr = FileSystemAccessCapacityAllocationHostAssociatedPtr;
})();