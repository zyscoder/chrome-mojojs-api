// third_party/blink/public/mojom/interest_group/interest_group_types.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/interest_group/interest_group_types.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var int128$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/int128.mojom', '../../../../../mojo/public/mojom/base/int128.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var uuid$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/uuid.mojom', '../../../../../mojo/public/mojom/base/uuid.mojom.js');
  }
  var ad_display_size$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/interest_group/ad_display_size.mojom', 'ad_display_size.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../../url/mojom/origin.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }


  var MAX_INTEREST_GROUP_SIZE = 1048576;
  var MAX_ALLOWED_REPORTING_ORIGINS = 10;

  function InterestGroupAd(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InterestGroupAd.prototype.initDefaults_ = function() {
    this.renderUrl = null;
    this.sizeGroup = null;
    this.buyerReportingId = null;
    this.buyerAndSellerReportingId = null;
    this.metadata = null;
    this.adRenderId = null;
    this.allowedReportingOrigins = null;
  };
  InterestGroupAd.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterestGroupAd.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroupAd.renderUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroupAd.sizeGroup
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroupAd.buyerReportingId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroupAd.buyerAndSellerReportingId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroupAd.metadata
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroupAd.adRenderId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroupAd.allowedReportingOrigins
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 48, 8, new codec.PointerTo(origin$.Origin), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterestGroupAd.encodedSize = codec.kStructHeaderSize + 56;

  InterestGroupAd.decode = function(decoder) {
    var packed;
    var val = new InterestGroupAd();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.renderUrl =
        decoder.decodeStructPointer(url$.Url);
    val.sizeGroup =
        decoder.decodeStruct(codec.NullableString);
    val.buyerReportingId =
        decoder.decodeStruct(codec.NullableString);
    val.buyerAndSellerReportingId =
        decoder.decodeStruct(codec.NullableString);
    val.metadata =
        decoder.decodeStruct(codec.NullableString);
    val.adRenderId =
        decoder.decodeStruct(codec.NullableString);
    val.allowedReportingOrigins =
        decoder.decodeArrayPointer(new codec.PointerTo(origin$.Origin));
    return val;
  };

  InterestGroupAd.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterestGroupAd.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.renderUrl);
    encoder.encodeStruct(codec.NullableString, val.sizeGroup);
    encoder.encodeStruct(codec.NullableString, val.buyerReportingId);
    encoder.encodeStruct(codec.NullableString, val.buyerAndSellerReportingId);
    encoder.encodeStruct(codec.NullableString, val.metadata);
    encoder.encodeStruct(codec.NullableString, val.adRenderId);
    encoder.encodeArrayPointer(new codec.PointerTo(origin$.Origin), val.allowedReportingOrigins);
  };
  function SellerCapabilities(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SellerCapabilities.prototype.initDefaults_ = function() {
    this.allowsInterestGroupCounts = false;
    this.allowsLatencyStats = false;
  };
  SellerCapabilities.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SellerCapabilities.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  SellerCapabilities.encodedSize = codec.kStructHeaderSize + 8;

  SellerCapabilities.decode = function(decoder) {
    var packed;
    var val = new SellerCapabilities();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.allowsInterestGroupCounts = (packed >> 0) & 1 ? true : false;
    val.allowsLatencyStats = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SellerCapabilities.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SellerCapabilities.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.allowsInterestGroupCounts & 1) << 0
    packed |= (val.allowsLatencyStats & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function AuctionServerRequestFlags(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AuctionServerRequestFlags.prototype.initDefaults_ = function() {
    this.omitAds = false;
    this.includeFullAds = false;
  };
  AuctionServerRequestFlags.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AuctionServerRequestFlags.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  AuctionServerRequestFlags.encodedSize = codec.kStructHeaderSize + 8;

  AuctionServerRequestFlags.decode = function(decoder) {
    var packed;
    var val = new AuctionServerRequestFlags();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.omitAds = (packed >> 0) & 1 ? true : false;
    val.includeFullAds = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  AuctionServerRequestFlags.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AuctionServerRequestFlags.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.omitAds & 1) << 0
    packed |= (val.includeFullAds & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function InterestGroup(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  InterestGroup.ExecutionMode = {};
  InterestGroup.ExecutionMode.kCompatibilityMode = 0;
  InterestGroup.ExecutionMode.kGroupedByOriginMode = 1;
  InterestGroup.ExecutionMode.kFrozenContext = 2;
  InterestGroup.ExecutionMode.MIN_VALUE = 0;
  InterestGroup.ExecutionMode.MAX_VALUE = 2;
  InterestGroup.ExecutionMode.DEFAULT_VALUE = 0;

  InterestGroup.ExecutionMode.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  InterestGroup.ExecutionMode.toKnownEnumValue = function(value) {
    if (this.isKnownEnumValue(value))
      return value;
    return this.DEFAULT_VALUE;
  };

  InterestGroup.ExecutionMode.validate = function(enumValue) {
    const isExtensible = true;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  InterestGroup.prototype.initDefaults_ = function() {
    this.expiry = null;
    this.owner = null;
    this.name = null;
    this.priority = 0.0;
    this.enableBiddingSignalsPrioritization = false;
    this.executionMode = InterestGroup.ExecutionMode.kCompatibilityMode;
    this.priorityVector = null;
    this.prioritySignalsOverrides = null;
    this.sellerCapabilities = null;
    this.allSellersCapabilities = null;
    this.biddingUrl = null;
    this.biddingWasmHelperUrl = null;
    this.updateUrl = null;
    this.trustedBiddingSignalsUrl = null;
    this.trustedBiddingSignalsKeys = null;
    this.userBiddingSignals = null;
    this.ads = null;
    this.adComponents = null;
    this.adSizes = null;
    this.sizeGroups = null;
    this.auctionServerRequestFlags = null;
    this.additionalBidKey = null;
    this.aggregationCoordinatorOrigin = null;
  };
  InterestGroup.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InterestGroup.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 184}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.expiry
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.owner
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;




    // validate InterestGroup.priorityVector
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 40, true, codec.String, codec.Double, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.prioritySignalsOverrides
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 48, true, codec.String, codec.Double, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.sellerCapabilities
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 56, true, new codec.PointerTo(origin$.Origin), new codec.PointerTo(SellerCapabilities), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.allSellersCapabilities
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, SellerCapabilities, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.executionMode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 36, InterestGroup.ExecutionMode);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.biddingUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.biddingWasmHelperUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.updateUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.trustedBiddingSignalsUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.trustedBiddingSignalsKeys
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 104, 8, codec.String, true, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.userBiddingSignals
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 112, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.ads
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 120, 8, new codec.PointerTo(InterestGroupAd), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.adComponents
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 128, 8, new codec.PointerTo(InterestGroupAd), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.adSizes
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 136, true, codec.String, new codec.PointerTo(ad_display_size$.AdSize), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.sizeGroups
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 144, true, codec.String, new codec.ArrayOf(codec.String), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.auctionServerRequestFlags
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 152, AuctionServerRequestFlags, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.additionalBidKey
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 160, 1, codec.Uint8, true, [32], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InterestGroup.aggregationCoordinatorOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 168, origin$.Origin, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  InterestGroup.encodedSize = codec.kStructHeaderSize + 176;

  InterestGroup.decode = function(decoder) {
    var packed;
    var val = new InterestGroup();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.expiry =
        decoder.decodeStructPointer(time$.Time);
    val.owner =
        decoder.decodeStructPointer(origin$.Origin);
    val.name =
        decoder.decodeStruct(codec.String);
    val.priority =
        decoder.decodeStruct(codec.Double);
    packed = decoder.readUint8();
    val.enableBiddingSignalsPrioritization = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.executionMode =
        decoder.decodeStruct(new codec.Enum(InterestGroup.ExecutionMode));
    val.priorityVector =
        decoder.decodeMapPointer(codec.String, codec.Double);
    val.prioritySignalsOverrides =
        decoder.decodeMapPointer(codec.String, codec.Double);
    val.sellerCapabilities =
        decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(SellerCapabilities));
    val.allSellersCapabilities =
        decoder.decodeStructPointer(SellerCapabilities);
    val.biddingUrl =
        decoder.decodeStructPointer(url$.Url);
    val.biddingWasmHelperUrl =
        decoder.decodeStructPointer(url$.Url);
    val.updateUrl =
        decoder.decodeStructPointer(url$.Url);
    val.trustedBiddingSignalsUrl =
        decoder.decodeStructPointer(url$.Url);
    val.trustedBiddingSignalsKeys =
        decoder.decodeArrayPointer(codec.String);
    val.userBiddingSignals =
        decoder.decodeStruct(codec.NullableString);
    val.ads =
        decoder.decodeArrayPointer(new codec.PointerTo(InterestGroupAd));
    val.adComponents =
        decoder.decodeArrayPointer(new codec.PointerTo(InterestGroupAd));
    val.adSizes =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(ad_display_size$.AdSize));
    val.sizeGroups =
        decoder.decodeMapPointer(codec.String, new codec.ArrayOf(codec.String));
    val.auctionServerRequestFlags =
        decoder.decodeStructPointer(AuctionServerRequestFlags);
    val.additionalBidKey =
        decoder.decodeArrayPointer(codec.Uint8);
    val.aggregationCoordinatorOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    return val;
  };

  InterestGroup.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InterestGroup.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.Time, val.expiry);
    encoder.encodeStructPointer(origin$.Origin, val.owner);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.Double, val.priority);
    packed = 0;
    packed |= (val.enableBiddingSignalsPrioritization & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.executionMode);
    encoder.encodeMapPointer(codec.String, codec.Double, val.priorityVector);
    encoder.encodeMapPointer(codec.String, codec.Double, val.prioritySignalsOverrides);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(SellerCapabilities), val.sellerCapabilities);
    encoder.encodeStructPointer(SellerCapabilities, val.allSellersCapabilities);
    encoder.encodeStructPointer(url$.Url, val.biddingUrl);
    encoder.encodeStructPointer(url$.Url, val.biddingWasmHelperUrl);
    encoder.encodeStructPointer(url$.Url, val.updateUrl);
    encoder.encodeStructPointer(url$.Url, val.trustedBiddingSignalsUrl);
    encoder.encodeArrayPointer(codec.String, val.trustedBiddingSignalsKeys);
    encoder.encodeStruct(codec.NullableString, val.userBiddingSignals);
    encoder.encodeArrayPointer(new codec.PointerTo(InterestGroupAd), val.ads);
    encoder.encodeArrayPointer(new codec.PointerTo(InterestGroupAd), val.adComponents);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(ad_display_size$.AdSize), val.adSizes);
    encoder.encodeMapPointer(codec.String, new codec.ArrayOf(codec.String), val.sizeGroups);
    encoder.encodeStructPointer(AuctionServerRequestFlags, val.auctionServerRequestFlags);
    encoder.encodeArrayPointer(codec.Uint8, val.additionalBidKey);
    encoder.encodeStructPointer(origin$.Origin, val.aggregationCoordinatorOrigin);
  };
  function DirectFromSellerSignalsSubresource(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DirectFromSellerSignalsSubresource.prototype.initDefaults_ = function() {
    this.bundleUrl = null;
    this.token = null;
  };
  DirectFromSellerSignalsSubresource.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DirectFromSellerSignalsSubresource.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectFromSellerSignalsSubresource.bundleUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectFromSellerSignalsSubresource.token
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DirectFromSellerSignalsSubresource.encodedSize = codec.kStructHeaderSize + 16;

  DirectFromSellerSignalsSubresource.decode = function(decoder) {
    var packed;
    var val = new DirectFromSellerSignalsSubresource();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bundleUrl =
        decoder.decodeStructPointer(url$.Url);
    val.token =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    return val;
  };

  DirectFromSellerSignalsSubresource.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DirectFromSellerSignalsSubresource.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.bundleUrl);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.token);
  };
  function DirectFromSellerSignals(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DirectFromSellerSignals.prototype.initDefaults_ = function() {
    this.prefix = null;
    this.perBuyerSignals = null;
    this.sellerSignals = null;
    this.auctionSignals = null;
  };
  DirectFromSellerSignals.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DirectFromSellerSignals.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectFromSellerSignals.prefix
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectFromSellerSignals.perBuyerSignals
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, new codec.PointerTo(origin$.Origin), new codec.PointerTo(DirectFromSellerSignalsSubresource), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectFromSellerSignals.sellerSignals
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, DirectFromSellerSignalsSubresource, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DirectFromSellerSignals.auctionSignals
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, DirectFromSellerSignalsSubresource, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DirectFromSellerSignals.encodedSize = codec.kStructHeaderSize + 32;

  DirectFromSellerSignals.decode = function(decoder) {
    var packed;
    var val = new DirectFromSellerSignals();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.prefix =
        decoder.decodeStructPointer(url$.Url);
    val.perBuyerSignals =
        decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(DirectFromSellerSignalsSubresource));
    val.sellerSignals =
        decoder.decodeStructPointer(DirectFromSellerSignalsSubresource);
    val.auctionSignals =
        decoder.decodeStructPointer(DirectFromSellerSignalsSubresource);
    return val;
  };

  DirectFromSellerSignals.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DirectFromSellerSignals.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.prefix);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(DirectFromSellerSignalsSubresource), val.perBuyerSignals);
    encoder.encodeStructPointer(DirectFromSellerSignalsSubresource, val.sellerSignals);
    encoder.encodeStructPointer(DirectFromSellerSignalsSubresource, val.auctionSignals);
  };
  function AuctionAdConfigBuyerTimeouts(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AuctionAdConfigBuyerTimeouts.prototype.initDefaults_ = function() {
    this.allBuyersTimeout = null;
    this.perBuyerTimeouts = null;
  };
  AuctionAdConfigBuyerTimeouts.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AuctionAdConfigBuyerTimeouts.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigBuyerTimeouts.allBuyersTimeout
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeDelta, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigBuyerTimeouts.perBuyerTimeouts
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, true, new codec.PointerTo(origin$.Origin), new codec.PointerTo(time$.TimeDelta), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AuctionAdConfigBuyerTimeouts.encodedSize = codec.kStructHeaderSize + 16;

  AuctionAdConfigBuyerTimeouts.decode = function(decoder) {
    var packed;
    var val = new AuctionAdConfigBuyerTimeouts();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.allBuyersTimeout =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.perBuyerTimeouts =
        decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(time$.TimeDelta));
    return val;
  };

  AuctionAdConfigBuyerTimeouts.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AuctionAdConfigBuyerTimeouts.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeDelta, val.allBuyersTimeout);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(time$.TimeDelta), val.perBuyerTimeouts);
  };
  function AdCurrency(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AdCurrency.prototype.initDefaults_ = function() {
    this.currencyCode = null;
  };
  AdCurrency.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AdCurrency.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AdCurrency.currencyCode
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AdCurrency.encodedSize = codec.kStructHeaderSize + 8;

  AdCurrency.decode = function(decoder) {
    var packed;
    var val = new AdCurrency();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.currencyCode =
        decoder.decodeStruct(codec.String);
    return val;
  };

  AdCurrency.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AdCurrency.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.currencyCode);
  };
  function AuctionAdConfigBuyerCurrencies(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AuctionAdConfigBuyerCurrencies.prototype.initDefaults_ = function() {
    this.allBuyersCurrency = null;
    this.perBuyerCurrencies = null;
  };
  AuctionAdConfigBuyerCurrencies.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AuctionAdConfigBuyerCurrencies.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigBuyerCurrencies.allBuyersCurrency
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, AdCurrency, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigBuyerCurrencies.perBuyerCurrencies
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, true, new codec.PointerTo(origin$.Origin), new codec.PointerTo(AdCurrency), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AuctionAdConfigBuyerCurrencies.encodedSize = codec.kStructHeaderSize + 16;

  AuctionAdConfigBuyerCurrencies.decode = function(decoder) {
    var packed;
    var val = new AuctionAdConfigBuyerCurrencies();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.allBuyersCurrency =
        decoder.decodeStructPointer(AdCurrency);
    val.perBuyerCurrencies =
        decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(AdCurrency));
    return val;
  };

  AuctionAdConfigBuyerCurrencies.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AuctionAdConfigBuyerCurrencies.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(AdCurrency, val.allBuyersCurrency);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.PointerTo(AdCurrency), val.perBuyerCurrencies);
  };
  function AuctionAdServerResponseConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AuctionAdServerResponseConfig.prototype.initDefaults_ = function() {
    this.requestId = null;
  };
  AuctionAdServerResponseConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AuctionAdServerResponseConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdServerResponseConfig.requestId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, uuid$.Uuid, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AuctionAdServerResponseConfig.encodedSize = codec.kStructHeaderSize + 8;

  AuctionAdServerResponseConfig.decode = function(decoder) {
    var packed;
    var val = new AuctionAdServerResponseConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.requestId =
        decoder.decodeStructPointer(uuid$.Uuid);
    return val;
  };

  AuctionAdServerResponseConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AuctionAdServerResponseConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(uuid$.Uuid, val.requestId);
  };
  function AuctionReportBuyersConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AuctionReportBuyersConfig.prototype.initDefaults_ = function() {
    this.bucket = null;
    this.scale = 0;
  };
  AuctionReportBuyersConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AuctionReportBuyersConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionReportBuyersConfig.bucket
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, int128$.Uint128, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  AuctionReportBuyersConfig.encodedSize = codec.kStructHeaderSize + 16;

  AuctionReportBuyersConfig.decode = function(decoder) {
    var packed;
    var val = new AuctionReportBuyersConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bucket =
        decoder.decodeStructPointer(int128$.Uint128);
    val.scale =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  AuctionReportBuyersConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AuctionReportBuyersConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(int128$.Uint128, val.bucket);
    encoder.encodeStruct(codec.Double, val.scale);
  };
  function AuctionAdConfigNonSharedParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  AuctionAdConfigNonSharedParams.BuyerReportType = {};
  AuctionAdConfigNonSharedParams.BuyerReportType.kInterestGroupCount = 0;
  AuctionAdConfigNonSharedParams.BuyerReportType.kBidCount = 1;
  AuctionAdConfigNonSharedParams.BuyerReportType.kTotalGenerateBidLatency = 2;
  AuctionAdConfigNonSharedParams.BuyerReportType.kTotalSignalsFetchLatency = 3;
  AuctionAdConfigNonSharedParams.BuyerReportType.MIN_VALUE = 0;
  AuctionAdConfigNonSharedParams.BuyerReportType.MAX_VALUE = 3;

  AuctionAdConfigNonSharedParams.BuyerReportType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  AuctionAdConfigNonSharedParams.BuyerReportType.toKnownEnumValue = function(value) {
    return value;
  };

  AuctionAdConfigNonSharedParams.BuyerReportType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  AuctionAdConfigNonSharedParams.prototype.initDefaults_ = function() {
    this.interestGroupBuyers = null;
    this.auctionSignals = null;
    this.sellerSignals = null;
    this.sellerTimeout = null;
    this.perBuyerSignals = null;
    this.buyerTimeouts = null;
    this.sellerCurrency = null;
    this.buyerCurrencies = null;
    this.buyerCumulativeTimeouts = null;
    this.perBuyerGroupLimits = null;
    this.perBuyerPrioritySignals = null;
    this.allBuyersPrioritySignals = null;
    this.allBuyersGroupLimit = 65535;
    this.auctionReportBuyerKeys = null;
    this.auctionReportBuyers = null;
    this.requiredSellerCapabilities = null;
    this.requestedSize = null;
    this.auctionNonce = null;
    this.componentAuctions = null;
  };
  AuctionAdConfigNonSharedParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AuctionAdConfigNonSharedParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 208}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.interestGroupBuyers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(origin$.Origin), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.auctionSignals
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 8, AuctionAdConfigMaybePromiseJson, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.sellerSignals
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 24, AuctionAdConfigMaybePromiseJson, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.sellerTimeout
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, time$.TimeDelta, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.perBuyerSignals
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 48, AuctionAdConfigMaybePromisePerBuyerSignals, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.buyerTimeouts
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 64, AuctionAdConfigMaybePromiseBuyerTimeouts, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.sellerCurrency
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, AdCurrency, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.buyerCurrencies
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 88, AuctionAdConfigMaybePromiseBuyerCurrencies, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.buyerCumulativeTimeouts
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 104, AuctionAdConfigMaybePromiseBuyerTimeouts, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.perBuyerGroupLimits
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 120, false, new codec.PointerTo(origin$.Origin), codec.Uint16, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.perBuyerPrioritySignals
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 128, true, new codec.PointerTo(origin$.Origin), new codec.MapOf(codec.String, codec.Double), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.allBuyersPrioritySignals
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 136, true, codec.String, codec.Double, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate AuctionAdConfigNonSharedParams.auctionReportBuyerKeys
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 152, 8, new codec.PointerTo(int128$.Uint128), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.auctionReportBuyers
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 160, true, new codec.Enum(AuctionAdConfigNonSharedParams.BuyerReportType), new codec.PointerTo(AuctionReportBuyersConfig), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.requiredSellerCapabilities
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 168, SellerCapabilities, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.requestedSize
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 176, ad_display_size$.AdSize, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.auctionNonce
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 184, uuid$.Uuid, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfigNonSharedParams.componentAuctions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 192, 8, new codec.PointerTo(AuctionAdConfig), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AuctionAdConfigNonSharedParams.encodedSize = codec.kStructHeaderSize + 200;

  AuctionAdConfigNonSharedParams.decode = function(decoder) {
    var packed;
    var val = new AuctionAdConfigNonSharedParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.interestGroupBuyers =
        decoder.decodeArrayPointer(new codec.PointerTo(origin$.Origin));
    val.auctionSignals =
        decoder.decodeStruct(AuctionAdConfigMaybePromiseJson);
    val.sellerSignals =
        decoder.decodeStruct(AuctionAdConfigMaybePromiseJson);
    val.sellerTimeout =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.perBuyerSignals =
        decoder.decodeStruct(AuctionAdConfigMaybePromisePerBuyerSignals);
    val.buyerTimeouts =
        decoder.decodeStruct(AuctionAdConfigMaybePromiseBuyerTimeouts);
    val.sellerCurrency =
        decoder.decodeStructPointer(AdCurrency);
    val.buyerCurrencies =
        decoder.decodeStruct(AuctionAdConfigMaybePromiseBuyerCurrencies);
    val.buyerCumulativeTimeouts =
        decoder.decodeStruct(AuctionAdConfigMaybePromiseBuyerTimeouts);
    val.perBuyerGroupLimits =
        decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), codec.Uint16);
    val.perBuyerPrioritySignals =
        decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.MapOf(codec.String, codec.Double));
    val.allBuyersPrioritySignals =
        decoder.decodeMapPointer(codec.String, codec.Double);
    val.allBuyersGroupLimit =
        decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.auctionReportBuyerKeys =
        decoder.decodeArrayPointer(new codec.PointerTo(int128$.Uint128));
    val.auctionReportBuyers =
        decoder.decodeMapPointer(new codec.Enum(AuctionAdConfigNonSharedParams.BuyerReportType), new codec.PointerTo(AuctionReportBuyersConfig));
    val.requiredSellerCapabilities =
        decoder.decodeStructPointer(SellerCapabilities);
    val.requestedSize =
        decoder.decodeStructPointer(ad_display_size$.AdSize);
    val.auctionNonce =
        decoder.decodeStructPointer(uuid$.Uuid);
    val.componentAuctions =
        decoder.decodeArrayPointer(new codec.PointerTo(AuctionAdConfig));
    return val;
  };

  AuctionAdConfigNonSharedParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AuctionAdConfigNonSharedParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(origin$.Origin), val.interestGroupBuyers);
    encoder.encodeStruct(AuctionAdConfigMaybePromiseJson, val.auctionSignals);
    encoder.encodeStruct(AuctionAdConfigMaybePromiseJson, val.sellerSignals);
    encoder.encodeStructPointer(time$.TimeDelta, val.sellerTimeout);
    encoder.encodeStruct(AuctionAdConfigMaybePromisePerBuyerSignals, val.perBuyerSignals);
    encoder.encodeStruct(AuctionAdConfigMaybePromiseBuyerTimeouts, val.buyerTimeouts);
    encoder.encodeStructPointer(AdCurrency, val.sellerCurrency);
    encoder.encodeStruct(AuctionAdConfigMaybePromiseBuyerCurrencies, val.buyerCurrencies);
    encoder.encodeStruct(AuctionAdConfigMaybePromiseBuyerTimeouts, val.buyerCumulativeTimeouts);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), codec.Uint16, val.perBuyerGroupLimits);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), new codec.MapOf(codec.String, codec.Double), val.perBuyerPrioritySignals);
    encoder.encodeMapPointer(codec.String, codec.Double, val.allBuyersPrioritySignals);
    encoder.encodeStruct(codec.Uint16, val.allBuyersGroupLimit);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(int128$.Uint128), val.auctionReportBuyerKeys);
    encoder.encodeMapPointer(new codec.Enum(AuctionAdConfigNonSharedParams.BuyerReportType), new codec.PointerTo(AuctionReportBuyersConfig), val.auctionReportBuyers);
    encoder.encodeStructPointer(SellerCapabilities, val.requiredSellerCapabilities);
    encoder.encodeStructPointer(ad_display_size$.AdSize, val.requestedSize);
    encoder.encodeStructPointer(uuid$.Uuid, val.auctionNonce);
    encoder.encodeArrayPointer(new codec.PointerTo(AuctionAdConfig), val.componentAuctions);
  };
  function AuctionAdConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AuctionAdConfig.prototype.initDefaults_ = function() {
    this.seller = null;
    this.serverResponse = null;
    this.decisionLogicUrl = null;
    this.trustedScoringSignalsUrl = null;
    this.auctionAdConfigNonSharedParams = null;
    this.directFromSellerSignals = null;
    this.expectsDirectFromSellerSignalsHeaderAdSlot = false;
    this.hasSellerExperimentGroupId = false;
    this.hasAllBuyerExperimentGroupId = false;
    this.expectsAdditionalBids = false;
    this.sellerExperimentGroupId = 0;
    this.allBuyerExperimentGroupId = 0;
    this.perBuyerExperimentGroupIds = null;
    this.aggregationCoordinatorOrigin = null;
  };
  AuctionAdConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AuctionAdConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 88}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfig.seller
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfig.serverResponse
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, AuctionAdServerResponseConfig, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfig.decisionLogicUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfig.trustedScoringSignalsUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfig.auctionAdConfigNonSharedParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, AuctionAdConfigNonSharedParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AuctionAdConfig.directFromSellerSignals
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 40, AuctionAdConfigMaybePromiseDirectFromSellerSignals, false);
    if (err !== validator.validationError.NONE)
        return err;







    // validate AuctionAdConfig.perBuyerExperimentGroupIds
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 64, false, new codec.PointerTo(origin$.Origin), codec.Uint16, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate AuctionAdConfig.aggregationCoordinatorOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, origin$.Origin, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AuctionAdConfig.encodedSize = codec.kStructHeaderSize + 80;

  AuctionAdConfig.decode = function(decoder) {
    var packed;
    var val = new AuctionAdConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.seller =
        decoder.decodeStructPointer(origin$.Origin);
    val.serverResponse =
        decoder.decodeStructPointer(AuctionAdServerResponseConfig);
    val.decisionLogicUrl =
        decoder.decodeStructPointer(url$.Url);
    val.trustedScoringSignalsUrl =
        decoder.decodeStructPointer(url$.Url);
    val.auctionAdConfigNonSharedParams =
        decoder.decodeStructPointer(AuctionAdConfigNonSharedParams);
    val.directFromSellerSignals =
        decoder.decodeStruct(AuctionAdConfigMaybePromiseDirectFromSellerSignals);
    packed = decoder.readUint8();
    val.expectsDirectFromSellerSignalsHeaderAdSlot = (packed >> 0) & 1 ? true : false;
    val.hasSellerExperimentGroupId = (packed >> 1) & 1 ? true : false;
    val.hasAllBuyerExperimentGroupId = (packed >> 2) & 1 ? true : false;
    val.expectsAdditionalBids = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    val.sellerExperimentGroupId =
        decoder.decodeStruct(codec.Uint16);
    val.allBuyerExperimentGroupId =
        decoder.decodeStruct(codec.Int16);
    decoder.skip(1);
    decoder.skip(1);
    val.perBuyerExperimentGroupIds =
        decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), codec.Uint16);
    val.aggregationCoordinatorOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    return val;
  };

  AuctionAdConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AuctionAdConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.seller);
    encoder.encodeStructPointer(AuctionAdServerResponseConfig, val.serverResponse);
    encoder.encodeStructPointer(url$.Url, val.decisionLogicUrl);
    encoder.encodeStructPointer(url$.Url, val.trustedScoringSignalsUrl);
    encoder.encodeStructPointer(AuctionAdConfigNonSharedParams, val.auctionAdConfigNonSharedParams);
    encoder.encodeStruct(AuctionAdConfigMaybePromiseDirectFromSellerSignals, val.directFromSellerSignals);
    packed = 0;
    packed |= (val.expectsDirectFromSellerSignalsHeaderAdSlot & 1) << 0
    packed |= (val.hasSellerExperimentGroupId & 1) << 1
    packed |= (val.hasAllBuyerExperimentGroupId & 1) << 2
    packed |= (val.expectsAdditionalBids & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint16, val.sellerExperimentGroupId);
    encoder.encodeStruct(codec.Int16, val.allBuyerExperimentGroupId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), codec.Uint16, val.perBuyerExperimentGroupIds);
    encoder.encodeStructPointer(origin$.Origin, val.aggregationCoordinatorOrigin);
  };

  function AuctionAdConfigMaybePromiseJson(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  AuctionAdConfigMaybePromiseJson.Tags = {
    promise: 0,
    value: 1,
  };

  AuctionAdConfigMaybePromiseJson.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  AuctionAdConfigMaybePromiseJson.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "promise",
        "value",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a AuctionAdConfigMaybePromiseJson member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(AuctionAdConfigMaybePromiseJson.prototype, "promise", {
    get: function() {
      if (this.$tag != AuctionAdConfigMaybePromiseJson.Tags.promise) {
        throw new ReferenceError(
            "AuctionAdConfigMaybePromiseJson.promise is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AuctionAdConfigMaybePromiseJson.Tags.promise;
      this.$data = value;
    }
  });
  Object.defineProperty(AuctionAdConfigMaybePromiseJson.prototype, "value", {
    get: function() {
      if (this.$tag != AuctionAdConfigMaybePromiseJson.Tags.value) {
        throw new ReferenceError(
            "AuctionAdConfigMaybePromiseJson.value is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AuctionAdConfigMaybePromiseJson.Tags.value;
      this.$data = value;
    }
  });


    AuctionAdConfigMaybePromiseJson.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case AuctionAdConfigMaybePromiseJson.Tags.promise:
          encoder.encodeStruct(codec.Uint32, val.promise);
          break;
        case AuctionAdConfigMaybePromiseJson.Tags.value:
          encoder.encodeStruct(codec.NullableString, val.value);
          break;
      }
      encoder.align();
    };


    AuctionAdConfigMaybePromiseJson.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new AuctionAdConfigMaybePromiseJson();
      var tag = decoder.readUint32();
      switch (tag) {
        case AuctionAdConfigMaybePromiseJson.Tags.promise:
          result.promise = decoder.decodeStruct(codec.Uint32);
          break;
        case AuctionAdConfigMaybePromiseJson.Tags.value:
          result.value = decoder.decodeStruct(codec.NullableString);
          break;
      }
      decoder.align();

      return result;
    };


    AuctionAdConfigMaybePromiseJson.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case AuctionAdConfigMaybePromiseJson.Tags.promise:
          

          break;
        case AuctionAdConfigMaybePromiseJson.Tags.value:
          

    // validate AuctionAdConfigMaybePromiseJson.value
    err = messageValidator.validateStringPointer(data_offset, true)
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  AuctionAdConfigMaybePromiseJson.encodedSize = 16;

  function AuctionAdConfigMaybePromisePerBuyerSignals(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  AuctionAdConfigMaybePromisePerBuyerSignals.Tags = {
    promise: 0,
    value: 1,
  };

  AuctionAdConfigMaybePromisePerBuyerSignals.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  AuctionAdConfigMaybePromisePerBuyerSignals.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "promise",
        "value",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a AuctionAdConfigMaybePromisePerBuyerSignals member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(AuctionAdConfigMaybePromisePerBuyerSignals.prototype, "promise", {
    get: function() {
      if (this.$tag != AuctionAdConfigMaybePromisePerBuyerSignals.Tags.promise) {
        throw new ReferenceError(
            "AuctionAdConfigMaybePromisePerBuyerSignals.promise is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AuctionAdConfigMaybePromisePerBuyerSignals.Tags.promise;
      this.$data = value;
    }
  });
  Object.defineProperty(AuctionAdConfigMaybePromisePerBuyerSignals.prototype, "value", {
    get: function() {
      if (this.$tag != AuctionAdConfigMaybePromisePerBuyerSignals.Tags.value) {
        throw new ReferenceError(
            "AuctionAdConfigMaybePromisePerBuyerSignals.value is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AuctionAdConfigMaybePromisePerBuyerSignals.Tags.value;
      this.$data = value;
    }
  });


    AuctionAdConfigMaybePromisePerBuyerSignals.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case AuctionAdConfigMaybePromisePerBuyerSignals.Tags.promise:
          encoder.encodeStruct(codec.Uint32, val.promise);
          break;
        case AuctionAdConfigMaybePromisePerBuyerSignals.Tags.value:
          encoder.encodeMapPointer(new codec.PointerTo(origin$.Origin), codec.String, val.value);
          break;
      }
      encoder.align();
    };


    AuctionAdConfigMaybePromisePerBuyerSignals.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new AuctionAdConfigMaybePromisePerBuyerSignals();
      var tag = decoder.readUint32();
      switch (tag) {
        case AuctionAdConfigMaybePromisePerBuyerSignals.Tags.promise:
          result.promise = decoder.decodeStruct(codec.Uint32);
          break;
        case AuctionAdConfigMaybePromisePerBuyerSignals.Tags.value:
          result.value = decoder.decodeMapPointer(new codec.PointerTo(origin$.Origin), codec.String);
          break;
      }
      decoder.align();

      return result;
    };


    AuctionAdConfigMaybePromisePerBuyerSignals.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case AuctionAdConfigMaybePromisePerBuyerSignals.Tags.promise:
          

          break;
        case AuctionAdConfigMaybePromisePerBuyerSignals.Tags.value:
          

    // validate AuctionAdConfigMaybePromisePerBuyerSignals.value
    err = messageValidator.validateMapPointer(data_offset, true, new codec.PointerTo(origin$.Origin), codec.String, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  AuctionAdConfigMaybePromisePerBuyerSignals.encodedSize = 16;

  function AuctionAdConfigMaybePromiseBuyerTimeouts(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  AuctionAdConfigMaybePromiseBuyerTimeouts.Tags = {
    promise: 0,
    value: 1,
  };

  AuctionAdConfigMaybePromiseBuyerTimeouts.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  AuctionAdConfigMaybePromiseBuyerTimeouts.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "promise",
        "value",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a AuctionAdConfigMaybePromiseBuyerTimeouts member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(AuctionAdConfigMaybePromiseBuyerTimeouts.prototype, "promise", {
    get: function() {
      if (this.$tag != AuctionAdConfigMaybePromiseBuyerTimeouts.Tags.promise) {
        throw new ReferenceError(
            "AuctionAdConfigMaybePromiseBuyerTimeouts.promise is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AuctionAdConfigMaybePromiseBuyerTimeouts.Tags.promise;
      this.$data = value;
    }
  });
  Object.defineProperty(AuctionAdConfigMaybePromiseBuyerTimeouts.prototype, "value", {
    get: function() {
      if (this.$tag != AuctionAdConfigMaybePromiseBuyerTimeouts.Tags.value) {
        throw new ReferenceError(
            "AuctionAdConfigMaybePromiseBuyerTimeouts.value is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AuctionAdConfigMaybePromiseBuyerTimeouts.Tags.value;
      this.$data = value;
    }
  });


    AuctionAdConfigMaybePromiseBuyerTimeouts.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case AuctionAdConfigMaybePromiseBuyerTimeouts.Tags.promise:
          encoder.encodeStruct(codec.Uint32, val.promise);
          break;
        case AuctionAdConfigMaybePromiseBuyerTimeouts.Tags.value:
          encoder.encodeStructPointer(AuctionAdConfigBuyerTimeouts, val.value);
          break;
      }
      encoder.align();
    };


    AuctionAdConfigMaybePromiseBuyerTimeouts.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new AuctionAdConfigMaybePromiseBuyerTimeouts();
      var tag = decoder.readUint32();
      switch (tag) {
        case AuctionAdConfigMaybePromiseBuyerTimeouts.Tags.promise:
          result.promise = decoder.decodeStruct(codec.Uint32);
          break;
        case AuctionAdConfigMaybePromiseBuyerTimeouts.Tags.value:
          result.value = decoder.decodeStructPointer(AuctionAdConfigBuyerTimeouts);
          break;
      }
      decoder.align();

      return result;
    };


    AuctionAdConfigMaybePromiseBuyerTimeouts.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case AuctionAdConfigMaybePromiseBuyerTimeouts.Tags.promise:
          

          break;
        case AuctionAdConfigMaybePromiseBuyerTimeouts.Tags.value:
          

    // validate AuctionAdConfigMaybePromiseBuyerTimeouts.value
    err = messageValidator.validateStructPointer(data_offset, AuctionAdConfigBuyerTimeouts, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  AuctionAdConfigMaybePromiseBuyerTimeouts.encodedSize = 16;

  function AuctionAdConfigMaybePromiseBuyerCurrencies(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  AuctionAdConfigMaybePromiseBuyerCurrencies.Tags = {
    promise: 0,
    value: 1,
  };

  AuctionAdConfigMaybePromiseBuyerCurrencies.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  AuctionAdConfigMaybePromiseBuyerCurrencies.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "promise",
        "value",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a AuctionAdConfigMaybePromiseBuyerCurrencies member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(AuctionAdConfigMaybePromiseBuyerCurrencies.prototype, "promise", {
    get: function() {
      if (this.$tag != AuctionAdConfigMaybePromiseBuyerCurrencies.Tags.promise) {
        throw new ReferenceError(
            "AuctionAdConfigMaybePromiseBuyerCurrencies.promise is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AuctionAdConfigMaybePromiseBuyerCurrencies.Tags.promise;
      this.$data = value;
    }
  });
  Object.defineProperty(AuctionAdConfigMaybePromiseBuyerCurrencies.prototype, "value", {
    get: function() {
      if (this.$tag != AuctionAdConfigMaybePromiseBuyerCurrencies.Tags.value) {
        throw new ReferenceError(
            "AuctionAdConfigMaybePromiseBuyerCurrencies.value is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AuctionAdConfigMaybePromiseBuyerCurrencies.Tags.value;
      this.$data = value;
    }
  });


    AuctionAdConfigMaybePromiseBuyerCurrencies.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case AuctionAdConfigMaybePromiseBuyerCurrencies.Tags.promise:
          encoder.encodeStruct(codec.Uint32, val.promise);
          break;
        case AuctionAdConfigMaybePromiseBuyerCurrencies.Tags.value:
          encoder.encodeStructPointer(AuctionAdConfigBuyerCurrencies, val.value);
          break;
      }
      encoder.align();
    };


    AuctionAdConfigMaybePromiseBuyerCurrencies.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new AuctionAdConfigMaybePromiseBuyerCurrencies();
      var tag = decoder.readUint32();
      switch (tag) {
        case AuctionAdConfigMaybePromiseBuyerCurrencies.Tags.promise:
          result.promise = decoder.decodeStruct(codec.Uint32);
          break;
        case AuctionAdConfigMaybePromiseBuyerCurrencies.Tags.value:
          result.value = decoder.decodeStructPointer(AuctionAdConfigBuyerCurrencies);
          break;
      }
      decoder.align();

      return result;
    };


    AuctionAdConfigMaybePromiseBuyerCurrencies.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case AuctionAdConfigMaybePromiseBuyerCurrencies.Tags.promise:
          

          break;
        case AuctionAdConfigMaybePromiseBuyerCurrencies.Tags.value:
          

    // validate AuctionAdConfigMaybePromiseBuyerCurrencies.value
    err = messageValidator.validateStructPointer(data_offset, AuctionAdConfigBuyerCurrencies, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  AuctionAdConfigMaybePromiseBuyerCurrencies.encodedSize = 16;

  function AuctionAdConfigMaybePromiseDirectFromSellerSignals(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  AuctionAdConfigMaybePromiseDirectFromSellerSignals.Tags = {
    promise: 0,
    value: 1,
  };

  AuctionAdConfigMaybePromiseDirectFromSellerSignals.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  AuctionAdConfigMaybePromiseDirectFromSellerSignals.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "promise",
        "value",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a AuctionAdConfigMaybePromiseDirectFromSellerSignals member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(AuctionAdConfigMaybePromiseDirectFromSellerSignals.prototype, "promise", {
    get: function() {
      if (this.$tag != AuctionAdConfigMaybePromiseDirectFromSellerSignals.Tags.promise) {
        throw new ReferenceError(
            "AuctionAdConfigMaybePromiseDirectFromSellerSignals.promise is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AuctionAdConfigMaybePromiseDirectFromSellerSignals.Tags.promise;
      this.$data = value;
    }
  });
  Object.defineProperty(AuctionAdConfigMaybePromiseDirectFromSellerSignals.prototype, "value", {
    get: function() {
      if (this.$tag != AuctionAdConfigMaybePromiseDirectFromSellerSignals.Tags.value) {
        throw new ReferenceError(
            "AuctionAdConfigMaybePromiseDirectFromSellerSignals.value is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AuctionAdConfigMaybePromiseDirectFromSellerSignals.Tags.value;
      this.$data = value;
    }
  });


    AuctionAdConfigMaybePromiseDirectFromSellerSignals.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case AuctionAdConfigMaybePromiseDirectFromSellerSignals.Tags.promise:
          encoder.encodeStruct(codec.Uint32, val.promise);
          break;
        case AuctionAdConfigMaybePromiseDirectFromSellerSignals.Tags.value:
          encoder.encodeStructPointer(DirectFromSellerSignals, val.value);
          break;
      }
      encoder.align();
    };


    AuctionAdConfigMaybePromiseDirectFromSellerSignals.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new AuctionAdConfigMaybePromiseDirectFromSellerSignals();
      var tag = decoder.readUint32();
      switch (tag) {
        case AuctionAdConfigMaybePromiseDirectFromSellerSignals.Tags.promise:
          result.promise = decoder.decodeStruct(codec.Uint32);
          break;
        case AuctionAdConfigMaybePromiseDirectFromSellerSignals.Tags.value:
          result.value = decoder.decodeStructPointer(DirectFromSellerSignals);
          break;
      }
      decoder.align();

      return result;
    };


    AuctionAdConfigMaybePromiseDirectFromSellerSignals.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case AuctionAdConfigMaybePromiseDirectFromSellerSignals.Tags.promise:
          

          break;
        case AuctionAdConfigMaybePromiseDirectFromSellerSignals.Tags.value:
          

    // validate AuctionAdConfigMaybePromiseDirectFromSellerSignals.value
    err = messageValidator.validateStructPointer(data_offset, DirectFromSellerSignals, true);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  AuctionAdConfigMaybePromiseDirectFromSellerSignals.encodedSize = 16;
  exports.MAX_INTEREST_GROUP_SIZE = MAX_INTEREST_GROUP_SIZE;
  exports.MAX_ALLOWED_REPORTING_ORIGINS = MAX_ALLOWED_REPORTING_ORIGINS;
  exports.InterestGroupAd = InterestGroupAd;
  exports.SellerCapabilities = SellerCapabilities;
  exports.AuctionServerRequestFlags = AuctionServerRequestFlags;
  exports.InterestGroup = InterestGroup;
  exports.DirectFromSellerSignalsSubresource = DirectFromSellerSignalsSubresource;
  exports.DirectFromSellerSignals = DirectFromSellerSignals;
  exports.AuctionAdConfigBuyerTimeouts = AuctionAdConfigBuyerTimeouts;
  exports.AdCurrency = AdCurrency;
  exports.AuctionAdConfigBuyerCurrencies = AuctionAdConfigBuyerCurrencies;
  exports.AuctionAdServerResponseConfig = AuctionAdServerResponseConfig;
  exports.AuctionReportBuyersConfig = AuctionReportBuyersConfig;
  exports.AuctionAdConfigNonSharedParams = AuctionAdConfigNonSharedParams;
  exports.AuctionAdConfig = AuctionAdConfig;
  exports.AuctionAdConfigMaybePromiseJson = AuctionAdConfigMaybePromiseJson;
  exports.AuctionAdConfigMaybePromisePerBuyerSignals = AuctionAdConfigMaybePromisePerBuyerSignals;
  exports.AuctionAdConfigMaybePromiseBuyerTimeouts = AuctionAdConfigMaybePromiseBuyerTimeouts;
  exports.AuctionAdConfigMaybePromiseBuyerCurrencies = AuctionAdConfigMaybePromiseBuyerCurrencies;
  exports.AuctionAdConfigMaybePromiseDirectFromSellerSignals = AuctionAdConfigMaybePromiseDirectFromSellerSignals;
})();