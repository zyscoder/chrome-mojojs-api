// third_party/blink/public/mojom/service_worker/service_worker_router_rule.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/service_worker/service_worker_router_rule.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var fetch_api$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/fetch_api.mojom', '../../../../../services/network/public/mojom/fetch_api.mojom.js');
  }
  var safe_url_pattern$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/safe_url_pattern.mojom', '../safe_url_pattern.mojom.js');
  }


  var ServiceWorkerRouterRunningStatusEnum = {};
  ServiceWorkerRouterRunningStatusEnum.kRunning = 0;
  ServiceWorkerRouterRunningStatusEnum.kNotRunning = 1;
  ServiceWorkerRouterRunningStatusEnum.MIN_VALUE = 0;
  ServiceWorkerRouterRunningStatusEnum.MAX_VALUE = 1;

  ServiceWorkerRouterRunningStatusEnum.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  ServiceWorkerRouterRunningStatusEnum.toKnownEnumValue = function(value) {
    return value;
  };

  ServiceWorkerRouterRunningStatusEnum.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function ServiceWorkerRouterRunningStatusCondition(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerRouterRunningStatusCondition.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorkerRouterRunningStatusCondition.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerRouterRunningStatusCondition.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerRouterRunningStatusCondition.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ServiceWorkerRouterRunningStatusEnum);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerRouterRunningStatusCondition.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerRouterRunningStatusCondition.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerRouterRunningStatusCondition();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(ServiceWorkerRouterRunningStatusEnum));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorkerRouterRunningStatusCondition.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerRouterRunningStatusCondition.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorkerRouterRequestCondition(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerRouterRequestCondition.prototype.initDefaults_ = function() {
    this.method = null;
    this.hasMode = false;
    this.hasDestination = false;
    this.mode = 0;
    this.destination = 0;
  };
  ServiceWorkerRouterRequestCondition.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerRouterRequestCondition.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerRouterRequestCondition.method
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;



    // validate ServiceWorkerRouterRequestCondition.mode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 12, fetch_api$.RequestMode);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ServiceWorkerRouterRequestCondition.destination
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, fetch_api$.RequestDestination);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerRouterRequestCondition.encodedSize = codec.kStructHeaderSize + 24;

  ServiceWorkerRouterRequestCondition.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerRouterRequestCondition();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.method =
        decoder.decodeStruct(codec.NullableString);
    packed = decoder.readUint8();
    val.hasMode = (packed >> 0) & 1 ? true : false;
    val.hasDestination = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.mode =
        decoder.decodeStruct(new codec.Enum(fetch_api$.RequestMode));
    val.destination =
        decoder.decodeStruct(new codec.Enum(fetch_api$.RequestDestination));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorkerRouterRequestCondition.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerRouterRequestCondition.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.method);
    packed = 0;
    packed |= (val.hasMode & 1) << 0
    packed |= (val.hasDestination & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.mode);
    encoder.encodeStruct(codec.Int32, val.destination);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorkerRouterConditionObject(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerRouterConditionObject.prototype.initDefaults_ = function() {
    this.conditions = null;
  };
  ServiceWorkerRouterConditionObject.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerRouterConditionObject.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerRouterConditionObject.conditions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 16, ServiceWorkerRouterCondition, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerRouterConditionObject.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerRouterConditionObject.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerRouterConditionObject();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.conditions =
        decoder.decodeArrayPointer(ServiceWorkerRouterCondition);
    return val;
  };

  ServiceWorkerRouterConditionObject.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerRouterConditionObject.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(ServiceWorkerRouterCondition, val.conditions);
  };
  function ServiceWorkerRouterOrCondition(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerRouterOrCondition.prototype.initDefaults_ = function() {
    this.objects = null;
  };
  ServiceWorkerRouterOrCondition.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerRouterOrCondition.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerRouterOrCondition.objects
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(ServiceWorkerRouterConditionObject), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerRouterOrCondition.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerRouterOrCondition.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerRouterOrCondition();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.objects =
        decoder.decodeArrayPointer(new codec.PointerTo(ServiceWorkerRouterConditionObject));
    return val;
  };

  ServiceWorkerRouterOrCondition.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerRouterOrCondition.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(ServiceWorkerRouterConditionObject), val.objects);
  };
  function ServiceWorkerRouterNetworkSource(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerRouterNetworkSource.prototype.initDefaults_ = function() {
  };
  ServiceWorkerRouterNetworkSource.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerRouterNetworkSource.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerRouterNetworkSource.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorkerRouterNetworkSource.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerRouterNetworkSource();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorkerRouterNetworkSource.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerRouterNetworkSource.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorkerRouterRaceSource(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerRouterRaceSource.prototype.initDefaults_ = function() {
  };
  ServiceWorkerRouterRaceSource.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerRouterRaceSource.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerRouterRaceSource.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorkerRouterRaceSource.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerRouterRaceSource();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorkerRouterRaceSource.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerRouterRaceSource.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorkerRouterFetchEventSource(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerRouterFetchEventSource.prototype.initDefaults_ = function() {
  };
  ServiceWorkerRouterFetchEventSource.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerRouterFetchEventSource.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerRouterFetchEventSource.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorkerRouterFetchEventSource.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerRouterFetchEventSource();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorkerRouterFetchEventSource.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerRouterFetchEventSource.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorkerRouterCacheSource(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerRouterCacheSource.prototype.initDefaults_ = function() {
    this.cacheName = null;
  };
  ServiceWorkerRouterCacheSource.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerRouterCacheSource.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerRouterCacheSource.cacheName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerRouterCacheSource.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerRouterCacheSource.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerRouterCacheSource();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cacheName =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  ServiceWorkerRouterCacheSource.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerRouterCacheSource.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.cacheName);
  };
  function ServiceWorkerRouterRule(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerRouterRule.prototype.initDefaults_ = function() {
    this.conditions = null;
    this.sources = null;
  };
  ServiceWorkerRouterRule.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerRouterRule.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerRouterRule.conditions
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 16, ServiceWorkerRouterCondition, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerRouterRule.sources
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 16, ServiceWorkerRouterSource, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerRouterRule.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorkerRouterRule.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerRouterRule();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.conditions =
        decoder.decodeArrayPointer(ServiceWorkerRouterCondition);
    val.sources =
        decoder.decodeArrayPointer(ServiceWorkerRouterSource);
    return val;
  };

  ServiceWorkerRouterRule.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerRouterRule.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(ServiceWorkerRouterCondition, val.conditions);
    encoder.encodeArrayPointer(ServiceWorkerRouterSource, val.sources);
  };
  function ServiceWorkerRouterRules(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerRouterRules.prototype.initDefaults_ = function() {
    this.rules = null;
  };
  ServiceWorkerRouterRules.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerRouterRules.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerRouterRules.rules
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(ServiceWorkerRouterRule), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerRouterRules.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerRouterRules.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerRouterRules();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rules =
        decoder.decodeArrayPointer(new codec.PointerTo(ServiceWorkerRouterRule));
    return val;
  };

  ServiceWorkerRouterRules.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerRouterRules.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(ServiceWorkerRouterRule), val.rules);
  };

  function ServiceWorkerRouterCondition(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  ServiceWorkerRouterCondition.Tags = {
    urlPattern: 0,
    request: 1,
    runningStatus: 2,
    orCondition: 3,
  };

  ServiceWorkerRouterCondition.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  ServiceWorkerRouterCondition.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "urlPattern",
        "request",
        "runningStatus",
        "orCondition",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a ServiceWorkerRouterCondition member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(ServiceWorkerRouterCondition.prototype, "urlPattern", {
    get: function() {
      if (this.$tag != ServiceWorkerRouterCondition.Tags.urlPattern) {
        throw new ReferenceError(
            "ServiceWorkerRouterCondition.urlPattern is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ServiceWorkerRouterCondition.Tags.urlPattern;
      this.$data = value;
    }
  });
  Object.defineProperty(ServiceWorkerRouterCondition.prototype, "request", {
    get: function() {
      if (this.$tag != ServiceWorkerRouterCondition.Tags.request) {
        throw new ReferenceError(
            "ServiceWorkerRouterCondition.request is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ServiceWorkerRouterCondition.Tags.request;
      this.$data = value;
    }
  });
  Object.defineProperty(ServiceWorkerRouterCondition.prototype, "runningStatus", {
    get: function() {
      if (this.$tag != ServiceWorkerRouterCondition.Tags.runningStatus) {
        throw new ReferenceError(
            "ServiceWorkerRouterCondition.runningStatus is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ServiceWorkerRouterCondition.Tags.runningStatus;
      this.$data = value;
    }
  });
  Object.defineProperty(ServiceWorkerRouterCondition.prototype, "orCondition", {
    get: function() {
      if (this.$tag != ServiceWorkerRouterCondition.Tags.orCondition) {
        throw new ReferenceError(
            "ServiceWorkerRouterCondition.orCondition is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ServiceWorkerRouterCondition.Tags.orCondition;
      this.$data = value;
    }
  });


    ServiceWorkerRouterCondition.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case ServiceWorkerRouterCondition.Tags.urlPattern:
          encoder.encodeStructPointer(safe_url_pattern$.SafeUrlPattern, val.urlPattern);
          break;
        case ServiceWorkerRouterCondition.Tags.request:
          encoder.encodeStructPointer(ServiceWorkerRouterRequestCondition, val.request);
          break;
        case ServiceWorkerRouterCondition.Tags.runningStatus:
          encoder.encodeStructPointer(ServiceWorkerRouterRunningStatusCondition, val.runningStatus);
          break;
        case ServiceWorkerRouterCondition.Tags.orCondition:
          encoder.encodeStructPointer(ServiceWorkerRouterOrCondition, val.orCondition);
          break;
      }
      encoder.align();
    };


    ServiceWorkerRouterCondition.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new ServiceWorkerRouterCondition();
      var tag = decoder.readUint32();
      switch (tag) {
        case ServiceWorkerRouterCondition.Tags.urlPattern:
          result.urlPattern = decoder.decodeStructPointer(safe_url_pattern$.SafeUrlPattern);
          break;
        case ServiceWorkerRouterCondition.Tags.request:
          result.request = decoder.decodeStructPointer(ServiceWorkerRouterRequestCondition);
          break;
        case ServiceWorkerRouterCondition.Tags.runningStatus:
          result.runningStatus = decoder.decodeStructPointer(ServiceWorkerRouterRunningStatusCondition);
          break;
        case ServiceWorkerRouterCondition.Tags.orCondition:
          result.orCondition = decoder.decodeStructPointer(ServiceWorkerRouterOrCondition);
          break;
      }
      decoder.align();

      return result;
    };


    ServiceWorkerRouterCondition.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case ServiceWorkerRouterCondition.Tags.urlPattern:
          

    // validate ServiceWorkerRouterCondition.urlPattern
    err = messageValidator.validateStructPointer(data_offset, safe_url_pattern$.SafeUrlPattern, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ServiceWorkerRouterCondition.Tags.request:
          

    // validate ServiceWorkerRouterCondition.request
    err = messageValidator.validateStructPointer(data_offset, ServiceWorkerRouterRequestCondition, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ServiceWorkerRouterCondition.Tags.runningStatus:
          

    // validate ServiceWorkerRouterCondition.runningStatus
    err = messageValidator.validateStructPointer(data_offset, ServiceWorkerRouterRunningStatusCondition, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ServiceWorkerRouterCondition.Tags.orCondition:
          

    // validate ServiceWorkerRouterCondition.orCondition
    err = messageValidator.validateStructPointer(data_offset, ServiceWorkerRouterOrCondition, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  ServiceWorkerRouterCondition.encodedSize = 16;

  function ServiceWorkerRouterSource(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  ServiceWorkerRouterSource.Tags = {
    networkSource: 0,
    raceSource: 1,
    fetchEventSource: 2,
    cacheSource: 3,
  };

  ServiceWorkerRouterSource.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  ServiceWorkerRouterSource.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "networkSource",
        "raceSource",
        "fetchEventSource",
        "cacheSource",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a ServiceWorkerRouterSource member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(ServiceWorkerRouterSource.prototype, "networkSource", {
    get: function() {
      if (this.$tag != ServiceWorkerRouterSource.Tags.networkSource) {
        throw new ReferenceError(
            "ServiceWorkerRouterSource.networkSource is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ServiceWorkerRouterSource.Tags.networkSource;
      this.$data = value;
    }
  });
  Object.defineProperty(ServiceWorkerRouterSource.prototype, "raceSource", {
    get: function() {
      if (this.$tag != ServiceWorkerRouterSource.Tags.raceSource) {
        throw new ReferenceError(
            "ServiceWorkerRouterSource.raceSource is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ServiceWorkerRouterSource.Tags.raceSource;
      this.$data = value;
    }
  });
  Object.defineProperty(ServiceWorkerRouterSource.prototype, "fetchEventSource", {
    get: function() {
      if (this.$tag != ServiceWorkerRouterSource.Tags.fetchEventSource) {
        throw new ReferenceError(
            "ServiceWorkerRouterSource.fetchEventSource is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ServiceWorkerRouterSource.Tags.fetchEventSource;
      this.$data = value;
    }
  });
  Object.defineProperty(ServiceWorkerRouterSource.prototype, "cacheSource", {
    get: function() {
      if (this.$tag != ServiceWorkerRouterSource.Tags.cacheSource) {
        throw new ReferenceError(
            "ServiceWorkerRouterSource.cacheSource is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ServiceWorkerRouterSource.Tags.cacheSource;
      this.$data = value;
    }
  });


    ServiceWorkerRouterSource.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case ServiceWorkerRouterSource.Tags.networkSource:
          encoder.encodeStructPointer(ServiceWorkerRouterNetworkSource, val.networkSource);
          break;
        case ServiceWorkerRouterSource.Tags.raceSource:
          encoder.encodeStructPointer(ServiceWorkerRouterRaceSource, val.raceSource);
          break;
        case ServiceWorkerRouterSource.Tags.fetchEventSource:
          encoder.encodeStructPointer(ServiceWorkerRouterFetchEventSource, val.fetchEventSource);
          break;
        case ServiceWorkerRouterSource.Tags.cacheSource:
          encoder.encodeStructPointer(ServiceWorkerRouterCacheSource, val.cacheSource);
          break;
      }
      encoder.align();
    };


    ServiceWorkerRouterSource.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new ServiceWorkerRouterSource();
      var tag = decoder.readUint32();
      switch (tag) {
        case ServiceWorkerRouterSource.Tags.networkSource:
          result.networkSource = decoder.decodeStructPointer(ServiceWorkerRouterNetworkSource);
          break;
        case ServiceWorkerRouterSource.Tags.raceSource:
          result.raceSource = decoder.decodeStructPointer(ServiceWorkerRouterRaceSource);
          break;
        case ServiceWorkerRouterSource.Tags.fetchEventSource:
          result.fetchEventSource = decoder.decodeStructPointer(ServiceWorkerRouterFetchEventSource);
          break;
        case ServiceWorkerRouterSource.Tags.cacheSource:
          result.cacheSource = decoder.decodeStructPointer(ServiceWorkerRouterCacheSource);
          break;
      }
      decoder.align();

      return result;
    };


    ServiceWorkerRouterSource.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case ServiceWorkerRouterSource.Tags.networkSource:
          

    // validate ServiceWorkerRouterSource.networkSource
    err = messageValidator.validateStructPointer(data_offset, ServiceWorkerRouterNetworkSource, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ServiceWorkerRouterSource.Tags.raceSource:
          

    // validate ServiceWorkerRouterSource.raceSource
    err = messageValidator.validateStructPointer(data_offset, ServiceWorkerRouterRaceSource, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ServiceWorkerRouterSource.Tags.fetchEventSource:
          

    // validate ServiceWorkerRouterSource.fetchEventSource
    err = messageValidator.validateStructPointer(data_offset, ServiceWorkerRouterFetchEventSource, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ServiceWorkerRouterSource.Tags.cacheSource:
          

    // validate ServiceWorkerRouterSource.cacheSource
    err = messageValidator.validateStructPointer(data_offset, ServiceWorkerRouterCacheSource, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  ServiceWorkerRouterSource.encodedSize = 16;
  exports.ServiceWorkerRouterRunningStatusEnum = ServiceWorkerRouterRunningStatusEnum;
  exports.ServiceWorkerRouterRunningStatusCondition = ServiceWorkerRouterRunningStatusCondition;
  exports.ServiceWorkerRouterRequestCondition = ServiceWorkerRouterRequestCondition;
  exports.ServiceWorkerRouterConditionObject = ServiceWorkerRouterConditionObject;
  exports.ServiceWorkerRouterOrCondition = ServiceWorkerRouterOrCondition;
  exports.ServiceWorkerRouterNetworkSource = ServiceWorkerRouterNetworkSource;
  exports.ServiceWorkerRouterRaceSource = ServiceWorkerRouterRaceSource;
  exports.ServiceWorkerRouterFetchEventSource = ServiceWorkerRouterFetchEventSource;
  exports.ServiceWorkerRouterCacheSource = ServiceWorkerRouterCacheSource;
  exports.ServiceWorkerRouterRule = ServiceWorkerRouterRule;
  exports.ServiceWorkerRouterRules = ServiceWorkerRouterRules;
  exports.ServiceWorkerRouterCondition = ServiceWorkerRouterCondition;
  exports.ServiceWorkerRouterSource = ServiceWorkerRouterSource;
})();