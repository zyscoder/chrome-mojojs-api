// third_party/blink/public/mojom/service_worker/service_worker.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/service_worker/service_worker.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var read_only_buffer$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_buffer.mojom', '../../../../../mojo/public/mojom/base/read_only_buffer.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var values$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/values.mojom', '../../../../../mojo/public/mojom/base/values.mojom.js');
  }
  var cookie_manager$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/cookie_manager.mojom', '../../../../../services/network/public/mojom/cookie_manager.mojom.js');
  }
  var url_loader_factory$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_loader_factory.mojom', '../../../../../services/network/public/mojom/url_loader_factory.mojom.js');
  }
  var associated_interfaces$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/associated_interfaces/associated_interfaces.mojom', '../associated_interfaces/associated_interfaces.mojom.js');
  }
  var background_fetch$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/background_fetch/background_fetch.mojom', '../background_fetch/background_fetch.mojom.js');
  }
  var console_message$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/devtools/console_message.mojom', '../devtools/console_message.mojom.js');
  }
  var fetch_api_response$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/fetch/fetch_api_response.mojom', '../fetch/fetch_api_response.mojom.js');
  }
  var reporting_observer$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/frame/reporting_observer.mojom', '../frame/reporting_observer.mojom.js');
  }
  var url_loader_factory_bundle$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom', '../loader/url_loader_factory_bundle.mojom.js');
  }
  var transferable_message$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/messaging/transferable_message.mojom', '../messaging/transferable_message.mojom.js');
  }
  var notification$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/notifications/notification.mojom', '../notifications/notification.mojom.js');
  }
  var payment_app$ =
      mojo.internal.exposeNamespace('payments.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/payments/payment_app.mojom', '../payments/payment_app.mojom.js');
  }
  var push_messaging$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/push_messaging/push_messaging.mojom', '../push_messaging/push_messaging.mojom.js');
  }
  var dispatch_fetch_event_params$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/dispatch_fetch_event_params.mojom', 'dispatch_fetch_event_params.mojom.js');
  }
  var service_worker_ancestor_frame_type$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_ancestor_frame_type.mojom', 'service_worker_ancestor_frame_type.mojom.js');
  }
  var service_worker_client$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_client.mojom', 'service_worker_client.mojom.js');
  }
  var service_worker_error_type$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_error_type.mojom', 'service_worker_error_type.mojom.js');
  }
  var service_worker_event_status$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_event_status.mojom', 'service_worker_event_status.mojom.js');
  }
  var service_worker_fetch_response_callback$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_fetch_response_callback.mojom', 'service_worker_fetch_response_callback.mojom.js');
  }
  var service_worker_object$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_object.mojom', 'service_worker_object.mojom.js');
  }
  var service_worker_registration$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_registration.mojom', 'service_worker_registration.mojom.js');
  }
  var service_worker_router_rule$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/service_worker/service_worker_router_rule.mojom', 'service_worker_router_rule.mojom.js');
  }
  var storage_key$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/storage_key/storage_key.mojom', '../storage_key/storage_key.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../../url/mojom/origin.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }


  var PUSH_EVENT_TIMEOUT_SECONDS = 90;
  var SERVICE_WORKER_DEFAULT_IDLE_DELAY_IN_SECONDS = 30;
  var FetchHandlerExistence = {};
  FetchHandlerExistence.UNKNOWN = 0;
  FetchHandlerExistence.EXISTS = 1;
  FetchHandlerExistence.DOES_NOT_EXIST = 2;
  FetchHandlerExistence.MIN_VALUE = 0;
  FetchHandlerExistence.MAX_VALUE = 2;

  FetchHandlerExistence.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  FetchHandlerExistence.toKnownEnumValue = function(value) {
    return value;
  };

  FetchHandlerExistence.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function ExtendableMessageEvent(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ExtendableMessageEvent.prototype.initDefaults_ = function() {
    this.message = null;
    this.sourceOrigin = null;
    this.sourceInfoForClient = null;
    this.sourceInfoForServiceWorker = null;
  };
  ExtendableMessageEvent.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ExtendableMessageEvent.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ExtendableMessageEvent.message
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, transferable_message$.TransferableMessage, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ExtendableMessageEvent.sourceOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ExtendableMessageEvent.sourceInfoForClient
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, service_worker_client$.ServiceWorkerClientInfo, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ExtendableMessageEvent.sourceInfoForServiceWorker
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, service_worker_object$.ServiceWorkerObjectInfo, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ExtendableMessageEvent.encodedSize = codec.kStructHeaderSize + 32;

  ExtendableMessageEvent.decode = function(decoder) {
    var packed;
    var val = new ExtendableMessageEvent();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message =
        decoder.decodeStructPointer(transferable_message$.TransferableMessage);
    val.sourceOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.sourceInfoForClient =
        decoder.decodeStructPointer(service_worker_client$.ServiceWorkerClientInfo);
    val.sourceInfoForServiceWorker =
        decoder.decodeStructPointer(service_worker_object$.ServiceWorkerObjectInfo);
    return val;
  };

  ExtendableMessageEvent.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ExtendableMessageEvent.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(transferable_message$.TransferableMessage, val.message);
    encoder.encodeStructPointer(origin$.Origin, val.sourceOrigin);
    encoder.encodeStructPointer(service_worker_client$.ServiceWorkerClientInfo, val.sourceInfoForClient);
    encoder.encodeStructPointer(service_worker_object$.ServiceWorkerObjectInfo, val.sourceInfoForServiceWorker);
  };
  function ServiceWorkerHost_SetCachedMetadata_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_SetCachedMetadata_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.data = null;
  };
  ServiceWorkerHost_SetCachedMetadata_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_SetCachedMetadata_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_SetCachedMetadata_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_SetCachedMetadata_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, read_only_buffer$.ReadOnlyBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_SetCachedMetadata_Params.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorkerHost_SetCachedMetadata_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_SetCachedMetadata_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.data =
        decoder.decodeStructPointer(read_only_buffer$.ReadOnlyBuffer);
    return val;
  };

  ServiceWorkerHost_SetCachedMetadata_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_SetCachedMetadata_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(read_only_buffer$.ReadOnlyBuffer, val.data);
  };
  function ServiceWorkerHost_ClearCachedMetadata_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_ClearCachedMetadata_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  ServiceWorkerHost_ClearCachedMetadata_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_ClearCachedMetadata_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_ClearCachedMetadata_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_ClearCachedMetadata_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_ClearCachedMetadata_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_ClearCachedMetadata_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  ServiceWorkerHost_ClearCachedMetadata_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_ClearCachedMetadata_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function ServiceWorkerHost_GetClients_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_GetClients_Params.prototype.initDefaults_ = function() {
    this.options = null;
  };
  ServiceWorkerHost_GetClients_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_GetClients_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_GetClients_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, service_worker_client$.ServiceWorkerClientQueryOptions, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_GetClients_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_GetClients_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_GetClients_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.options =
        decoder.decodeStructPointer(service_worker_client$.ServiceWorkerClientQueryOptions);
    return val;
  };

  ServiceWorkerHost_GetClients_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_GetClients_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(service_worker_client$.ServiceWorkerClientQueryOptions, val.options);
  };
  function ServiceWorkerHost_GetClients_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_GetClients_ResponseParams.prototype.initDefaults_ = function() {
    this.clients = null;
  };
  ServiceWorkerHost_GetClients_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_GetClients_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_GetClients_ResponseParams.clients
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(service_worker_client$.ServiceWorkerClientInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_GetClients_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_GetClients_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_GetClients_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clients =
        decoder.decodeArrayPointer(new codec.PointerTo(service_worker_client$.ServiceWorkerClientInfo));
    return val;
  };

  ServiceWorkerHost_GetClients_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_GetClients_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(service_worker_client$.ServiceWorkerClientInfo), val.clients);
  };
  function ServiceWorkerHost_GetClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_GetClient_Params.prototype.initDefaults_ = function() {
    this.clientUuid = null;
  };
  ServiceWorkerHost_GetClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_GetClient_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_GetClient_Params.clientUuid
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_GetClient_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_GetClient_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_GetClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clientUuid =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ServiceWorkerHost_GetClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_GetClient_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.clientUuid);
  };
  function ServiceWorkerHost_GetClient_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_GetClient_ResponseParams.prototype.initDefaults_ = function() {
    this.client = null;
  };
  ServiceWorkerHost_GetClient_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_GetClient_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_GetClient_ResponseParams.client
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, service_worker_client$.ServiceWorkerClientInfo, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_GetClient_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_GetClient_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_GetClient_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client =
        decoder.decodeStructPointer(service_worker_client$.ServiceWorkerClientInfo);
    return val;
  };

  ServiceWorkerHost_GetClient_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_GetClient_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(service_worker_client$.ServiceWorkerClientInfo, val.client);
  };
  function ServiceWorkerHost_OpenNewTab_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_OpenNewTab_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  ServiceWorkerHost_OpenNewTab_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_OpenNewTab_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_OpenNewTab_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_OpenNewTab_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_OpenNewTab_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_OpenNewTab_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  ServiceWorkerHost_OpenNewTab_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_OpenNewTab_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function ServiceWorkerHost_OpenNewTab_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_OpenNewTab_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.client = null;
    this.errorMsg = null;
  };
  ServiceWorkerHost_OpenNewTab_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_OpenNewTab_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ServiceWorkerHost_OpenNewTab_ResponseParams.client
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, service_worker_client$.ServiceWorkerClientInfo, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_OpenNewTab_ResponseParams.errorMsg
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_OpenNewTab_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  ServiceWorkerHost_OpenNewTab_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_OpenNewTab_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.client =
        decoder.decodeStructPointer(service_worker_client$.ServiceWorkerClientInfo);
    val.errorMsg =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  ServiceWorkerHost_OpenNewTab_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_OpenNewTab_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(service_worker_client$.ServiceWorkerClientInfo, val.client);
    encoder.encodeStruct(codec.NullableString, val.errorMsg);
  };
  function ServiceWorkerHost_OpenPaymentHandlerWindow_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_OpenPaymentHandlerWindow_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  ServiceWorkerHost_OpenPaymentHandlerWindow_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_OpenPaymentHandlerWindow_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_OpenPaymentHandlerWindow_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_OpenPaymentHandlerWindow_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_OpenPaymentHandlerWindow_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_OpenPaymentHandlerWindow_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  ServiceWorkerHost_OpenPaymentHandlerWindow_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_OpenPaymentHandlerWindow_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.client = null;
    this.errorMsg = null;
  };
  ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams.client
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, service_worker_client$.ServiceWorkerClientInfo, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams.errorMsg
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.client =
        decoder.decodeStructPointer(service_worker_client$.ServiceWorkerClientInfo);
    val.errorMsg =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(service_worker_client$.ServiceWorkerClientInfo, val.client);
    encoder.encodeStruct(codec.NullableString, val.errorMsg);
  };
  function ServiceWorkerHost_PostMessageToClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_PostMessageToClient_Params.prototype.initDefaults_ = function() {
    this.clientUuid = null;
    this.message = null;
  };
  ServiceWorkerHost_PostMessageToClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_PostMessageToClient_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_PostMessageToClient_Params.clientUuid
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_PostMessageToClient_Params.message
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, transferable_message$.TransferableMessage, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_PostMessageToClient_Params.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorkerHost_PostMessageToClient_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_PostMessageToClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clientUuid =
        decoder.decodeStruct(codec.String);
    val.message =
        decoder.decodeStructPointer(transferable_message$.TransferableMessage);
    return val;
  };

  ServiceWorkerHost_PostMessageToClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_PostMessageToClient_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.clientUuid);
    encoder.encodeStructPointer(transferable_message$.TransferableMessage, val.message);
  };
  function ServiceWorkerHost_FocusClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_FocusClient_Params.prototype.initDefaults_ = function() {
    this.clientUuid = null;
  };
  ServiceWorkerHost_FocusClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_FocusClient_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_FocusClient_Params.clientUuid
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_FocusClient_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_FocusClient_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_FocusClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clientUuid =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ServiceWorkerHost_FocusClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_FocusClient_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.clientUuid);
  };
  function ServiceWorkerHost_FocusClient_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_FocusClient_ResponseParams.prototype.initDefaults_ = function() {
    this.client = null;
  };
  ServiceWorkerHost_FocusClient_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_FocusClient_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_FocusClient_ResponseParams.client
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, service_worker_client$.ServiceWorkerClientInfo, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_FocusClient_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_FocusClient_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_FocusClient_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client =
        decoder.decodeStructPointer(service_worker_client$.ServiceWorkerClientInfo);
    return val;
  };

  ServiceWorkerHost_FocusClient_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_FocusClient_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(service_worker_client$.ServiceWorkerClientInfo, val.client);
  };
  function ServiceWorkerHost_NavigateClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_NavigateClient_Params.prototype.initDefaults_ = function() {
    this.clientUuid = null;
    this.url = null;
  };
  ServiceWorkerHost_NavigateClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_NavigateClient_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_NavigateClient_Params.clientUuid
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_NavigateClient_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_NavigateClient_Params.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorkerHost_NavigateClient_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_NavigateClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clientUuid =
        decoder.decodeStruct(codec.String);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  ServiceWorkerHost_NavigateClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_NavigateClient_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.clientUuid);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function ServiceWorkerHost_NavigateClient_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_NavigateClient_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.client = null;
    this.errorMsg = null;
  };
  ServiceWorkerHost_NavigateClient_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_NavigateClient_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ServiceWorkerHost_NavigateClient_ResponseParams.client
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, service_worker_client$.ServiceWorkerClientInfo, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_NavigateClient_ResponseParams.errorMsg
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_NavigateClient_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  ServiceWorkerHost_NavigateClient_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_NavigateClient_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.client =
        decoder.decodeStructPointer(service_worker_client$.ServiceWorkerClientInfo);
    val.errorMsg =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  ServiceWorkerHost_NavigateClient_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_NavigateClient_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(service_worker_client$.ServiceWorkerClientInfo, val.client);
    encoder.encodeStruct(codec.NullableString, val.errorMsg);
  };
  function ServiceWorkerHost_SkipWaiting_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_SkipWaiting_Params.prototype.initDefaults_ = function() {
  };
  ServiceWorkerHost_SkipWaiting_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_SkipWaiting_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_SkipWaiting_Params.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorkerHost_SkipWaiting_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_SkipWaiting_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorkerHost_SkipWaiting_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_SkipWaiting_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorkerHost_SkipWaiting_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_SkipWaiting_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  ServiceWorkerHost_SkipWaiting_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_SkipWaiting_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ServiceWorkerHost_SkipWaiting_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_SkipWaiting_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_SkipWaiting_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorkerHost_SkipWaiting_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_SkipWaiting_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorkerHost_ClaimClients_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_ClaimClients_Params.prototype.initDefaults_ = function() {
  };
  ServiceWorkerHost_ClaimClients_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_ClaimClients_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_ClaimClients_Params.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorkerHost_ClaimClients_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_ClaimClients_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorkerHost_ClaimClients_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_ClaimClients_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorkerHost_ClaimClients_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_ClaimClients_ResponseParams.prototype.initDefaults_ = function() {
    this.error = 0;
    this.errorMsg = null;
  };
  ServiceWorkerHost_ClaimClients_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_ClaimClients_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_ClaimClients_ResponseParams.error
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_error_type$.ServiceWorkerErrorType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_ClaimClients_ResponseParams.errorMsg
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_ClaimClients_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorkerHost_ClaimClients_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_ClaimClients_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.error =
        decoder.decodeStruct(new codec.Enum(service_worker_error_type$.ServiceWorkerErrorType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.errorMsg =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  ServiceWorkerHost_ClaimClients_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_ClaimClients_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.error);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.NullableString, val.errorMsg);
  };
  function ServiceWorkerHost_RegisterRouter_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_RegisterRouter_Params.prototype.initDefaults_ = function() {
    this.rules = null;
  };
  ServiceWorkerHost_RegisterRouter_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_RegisterRouter_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorkerHost_RegisterRouter_Params.rules
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, service_worker_router_rule$.ServiceWorkerRouterRules, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_RegisterRouter_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorkerHost_RegisterRouter_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_RegisterRouter_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rules =
        decoder.decodeStructPointer(service_worker_router_rule$.ServiceWorkerRouterRules);
    return val;
  };

  ServiceWorkerHost_RegisterRouter_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_RegisterRouter_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(service_worker_router_rule$.ServiceWorkerRouterRules, val.rules);
  };
  function ServiceWorkerHost_RegisterRouter_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorkerHost_RegisterRouter_ResponseParams.prototype.initDefaults_ = function() {
  };
  ServiceWorkerHost_RegisterRouter_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorkerHost_RegisterRouter_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorkerHost_RegisterRouter_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorkerHost_RegisterRouter_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorkerHost_RegisterRouter_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorkerHost_RegisterRouter_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorkerHost_RegisterRouter_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorker_InitializeGlobalScope_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_InitializeGlobalScope_Params.prototype.initDefaults_ = function() {
    this.serviceWorkerHost = new associatedBindings.AssociatedInterfacePtrInfo();
    this.associatedInterfacesToBrowser = new associatedBindings.AssociatedInterfacePtrInfo();
    this.associatedInterfacesFromBrowser = new associatedBindings.AssociatedInterfaceRequest();
    this.fetchHandlerExistence = 0;
    this.registrationInfo = null;
    this.serviceWorkerInfo = null;
    this.reportingObserverReceiver = new bindings.InterfaceRequest();
    this.ancestorFrameType = 0;
    this.storageKey = null;
  };
  ServiceWorker_InitializeGlobalScope_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_InitializeGlobalScope_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_InitializeGlobalScope_Params.serviceWorkerHost
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_InitializeGlobalScope_Params.associatedInterfacesToBrowser
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_InitializeGlobalScope_Params.associatedInterfacesFromBrowser
    err = messageValidator.validateAssociatedInterfaceRequest(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_InitializeGlobalScope_Params.registrationInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, service_worker_registration$.ServiceWorkerRegistrationObjectInfo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_InitializeGlobalScope_Params.serviceWorkerInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, service_worker_object$.ServiceWorkerObjectInfo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_InitializeGlobalScope_Params.fetchHandlerExistence
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 20, FetchHandlerExistence);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_InitializeGlobalScope_Params.reportingObserverReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 40, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_InitializeGlobalScope_Params.ancestorFrameType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 44, service_worker_ancestor_frame_type$.AncestorFrameType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_InitializeGlobalScope_Params.storageKey
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, storage_key$.StorageKey, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_InitializeGlobalScope_Params.encodedSize = codec.kStructHeaderSize + 56;

  ServiceWorker_InitializeGlobalScope_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_InitializeGlobalScope_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.serviceWorkerHost =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.associatedInterfacesToBrowser =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.associatedInterfacesFromBrowser =
        decoder.decodeStruct(codec.AssociatedInterfaceRequest);
    val.fetchHandlerExistence =
        decoder.decodeStruct(new codec.Enum(FetchHandlerExistence));
    val.registrationInfo =
        decoder.decodeStructPointer(service_worker_registration$.ServiceWorkerRegistrationObjectInfo);
    val.serviceWorkerInfo =
        decoder.decodeStructPointer(service_worker_object$.ServiceWorkerObjectInfo);
    val.reportingObserverReceiver =
        decoder.decodeStruct(codec.NullableInterfaceRequest);
    val.ancestorFrameType =
        decoder.decodeStruct(new codec.Enum(service_worker_ancestor_frame_type$.AncestorFrameType));
    val.storageKey =
        decoder.decodeStructPointer(storage_key$.StorageKey);
    return val;
  };

  ServiceWorker_InitializeGlobalScope_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_InitializeGlobalScope_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.serviceWorkerHost);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.associatedInterfacesToBrowser);
    encoder.encodeStruct(codec.AssociatedInterfaceRequest, val.associatedInterfacesFromBrowser);
    encoder.encodeStruct(codec.Int32, val.fetchHandlerExistence);
    encoder.encodeStructPointer(service_worker_registration$.ServiceWorkerRegistrationObjectInfo, val.registrationInfo);
    encoder.encodeStructPointer(service_worker_object$.ServiceWorkerObjectInfo, val.serviceWorkerInfo);
    encoder.encodeStruct(codec.NullableInterfaceRequest, val.reportingObserverReceiver);
    encoder.encodeStruct(codec.Int32, val.ancestorFrameType);
    encoder.encodeStructPointer(storage_key$.StorageKey, val.storageKey);
  };
  function ServiceWorker_DispatchInstallEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchInstallEvent_Params.prototype.initDefaults_ = function() {
  };
  ServiceWorker_DispatchInstallEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchInstallEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchInstallEvent_Params.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorker_DispatchInstallEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchInstallEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorker_DispatchInstallEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchInstallEvent_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorker_DispatchInstallEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchInstallEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.fetchCount = 0;
  };
  ServiceWorker_DispatchInstallEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchInstallEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchInstallEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchInstallEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchInstallEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchInstallEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    val.fetchCount =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  ServiceWorker_DispatchInstallEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchInstallEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.encodeStruct(codec.Uint32, val.fetchCount);
  };
  function ServiceWorker_DispatchActivateEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchActivateEvent_Params.prototype.initDefaults_ = function() {
  };
  ServiceWorker_DispatchActivateEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchActivateEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchActivateEvent_Params.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorker_DispatchActivateEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchActivateEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorker_DispatchActivateEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchActivateEvent_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorker_DispatchActivateEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchActivateEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchActivateEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchActivateEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchActivateEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchActivateEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchActivateEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchActivateEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchActivateEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchActivateEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchBackgroundFetchAbortEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchBackgroundFetchAbortEvent_Params.prototype.initDefaults_ = function() {
    this.registration = null;
  };
  ServiceWorker_DispatchBackgroundFetchAbortEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchBackgroundFetchAbortEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchBackgroundFetchAbortEvent_Params.registration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, background_fetch$.BackgroundFetchRegistration, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchBackgroundFetchAbortEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchBackgroundFetchAbortEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchBackgroundFetchAbortEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.registration =
        decoder.decodeStructPointer(background_fetch$.BackgroundFetchRegistration);
    return val;
  };

  ServiceWorker_DispatchBackgroundFetchAbortEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchBackgroundFetchAbortEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(background_fetch$.BackgroundFetchRegistration, val.registration);
  };
  function ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchBackgroundFetchClickEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchBackgroundFetchClickEvent_Params.prototype.initDefaults_ = function() {
    this.registration = null;
  };
  ServiceWorker_DispatchBackgroundFetchClickEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchBackgroundFetchClickEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchBackgroundFetchClickEvent_Params.registration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, background_fetch$.BackgroundFetchRegistration, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchBackgroundFetchClickEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchBackgroundFetchClickEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchBackgroundFetchClickEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.registration =
        decoder.decodeStructPointer(background_fetch$.BackgroundFetchRegistration);
    return val;
  };

  ServiceWorker_DispatchBackgroundFetchClickEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchBackgroundFetchClickEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(background_fetch$.BackgroundFetchRegistration, val.registration);
  };
  function ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchBackgroundFetchFailEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchBackgroundFetchFailEvent_Params.prototype.initDefaults_ = function() {
    this.registration = null;
  };
  ServiceWorker_DispatchBackgroundFetchFailEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchBackgroundFetchFailEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchBackgroundFetchFailEvent_Params.registration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, background_fetch$.BackgroundFetchRegistration, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchBackgroundFetchFailEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchBackgroundFetchFailEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchBackgroundFetchFailEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.registration =
        decoder.decodeStructPointer(background_fetch$.BackgroundFetchRegistration);
    return val;
  };

  ServiceWorker_DispatchBackgroundFetchFailEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchBackgroundFetchFailEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(background_fetch$.BackgroundFetchRegistration, val.registration);
  };
  function ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params.prototype.initDefaults_ = function() {
    this.registration = null;
  };
  ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params.registration
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, background_fetch$.BackgroundFetchRegistration, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.registration =
        decoder.decodeStructPointer(background_fetch$.BackgroundFetchRegistration);
    return val;
  };

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(background_fetch$.BackgroundFetchRegistration, val.registration);
  };
  function ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchCookieChangeEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchCookieChangeEvent_Params.prototype.initDefaults_ = function() {
    this.change = null;
  };
  ServiceWorker_DispatchCookieChangeEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchCookieChangeEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchCookieChangeEvent_Params.change
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, cookie_manager$.CookieChangeInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchCookieChangeEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchCookieChangeEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchCookieChangeEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.change =
        decoder.decodeStructPointer(cookie_manager$.CookieChangeInfo);
    return val;
  };

  ServiceWorker_DispatchCookieChangeEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchCookieChangeEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(cookie_manager$.CookieChangeInfo, val.change);
  };
  function ServiceWorker_DispatchCookieChangeEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchCookieChangeEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchCookieChangeEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchCookieChangeEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchCookieChangeEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchCookieChangeEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchCookieChangeEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchCookieChangeEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchCookieChangeEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchCookieChangeEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchFetchEventForMainResource_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchFetchEventForMainResource_Params.prototype.initDefaults_ = function() {
    this.params = null;
    this.responseCallback = new service_worker_fetch_response_callback$.ServiceWorkerFetchResponseCallbackPtr();
  };
  ServiceWorker_DispatchFetchEventForMainResource_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchFetchEventForMainResource_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchFetchEventForMainResource_Params.params
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, dispatch_fetch_event_params$.DispatchFetchEventParams, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchFetchEventForMainResource_Params.responseCallback
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchFetchEventForMainResource_Params.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorker_DispatchFetchEventForMainResource_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchFetchEventForMainResource_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.params =
        decoder.decodeStructPointer(dispatch_fetch_event_params$.DispatchFetchEventParams);
    val.responseCallback =
        decoder.decodeStruct(new codec.Interface(service_worker_fetch_response_callback$.ServiceWorkerFetchResponseCallbackPtr));
    return val;
  };

  ServiceWorker_DispatchFetchEventForMainResource_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchFetchEventForMainResource_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(dispatch_fetch_event_params$.DispatchFetchEventParams, val.params);
    encoder.encodeStruct(new codec.Interface(service_worker_fetch_response_callback$.ServiceWorkerFetchResponseCallbackPtr), val.responseCallback);
  };
  function ServiceWorker_DispatchFetchEventForMainResource_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchFetchEventForMainResource_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchFetchEventForMainResource_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchFetchEventForMainResource_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchFetchEventForMainResource_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchFetchEventForMainResource_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchFetchEventForMainResource_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchFetchEventForMainResource_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchFetchEventForMainResource_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchFetchEventForMainResource_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchNotificationClickEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchNotificationClickEvent_Params.prototype.initDefaults_ = function() {
    this.notificationId = null;
    this.notificationData = null;
    this.actionIndex = 0;
    this.reply = null;
  };
  ServiceWorker_DispatchNotificationClickEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchNotificationClickEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchNotificationClickEvent_Params.notificationId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchNotificationClickEvent_Params.notificationData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, notification$.NotificationData, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ServiceWorker_DispatchNotificationClickEvent_Params.reply
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, string16$.String16, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchNotificationClickEvent_Params.encodedSize = codec.kStructHeaderSize + 32;

  ServiceWorker_DispatchNotificationClickEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchNotificationClickEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.notificationId =
        decoder.decodeStruct(codec.String);
    val.notificationData =
        decoder.decodeStructPointer(notification$.NotificationData);
    val.actionIndex =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.reply =
        decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  ServiceWorker_DispatchNotificationClickEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchNotificationClickEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.notificationId);
    encoder.encodeStructPointer(notification$.NotificationData, val.notificationData);
    encoder.encodeStruct(codec.Int32, val.actionIndex);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(string16$.String16, val.reply);
  };
  function ServiceWorker_DispatchNotificationClickEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchNotificationClickEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchNotificationClickEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchNotificationClickEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchNotificationClickEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchNotificationClickEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchNotificationClickEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchNotificationClickEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchNotificationClickEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchNotificationClickEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchNotificationCloseEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchNotificationCloseEvent_Params.prototype.initDefaults_ = function() {
    this.notificationId = null;
    this.notificationData = null;
  };
  ServiceWorker_DispatchNotificationCloseEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchNotificationCloseEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchNotificationCloseEvent_Params.notificationId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchNotificationCloseEvent_Params.notificationData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, notification$.NotificationData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchNotificationCloseEvent_Params.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorker_DispatchNotificationCloseEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchNotificationCloseEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.notificationId =
        decoder.decodeStruct(codec.String);
    val.notificationData =
        decoder.decodeStructPointer(notification$.NotificationData);
    return val;
  };

  ServiceWorker_DispatchNotificationCloseEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchNotificationCloseEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.notificationId);
    encoder.encodeStructPointer(notification$.NotificationData, val.notificationData);
  };
  function ServiceWorker_DispatchNotificationCloseEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchNotificationCloseEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchNotificationCloseEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchNotificationCloseEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchNotificationCloseEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchNotificationCloseEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchNotificationCloseEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchNotificationCloseEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchNotificationCloseEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchNotificationCloseEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchPushEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchPushEvent_Params.prototype.initDefaults_ = function() {
    this.payload = null;
  };
  ServiceWorker_DispatchPushEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchPushEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchPushEvent_Params.payload
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchPushEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchPushEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchPushEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.payload =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  ServiceWorker_DispatchPushEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchPushEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.payload);
  };
  function ServiceWorker_DispatchPushEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchPushEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchPushEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchPushEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchPushEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchPushEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchPushEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchPushEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchPushEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchPushEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchPushSubscriptionChangeEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchPushSubscriptionChangeEvent_Params.prototype.initDefaults_ = function() {
    this.oldSubscription = null;
    this.newSubscription = null;
  };
  ServiceWorker_DispatchPushSubscriptionChangeEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchPushSubscriptionChangeEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchPushSubscriptionChangeEvent_Params.oldSubscription
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, push_messaging$.PushSubscription, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchPushSubscriptionChangeEvent_Params.newSubscription
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, push_messaging$.PushSubscription, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchPushSubscriptionChangeEvent_Params.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorker_DispatchPushSubscriptionChangeEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchPushSubscriptionChangeEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.oldSubscription =
        decoder.decodeStructPointer(push_messaging$.PushSubscription);
    val.newSubscription =
        decoder.decodeStructPointer(push_messaging$.PushSubscription);
    return val;
  };

  ServiceWorker_DispatchPushSubscriptionChangeEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchPushSubscriptionChangeEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(push_messaging$.PushSubscription, val.oldSubscription);
    encoder.encodeStructPointer(push_messaging$.PushSubscription, val.newSubscription);
  };
  function ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchSyncEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchSyncEvent_Params.prototype.initDefaults_ = function() {
    this.tag = null;
    this.lastChance = false;
    this.timeout = null;
  };
  ServiceWorker_DispatchSyncEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchSyncEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchSyncEvent_Params.tag
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;



    // validate ServiceWorker_DispatchSyncEvent_Params.timeout
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchSyncEvent_Params.encodedSize = codec.kStructHeaderSize + 24;

  ServiceWorker_DispatchSyncEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchSyncEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tag =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.lastChance = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.timeout =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  ServiceWorker_DispatchSyncEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchSyncEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.tag);
    packed = 0;
    packed |= (val.lastChance & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(time$.TimeDelta, val.timeout);
  };
  function ServiceWorker_DispatchSyncEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchSyncEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchSyncEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchSyncEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchSyncEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchSyncEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchSyncEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchSyncEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchSyncEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchSyncEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchPeriodicSyncEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchPeriodicSyncEvent_Params.prototype.initDefaults_ = function() {
    this.tag = null;
    this.timeout = null;
  };
  ServiceWorker_DispatchPeriodicSyncEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchPeriodicSyncEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchPeriodicSyncEvent_Params.tag
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchPeriodicSyncEvent_Params.timeout
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchPeriodicSyncEvent_Params.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorker_DispatchPeriodicSyncEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchPeriodicSyncEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tag =
        decoder.decodeStruct(codec.String);
    val.timeout =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  ServiceWorker_DispatchPeriodicSyncEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchPeriodicSyncEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.tag);
    encoder.encodeStructPointer(time$.TimeDelta, val.timeout);
  };
  function ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchAbortPaymentEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchAbortPaymentEvent_Params.prototype.initDefaults_ = function() {
    this.resultOfAbortPayment = new payment_app$.PaymentHandlerResponseCallbackPtr();
  };
  ServiceWorker_DispatchAbortPaymentEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchAbortPaymentEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchAbortPaymentEvent_Params.resultOfAbortPayment
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchAbortPaymentEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchAbortPaymentEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchAbortPaymentEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.resultOfAbortPayment =
        decoder.decodeStruct(new codec.Interface(payment_app$.PaymentHandlerResponseCallbackPtr));
    return val;
  };

  ServiceWorker_DispatchAbortPaymentEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchAbortPaymentEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(payment_app$.PaymentHandlerResponseCallbackPtr), val.resultOfAbortPayment);
  };
  function ServiceWorker_DispatchAbortPaymentEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchAbortPaymentEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchAbortPaymentEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchAbortPaymentEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchAbortPaymentEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchAbortPaymentEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchAbortPaymentEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchAbortPaymentEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchAbortPaymentEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchAbortPaymentEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchCanMakePaymentEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchCanMakePaymentEvent_Params.prototype.initDefaults_ = function() {
    this.eventData = null;
    this.resultOfCanMakePayment = new payment_app$.PaymentHandlerResponseCallbackPtr();
  };
  ServiceWorker_DispatchCanMakePaymentEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchCanMakePaymentEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchCanMakePaymentEvent_Params.eventData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, payment_app$.CanMakePaymentEventData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchCanMakePaymentEvent_Params.resultOfCanMakePayment
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchCanMakePaymentEvent_Params.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorker_DispatchCanMakePaymentEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchCanMakePaymentEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.eventData =
        decoder.decodeStructPointer(payment_app$.CanMakePaymentEventData);
    val.resultOfCanMakePayment =
        decoder.decodeStruct(new codec.Interface(payment_app$.PaymentHandlerResponseCallbackPtr));
    return val;
  };

  ServiceWorker_DispatchCanMakePaymentEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchCanMakePaymentEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(payment_app$.CanMakePaymentEventData, val.eventData);
    encoder.encodeStruct(new codec.Interface(payment_app$.PaymentHandlerResponseCallbackPtr), val.resultOfCanMakePayment);
  };
  function ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchPaymentRequestEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchPaymentRequestEvent_Params.prototype.initDefaults_ = function() {
    this.requestData = null;
    this.responseCallback = new payment_app$.PaymentHandlerResponseCallbackPtr();
  };
  ServiceWorker_DispatchPaymentRequestEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchPaymentRequestEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchPaymentRequestEvent_Params.requestData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, payment_app$.PaymentRequestEventData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchPaymentRequestEvent_Params.responseCallback
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchPaymentRequestEvent_Params.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorker_DispatchPaymentRequestEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchPaymentRequestEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.requestData =
        decoder.decodeStructPointer(payment_app$.PaymentRequestEventData);
    val.responseCallback =
        decoder.decodeStruct(new codec.Interface(payment_app$.PaymentHandlerResponseCallbackPtr));
    return val;
  };

  ServiceWorker_DispatchPaymentRequestEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchPaymentRequestEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(payment_app$.PaymentRequestEventData, val.requestData);
    encoder.encodeStruct(new codec.Interface(payment_app$.PaymentHandlerResponseCallbackPtr), val.responseCallback);
  };
  function ServiceWorker_DispatchPaymentRequestEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchPaymentRequestEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchPaymentRequestEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchPaymentRequestEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchPaymentRequestEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchPaymentRequestEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchPaymentRequestEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchPaymentRequestEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchPaymentRequestEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchPaymentRequestEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchExtendableMessageEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchExtendableMessageEvent_Params.prototype.initDefaults_ = function() {
    this.event = null;
  };
  ServiceWorker_DispatchExtendableMessageEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchExtendableMessageEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchExtendableMessageEvent_Params.event
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ExtendableMessageEvent, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchExtendableMessageEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchExtendableMessageEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchExtendableMessageEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.event =
        decoder.decodeStructPointer(ExtendableMessageEvent);
    return val;
  };

  ServiceWorker_DispatchExtendableMessageEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchExtendableMessageEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ExtendableMessageEvent, val.event);
  };
  function ServiceWorker_DispatchExtendableMessageEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchExtendableMessageEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchExtendableMessageEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchExtendableMessageEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchExtendableMessageEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchExtendableMessageEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchExtendableMessageEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchExtendableMessageEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchExtendableMessageEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchExtendableMessageEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_DispatchContentDeleteEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchContentDeleteEvent_Params.prototype.initDefaults_ = function() {
    this.id = null;
  };
  ServiceWorker_DispatchContentDeleteEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchContentDeleteEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchContentDeleteEvent_Params.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchContentDeleteEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchContentDeleteEvent_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchContentDeleteEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ServiceWorker_DispatchContentDeleteEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchContentDeleteEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
  };
  function ServiceWorker_DispatchContentDeleteEvent_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_DispatchContentDeleteEvent_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  ServiceWorker_DispatchContentDeleteEvent_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_DispatchContentDeleteEvent_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_DispatchContentDeleteEvent_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, service_worker_event_status$.ServiceWorkerEventStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_DispatchContentDeleteEvent_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_DispatchContentDeleteEvent_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_DispatchContentDeleteEvent_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(service_worker_event_status$.ServiceWorkerEventStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_DispatchContentDeleteEvent_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_DispatchContentDeleteEvent_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_Ping_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_Ping_Params.prototype.initDefaults_ = function() {
  };
  ServiceWorker_Ping_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_Ping_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_Ping_Params.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorker_Ping_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_Ping_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorker_Ping_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_Ping_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorker_Ping_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_Ping_ResponseParams.prototype.initDefaults_ = function() {
  };
  ServiceWorker_Ping_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_Ping_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_Ping_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorker_Ping_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_Ping_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorker_Ping_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_Ping_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorker_SetIdleDelay_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_SetIdleDelay_Params.prototype.initDefaults_ = function() {
    this.delay = null;
  };
  ServiceWorker_SetIdleDelay_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_SetIdleDelay_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_SetIdleDelay_Params.delay
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_SetIdleDelay_Params.encodedSize = codec.kStructHeaderSize + 8;

  ServiceWorker_SetIdleDelay_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_SetIdleDelay_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.delay =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  ServiceWorker_SetIdleDelay_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_SetIdleDelay_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeDelta, val.delay);
  };
  function ServiceWorker_AddKeepAlive_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_AddKeepAlive_Params.prototype.initDefaults_ = function() {
  };
  ServiceWorker_AddKeepAlive_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_AddKeepAlive_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_AddKeepAlive_Params.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorker_AddKeepAlive_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_AddKeepAlive_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorker_AddKeepAlive_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_AddKeepAlive_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorker_ClearKeepAlive_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_ClearKeepAlive_Params.prototype.initDefaults_ = function() {
  };
  ServiceWorker_ClearKeepAlive_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_ClearKeepAlive_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_ClearKeepAlive_Params.encodedSize = codec.kStructHeaderSize + 0;

  ServiceWorker_ClearKeepAlive_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_ClearKeepAlive_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ServiceWorker_ClearKeepAlive_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_ClearKeepAlive_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ServiceWorker_AddMessageToConsole_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_AddMessageToConsole_Params.prototype.initDefaults_ = function() {
    this.level = 0;
    this.message = null;
  };
  ServiceWorker_AddMessageToConsole_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_AddMessageToConsole_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_AddMessageToConsole_Params.level
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, console_message$.ConsoleMessageLevel);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_AddMessageToConsole_Params.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_AddMessageToConsole_Params.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorker_AddMessageToConsole_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_AddMessageToConsole_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.level =
        decoder.decodeStruct(new codec.Enum(console_message$.ConsoleMessageLevel));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.message =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ServiceWorker_AddMessageToConsole_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_AddMessageToConsole_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.level);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.message);
  };
  function ServiceWorker_ExecuteScriptForTest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_ExecuteScriptForTest_Params.prototype.initDefaults_ = function() {
    this.javascript = null;
    this.wantsResult = false;
  };
  ServiceWorker_ExecuteScriptForTest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_ExecuteScriptForTest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_ExecuteScriptForTest_Params.javascript
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.BigString16, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ServiceWorker_ExecuteScriptForTest_Params.encodedSize = codec.kStructHeaderSize + 16;

  ServiceWorker_ExecuteScriptForTest_Params.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_ExecuteScriptForTest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.javascript =
        decoder.decodeStructPointer(string16$.BigString16);
    packed = decoder.readUint8();
    val.wantsResult = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ServiceWorker_ExecuteScriptForTest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_ExecuteScriptForTest_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.BigString16, val.javascript);
    packed = 0;
    packed |= (val.wantsResult & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ServiceWorker_ExecuteScriptForTest_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ServiceWorker_ExecuteScriptForTest_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
    this.error = null;
  };
  ServiceWorker_ExecuteScriptForTest_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ServiceWorker_ExecuteScriptForTest_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_ExecuteScriptForTest_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, values$.Value, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ServiceWorker_ExecuteScriptForTest_ResponseParams.error
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ServiceWorker_ExecuteScriptForTest_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  ServiceWorker_ExecuteScriptForTest_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ServiceWorker_ExecuteScriptForTest_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(values$.Value);
    val.error =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  ServiceWorker_ExecuteScriptForTest_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ServiceWorker_ExecuteScriptForTest_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(values$.Value, val.result);
    encoder.encodeStruct(codec.NullableString, val.error);
  };
  var kServiceWorkerHost_SetCachedMetadata_Name = 1688870336;
  var kServiceWorkerHost_ClearCachedMetadata_Name = 1555662715;
  var kServiceWorkerHost_GetClients_Name = 2134943875;
  var kServiceWorkerHost_GetClient_Name = 1269080370;
  var kServiceWorkerHost_OpenNewTab_Name = 18118702;
  var kServiceWorkerHost_OpenPaymentHandlerWindow_Name = 887153723;
  var kServiceWorkerHost_PostMessageToClient_Name = 1943440001;
  var kServiceWorkerHost_FocusClient_Name = 924956840;
  var kServiceWorkerHost_NavigateClient_Name = 1125840876;
  var kServiceWorkerHost_SkipWaiting_Name = 423352310;
  var kServiceWorkerHost_ClaimClients_Name = 297933059;
  var kServiceWorkerHost_RegisterRouter_Name = 308339447;

  function ServiceWorkerHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ServiceWorkerHost,
                                                   handleOrPtrInfo);
  }

  function ServiceWorkerHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ServiceWorkerHost, associatedInterfacePtrInfo);
  }

  ServiceWorkerHostAssociatedPtr.prototype =
      Object.create(ServiceWorkerHostPtr.prototype);
  ServiceWorkerHostAssociatedPtr.prototype.constructor =
      ServiceWorkerHostAssociatedPtr;

  function ServiceWorkerHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  ServiceWorkerHostPtr.prototype.setCachedMetadata = function() {
    return ServiceWorkerHostProxy.prototype.setCachedMetadata
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.setCachedMetadata = function(url, data) {
    var params_ = new ServiceWorkerHost_SetCachedMetadata_Params();
    params_.url = url;
    params_.data = data;
    var builder = new codec.MessageV0Builder(
        kServiceWorkerHost_SetCachedMetadata_Name,
        codec.align(ServiceWorkerHost_SetCachedMetadata_Params.encodedSize));
    builder.encodeStruct(ServiceWorkerHost_SetCachedMetadata_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerHostPtr.prototype.clearCachedMetadata = function() {
    return ServiceWorkerHostProxy.prototype.clearCachedMetadata
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.clearCachedMetadata = function(url) {
    var params_ = new ServiceWorkerHost_ClearCachedMetadata_Params();
    params_.url = url;
    var builder = new codec.MessageV0Builder(
        kServiceWorkerHost_ClearCachedMetadata_Name,
        codec.align(ServiceWorkerHost_ClearCachedMetadata_Params.encodedSize));
    builder.encodeStruct(ServiceWorkerHost_ClearCachedMetadata_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerHostPtr.prototype.getClients = function() {
    return ServiceWorkerHostProxy.prototype.getClients
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.getClients = function(options) {
    var params_ = new ServiceWorkerHost_GetClients_Params();
    params_.options = options;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorkerHost_GetClients_Name,
          codec.align(ServiceWorkerHost_GetClients_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorkerHost_GetClients_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorkerHost_GetClients_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerHostPtr.prototype.getClient = function() {
    return ServiceWorkerHostProxy.prototype.getClient
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.getClient = function(clientUuid) {
    var params_ = new ServiceWorkerHost_GetClient_Params();
    params_.clientUuid = clientUuid;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorkerHost_GetClient_Name,
          codec.align(ServiceWorkerHost_GetClient_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorkerHost_GetClient_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorkerHost_GetClient_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerHostPtr.prototype.openNewTab = function() {
    return ServiceWorkerHostProxy.prototype.openNewTab
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.openNewTab = function(url) {
    var params_ = new ServiceWorkerHost_OpenNewTab_Params();
    params_.url = url;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorkerHost_OpenNewTab_Name,
          codec.align(ServiceWorkerHost_OpenNewTab_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorkerHost_OpenNewTab_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorkerHost_OpenNewTab_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerHostPtr.prototype.openPaymentHandlerWindow = function() {
    return ServiceWorkerHostProxy.prototype.openPaymentHandlerWindow
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.openPaymentHandlerWindow = function(url) {
    var params_ = new ServiceWorkerHost_OpenPaymentHandlerWindow_Params();
    params_.url = url;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorkerHost_OpenPaymentHandlerWindow_Name,
          codec.align(ServiceWorkerHost_OpenPaymentHandlerWindow_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorkerHost_OpenPaymentHandlerWindow_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerHostPtr.prototype.postMessageToClient = function() {
    return ServiceWorkerHostProxy.prototype.postMessageToClient
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.postMessageToClient = function(clientUuid, message) {
    var params_ = new ServiceWorkerHost_PostMessageToClient_Params();
    params_.clientUuid = clientUuid;
    params_.message = message;
    var builder = new codec.MessageV0Builder(
        kServiceWorkerHost_PostMessageToClient_Name,
        codec.align(ServiceWorkerHost_PostMessageToClient_Params.encodedSize));
    builder.encodeStruct(ServiceWorkerHost_PostMessageToClient_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerHostPtr.prototype.focusClient = function() {
    return ServiceWorkerHostProxy.prototype.focusClient
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.focusClient = function(clientUuid) {
    var params_ = new ServiceWorkerHost_FocusClient_Params();
    params_.clientUuid = clientUuid;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorkerHost_FocusClient_Name,
          codec.align(ServiceWorkerHost_FocusClient_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorkerHost_FocusClient_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorkerHost_FocusClient_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerHostPtr.prototype.navigateClient = function() {
    return ServiceWorkerHostProxy.prototype.navigateClient
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.navigateClient = function(clientUuid, url) {
    var params_ = new ServiceWorkerHost_NavigateClient_Params();
    params_.clientUuid = clientUuid;
    params_.url = url;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorkerHost_NavigateClient_Name,
          codec.align(ServiceWorkerHost_NavigateClient_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorkerHost_NavigateClient_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorkerHost_NavigateClient_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerHostPtr.prototype.skipWaiting = function() {
    return ServiceWorkerHostProxy.prototype.skipWaiting
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.skipWaiting = function() {
    var params_ = new ServiceWorkerHost_SkipWaiting_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorkerHost_SkipWaiting_Name,
          codec.align(ServiceWorkerHost_SkipWaiting_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorkerHost_SkipWaiting_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorkerHost_SkipWaiting_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerHostPtr.prototype.claimClients = function() {
    return ServiceWorkerHostProxy.prototype.claimClients
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.claimClients = function() {
    var params_ = new ServiceWorkerHost_ClaimClients_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorkerHost_ClaimClients_Name,
          codec.align(ServiceWorkerHost_ClaimClients_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorkerHost_ClaimClients_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorkerHost_ClaimClients_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerHostPtr.prototype.registerRouter = function() {
    return ServiceWorkerHostProxy.prototype.registerRouter
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerHostProxy.prototype.registerRouter = function(rules) {
    var params_ = new ServiceWorkerHost_RegisterRouter_Params();
    params_.rules = rules;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorkerHost_RegisterRouter_Name,
          codec.align(ServiceWorkerHost_RegisterRouter_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorkerHost_RegisterRouter_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorkerHost_RegisterRouter_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ServiceWorkerHostStub(delegate) {
    this.delegate_ = delegate;
  }
  ServiceWorkerHostStub.prototype.setCachedMetadata = function(url, data) {
    return this.delegate_ && this.delegate_.setCachedMetadata && this.delegate_.setCachedMetadata(url, data);
  }
  ServiceWorkerHostStub.prototype.clearCachedMetadata = function(url) {
    return this.delegate_ && this.delegate_.clearCachedMetadata && this.delegate_.clearCachedMetadata(url);
  }
  ServiceWorkerHostStub.prototype.getClients = function(options) {
    return this.delegate_ && this.delegate_.getClients && this.delegate_.getClients(options);
  }
  ServiceWorkerHostStub.prototype.getClient = function(clientUuid) {
    return this.delegate_ && this.delegate_.getClient && this.delegate_.getClient(clientUuid);
  }
  ServiceWorkerHostStub.prototype.openNewTab = function(url) {
    return this.delegate_ && this.delegate_.openNewTab && this.delegate_.openNewTab(url);
  }
  ServiceWorkerHostStub.prototype.openPaymentHandlerWindow = function(url) {
    return this.delegate_ && this.delegate_.openPaymentHandlerWindow && this.delegate_.openPaymentHandlerWindow(url);
  }
  ServiceWorkerHostStub.prototype.postMessageToClient = function(clientUuid, message) {
    return this.delegate_ && this.delegate_.postMessageToClient && this.delegate_.postMessageToClient(clientUuid, message);
  }
  ServiceWorkerHostStub.prototype.focusClient = function(clientUuid) {
    return this.delegate_ && this.delegate_.focusClient && this.delegate_.focusClient(clientUuid);
  }
  ServiceWorkerHostStub.prototype.navigateClient = function(clientUuid, url) {
    return this.delegate_ && this.delegate_.navigateClient && this.delegate_.navigateClient(clientUuid, url);
  }
  ServiceWorkerHostStub.prototype.skipWaiting = function() {
    return this.delegate_ && this.delegate_.skipWaiting && this.delegate_.skipWaiting();
  }
  ServiceWorkerHostStub.prototype.claimClients = function() {
    return this.delegate_ && this.delegate_.claimClients && this.delegate_.claimClients();
  }
  ServiceWorkerHostStub.prototype.registerRouter = function(rules) {
    return this.delegate_ && this.delegate_.registerRouter && this.delegate_.registerRouter(rules);
  }

  ServiceWorkerHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kServiceWorkerHost_SetCachedMetadata_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_SetCachedMetadata_Params);
      this.setCachedMetadata(params.url, params.data);
      return true;
    case kServiceWorkerHost_ClearCachedMetadata_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_ClearCachedMetadata_Params);
      this.clearCachedMetadata(params.url);
      return true;
    case kServiceWorkerHost_PostMessageToClient_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_PostMessageToClient_Params);
      this.postMessageToClient(params.clientUuid, params.message);
      return true;
    default:
      return false;
    }
  };

  ServiceWorkerHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kServiceWorkerHost_GetClients_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_GetClients_Params);
      this.getClients(params.options).then(function(response) {
        var responseParams =
            new ServiceWorkerHost_GetClients_ResponseParams();
        responseParams.clients = response.clients;
        var builder = new codec.MessageV1Builder(
            kServiceWorkerHost_GetClients_Name,
            codec.align(ServiceWorkerHost_GetClients_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorkerHost_GetClients_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorkerHost_GetClient_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_GetClient_Params);
      this.getClient(params.clientUuid).then(function(response) {
        var responseParams =
            new ServiceWorkerHost_GetClient_ResponseParams();
        responseParams.client = response.client;
        var builder = new codec.MessageV1Builder(
            kServiceWorkerHost_GetClient_Name,
            codec.align(ServiceWorkerHost_GetClient_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorkerHost_GetClient_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorkerHost_OpenNewTab_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_OpenNewTab_Params);
      this.openNewTab(params.url).then(function(response) {
        var responseParams =
            new ServiceWorkerHost_OpenNewTab_ResponseParams();
        responseParams.success = response.success;
        responseParams.client = response.client;
        responseParams.errorMsg = response.errorMsg;
        var builder = new codec.MessageV1Builder(
            kServiceWorkerHost_OpenNewTab_Name,
            codec.align(ServiceWorkerHost_OpenNewTab_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorkerHost_OpenNewTab_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorkerHost_OpenPaymentHandlerWindow_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_OpenPaymentHandlerWindow_Params);
      this.openPaymentHandlerWindow(params.url).then(function(response) {
        var responseParams =
            new ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams();
        responseParams.success = response.success;
        responseParams.client = response.client;
        responseParams.errorMsg = response.errorMsg;
        var builder = new codec.MessageV1Builder(
            kServiceWorkerHost_OpenPaymentHandlerWindow_Name,
            codec.align(ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorkerHost_FocusClient_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_FocusClient_Params);
      this.focusClient(params.clientUuid).then(function(response) {
        var responseParams =
            new ServiceWorkerHost_FocusClient_ResponseParams();
        responseParams.client = response.client;
        var builder = new codec.MessageV1Builder(
            kServiceWorkerHost_FocusClient_Name,
            codec.align(ServiceWorkerHost_FocusClient_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorkerHost_FocusClient_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorkerHost_NavigateClient_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_NavigateClient_Params);
      this.navigateClient(params.clientUuid, params.url).then(function(response) {
        var responseParams =
            new ServiceWorkerHost_NavigateClient_ResponseParams();
        responseParams.success = response.success;
        responseParams.client = response.client;
        responseParams.errorMsg = response.errorMsg;
        var builder = new codec.MessageV1Builder(
            kServiceWorkerHost_NavigateClient_Name,
            codec.align(ServiceWorkerHost_NavigateClient_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorkerHost_NavigateClient_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorkerHost_SkipWaiting_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_SkipWaiting_Params);
      this.skipWaiting().then(function(response) {
        var responseParams =
            new ServiceWorkerHost_SkipWaiting_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kServiceWorkerHost_SkipWaiting_Name,
            codec.align(ServiceWorkerHost_SkipWaiting_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorkerHost_SkipWaiting_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorkerHost_ClaimClients_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_ClaimClients_Params);
      this.claimClients().then(function(response) {
        var responseParams =
            new ServiceWorkerHost_ClaimClients_ResponseParams();
        responseParams.error = response.error;
        responseParams.errorMsg = response.errorMsg;
        var builder = new codec.MessageV1Builder(
            kServiceWorkerHost_ClaimClients_Name,
            codec.align(ServiceWorkerHost_ClaimClients_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorkerHost_ClaimClients_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorkerHost_RegisterRouter_Name:
      var params = reader.decodeStruct(ServiceWorkerHost_RegisterRouter_Params);
      this.registerRouter(params.rules).then(function(response) {
        var responseParams =
            new ServiceWorkerHost_RegisterRouter_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kServiceWorkerHost_RegisterRouter_Name,
            codec.align(ServiceWorkerHost_RegisterRouter_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorkerHost_RegisterRouter_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateServiceWorkerHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kServiceWorkerHost_SetCachedMetadata_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorkerHost_SetCachedMetadata_Params;
      break;
      case kServiceWorkerHost_ClearCachedMetadata_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorkerHost_ClearCachedMetadata_Params;
      break;
      case kServiceWorkerHost_GetClients_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorkerHost_GetClients_Params;
      break;
      case kServiceWorkerHost_GetClient_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorkerHost_GetClient_Params;
      break;
      case kServiceWorkerHost_OpenNewTab_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorkerHost_OpenNewTab_Params;
      break;
      case kServiceWorkerHost_OpenPaymentHandlerWindow_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorkerHost_OpenPaymentHandlerWindow_Params;
      break;
      case kServiceWorkerHost_PostMessageToClient_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorkerHost_PostMessageToClient_Params;
      break;
      case kServiceWorkerHost_FocusClient_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorkerHost_FocusClient_Params;
      break;
      case kServiceWorkerHost_NavigateClient_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorkerHost_NavigateClient_Params;
      break;
      case kServiceWorkerHost_SkipWaiting_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorkerHost_SkipWaiting_Params;
      break;
      case kServiceWorkerHost_ClaimClients_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorkerHost_ClaimClients_Params;
      break;
      case kServiceWorkerHost_RegisterRouter_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorkerHost_RegisterRouter_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateServiceWorkerHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kServiceWorkerHost_GetClients_Name:
        if (message.isResponse())
          paramsClass = ServiceWorkerHost_GetClients_ResponseParams;
        break;
      case kServiceWorkerHost_GetClient_Name:
        if (message.isResponse())
          paramsClass = ServiceWorkerHost_GetClient_ResponseParams;
        break;
      case kServiceWorkerHost_OpenNewTab_Name:
        if (message.isResponse())
          paramsClass = ServiceWorkerHost_OpenNewTab_ResponseParams;
        break;
      case kServiceWorkerHost_OpenPaymentHandlerWindow_Name:
        if (message.isResponse())
          paramsClass = ServiceWorkerHost_OpenPaymentHandlerWindow_ResponseParams;
        break;
      case kServiceWorkerHost_FocusClient_Name:
        if (message.isResponse())
          paramsClass = ServiceWorkerHost_FocusClient_ResponseParams;
        break;
      case kServiceWorkerHost_NavigateClient_Name:
        if (message.isResponse())
          paramsClass = ServiceWorkerHost_NavigateClient_ResponseParams;
        break;
      case kServiceWorkerHost_SkipWaiting_Name:
        if (message.isResponse())
          paramsClass = ServiceWorkerHost_SkipWaiting_ResponseParams;
        break;
      case kServiceWorkerHost_ClaimClients_Name:
        if (message.isResponse())
          paramsClass = ServiceWorkerHost_ClaimClients_ResponseParams;
        break;
      case kServiceWorkerHost_RegisterRouter_Name:
        if (message.isResponse())
          paramsClass = ServiceWorkerHost_RegisterRouter_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ServiceWorkerHost = {
    name: 'blink.mojom.ServiceWorkerHost',
    kVersion: 0,
    ptrClass: ServiceWorkerHostPtr,
    proxyClass: ServiceWorkerHostProxy,
    stubClass: ServiceWorkerHostStub,
    validateRequest: validateServiceWorkerHostRequest,
    validateResponse: validateServiceWorkerHostResponse,
  };
  ServiceWorkerHostStub.prototype.validator = validateServiceWorkerHostRequest;
  ServiceWorkerHostProxy.prototype.validator = validateServiceWorkerHostResponse;
  var kServiceWorker_InitializeGlobalScope_Name = 1507228682;
  var kServiceWorker_DispatchInstallEvent_Name = 1911318995;
  var kServiceWorker_DispatchActivateEvent_Name = 346227840;
  var kServiceWorker_DispatchBackgroundFetchAbortEvent_Name = 199861625;
  var kServiceWorker_DispatchBackgroundFetchClickEvent_Name = 647661774;
  var kServiceWorker_DispatchBackgroundFetchFailEvent_Name = 453401139;
  var kServiceWorker_DispatchBackgroundFetchSuccessEvent_Name = 1867366505;
  var kServiceWorker_DispatchCookieChangeEvent_Name = 1365433786;
  var kServiceWorker_DispatchFetchEventForMainResource_Name = 169147409;
  var kServiceWorker_DispatchNotificationClickEvent_Name = 1752858964;
  var kServiceWorker_DispatchNotificationCloseEvent_Name = 470919963;
  var kServiceWorker_DispatchPushEvent_Name = 761036984;
  var kServiceWorker_DispatchPushSubscriptionChangeEvent_Name = 1991387473;
  var kServiceWorker_DispatchSyncEvent_Name = 1070433145;
  var kServiceWorker_DispatchPeriodicSyncEvent_Name = 1076681271;
  var kServiceWorker_DispatchAbortPaymentEvent_Name = 821016652;
  var kServiceWorker_DispatchCanMakePaymentEvent_Name = 1295792309;
  var kServiceWorker_DispatchPaymentRequestEvent_Name = 1975773412;
  var kServiceWorker_DispatchExtendableMessageEvent_Name = 108496095;
  var kServiceWorker_DispatchContentDeleteEvent_Name = 85740485;
  var kServiceWorker_Ping_Name = 1373296095;
  var kServiceWorker_SetIdleDelay_Name = 777984879;
  var kServiceWorker_AddKeepAlive_Name = 536243048;
  var kServiceWorker_ClearKeepAlive_Name = 487189264;
  var kServiceWorker_AddMessageToConsole_Name = 21322597;
  var kServiceWorker_ExecuteScriptForTest_Name = 371945920;

  function ServiceWorkerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ServiceWorker,
                                                   handleOrPtrInfo);
  }

  function ServiceWorkerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ServiceWorker, associatedInterfacePtrInfo);
  }

  ServiceWorkerAssociatedPtr.prototype =
      Object.create(ServiceWorkerPtr.prototype);
  ServiceWorkerAssociatedPtr.prototype.constructor =
      ServiceWorkerAssociatedPtr;

  function ServiceWorkerProxy(receiver) {
    this.receiver_ = receiver;
  }
  ServiceWorkerPtr.prototype.initializeGlobalScope = function() {
    return ServiceWorkerProxy.prototype.initializeGlobalScope
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.initializeGlobalScope = function(serviceWorkerHost, associatedInterfacesToBrowser, associatedInterfacesFromBrowser, registrationInfo, serviceWorkerInfo, fetchHandlerExistence, reportingObserverReceiver, ancestorFrameType, storageKey) {
    var params_ = new ServiceWorker_InitializeGlobalScope_Params();
    params_.serviceWorkerHost = serviceWorkerHost;
    params_.associatedInterfacesToBrowser = associatedInterfacesToBrowser;
    params_.associatedInterfacesFromBrowser = associatedInterfacesFromBrowser;
    params_.registrationInfo = registrationInfo;
    params_.serviceWorkerInfo = serviceWorkerInfo;
    params_.fetchHandlerExistence = fetchHandlerExistence;
    params_.reportingObserverReceiver = reportingObserverReceiver;
    params_.ancestorFrameType = ancestorFrameType;
    params_.storageKey = storageKey;
    var builder = new codec.MessageV2Builder(
        kServiceWorker_InitializeGlobalScope_Name,
        codec.align(ServiceWorker_InitializeGlobalScope_Params.encodedSize));
    builder.setPayload(ServiceWorker_InitializeGlobalScope_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerPtr.prototype.dispatchInstallEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchInstallEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchInstallEvent = function() {
    var params_ = new ServiceWorker_DispatchInstallEvent_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchInstallEvent_Name,
          codec.align(ServiceWorker_DispatchInstallEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchInstallEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchInstallEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchActivateEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchActivateEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchActivateEvent = function() {
    var params_ = new ServiceWorker_DispatchActivateEvent_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchActivateEvent_Name,
          codec.align(ServiceWorker_DispatchActivateEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchActivateEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchActivateEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchBackgroundFetchAbortEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchBackgroundFetchAbortEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchBackgroundFetchAbortEvent = function(registration) {
    var params_ = new ServiceWorker_DispatchBackgroundFetchAbortEvent_Params();
    params_.registration = registration;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchBackgroundFetchAbortEvent_Name,
          codec.align(ServiceWorker_DispatchBackgroundFetchAbortEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchBackgroundFetchAbortEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchBackgroundFetchClickEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchBackgroundFetchClickEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchBackgroundFetchClickEvent = function(registration) {
    var params_ = new ServiceWorker_DispatchBackgroundFetchClickEvent_Params();
    params_.registration = registration;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchBackgroundFetchClickEvent_Name,
          codec.align(ServiceWorker_DispatchBackgroundFetchClickEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchBackgroundFetchClickEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchBackgroundFetchFailEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchBackgroundFetchFailEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchBackgroundFetchFailEvent = function(registration) {
    var params_ = new ServiceWorker_DispatchBackgroundFetchFailEvent_Params();
    params_.registration = registration;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchBackgroundFetchFailEvent_Name,
          codec.align(ServiceWorker_DispatchBackgroundFetchFailEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchBackgroundFetchFailEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchBackgroundFetchSuccessEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchBackgroundFetchSuccessEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchBackgroundFetchSuccessEvent = function(registration) {
    var params_ = new ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params();
    params_.registration = registration;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchBackgroundFetchSuccessEvent_Name,
          codec.align(ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchCookieChangeEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchCookieChangeEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchCookieChangeEvent = function(change) {
    var params_ = new ServiceWorker_DispatchCookieChangeEvent_Params();
    params_.change = change;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchCookieChangeEvent_Name,
          codec.align(ServiceWorker_DispatchCookieChangeEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchCookieChangeEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchCookieChangeEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchFetchEventForMainResource = function() {
    return ServiceWorkerProxy.prototype.dispatchFetchEventForMainResource
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchFetchEventForMainResource = function(params, responseCallback) {
    var params_ = new ServiceWorker_DispatchFetchEventForMainResource_Params();
    params_.params = params;
    params_.responseCallback = responseCallback;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchFetchEventForMainResource_Name,
          codec.align(ServiceWorker_DispatchFetchEventForMainResource_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchFetchEventForMainResource_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchFetchEventForMainResource_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchNotificationClickEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchNotificationClickEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchNotificationClickEvent = function(notificationId, notificationData, actionIndex, reply) {
    var params_ = new ServiceWorker_DispatchNotificationClickEvent_Params();
    params_.notificationId = notificationId;
    params_.notificationData = notificationData;
    params_.actionIndex = actionIndex;
    params_.reply = reply;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchNotificationClickEvent_Name,
          codec.align(ServiceWorker_DispatchNotificationClickEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchNotificationClickEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchNotificationClickEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchNotificationCloseEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchNotificationCloseEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchNotificationCloseEvent = function(notificationId, notificationData) {
    var params_ = new ServiceWorker_DispatchNotificationCloseEvent_Params();
    params_.notificationId = notificationId;
    params_.notificationData = notificationData;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchNotificationCloseEvent_Name,
          codec.align(ServiceWorker_DispatchNotificationCloseEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchNotificationCloseEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchNotificationCloseEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchPushEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchPushEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchPushEvent = function(payload) {
    var params_ = new ServiceWorker_DispatchPushEvent_Params();
    params_.payload = payload;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchPushEvent_Name,
          codec.align(ServiceWorker_DispatchPushEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchPushEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchPushEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchPushSubscriptionChangeEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchPushSubscriptionChangeEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchPushSubscriptionChangeEvent = function(oldSubscription, newSubscription) {
    var params_ = new ServiceWorker_DispatchPushSubscriptionChangeEvent_Params();
    params_.oldSubscription = oldSubscription;
    params_.newSubscription = newSubscription;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchPushSubscriptionChangeEvent_Name,
          codec.align(ServiceWorker_DispatchPushSubscriptionChangeEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchPushSubscriptionChangeEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchSyncEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchSyncEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchSyncEvent = function(tag, lastChance, timeout) {
    var params_ = new ServiceWorker_DispatchSyncEvent_Params();
    params_.tag = tag;
    params_.lastChance = lastChance;
    params_.timeout = timeout;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchSyncEvent_Name,
          codec.align(ServiceWorker_DispatchSyncEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchSyncEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchSyncEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchPeriodicSyncEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchPeriodicSyncEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchPeriodicSyncEvent = function(tag, timeout) {
    var params_ = new ServiceWorker_DispatchPeriodicSyncEvent_Params();
    params_.tag = tag;
    params_.timeout = timeout;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchPeriodicSyncEvent_Name,
          codec.align(ServiceWorker_DispatchPeriodicSyncEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchPeriodicSyncEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchAbortPaymentEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchAbortPaymentEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchAbortPaymentEvent = function(resultOfAbortPayment) {
    var params_ = new ServiceWorker_DispatchAbortPaymentEvent_Params();
    params_.resultOfAbortPayment = resultOfAbortPayment;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchAbortPaymentEvent_Name,
          codec.align(ServiceWorker_DispatchAbortPaymentEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchAbortPaymentEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchAbortPaymentEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchCanMakePaymentEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchCanMakePaymentEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchCanMakePaymentEvent = function(eventData, resultOfCanMakePayment) {
    var params_ = new ServiceWorker_DispatchCanMakePaymentEvent_Params();
    params_.eventData = eventData;
    params_.resultOfCanMakePayment = resultOfCanMakePayment;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchCanMakePaymentEvent_Name,
          codec.align(ServiceWorker_DispatchCanMakePaymentEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchCanMakePaymentEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchPaymentRequestEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchPaymentRequestEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchPaymentRequestEvent = function(requestData, responseCallback) {
    var params_ = new ServiceWorker_DispatchPaymentRequestEvent_Params();
    params_.requestData = requestData;
    params_.responseCallback = responseCallback;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchPaymentRequestEvent_Name,
          codec.align(ServiceWorker_DispatchPaymentRequestEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchPaymentRequestEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchPaymentRequestEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchExtendableMessageEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchExtendableMessageEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchExtendableMessageEvent = function(event) {
    var params_ = new ServiceWorker_DispatchExtendableMessageEvent_Params();
    params_.event = event;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kServiceWorker_DispatchExtendableMessageEvent_Name,
          codec.align(ServiceWorker_DispatchExtendableMessageEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(ServiceWorker_DispatchExtendableMessageEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchExtendableMessageEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.dispatchContentDeleteEvent = function() {
    return ServiceWorkerProxy.prototype.dispatchContentDeleteEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.dispatchContentDeleteEvent = function(id) {
    var params_ = new ServiceWorker_DispatchContentDeleteEvent_Params();
    params_.id = id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_DispatchContentDeleteEvent_Name,
          codec.align(ServiceWorker_DispatchContentDeleteEvent_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_DispatchContentDeleteEvent_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_DispatchContentDeleteEvent_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.ping = function() {
    return ServiceWorkerProxy.prototype.ping
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.ping = function() {
    var params_ = new ServiceWorker_Ping_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_Ping_Name,
          codec.align(ServiceWorker_Ping_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_Ping_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_Ping_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ServiceWorkerPtr.prototype.setIdleDelay = function() {
    return ServiceWorkerProxy.prototype.setIdleDelay
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.setIdleDelay = function(delay) {
    var params_ = new ServiceWorker_SetIdleDelay_Params();
    params_.delay = delay;
    var builder = new codec.MessageV0Builder(
        kServiceWorker_SetIdleDelay_Name,
        codec.align(ServiceWorker_SetIdleDelay_Params.encodedSize));
    builder.encodeStruct(ServiceWorker_SetIdleDelay_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerPtr.prototype.addKeepAlive = function() {
    return ServiceWorkerProxy.prototype.addKeepAlive
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.addKeepAlive = function() {
    var params_ = new ServiceWorker_AddKeepAlive_Params();
    var builder = new codec.MessageV0Builder(
        kServiceWorker_AddKeepAlive_Name,
        codec.align(ServiceWorker_AddKeepAlive_Params.encodedSize));
    builder.encodeStruct(ServiceWorker_AddKeepAlive_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerPtr.prototype.clearKeepAlive = function() {
    return ServiceWorkerProxy.prototype.clearKeepAlive
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.clearKeepAlive = function() {
    var params_ = new ServiceWorker_ClearKeepAlive_Params();
    var builder = new codec.MessageV0Builder(
        kServiceWorker_ClearKeepAlive_Name,
        codec.align(ServiceWorker_ClearKeepAlive_Params.encodedSize));
    builder.encodeStruct(ServiceWorker_ClearKeepAlive_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerPtr.prototype.addMessageToConsole = function() {
    return ServiceWorkerProxy.prototype.addMessageToConsole
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.addMessageToConsole = function(level, message) {
    var params_ = new ServiceWorker_AddMessageToConsole_Params();
    params_.level = level;
    params_.message = message;
    var builder = new codec.MessageV0Builder(
        kServiceWorker_AddMessageToConsole_Name,
        codec.align(ServiceWorker_AddMessageToConsole_Params.encodedSize));
    builder.encodeStruct(ServiceWorker_AddMessageToConsole_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ServiceWorkerPtr.prototype.executeScriptForTest = function() {
    return ServiceWorkerProxy.prototype.executeScriptForTest
        .apply(this.ptr.getProxy(), arguments);
  };

  ServiceWorkerProxy.prototype.executeScriptForTest = function(javascript, wantsResult) {
    var params_ = new ServiceWorker_ExecuteScriptForTest_Params();
    params_.javascript = javascript;
    params_.wantsResult = wantsResult;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kServiceWorker_ExecuteScriptForTest_Name,
          codec.align(ServiceWorker_ExecuteScriptForTest_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ServiceWorker_ExecuteScriptForTest_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ServiceWorker_ExecuteScriptForTest_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ServiceWorkerStub(delegate) {
    this.delegate_ = delegate;
  }
  ServiceWorkerStub.prototype.initializeGlobalScope = function(serviceWorkerHost, associatedInterfacesToBrowser, associatedInterfacesFromBrowser, registrationInfo, serviceWorkerInfo, fetchHandlerExistence, reportingObserverReceiver, ancestorFrameType, storageKey) {
    return this.delegate_ && this.delegate_.initializeGlobalScope && this.delegate_.initializeGlobalScope(serviceWorkerHost, associatedInterfacesToBrowser, associatedInterfacesFromBrowser, registrationInfo, serviceWorkerInfo, fetchHandlerExistence, reportingObserverReceiver, ancestorFrameType, storageKey);
  }
  ServiceWorkerStub.prototype.dispatchInstallEvent = function() {
    return this.delegate_ && this.delegate_.dispatchInstallEvent && this.delegate_.dispatchInstallEvent();
  }
  ServiceWorkerStub.prototype.dispatchActivateEvent = function() {
    return this.delegate_ && this.delegate_.dispatchActivateEvent && this.delegate_.dispatchActivateEvent();
  }
  ServiceWorkerStub.prototype.dispatchBackgroundFetchAbortEvent = function(registration) {
    return this.delegate_ && this.delegate_.dispatchBackgroundFetchAbortEvent && this.delegate_.dispatchBackgroundFetchAbortEvent(registration);
  }
  ServiceWorkerStub.prototype.dispatchBackgroundFetchClickEvent = function(registration) {
    return this.delegate_ && this.delegate_.dispatchBackgroundFetchClickEvent && this.delegate_.dispatchBackgroundFetchClickEvent(registration);
  }
  ServiceWorkerStub.prototype.dispatchBackgroundFetchFailEvent = function(registration) {
    return this.delegate_ && this.delegate_.dispatchBackgroundFetchFailEvent && this.delegate_.dispatchBackgroundFetchFailEvent(registration);
  }
  ServiceWorkerStub.prototype.dispatchBackgroundFetchSuccessEvent = function(registration) {
    return this.delegate_ && this.delegate_.dispatchBackgroundFetchSuccessEvent && this.delegate_.dispatchBackgroundFetchSuccessEvent(registration);
  }
  ServiceWorkerStub.prototype.dispatchCookieChangeEvent = function(change) {
    return this.delegate_ && this.delegate_.dispatchCookieChangeEvent && this.delegate_.dispatchCookieChangeEvent(change);
  }
  ServiceWorkerStub.prototype.dispatchFetchEventForMainResource = function(params, responseCallback) {
    return this.delegate_ && this.delegate_.dispatchFetchEventForMainResource && this.delegate_.dispatchFetchEventForMainResource(params, responseCallback);
  }
  ServiceWorkerStub.prototype.dispatchNotificationClickEvent = function(notificationId, notificationData, actionIndex, reply) {
    return this.delegate_ && this.delegate_.dispatchNotificationClickEvent && this.delegate_.dispatchNotificationClickEvent(notificationId, notificationData, actionIndex, reply);
  }
  ServiceWorkerStub.prototype.dispatchNotificationCloseEvent = function(notificationId, notificationData) {
    return this.delegate_ && this.delegate_.dispatchNotificationCloseEvent && this.delegate_.dispatchNotificationCloseEvent(notificationId, notificationData);
  }
  ServiceWorkerStub.prototype.dispatchPushEvent = function(payload) {
    return this.delegate_ && this.delegate_.dispatchPushEvent && this.delegate_.dispatchPushEvent(payload);
  }
  ServiceWorkerStub.prototype.dispatchPushSubscriptionChangeEvent = function(oldSubscription, newSubscription) {
    return this.delegate_ && this.delegate_.dispatchPushSubscriptionChangeEvent && this.delegate_.dispatchPushSubscriptionChangeEvent(oldSubscription, newSubscription);
  }
  ServiceWorkerStub.prototype.dispatchSyncEvent = function(tag, lastChance, timeout) {
    return this.delegate_ && this.delegate_.dispatchSyncEvent && this.delegate_.dispatchSyncEvent(tag, lastChance, timeout);
  }
  ServiceWorkerStub.prototype.dispatchPeriodicSyncEvent = function(tag, timeout) {
    return this.delegate_ && this.delegate_.dispatchPeriodicSyncEvent && this.delegate_.dispatchPeriodicSyncEvent(tag, timeout);
  }
  ServiceWorkerStub.prototype.dispatchAbortPaymentEvent = function(resultOfAbortPayment) {
    return this.delegate_ && this.delegate_.dispatchAbortPaymentEvent && this.delegate_.dispatchAbortPaymentEvent(resultOfAbortPayment);
  }
  ServiceWorkerStub.prototype.dispatchCanMakePaymentEvent = function(eventData, resultOfCanMakePayment) {
    return this.delegate_ && this.delegate_.dispatchCanMakePaymentEvent && this.delegate_.dispatchCanMakePaymentEvent(eventData, resultOfCanMakePayment);
  }
  ServiceWorkerStub.prototype.dispatchPaymentRequestEvent = function(requestData, responseCallback) {
    return this.delegate_ && this.delegate_.dispatchPaymentRequestEvent && this.delegate_.dispatchPaymentRequestEvent(requestData, responseCallback);
  }
  ServiceWorkerStub.prototype.dispatchExtendableMessageEvent = function(event) {
    return this.delegate_ && this.delegate_.dispatchExtendableMessageEvent && this.delegate_.dispatchExtendableMessageEvent(event);
  }
  ServiceWorkerStub.prototype.dispatchContentDeleteEvent = function(id) {
    return this.delegate_ && this.delegate_.dispatchContentDeleteEvent && this.delegate_.dispatchContentDeleteEvent(id);
  }
  ServiceWorkerStub.prototype.ping = function() {
    return this.delegate_ && this.delegate_.ping && this.delegate_.ping();
  }
  ServiceWorkerStub.prototype.setIdleDelay = function(delay) {
    return this.delegate_ && this.delegate_.setIdleDelay && this.delegate_.setIdleDelay(delay);
  }
  ServiceWorkerStub.prototype.addKeepAlive = function() {
    return this.delegate_ && this.delegate_.addKeepAlive && this.delegate_.addKeepAlive();
  }
  ServiceWorkerStub.prototype.clearKeepAlive = function() {
    return this.delegate_ && this.delegate_.clearKeepAlive && this.delegate_.clearKeepAlive();
  }
  ServiceWorkerStub.prototype.addMessageToConsole = function(level, message) {
    return this.delegate_ && this.delegate_.addMessageToConsole && this.delegate_.addMessageToConsole(level, message);
  }
  ServiceWorkerStub.prototype.executeScriptForTest = function(javascript, wantsResult) {
    return this.delegate_ && this.delegate_.executeScriptForTest && this.delegate_.executeScriptForTest(javascript, wantsResult);
  }

  ServiceWorkerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kServiceWorker_InitializeGlobalScope_Name:
      var params = reader.decodeStruct(ServiceWorker_InitializeGlobalScope_Params);
      this.initializeGlobalScope(params.serviceWorkerHost, params.associatedInterfacesToBrowser, params.associatedInterfacesFromBrowser, params.registrationInfo, params.serviceWorkerInfo, params.fetchHandlerExistence, params.reportingObserverReceiver, params.ancestorFrameType, params.storageKey);
      return true;
    case kServiceWorker_SetIdleDelay_Name:
      var params = reader.decodeStruct(ServiceWorker_SetIdleDelay_Params);
      this.setIdleDelay(params.delay);
      return true;
    case kServiceWorker_AddKeepAlive_Name:
      var params = reader.decodeStruct(ServiceWorker_AddKeepAlive_Params);
      this.addKeepAlive();
      return true;
    case kServiceWorker_ClearKeepAlive_Name:
      var params = reader.decodeStruct(ServiceWorker_ClearKeepAlive_Params);
      this.clearKeepAlive();
      return true;
    case kServiceWorker_AddMessageToConsole_Name:
      var params = reader.decodeStruct(ServiceWorker_AddMessageToConsole_Params);
      this.addMessageToConsole(params.level, params.message);
      return true;
    default:
      return false;
    }
  };

  ServiceWorkerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kServiceWorker_DispatchInstallEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchInstallEvent_Params);
      this.dispatchInstallEvent().then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchInstallEvent_ResponseParams();
        responseParams.status = response.status;
        responseParams.fetchCount = response.fetchCount;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchInstallEvent_Name,
            codec.align(ServiceWorker_DispatchInstallEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchInstallEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchActivateEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchActivateEvent_Params);
      this.dispatchActivateEvent().then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchActivateEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchActivateEvent_Name,
            codec.align(ServiceWorker_DispatchActivateEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchActivateEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchBackgroundFetchAbortEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchBackgroundFetchAbortEvent_Params);
      this.dispatchBackgroundFetchAbortEvent(params.registration).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchBackgroundFetchAbortEvent_Name,
            codec.align(ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchBackgroundFetchClickEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchBackgroundFetchClickEvent_Params);
      this.dispatchBackgroundFetchClickEvent(params.registration).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchBackgroundFetchClickEvent_Name,
            codec.align(ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchBackgroundFetchFailEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchBackgroundFetchFailEvent_Params);
      this.dispatchBackgroundFetchFailEvent(params.registration).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchBackgroundFetchFailEvent_Name,
            codec.align(ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchBackgroundFetchSuccessEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params);
      this.dispatchBackgroundFetchSuccessEvent(params.registration).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchBackgroundFetchSuccessEvent_Name,
            codec.align(ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchCookieChangeEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchCookieChangeEvent_Params);
      this.dispatchCookieChangeEvent(params.change).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchCookieChangeEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchCookieChangeEvent_Name,
            codec.align(ServiceWorker_DispatchCookieChangeEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchCookieChangeEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchFetchEventForMainResource_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchFetchEventForMainResource_Params);
      this.dispatchFetchEventForMainResource(params.params, params.responseCallback).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchFetchEventForMainResource_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchFetchEventForMainResource_Name,
            codec.align(ServiceWorker_DispatchFetchEventForMainResource_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchFetchEventForMainResource_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchNotificationClickEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchNotificationClickEvent_Params);
      this.dispatchNotificationClickEvent(params.notificationId, params.notificationData, params.actionIndex, params.reply).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchNotificationClickEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchNotificationClickEvent_Name,
            codec.align(ServiceWorker_DispatchNotificationClickEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchNotificationClickEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchNotificationCloseEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchNotificationCloseEvent_Params);
      this.dispatchNotificationCloseEvent(params.notificationId, params.notificationData).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchNotificationCloseEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchNotificationCloseEvent_Name,
            codec.align(ServiceWorker_DispatchNotificationCloseEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchNotificationCloseEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchPushEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchPushEvent_Params);
      this.dispatchPushEvent(params.payload).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchPushEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchPushEvent_Name,
            codec.align(ServiceWorker_DispatchPushEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchPushEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchPushSubscriptionChangeEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchPushSubscriptionChangeEvent_Params);
      this.dispatchPushSubscriptionChangeEvent(params.oldSubscription, params.newSubscription).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchPushSubscriptionChangeEvent_Name,
            codec.align(ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchSyncEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchSyncEvent_Params);
      this.dispatchSyncEvent(params.tag, params.lastChance, params.timeout).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchSyncEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchSyncEvent_Name,
            codec.align(ServiceWorker_DispatchSyncEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchSyncEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchPeriodicSyncEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchPeriodicSyncEvent_Params);
      this.dispatchPeriodicSyncEvent(params.tag, params.timeout).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchPeriodicSyncEvent_Name,
            codec.align(ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchAbortPaymentEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchAbortPaymentEvent_Params);
      this.dispatchAbortPaymentEvent(params.resultOfAbortPayment).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchAbortPaymentEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchAbortPaymentEvent_Name,
            codec.align(ServiceWorker_DispatchAbortPaymentEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchAbortPaymentEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchCanMakePaymentEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchCanMakePaymentEvent_Params);
      this.dispatchCanMakePaymentEvent(params.eventData, params.resultOfCanMakePayment).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchCanMakePaymentEvent_Name,
            codec.align(ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchPaymentRequestEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchPaymentRequestEvent_Params);
      this.dispatchPaymentRequestEvent(params.requestData, params.responseCallback).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchPaymentRequestEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchPaymentRequestEvent_Name,
            codec.align(ServiceWorker_DispatchPaymentRequestEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchPaymentRequestEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchExtendableMessageEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchExtendableMessageEvent_Params);
      this.dispatchExtendableMessageEvent(params.event).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchExtendableMessageEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV2Builder(
            kServiceWorker_DispatchExtendableMessageEvent_Name,
            codec.align(ServiceWorker_DispatchExtendableMessageEvent_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(ServiceWorker_DispatchExtendableMessageEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_DispatchContentDeleteEvent_Name:
      var params = reader.decodeStruct(ServiceWorker_DispatchContentDeleteEvent_Params);
      this.dispatchContentDeleteEvent(params.id).then(function(response) {
        var responseParams =
            new ServiceWorker_DispatchContentDeleteEvent_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_DispatchContentDeleteEvent_Name,
            codec.align(ServiceWorker_DispatchContentDeleteEvent_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_DispatchContentDeleteEvent_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_Ping_Name:
      var params = reader.decodeStruct(ServiceWorker_Ping_Params);
      this.ping().then(function(response) {
        var responseParams =
            new ServiceWorker_Ping_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kServiceWorker_Ping_Name,
            codec.align(ServiceWorker_Ping_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_Ping_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kServiceWorker_ExecuteScriptForTest_Name:
      var params = reader.decodeStruct(ServiceWorker_ExecuteScriptForTest_Params);
      this.executeScriptForTest(params.javascript, params.wantsResult).then(function(response) {
        var responseParams =
            new ServiceWorker_ExecuteScriptForTest_ResponseParams();
        responseParams.result = response.result;
        responseParams.error = response.error;
        var builder = new codec.MessageV1Builder(
            kServiceWorker_ExecuteScriptForTest_Name,
            codec.align(ServiceWorker_ExecuteScriptForTest_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ServiceWorker_ExecuteScriptForTest_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateServiceWorkerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kServiceWorker_InitializeGlobalScope_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorker_InitializeGlobalScope_Params;
      break;
      case kServiceWorker_DispatchInstallEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchInstallEvent_Params;
      break;
      case kServiceWorker_DispatchActivateEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchActivateEvent_Params;
      break;
      case kServiceWorker_DispatchBackgroundFetchAbortEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchBackgroundFetchAbortEvent_Params;
      break;
      case kServiceWorker_DispatchBackgroundFetchClickEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchBackgroundFetchClickEvent_Params;
      break;
      case kServiceWorker_DispatchBackgroundFetchFailEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchBackgroundFetchFailEvent_Params;
      break;
      case kServiceWorker_DispatchBackgroundFetchSuccessEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchBackgroundFetchSuccessEvent_Params;
      break;
      case kServiceWorker_DispatchCookieChangeEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchCookieChangeEvent_Params;
      break;
      case kServiceWorker_DispatchFetchEventForMainResource_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchFetchEventForMainResource_Params;
      break;
      case kServiceWorker_DispatchNotificationClickEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchNotificationClickEvent_Params;
      break;
      case kServiceWorker_DispatchNotificationCloseEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchNotificationCloseEvent_Params;
      break;
      case kServiceWorker_DispatchPushEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchPushEvent_Params;
      break;
      case kServiceWorker_DispatchPushSubscriptionChangeEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchPushSubscriptionChangeEvent_Params;
      break;
      case kServiceWorker_DispatchSyncEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchSyncEvent_Params;
      break;
      case kServiceWorker_DispatchPeriodicSyncEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchPeriodicSyncEvent_Params;
      break;
      case kServiceWorker_DispatchAbortPaymentEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchAbortPaymentEvent_Params;
      break;
      case kServiceWorker_DispatchCanMakePaymentEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchCanMakePaymentEvent_Params;
      break;
      case kServiceWorker_DispatchPaymentRequestEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchPaymentRequestEvent_Params;
      break;
      case kServiceWorker_DispatchExtendableMessageEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchExtendableMessageEvent_Params;
      break;
      case kServiceWorker_DispatchContentDeleteEvent_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_DispatchContentDeleteEvent_Params;
      break;
      case kServiceWorker_Ping_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_Ping_Params;
      break;
      case kServiceWorker_SetIdleDelay_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorker_SetIdleDelay_Params;
      break;
      case kServiceWorker_AddKeepAlive_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorker_AddKeepAlive_Params;
      break;
      case kServiceWorker_ClearKeepAlive_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorker_ClearKeepAlive_Params;
      break;
      case kServiceWorker_AddMessageToConsole_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ServiceWorker_AddMessageToConsole_Params;
      break;
      case kServiceWorker_ExecuteScriptForTest_Name:
        if (message.expectsResponse())
          paramsClass = ServiceWorker_ExecuteScriptForTest_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateServiceWorkerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kServiceWorker_DispatchInstallEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchInstallEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchActivateEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchActivateEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchBackgroundFetchAbortEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchBackgroundFetchAbortEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchBackgroundFetchClickEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchBackgroundFetchClickEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchBackgroundFetchFailEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchBackgroundFetchFailEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchBackgroundFetchSuccessEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchBackgroundFetchSuccessEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchCookieChangeEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchCookieChangeEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchFetchEventForMainResource_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchFetchEventForMainResource_ResponseParams;
        break;
      case kServiceWorker_DispatchNotificationClickEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchNotificationClickEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchNotificationCloseEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchNotificationCloseEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchPushEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchPushEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchPushSubscriptionChangeEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchPushSubscriptionChangeEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchSyncEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchSyncEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchPeriodicSyncEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchPeriodicSyncEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchAbortPaymentEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchAbortPaymentEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchCanMakePaymentEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchCanMakePaymentEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchPaymentRequestEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchPaymentRequestEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchExtendableMessageEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchExtendableMessageEvent_ResponseParams;
        break;
      case kServiceWorker_DispatchContentDeleteEvent_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_DispatchContentDeleteEvent_ResponseParams;
        break;
      case kServiceWorker_Ping_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_Ping_ResponseParams;
        break;
      case kServiceWorker_ExecuteScriptForTest_Name:
        if (message.isResponse())
          paramsClass = ServiceWorker_ExecuteScriptForTest_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ServiceWorker = {
    name: 'blink.mojom.ServiceWorker',
    kVersion: 0,
    ptrClass: ServiceWorkerPtr,
    proxyClass: ServiceWorkerProxy,
    stubClass: ServiceWorkerStub,
    validateRequest: validateServiceWorkerRequest,
    validateResponse: validateServiceWorkerResponse,
  };
  ServiceWorkerStub.prototype.validator = validateServiceWorkerRequest;
  ServiceWorkerProxy.prototype.validator = validateServiceWorkerResponse;
  exports.PUSH_EVENT_TIMEOUT_SECONDS = PUSH_EVENT_TIMEOUT_SECONDS;
  exports.SERVICE_WORKER_DEFAULT_IDLE_DELAY_IN_SECONDS = SERVICE_WORKER_DEFAULT_IDLE_DELAY_IN_SECONDS;
  exports.FetchHandlerExistence = FetchHandlerExistence;
  exports.ExtendableMessageEvent = ExtendableMessageEvent;
  exports.ServiceWorkerHost = ServiceWorkerHost;
  exports.ServiceWorkerHostPtr = ServiceWorkerHostPtr;
  exports.ServiceWorkerHostAssociatedPtr = ServiceWorkerHostAssociatedPtr;
  exports.ServiceWorker = ServiceWorker;
  exports.ServiceWorkerPtr = ServiceWorkerPtr;
  exports.ServiceWorkerAssociatedPtr = ServiceWorkerAssociatedPtr;
})();