// third_party/blink/public/mojom/memory_usage_monitor_linux.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/memory_usage_monitor_linux.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var read_only_file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_file.mojom', '../../../../mojo/public/mojom/base/read_only_file.mojom.js');
  }



  function MemoryUsageMonitorLinux_SetProcFiles_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MemoryUsageMonitorLinux_SetProcFiles_Params.prototype.initDefaults_ = function() {
    this.statmFile = null;
    this.statusFile = null;
  };
  MemoryUsageMonitorLinux_SetProcFiles_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MemoryUsageMonitorLinux_SetProcFiles_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MemoryUsageMonitorLinux_SetProcFiles_Params.statmFile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, read_only_file$.ReadOnlyFile, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MemoryUsageMonitorLinux_SetProcFiles_Params.statusFile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, read_only_file$.ReadOnlyFile, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MemoryUsageMonitorLinux_SetProcFiles_Params.encodedSize = codec.kStructHeaderSize + 16;

  MemoryUsageMonitorLinux_SetProcFiles_Params.decode = function(decoder) {
    var packed;
    var val = new MemoryUsageMonitorLinux_SetProcFiles_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.statmFile =
        decoder.decodeStructPointer(read_only_file$.ReadOnlyFile);
    val.statusFile =
        decoder.decodeStructPointer(read_only_file$.ReadOnlyFile);
    return val;
  };

  MemoryUsageMonitorLinux_SetProcFiles_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MemoryUsageMonitorLinux_SetProcFiles_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(read_only_file$.ReadOnlyFile, val.statmFile);
    encoder.encodeStructPointer(read_only_file$.ReadOnlyFile, val.statusFile);
  };
  var kMemoryUsageMonitorLinux_SetProcFiles_Name = 1212741343;

  function MemoryUsageMonitorLinuxPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(MemoryUsageMonitorLinux,
                                                   handleOrPtrInfo);
  }

  function MemoryUsageMonitorLinuxAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        MemoryUsageMonitorLinux, associatedInterfacePtrInfo);
  }

  MemoryUsageMonitorLinuxAssociatedPtr.prototype =
      Object.create(MemoryUsageMonitorLinuxPtr.prototype);
  MemoryUsageMonitorLinuxAssociatedPtr.prototype.constructor =
      MemoryUsageMonitorLinuxAssociatedPtr;

  function MemoryUsageMonitorLinuxProxy(receiver) {
    this.receiver_ = receiver;
  }
  MemoryUsageMonitorLinuxPtr.prototype.setProcFiles = function() {
    return MemoryUsageMonitorLinuxProxy.prototype.setProcFiles
        .apply(this.ptr.getProxy(), arguments);
  };

  MemoryUsageMonitorLinuxProxy.prototype.setProcFiles = function(statmFile, statusFile) {
    var params_ = new MemoryUsageMonitorLinux_SetProcFiles_Params();
    params_.statmFile = statmFile;
    params_.statusFile = statusFile;
    var builder = new codec.MessageV0Builder(
        kMemoryUsageMonitorLinux_SetProcFiles_Name,
        codec.align(MemoryUsageMonitorLinux_SetProcFiles_Params.encodedSize));
    builder.encodeStruct(MemoryUsageMonitorLinux_SetProcFiles_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function MemoryUsageMonitorLinuxStub(delegate) {
    this.delegate_ = delegate;
  }
  MemoryUsageMonitorLinuxStub.prototype.setProcFiles = function(statmFile, statusFile) {
    return this.delegate_ && this.delegate_.setProcFiles && this.delegate_.setProcFiles(statmFile, statusFile);
  }

  MemoryUsageMonitorLinuxStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kMemoryUsageMonitorLinux_SetProcFiles_Name:
      var params = reader.decodeStruct(MemoryUsageMonitorLinux_SetProcFiles_Params);
      this.setProcFiles(params.statmFile, params.statusFile);
      return true;
    default:
      return false;
    }
  };

  MemoryUsageMonitorLinuxStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateMemoryUsageMonitorLinuxRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kMemoryUsageMonitorLinux_SetProcFiles_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = MemoryUsageMonitorLinux_SetProcFiles_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateMemoryUsageMonitorLinuxResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var MemoryUsageMonitorLinux = {
    name: 'blink.mojom.MemoryUsageMonitorLinux',
    kVersion: 0,
    ptrClass: MemoryUsageMonitorLinuxPtr,
    proxyClass: MemoryUsageMonitorLinuxProxy,
    stubClass: MemoryUsageMonitorLinuxStub,
    validateRequest: validateMemoryUsageMonitorLinuxRequest,
    validateResponse: null,
  };
  MemoryUsageMonitorLinuxStub.prototype.validator = validateMemoryUsageMonitorLinuxRequest;
  MemoryUsageMonitorLinuxProxy.prototype.validator = null;
  exports.MemoryUsageMonitorLinux = MemoryUsageMonitorLinux;
  exports.MemoryUsageMonitorLinuxPtr = MemoryUsageMonitorLinuxPtr;
  exports.MemoryUsageMonitorLinuxAssociatedPtr = MemoryUsageMonitorLinuxAssociatedPtr;
})();