// third_party/blink/public/mojom/frame/view_transition_state.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/frame/view_transition_state.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var transform$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/transform.mojom', '../../../../../ui/gfx/mojom/transform.mojom.js');
  }
  var view_transition_element_resource_id$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/public/mojom/compositing/view_transition_element_resource_id.mojom', '../../../../../services/viz/public/mojom/compositing/view_transition_element_resource_id.mojom.js');
  }



  function ViewTransitionElement(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewTransitionElement.prototype.initDefaults_ = function() {
    this.tagName = null;
    this.borderBoxSizeInCssSpace = null;
    this.viewportMatrix = null;
    this.overflowRectInLayoutSpace = null;
    this.capturedRectInLayoutSpace = null;
    this.snapshotId = null;
    this.paintOrder = 0;
    this.containerWritingMode = 0;
    this.mixBlendMode = 0;
    this.textOrientation = 0;
    this.colorScheme = null;
  };
  ViewTransitionElement.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewTransitionElement.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 72}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ViewTransitionElement.tagName
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ViewTransitionElement.borderBoxSizeInCssSpace
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.SizeF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ViewTransitionElement.viewportMatrix
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, transform$.Transform, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ViewTransitionElement.overflowRectInLayoutSpace
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, geometry$.RectF, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ViewTransitionElement.capturedRectInLayoutSpace
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, geometry$.RectF, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ViewTransitionElement.snapshotId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, view_transition_element_resource_id$.ViewTransitionElementResourceId, false);
    if (err !== validator.validationError.NONE)
        return err;






    // validate ViewTransitionElement.colorScheme
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 56, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ViewTransitionElement.encodedSize = codec.kStructHeaderSize + 64;

  ViewTransitionElement.decode = function(decoder) {
    var packed;
    var val = new ViewTransitionElement();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tagName =
        decoder.decodeStruct(codec.String);
    val.borderBoxSizeInCssSpace =
        decoder.decodeStructPointer(geometry$.SizeF);
    val.viewportMatrix =
        decoder.decodeStructPointer(transform$.Transform);
    val.overflowRectInLayoutSpace =
        decoder.decodeStructPointer(geometry$.RectF);
    val.capturedRectInLayoutSpace =
        decoder.decodeStructPointer(geometry$.RectF);
    val.snapshotId =
        decoder.decodeStructPointer(view_transition_element_resource_id$.ViewTransitionElementResourceId);
    val.paintOrder =
        decoder.decodeStruct(codec.Int32);
    val.containerWritingMode =
        decoder.decodeStruct(codec.Uint8);
    val.mixBlendMode =
        decoder.decodeStruct(codec.Uint8);
    val.textOrientation =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    val.colorScheme =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ViewTransitionElement.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewTransitionElement.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.tagName);
    encoder.encodeStructPointer(geometry$.SizeF, val.borderBoxSizeInCssSpace);
    encoder.encodeStructPointer(transform$.Transform, val.viewportMatrix);
    encoder.encodeStructPointer(geometry$.RectF, val.overflowRectInLayoutSpace);
    encoder.encodeStructPointer(geometry$.RectF, val.capturedRectInLayoutSpace);
    encoder.encodeStructPointer(view_transition_element_resource_id$.ViewTransitionElementResourceId, val.snapshotId);
    encoder.encodeStruct(codec.Int32, val.paintOrder);
    encoder.encodeStruct(codec.Uint8, val.containerWritingMode);
    encoder.encodeStruct(codec.Uint8, val.mixBlendMode);
    encoder.encodeStruct(codec.Uint8, val.textOrientation);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.colorScheme);
  };
  function ViewTransitionState(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ViewTransitionState.prototype.initDefaults_ = function() {
    this.elements = null;
    this.navigationId = null;
    this.snapshotRootSizeAtCapture = null;
    this.devicePixelRatio = 0;
  };
  ViewTransitionState.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ViewTransitionState.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ViewTransitionState.elements
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(ViewTransitionElement), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ViewTransitionState.navigationId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ViewTransitionState.snapshotRootSizeAtCapture
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ViewTransitionState.encodedSize = codec.kStructHeaderSize + 32;

  ViewTransitionState.decode = function(decoder) {
    var packed;
    var val = new ViewTransitionState();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.elements =
        decoder.decodeArrayPointer(new codec.PointerTo(ViewTransitionElement));
    val.navigationId =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.snapshotRootSizeAtCapture =
        decoder.decodeStructPointer(geometry$.Size);
    val.devicePixelRatio =
        decoder.decodeStruct(codec.Float);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ViewTransitionState.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ViewTransitionState.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(ViewTransitionElement), val.elements);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.navigationId);
    encoder.encodeStructPointer(geometry$.Size, val.snapshotRootSizeAtCapture);
    encoder.encodeStruct(codec.Float, val.devicePixelRatio);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  exports.ViewTransitionElement = ViewTransitionElement;
  exports.ViewTransitionState = ViewTransitionState;
})();