// third_party/blink/public/mojom/input/input_event.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/input/input_event.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');


  var Button = {};
  Button.kNoButton = -1;
  Button.kLeft = 0;
  Button.kMiddle = 1;
  Button.kRight = 2;
  Button.kBarrel = 2;
  Button.kBack = 3;
  Button.kForward = 4;
  Button.kEraser = 5;
  Button.MIN_VALUE = -1;
  Button.MAX_VALUE = 5;

  Button.isKnownEnumValue = function(value) {
    switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    }
    return false;
  };

  Button.toKnownEnumValue = function(value) {
    return value;
  };

  Button.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var DispatchType = {};
  DispatchType.kBlocking = 0;
  DispatchType.kEventNonBlocking = 1;
  DispatchType.kListenersNonBlockingPassive = 2;
  DispatchType.kListenersForcedNonBlockingDueToFling = 3;
  DispatchType.MIN_VALUE = 0;
  DispatchType.MAX_VALUE = 3;

  DispatchType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  DispatchType.toKnownEnumValue = function(value) {
    return value;
  };

  DispatchType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var EventType = {};
  EventType.kUndefined = -1;
  EventType.kTypeFirst = -1;
  EventType.kMouseDown = 0;
  EventType.kMouseTypeFirst = 0;
  EventType.kMouseUp = 1;
  EventType.kMouseMove = 2;
  EventType.kMouseEnter = 3;
  EventType.kMouseLeave = 4;
  EventType.kContextMenu = 5;
  EventType.kMouseTypeLast = 5;
  EventType.kMouseWheel = 6;
  EventType.kRawKeyDown = 7;
  EventType.kKeyboardTypeFirst = 7;
  EventType.kKeyDown = 8;
  EventType.kKeyUp = 9;
  EventType.kChar = 10;
  EventType.kKeyboardTypeLast = 10;
  EventType.kGestureScrollBegin = 11;
  EventType.kGestureTypeFirst = 11;
  EventType.kGestureScrollEnd = 12;
  EventType.kGestureScrollUpdate = 13;
  EventType.kGestureFlingStart = 14;
  EventType.kGestureFlingCancel = 15;
  EventType.kGesturePinchBegin = 16;
  EventType.kGesturePinchTypeFirst = 16;
  EventType.kGesturePinchEnd = 17;
  EventType.kGesturePinchUpdate = 18;
  EventType.kGesturePinchTypeLast = 18;
  EventType.kGestureTapDown = 19;
  EventType.kGestureShowPress = 20;
  EventType.kGestureTap = 21;
  EventType.kGestureTapCancel = 22;
  EventType.kGestureShortPress = 23;
  EventType.kGestureLongPress = 24;
  EventType.kGestureLongTap = 25;
  EventType.kGestureTwoFingerTap = 26;
  EventType.kGestureTapUnconfirmed = 27;
  EventType.kGestureDoubleTap = 28;
  EventType.kGestureTypeLast = 28;
  EventType.kTouchStart = 29;
  EventType.kTouchTypeFirst = 29;
  EventType.kTouchMove = 30;
  EventType.kTouchEnd = 31;
  EventType.kTouchCancel = 32;
  EventType.kTouchScrollStarted = 33;
  EventType.kTouchTypeLast = 33;
  EventType.kPointerDown = 34;
  EventType.kPointerTypeFirst = 34;
  EventType.kPointerUp = 35;
  EventType.kPointerMove = 36;
  EventType.kPointerRawUpdate = 37;
  EventType.kPointerCancel = 38;
  EventType.kPointerCausedUaAction = 39;
  EventType.kPointerTypeLast = 39;
  EventType.kTypeLast = 39;
  EventType.MIN_VALUE = -1;
  EventType.MAX_VALUE = 39;

  EventType.isKnownEnumValue = function(value) {
    switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    }
    return false;
  };

  EventType.toKnownEnumValue = function(value) {
    return value;
  };

  EventType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  exports.Button = Button;
  exports.DispatchType = DispatchType;
  exports.EventType = EventType;
})();