// third_party/blink/public/mojom/shared_storage/shared_storage.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/shared_storage/shared_storage.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var fenced_frame_config$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/fenced_frame/fenced_frame_config.mojom', '../fenced_frame/fenced_frame_config.mojom.js');
  }
  var cloneable_message$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/messaging/cloneable_message.mojom', '../messaging/cloneable_message.mojom.js');
  }
  var origin_trial_feature$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/origin_trial_feature/origin_trial_feature.mojom', '../origin_trial_feature/origin_trial_feature.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function SharedStorageKeyArgument(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageKeyArgument.prototype.initDefaults_ = function() {
    this.data = null;
  };
  SharedStorageKeyArgument.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageKeyArgument.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageKeyArgument.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageKeyArgument.encodedSize = codec.kStructHeaderSize + 8;

  SharedStorageKeyArgument.decode = function(decoder) {
    var packed;
    var val = new SharedStorageKeyArgument();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  SharedStorageKeyArgument.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageKeyArgument.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.data);
  };
  function SharedStorageValueArgument(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageValueArgument.prototype.initDefaults_ = function() {
    this.data = null;
  };
  SharedStorageValueArgument.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageValueArgument.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageValueArgument.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageValueArgument.encodedSize = codec.kStructHeaderSize + 8;

  SharedStorageValueArgument.decode = function(decoder) {
    var packed;
    var val = new SharedStorageValueArgument();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStructPointer(string16$.String16);
    return val;
  };

  SharedStorageValueArgument.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageValueArgument.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.data);
  };
  function SharedStorageUrlWithMetadata(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageUrlWithMetadata.prototype.initDefaults_ = function() {
    this.url = null;
    this.reportingMetadata = null;
  };
  SharedStorageUrlWithMetadata.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageUrlWithMetadata.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageUrlWithMetadata.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageUrlWithMetadata.reportingMetadata
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, codec.String, new codec.PointerTo(url$.Url), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageUrlWithMetadata.encodedSize = codec.kStructHeaderSize + 16;

  SharedStorageUrlWithMetadata.decode = function(decoder) {
    var packed;
    var val = new SharedStorageUrlWithMetadata();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.reportingMetadata =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(url$.Url));
    return val;
  };

  SharedStorageUrlWithMetadata.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageUrlWithMetadata.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(url$.Url), val.reportingMetadata);
  };
  function SharedStorageDocumentService_AddModuleOnWorklet_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_AddModuleOnWorklet_Params.prototype.initDefaults_ = function() {
    this.scriptSourceUrl = null;
    this.originTrialFeatures = null;
  };
  SharedStorageDocumentService_AddModuleOnWorklet_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_AddModuleOnWorklet_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_AddModuleOnWorklet_Params.scriptSourceUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_AddModuleOnWorklet_Params.originTrialFeatures
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 4, new codec.Enum(origin_trial_feature$.OriginTrialFeature), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_AddModuleOnWorklet_Params.encodedSize = codec.kStructHeaderSize + 16;

  SharedStorageDocumentService_AddModuleOnWorklet_Params.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_AddModuleOnWorklet_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.scriptSourceUrl =
        decoder.decodeStructPointer(url$.Url);
    val.originTrialFeatures =
        decoder.decodeArrayPointer(new codec.Enum(origin_trial_feature$.OriginTrialFeature));
    return val;
  };

  SharedStorageDocumentService_AddModuleOnWorklet_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_AddModuleOnWorklet_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.scriptSourceUrl);
    encoder.encodeArrayPointer(new codec.Enum(origin_trial_feature$.OriginTrialFeature), val.originTrialFeatures);
  };
  function SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.errorMessage = null;
  };
  SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams.errorMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.errorMessage =
        decoder.decodeStruct(codec.String);
    return val;
  };

  SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.errorMessage);
  };
  function SharedStorageDocumentService_RunOperationOnWorklet_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_RunOperationOnWorklet_Params.prototype.initDefaults_ = function() {
    this.name = null;
    this.serializedData = null;
    this.keepAliveAfterOperation = false;
    this.contextId = null;
  };
  SharedStorageDocumentService_RunOperationOnWorklet_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_RunOperationOnWorklet_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_RunOperationOnWorklet_Params.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_RunOperationOnWorklet_Params.serializedData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, cloneable_message$.CloneableMessage, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SharedStorageDocumentService_RunOperationOnWorklet_Params.contextId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_RunOperationOnWorklet_Params.encodedSize = codec.kStructHeaderSize + 32;

  SharedStorageDocumentService_RunOperationOnWorklet_Params.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_RunOperationOnWorklet_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.serializedData =
        decoder.decodeStructPointer(cloneable_message$.CloneableMessage);
    packed = decoder.readUint8();
    val.keepAliveAfterOperation = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.contextId =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  SharedStorageDocumentService_RunOperationOnWorklet_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_RunOperationOnWorklet_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStructPointer(cloneable_message$.CloneableMessage, val.serializedData);
    packed = 0;
    packed |= (val.keepAliveAfterOperation & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.NullableString, val.contextId);
  };
  function SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.errorMessage = null;
  };
  SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams.errorMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.errorMessage =
        decoder.decodeStruct(codec.String);
    return val;
  };

  SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.errorMessage);
  };
  function SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.prototype.initDefaults_ = function() {
    this.name = null;
    this.urlsWithMetadata = null;
    this.serializedData = null;
    this.keepAliveAfterOperation = false;
    this.contextId = null;
  };
  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.urlsWithMetadata
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(SharedStorageUrlWithMetadata), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.serializedData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, cloneable_message$.CloneableMessage, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.contextId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.encodedSize = codec.kStructHeaderSize + 40;

  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.urlsWithMetadata =
        decoder.decodeArrayPointer(new codec.PointerTo(SharedStorageUrlWithMetadata));
    val.serializedData =
        decoder.decodeStructPointer(cloneable_message$.CloneableMessage);
    packed = decoder.readUint8();
    val.keepAliveAfterOperation = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.contextId =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeArrayPointer(new codec.PointerTo(SharedStorageUrlWithMetadata), val.urlsWithMetadata);
    encoder.encodeStructPointer(cloneable_message$.CloneableMessage, val.serializedData);
    packed = 0;
    packed |= (val.keepAliveAfterOperation & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.NullableString, val.contextId);
  };
  function SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.errorMessage = null;
    this.config = null;
  };
  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams.errorMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams.config
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, fenced_frame_config$.FencedFrameConfig, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.errorMessage =
        decoder.decodeStruct(codec.String);
    val.config =
        decoder.decodeStructPointer(fenced_frame_config$.FencedFrameConfig);
    return val;
  };

  SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.errorMessage);
    encoder.encodeStructPointer(fenced_frame_config$.FencedFrameConfig, val.config);
  };
  function SharedStorageDocumentService_SharedStorageSet_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_SharedStorageSet_Params.prototype.initDefaults_ = function() {
    this.key = null;
    this.value = null;
    this.ignoreIfPresent = false;
  };
  SharedStorageDocumentService_SharedStorageSet_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_SharedStorageSet_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_SharedStorageSet_Params.key
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SharedStorageKeyArgument, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_SharedStorageSet_Params.value
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, SharedStorageValueArgument, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_SharedStorageSet_Params.encodedSize = codec.kStructHeaderSize + 24;

  SharedStorageDocumentService_SharedStorageSet_Params.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_SharedStorageSet_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.key =
        decoder.decodeStructPointer(SharedStorageKeyArgument);
    val.value =
        decoder.decodeStructPointer(SharedStorageValueArgument);
    packed = decoder.readUint8();
    val.ignoreIfPresent = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SharedStorageDocumentService_SharedStorageSet_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_SharedStorageSet_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SharedStorageKeyArgument, val.key);
    encoder.encodeStructPointer(SharedStorageValueArgument, val.value);
    packed = 0;
    packed |= (val.ignoreIfPresent & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SharedStorageDocumentService_SharedStorageSet_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_SharedStorageSet_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.errorMessage = null;
  };
  SharedStorageDocumentService_SharedStorageSet_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_SharedStorageSet_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SharedStorageDocumentService_SharedStorageSet_ResponseParams.errorMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_SharedStorageSet_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  SharedStorageDocumentService_SharedStorageSet_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_SharedStorageSet_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.errorMessage =
        decoder.decodeStruct(codec.String);
    return val;
  };

  SharedStorageDocumentService_SharedStorageSet_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_SharedStorageSet_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.errorMessage);
  };
  function SharedStorageDocumentService_SharedStorageAppend_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_SharedStorageAppend_Params.prototype.initDefaults_ = function() {
    this.key = null;
    this.value = null;
  };
  SharedStorageDocumentService_SharedStorageAppend_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_SharedStorageAppend_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_SharedStorageAppend_Params.key
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SharedStorageKeyArgument, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_SharedStorageAppend_Params.value
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, SharedStorageValueArgument, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_SharedStorageAppend_Params.encodedSize = codec.kStructHeaderSize + 16;

  SharedStorageDocumentService_SharedStorageAppend_Params.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_SharedStorageAppend_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.key =
        decoder.decodeStructPointer(SharedStorageKeyArgument);
    val.value =
        decoder.decodeStructPointer(SharedStorageValueArgument);
    return val;
  };

  SharedStorageDocumentService_SharedStorageAppend_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_SharedStorageAppend_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SharedStorageKeyArgument, val.key);
    encoder.encodeStructPointer(SharedStorageValueArgument, val.value);
  };
  function SharedStorageDocumentService_SharedStorageAppend_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_SharedStorageAppend_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.errorMessage = null;
  };
  SharedStorageDocumentService_SharedStorageAppend_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_SharedStorageAppend_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SharedStorageDocumentService_SharedStorageAppend_ResponseParams.errorMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_SharedStorageAppend_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  SharedStorageDocumentService_SharedStorageAppend_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_SharedStorageAppend_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.errorMessage =
        decoder.decodeStruct(codec.String);
    return val;
  };

  SharedStorageDocumentService_SharedStorageAppend_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_SharedStorageAppend_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.errorMessage);
  };
  function SharedStorageDocumentService_SharedStorageDelete_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_SharedStorageDelete_Params.prototype.initDefaults_ = function() {
    this.key = null;
  };
  SharedStorageDocumentService_SharedStorageDelete_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_SharedStorageDelete_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedStorageDocumentService_SharedStorageDelete_Params.key
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, SharedStorageKeyArgument, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_SharedStorageDelete_Params.encodedSize = codec.kStructHeaderSize + 8;

  SharedStorageDocumentService_SharedStorageDelete_Params.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_SharedStorageDelete_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.key =
        decoder.decodeStructPointer(SharedStorageKeyArgument);
    return val;
  };

  SharedStorageDocumentService_SharedStorageDelete_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_SharedStorageDelete_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(SharedStorageKeyArgument, val.key);
  };
  function SharedStorageDocumentService_SharedStorageDelete_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_SharedStorageDelete_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.errorMessage = null;
  };
  SharedStorageDocumentService_SharedStorageDelete_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_SharedStorageDelete_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SharedStorageDocumentService_SharedStorageDelete_ResponseParams.errorMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_SharedStorageDelete_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  SharedStorageDocumentService_SharedStorageDelete_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_SharedStorageDelete_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.errorMessage =
        decoder.decodeStruct(codec.String);
    return val;
  };

  SharedStorageDocumentService_SharedStorageDelete_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_SharedStorageDelete_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.errorMessage);
  };
  function SharedStorageDocumentService_SharedStorageClear_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_SharedStorageClear_Params.prototype.initDefaults_ = function() {
  };
  SharedStorageDocumentService_SharedStorageClear_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_SharedStorageClear_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_SharedStorageClear_Params.encodedSize = codec.kStructHeaderSize + 0;

  SharedStorageDocumentService_SharedStorageClear_Params.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_SharedStorageClear_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  SharedStorageDocumentService_SharedStorageClear_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_SharedStorageClear_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function SharedStorageDocumentService_SharedStorageClear_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedStorageDocumentService_SharedStorageClear_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.errorMessage = null;
  };
  SharedStorageDocumentService_SharedStorageClear_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedStorageDocumentService_SharedStorageClear_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SharedStorageDocumentService_SharedStorageClear_ResponseParams.errorMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedStorageDocumentService_SharedStorageClear_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  SharedStorageDocumentService_SharedStorageClear_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SharedStorageDocumentService_SharedStorageClear_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.errorMessage =
        decoder.decodeStruct(codec.String);
    return val;
  };

  SharedStorageDocumentService_SharedStorageClear_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedStorageDocumentService_SharedStorageClear_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.errorMessage);
  };
  var kSharedStorageDocumentService_AddModuleOnWorklet_Name = 225691783;
  var kSharedStorageDocumentService_RunOperationOnWorklet_Name = 1589945998;
  var kSharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Name = 1333610170;
  var kSharedStorageDocumentService_SharedStorageSet_Name = 1619439480;
  var kSharedStorageDocumentService_SharedStorageAppend_Name = 895836893;
  var kSharedStorageDocumentService_SharedStorageDelete_Name = 484057855;
  var kSharedStorageDocumentService_SharedStorageClear_Name = 3228521;

  function SharedStorageDocumentServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SharedStorageDocumentService,
                                                   handleOrPtrInfo);
  }

  function SharedStorageDocumentServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SharedStorageDocumentService, associatedInterfacePtrInfo);
  }

  SharedStorageDocumentServiceAssociatedPtr.prototype =
      Object.create(SharedStorageDocumentServicePtr.prototype);
  SharedStorageDocumentServiceAssociatedPtr.prototype.constructor =
      SharedStorageDocumentServiceAssociatedPtr;

  function SharedStorageDocumentServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  SharedStorageDocumentServicePtr.prototype.addModuleOnWorklet = function() {
    return SharedStorageDocumentServiceProxy.prototype.addModuleOnWorklet
        .apply(this.ptr.getProxy(), arguments);
  };

  SharedStorageDocumentServiceProxy.prototype.addModuleOnWorklet = function(scriptSourceUrl, originTrialFeatures) {
    var params_ = new SharedStorageDocumentService_AddModuleOnWorklet_Params();
    params_.scriptSourceUrl = scriptSourceUrl;
    params_.originTrialFeatures = originTrialFeatures;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSharedStorageDocumentService_AddModuleOnWorklet_Name,
          codec.align(SharedStorageDocumentService_AddModuleOnWorklet_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SharedStorageDocumentService_AddModuleOnWorklet_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SharedStorageDocumentServicePtr.prototype.runOperationOnWorklet = function() {
    return SharedStorageDocumentServiceProxy.prototype.runOperationOnWorklet
        .apply(this.ptr.getProxy(), arguments);
  };

  SharedStorageDocumentServiceProxy.prototype.runOperationOnWorklet = function(name, serializedData, keepAliveAfterOperation, contextId) {
    var params_ = new SharedStorageDocumentService_RunOperationOnWorklet_Params();
    params_.name = name;
    params_.serializedData = serializedData;
    params_.keepAliveAfterOperation = keepAliveAfterOperation;
    params_.contextId = contextId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSharedStorageDocumentService_RunOperationOnWorklet_Name,
          codec.align(SharedStorageDocumentService_RunOperationOnWorklet_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SharedStorageDocumentService_RunOperationOnWorklet_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SharedStorageDocumentServicePtr.prototype.runURLSelectionOperationOnWorklet = function() {
    return SharedStorageDocumentServiceProxy.prototype.runURLSelectionOperationOnWorklet
        .apply(this.ptr.getProxy(), arguments);
  };

  SharedStorageDocumentServiceProxy.prototype.runURLSelectionOperationOnWorklet = function(name, urlsWithMetadata, serializedData, keepAliveAfterOperation, contextId) {
    var params_ = new SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params();
    params_.name = name;
    params_.urlsWithMetadata = urlsWithMetadata;
    params_.serializedData = serializedData;
    params_.keepAliveAfterOperation = keepAliveAfterOperation;
    params_.contextId = contextId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Name,
          codec.align(SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SharedStorageDocumentServicePtr.prototype.sharedStorageSet = function() {
    return SharedStorageDocumentServiceProxy.prototype.sharedStorageSet
        .apply(this.ptr.getProxy(), arguments);
  };

  SharedStorageDocumentServiceProxy.prototype.sharedStorageSet = function(key, value, ignoreIfPresent) {
    var params_ = new SharedStorageDocumentService_SharedStorageSet_Params();
    params_.key = key;
    params_.value = value;
    params_.ignoreIfPresent = ignoreIfPresent;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSharedStorageDocumentService_SharedStorageSet_Name,
          codec.align(SharedStorageDocumentService_SharedStorageSet_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SharedStorageDocumentService_SharedStorageSet_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SharedStorageDocumentService_SharedStorageSet_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SharedStorageDocumentServicePtr.prototype.sharedStorageAppend = function() {
    return SharedStorageDocumentServiceProxy.prototype.sharedStorageAppend
        .apply(this.ptr.getProxy(), arguments);
  };

  SharedStorageDocumentServiceProxy.prototype.sharedStorageAppend = function(key, value) {
    var params_ = new SharedStorageDocumentService_SharedStorageAppend_Params();
    params_.key = key;
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSharedStorageDocumentService_SharedStorageAppend_Name,
          codec.align(SharedStorageDocumentService_SharedStorageAppend_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SharedStorageDocumentService_SharedStorageAppend_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SharedStorageDocumentService_SharedStorageAppend_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SharedStorageDocumentServicePtr.prototype.sharedStorageDelete = function() {
    return SharedStorageDocumentServiceProxy.prototype.sharedStorageDelete
        .apply(this.ptr.getProxy(), arguments);
  };

  SharedStorageDocumentServiceProxy.prototype.sharedStorageDelete = function(key) {
    var params_ = new SharedStorageDocumentService_SharedStorageDelete_Params();
    params_.key = key;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSharedStorageDocumentService_SharedStorageDelete_Name,
          codec.align(SharedStorageDocumentService_SharedStorageDelete_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SharedStorageDocumentService_SharedStorageDelete_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SharedStorageDocumentService_SharedStorageDelete_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SharedStorageDocumentServicePtr.prototype.sharedStorageClear = function() {
    return SharedStorageDocumentServiceProxy.prototype.sharedStorageClear
        .apply(this.ptr.getProxy(), arguments);
  };

  SharedStorageDocumentServiceProxy.prototype.sharedStorageClear = function() {
    var params_ = new SharedStorageDocumentService_SharedStorageClear_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSharedStorageDocumentService_SharedStorageClear_Name,
          codec.align(SharedStorageDocumentService_SharedStorageClear_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SharedStorageDocumentService_SharedStorageClear_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SharedStorageDocumentService_SharedStorageClear_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function SharedStorageDocumentServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  SharedStorageDocumentServiceStub.prototype.addModuleOnWorklet = function(scriptSourceUrl, originTrialFeatures) {
    return this.delegate_ && this.delegate_.addModuleOnWorklet && this.delegate_.addModuleOnWorklet(scriptSourceUrl, originTrialFeatures);
  }
  SharedStorageDocumentServiceStub.prototype.runOperationOnWorklet = function(name, serializedData, keepAliveAfterOperation, contextId) {
    return this.delegate_ && this.delegate_.runOperationOnWorklet && this.delegate_.runOperationOnWorklet(name, serializedData, keepAliveAfterOperation, contextId);
  }
  SharedStorageDocumentServiceStub.prototype.runURLSelectionOperationOnWorklet = function(name, urlsWithMetadata, serializedData, keepAliveAfterOperation, contextId) {
    return this.delegate_ && this.delegate_.runURLSelectionOperationOnWorklet && this.delegate_.runURLSelectionOperationOnWorklet(name, urlsWithMetadata, serializedData, keepAliveAfterOperation, contextId);
  }
  SharedStorageDocumentServiceStub.prototype.sharedStorageSet = function(key, value, ignoreIfPresent) {
    return this.delegate_ && this.delegate_.sharedStorageSet && this.delegate_.sharedStorageSet(key, value, ignoreIfPresent);
  }
  SharedStorageDocumentServiceStub.prototype.sharedStorageAppend = function(key, value) {
    return this.delegate_ && this.delegate_.sharedStorageAppend && this.delegate_.sharedStorageAppend(key, value);
  }
  SharedStorageDocumentServiceStub.prototype.sharedStorageDelete = function(key) {
    return this.delegate_ && this.delegate_.sharedStorageDelete && this.delegate_.sharedStorageDelete(key);
  }
  SharedStorageDocumentServiceStub.prototype.sharedStorageClear = function() {
    return this.delegate_ && this.delegate_.sharedStorageClear && this.delegate_.sharedStorageClear();
  }

  SharedStorageDocumentServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  SharedStorageDocumentServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSharedStorageDocumentService_AddModuleOnWorklet_Name:
      var params = reader.decodeStruct(SharedStorageDocumentService_AddModuleOnWorklet_Params);
      this.addModuleOnWorklet(params.scriptSourceUrl, params.originTrialFeatures).then(function(response) {
        var responseParams =
            new SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams();
        responseParams.success = response.success;
        responseParams.errorMessage = response.errorMessage;
        var builder = new codec.MessageV1Builder(
            kSharedStorageDocumentService_AddModuleOnWorklet_Name,
            codec.align(SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kSharedStorageDocumentService_RunOperationOnWorklet_Name:
      var params = reader.decodeStruct(SharedStorageDocumentService_RunOperationOnWorklet_Params);
      this.runOperationOnWorklet(params.name, params.serializedData, params.keepAliveAfterOperation, params.contextId).then(function(response) {
        var responseParams =
            new SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams();
        responseParams.success = response.success;
        responseParams.errorMessage = response.errorMessage;
        var builder = new codec.MessageV1Builder(
            kSharedStorageDocumentService_RunOperationOnWorklet_Name,
            codec.align(SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kSharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Name:
      var params = reader.decodeStruct(SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params);
      this.runURLSelectionOperationOnWorklet(params.name, params.urlsWithMetadata, params.serializedData, params.keepAliveAfterOperation, params.contextId).then(function(response) {
        var responseParams =
            new SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams();
        responseParams.success = response.success;
        responseParams.errorMessage = response.errorMessage;
        responseParams.config = response.config;
        var builder = new codec.MessageV1Builder(
            kSharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Name,
            codec.align(SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kSharedStorageDocumentService_SharedStorageSet_Name:
      var params = reader.decodeStruct(SharedStorageDocumentService_SharedStorageSet_Params);
      this.sharedStorageSet(params.key, params.value, params.ignoreIfPresent).then(function(response) {
        var responseParams =
            new SharedStorageDocumentService_SharedStorageSet_ResponseParams();
        responseParams.success = response.success;
        responseParams.errorMessage = response.errorMessage;
        var builder = new codec.MessageV1Builder(
            kSharedStorageDocumentService_SharedStorageSet_Name,
            codec.align(SharedStorageDocumentService_SharedStorageSet_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SharedStorageDocumentService_SharedStorageSet_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kSharedStorageDocumentService_SharedStorageAppend_Name:
      var params = reader.decodeStruct(SharedStorageDocumentService_SharedStorageAppend_Params);
      this.sharedStorageAppend(params.key, params.value).then(function(response) {
        var responseParams =
            new SharedStorageDocumentService_SharedStorageAppend_ResponseParams();
        responseParams.success = response.success;
        responseParams.errorMessage = response.errorMessage;
        var builder = new codec.MessageV1Builder(
            kSharedStorageDocumentService_SharedStorageAppend_Name,
            codec.align(SharedStorageDocumentService_SharedStorageAppend_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SharedStorageDocumentService_SharedStorageAppend_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kSharedStorageDocumentService_SharedStorageDelete_Name:
      var params = reader.decodeStruct(SharedStorageDocumentService_SharedStorageDelete_Params);
      this.sharedStorageDelete(params.key).then(function(response) {
        var responseParams =
            new SharedStorageDocumentService_SharedStorageDelete_ResponseParams();
        responseParams.success = response.success;
        responseParams.errorMessage = response.errorMessage;
        var builder = new codec.MessageV1Builder(
            kSharedStorageDocumentService_SharedStorageDelete_Name,
            codec.align(SharedStorageDocumentService_SharedStorageDelete_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SharedStorageDocumentService_SharedStorageDelete_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kSharedStorageDocumentService_SharedStorageClear_Name:
      var params = reader.decodeStruct(SharedStorageDocumentService_SharedStorageClear_Params);
      this.sharedStorageClear().then(function(response) {
        var responseParams =
            new SharedStorageDocumentService_SharedStorageClear_ResponseParams();
        responseParams.success = response.success;
        responseParams.errorMessage = response.errorMessage;
        var builder = new codec.MessageV1Builder(
            kSharedStorageDocumentService_SharedStorageClear_Name,
            codec.align(SharedStorageDocumentService_SharedStorageClear_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SharedStorageDocumentService_SharedStorageClear_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSharedStorageDocumentServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSharedStorageDocumentService_AddModuleOnWorklet_Name:
        if (message.expectsResponse())
          paramsClass = SharedStorageDocumentService_AddModuleOnWorklet_Params;
      break;
      case kSharedStorageDocumentService_RunOperationOnWorklet_Name:
        if (message.expectsResponse())
          paramsClass = SharedStorageDocumentService_RunOperationOnWorklet_Params;
      break;
      case kSharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Name:
        if (message.expectsResponse())
          paramsClass = SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Params;
      break;
      case kSharedStorageDocumentService_SharedStorageSet_Name:
        if (message.expectsResponse())
          paramsClass = SharedStorageDocumentService_SharedStorageSet_Params;
      break;
      case kSharedStorageDocumentService_SharedStorageAppend_Name:
        if (message.expectsResponse())
          paramsClass = SharedStorageDocumentService_SharedStorageAppend_Params;
      break;
      case kSharedStorageDocumentService_SharedStorageDelete_Name:
        if (message.expectsResponse())
          paramsClass = SharedStorageDocumentService_SharedStorageDelete_Params;
      break;
      case kSharedStorageDocumentService_SharedStorageClear_Name:
        if (message.expectsResponse())
          paramsClass = SharedStorageDocumentService_SharedStorageClear_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSharedStorageDocumentServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSharedStorageDocumentService_AddModuleOnWorklet_Name:
        if (message.isResponse())
          paramsClass = SharedStorageDocumentService_AddModuleOnWorklet_ResponseParams;
        break;
      case kSharedStorageDocumentService_RunOperationOnWorklet_Name:
        if (message.isResponse())
          paramsClass = SharedStorageDocumentService_RunOperationOnWorklet_ResponseParams;
        break;
      case kSharedStorageDocumentService_RunURLSelectionOperationOnWorklet_Name:
        if (message.isResponse())
          paramsClass = SharedStorageDocumentService_RunURLSelectionOperationOnWorklet_ResponseParams;
        break;
      case kSharedStorageDocumentService_SharedStorageSet_Name:
        if (message.isResponse())
          paramsClass = SharedStorageDocumentService_SharedStorageSet_ResponseParams;
        break;
      case kSharedStorageDocumentService_SharedStorageAppend_Name:
        if (message.isResponse())
          paramsClass = SharedStorageDocumentService_SharedStorageAppend_ResponseParams;
        break;
      case kSharedStorageDocumentService_SharedStorageDelete_Name:
        if (message.isResponse())
          paramsClass = SharedStorageDocumentService_SharedStorageDelete_ResponseParams;
        break;
      case kSharedStorageDocumentService_SharedStorageClear_Name:
        if (message.isResponse())
          paramsClass = SharedStorageDocumentService_SharedStorageClear_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SharedStorageDocumentService = {
    name: 'blink.mojom.SharedStorageDocumentService',
    kVersion: 0,
    ptrClass: SharedStorageDocumentServicePtr,
    proxyClass: SharedStorageDocumentServiceProxy,
    stubClass: SharedStorageDocumentServiceStub,
    validateRequest: validateSharedStorageDocumentServiceRequest,
    validateResponse: validateSharedStorageDocumentServiceResponse,
  };
  SharedStorageDocumentServiceStub.prototype.validator = validateSharedStorageDocumentServiceRequest;
  SharedStorageDocumentServiceProxy.prototype.validator = validateSharedStorageDocumentServiceResponse;
  exports.SharedStorageKeyArgument = SharedStorageKeyArgument;
  exports.SharedStorageValueArgument = SharedStorageValueArgument;
  exports.SharedStorageUrlWithMetadata = SharedStorageUrlWithMetadata;
  exports.SharedStorageDocumentService = SharedStorageDocumentService;
  exports.SharedStorageDocumentServicePtr = SharedStorageDocumentServicePtr;
  exports.SharedStorageDocumentServiceAssociatedPtr = SharedStorageDocumentServiceAssociatedPtr;
})();