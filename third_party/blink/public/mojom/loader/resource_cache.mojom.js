// third_party/blink/public/mojom/loader/resource_cache.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/loader/resource_cache.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }



  function ResourceCacheContainsResult(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  ResourceCacheContainsResult.LifecycleState = {};
  ResourceCacheContainsResult.LifecycleState.kUnknown = 0;
  ResourceCacheContainsResult.LifecycleState.kRunning = 1;
  ResourceCacheContainsResult.LifecycleState.kPaused = 2;
  ResourceCacheContainsResult.LifecycleState.kFrozen = 3;
  ResourceCacheContainsResult.LifecycleState.MIN_VALUE = 0;
  ResourceCacheContainsResult.LifecycleState.MAX_VALUE = 3;

  ResourceCacheContainsResult.LifecycleState.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  ResourceCacheContainsResult.LifecycleState.toKnownEnumValue = function(value) {
    return value;
  };

  ResourceCacheContainsResult.LifecycleState.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  ResourceCacheContainsResult.prototype.initDefaults_ = function() {
    this.isInCache = false;
    this.isVisible = false;
    this.lifecycleState = ResourceCacheContainsResult.LifecycleState.kUnknown;
    this.ipcResponseTime = null;
  };
  ResourceCacheContainsResult.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceCacheContainsResult.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ResourceCacheContainsResult.ipcResponseTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ResourceCacheContainsResult.lifecycleState
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, ResourceCacheContainsResult.LifecycleState);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceCacheContainsResult.encodedSize = codec.kStructHeaderSize + 16;

  ResourceCacheContainsResult.decode = function(decoder) {
    var packed;
    var val = new ResourceCacheContainsResult();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isInCache = (packed >> 0) & 1 ? true : false;
    val.isVisible = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.lifecycleState =
        decoder.decodeStruct(new codec.Enum(ResourceCacheContainsResult.LifecycleState));
    val.ipcResponseTime =
        decoder.decodeStructPointer(time$.TimeTicks);
    return val;
  };

  ResourceCacheContainsResult.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceCacheContainsResult.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isInCache & 1) << 0
    packed |= (val.isVisible & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.lifecycleState);
    encoder.encodeStructPointer(time$.TimeTicks, val.ipcResponseTime);
  };
  function ResourceCache_Contains_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceCache_Contains_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  ResourceCache_Contains_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceCache_Contains_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceCache_Contains_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceCache_Contains_Params.encodedSize = codec.kStructHeaderSize + 8;

  ResourceCache_Contains_Params.decode = function(decoder) {
    var packed;
    var val = new ResourceCache_Contains_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  ResourceCache_Contains_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceCache_Contains_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function ResourceCache_Contains_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ResourceCache_Contains_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  ResourceCache_Contains_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ResourceCache_Contains_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ResourceCache_Contains_ResponseParams.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ResourceCacheContainsResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ResourceCache_Contains_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  ResourceCache_Contains_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ResourceCache_Contains_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStructPointer(ResourceCacheContainsResult);
    return val;
  };

  ResourceCache_Contains_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ResourceCache_Contains_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ResourceCacheContainsResult, val.result);
  };
  var kResourceCache_Contains_Name = 0;

  function ResourceCachePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ResourceCache,
                                                   handleOrPtrInfo);
  }

  function ResourceCacheAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ResourceCache, associatedInterfacePtrInfo);
  }

  ResourceCacheAssociatedPtr.prototype =
      Object.create(ResourceCachePtr.prototype);
  ResourceCacheAssociatedPtr.prototype.constructor =
      ResourceCacheAssociatedPtr;

  function ResourceCacheProxy(receiver) {
    this.receiver_ = receiver;
  }
  ResourceCachePtr.prototype.contains = function() {
    return ResourceCacheProxy.prototype.contains
        .apply(this.ptr.getProxy(), arguments);
  };

  ResourceCacheProxy.prototype.contains = function(url) {
    var params_ = new ResourceCache_Contains_Params();
    params_.url = url;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kResourceCache_Contains_Name,
          codec.align(ResourceCache_Contains_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ResourceCache_Contains_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ResourceCache_Contains_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ResourceCacheStub(delegate) {
    this.delegate_ = delegate;
  }
  ResourceCacheStub.prototype.contains = function(url) {
    return this.delegate_ && this.delegate_.contains && this.delegate_.contains(url);
  }

  ResourceCacheStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ResourceCacheStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kResourceCache_Contains_Name:
      var params = reader.decodeStruct(ResourceCache_Contains_Params);
      this.contains(params.url).then(function(response) {
        var responseParams =
            new ResourceCache_Contains_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kResourceCache_Contains_Name,
            codec.align(ResourceCache_Contains_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ResourceCache_Contains_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateResourceCacheRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kResourceCache_Contains_Name:
        if (message.expectsResponse())
          paramsClass = ResourceCache_Contains_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateResourceCacheResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kResourceCache_Contains_Name:
        if (message.isResponse())
          paramsClass = ResourceCache_Contains_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ResourceCache = {
    name: 'blink.mojom.ResourceCache',
    kVersion: 0,
    ptrClass: ResourceCachePtr,
    proxyClass: ResourceCacheProxy,
    stubClass: ResourceCacheStub,
    validateRequest: validateResourceCacheRequest,
    validateResponse: validateResourceCacheResponse,
  };
  ResourceCacheStub.prototype.validator = validateResourceCacheRequest;
  ResourceCacheProxy.prototype.validator = validateResourceCacheResponse;
  exports.ResourceCacheContainsResult = ResourceCacheContainsResult;
  exports.ResourceCache = ResourceCache;
  exports.ResourceCachePtr = ResourceCachePtr;
  exports.ResourceCacheAssociatedPtr = ResourceCacheAssociatedPtr;
})();