// third_party/blink/public/mojom/back_forward_cache_not_restored_reasons.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/back_forward_cache_not_restored_reasons.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');


  var BFCacheBlocked = {};
  BFCacheBlocked.kYes = 0;
  BFCacheBlocked.kNo = 1;
  BFCacheBlocked.kMasked = 2;
  BFCacheBlocked.MIN_VALUE = 0;
  BFCacheBlocked.MAX_VALUE = 2;

  BFCacheBlocked.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  BFCacheBlocked.toKnownEnumValue = function(value) {
    return value;
  };

  BFCacheBlocked.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function SameOriginBfcacheNotRestoredDetails(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SameOriginBfcacheNotRestoredDetails.prototype.initDefaults_ = function() {
    this.url = null;
    this.reasons = null;
    this.children = null;
  };
  SameOriginBfcacheNotRestoredDetails.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SameOriginBfcacheNotRestoredDetails.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SameOriginBfcacheNotRestoredDetails.url
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate SameOriginBfcacheNotRestoredDetails.reasons
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SameOriginBfcacheNotRestoredDetails.children
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(BackForwardCacheNotRestoredReasons), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SameOriginBfcacheNotRestoredDetails.encodedSize = codec.kStructHeaderSize + 24;

  SameOriginBfcacheNotRestoredDetails.decode = function(decoder) {
    var packed;
    var val = new SameOriginBfcacheNotRestoredDetails();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStruct(codec.String);
    val.reasons =
        decoder.decodeArrayPointer(codec.String);
    val.children =
        decoder.decodeArrayPointer(new codec.PointerTo(BackForwardCacheNotRestoredReasons));
    return val;
  };

  SameOriginBfcacheNotRestoredDetails.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SameOriginBfcacheNotRestoredDetails.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.url);
    encoder.encodeArrayPointer(codec.String, val.reasons);
    encoder.encodeArrayPointer(new codec.PointerTo(BackForwardCacheNotRestoredReasons), val.children);
  };
  function BackForwardCacheNotRestoredReasons(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BackForwardCacheNotRestoredReasons.prototype.initDefaults_ = function() {
    this.blocked = 0;
    this.src = null;
    this.id = null;
    this.name = null;
    this.sameOriginDetails = null;
  };
  BackForwardCacheNotRestoredReasons.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BackForwardCacheNotRestoredReasons.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackForwardCacheNotRestoredReasons.blocked
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, BFCacheBlocked);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackForwardCacheNotRestoredReasons.src
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackForwardCacheNotRestoredReasons.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackForwardCacheNotRestoredReasons.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackForwardCacheNotRestoredReasons.sameOriginDetails
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, SameOriginBfcacheNotRestoredDetails, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BackForwardCacheNotRestoredReasons.encodedSize = codec.kStructHeaderSize + 40;

  BackForwardCacheNotRestoredReasons.decode = function(decoder) {
    var packed;
    var val = new BackForwardCacheNotRestoredReasons();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.blocked =
        decoder.decodeStruct(new codec.Enum(BFCacheBlocked));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.src =
        decoder.decodeStruct(codec.NullableString);
    val.id =
        decoder.decodeStruct(codec.NullableString);
    val.name =
        decoder.decodeStruct(codec.NullableString);
    val.sameOriginDetails =
        decoder.decodeStructPointer(SameOriginBfcacheNotRestoredDetails);
    return val;
  };

  BackForwardCacheNotRestoredReasons.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BackForwardCacheNotRestoredReasons.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.blocked);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.NullableString, val.src);
    encoder.encodeStruct(codec.NullableString, val.id);
    encoder.encodeStruct(codec.NullableString, val.name);
    encoder.encodeStructPointer(SameOriginBfcacheNotRestoredDetails, val.sameOriginDetails);
  };
  exports.BFCacheBlocked = BFCacheBlocked;
  exports.SameOriginBfcacheNotRestoredDetails = SameOriginBfcacheNotRestoredDetails;
  exports.BackForwardCacheNotRestoredReasons = BackForwardCacheNotRestoredReasons;
})();