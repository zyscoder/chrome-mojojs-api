// third_party/blink/public/mojom/bluetooth/web_bluetooth.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/bluetooth/web_bluetooth.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var uuid$ =
      mojo.internal.exposeNamespace('bluetooth.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'device/bluetooth/public/mojom/uuid.mojom', '../../../../../device/bluetooth/public/mojom/uuid.mojom.js');
  }


  var WebBluetoothResult = {};
  WebBluetoothResult.SUCCESS = 0;
  WebBluetoothResult.WATCH_ADVERTISEMENTS_ABORTED = 1;
  WebBluetoothResult.GATT_INVALID_ATTRIBUTE_LENGTH = 2;
  WebBluetoothResult.CONNECT_INVALID_ARGS = 3;
  WebBluetoothResult.SERVICE_NO_LONGER_EXISTS = 4;
  WebBluetoothResult.CHARACTERISTIC_NO_LONGER_EXISTS = 5;
  WebBluetoothResult.PROMPT_CANCELED = 6;
  WebBluetoothResult.CONNECT_DOES_NOT_EXIST = 7;
  WebBluetoothResult.CONNECT_ALREADY_IN_PROGRESS = 8;
  WebBluetoothResult.CONNECT_AUTH_CANCELED = 9;
  WebBluetoothResult.CONNECT_AUTH_FAILED = 10;
  WebBluetoothResult.CONNECT_AUTH_REJECTED = 11;
  WebBluetoothResult.CONNECT_AUTH_TIMEOUT = 12;
  WebBluetoothResult.CONNECT_UNKNOWN_ERROR = 13;
  WebBluetoothResult.CONNECT_UNKNOWN_FAILURE = 14;
  WebBluetoothResult.CONNECT_UNSUPPORTED_DEVICE = 15;
  WebBluetoothResult.DEVICE_NO_LONGER_IN_RANGE = 16;
  WebBluetoothResult.GATT_NOT_PAIRED = 17;
  WebBluetoothResult.GATT_OPERATION_IN_PROGRESS = 18;
  WebBluetoothResult.CONNECT_CONN_FAILED = 19;
  WebBluetoothResult.CONNECT_NOT_READY = 20;
  WebBluetoothResult.CONNECT_ALREADY_CONNECTED = 21;
  WebBluetoothResult.CONNECT_ALREADY_EXISTS = 22;
  WebBluetoothResult.CONNECT_NOT_CONNECTED = 23;
  WebBluetoothResult.NO_BLUETOOTH_ADAPTER = 24;
  WebBluetoothResult.CHOSEN_DEVICE_VANISHED = 25;
  WebBluetoothResult.CHOOSER_CANCELLED = 26;
  WebBluetoothResult.CHOOSER_NOT_SHOWN_API_GLOBALLY_DISABLED = 27;
  WebBluetoothResult.CHOOSER_NOT_SHOWN_API_LOCALLY_DISABLED = 28;
  WebBluetoothResult.CHOOSER_NOT_SHOWN_USER_DENIED_PERMISSION_TO_SCAN = 29;
  WebBluetoothResult.SERVICE_NOT_FOUND = 30;
  WebBluetoothResult.NO_SERVICES_FOUND = 31;
  WebBluetoothResult.CHARACTERISTIC_NOT_FOUND = 32;
  WebBluetoothResult.NO_CHARACTERISTICS_FOUND = 33;
  WebBluetoothResult.DESCRIPTOR_NOT_FOUND = 34;
  WebBluetoothResult.NO_DESCRIPTORS_FOUND = 35;
  WebBluetoothResult.WEB_BLUETOOTH_NOT_SUPPORTED = 36;
  WebBluetoothResult.BLUETOOTH_LOW_ENERGY_NOT_AVAILABLE = 37;
  WebBluetoothResult.GATT_UNKNOWN_ERROR = 38;
  WebBluetoothResult.GATT_UNKNOWN_FAILURE = 39;
  WebBluetoothResult.GATT_NOT_PERMITTED = 40;
  WebBluetoothResult.GATT_NOT_SUPPORTED = 41;
  WebBluetoothResult.GATT_UNTRANSLATED_ERROR_CODE = 42;
  WebBluetoothResult.GATT_NOT_AUTHORIZED = 43;
  WebBluetoothResult.BLOCKLISTED_DESCRIPTOR_UUID = 44;
  WebBluetoothResult.BLOCKLISTED_CHARACTERISTIC_UUID = 45;
  WebBluetoothResult.BLOCKLISTED_READ = 46;
  WebBluetoothResult.BLOCKLISTED_WRITE = 47;
  WebBluetoothResult.NOT_ALLOWED_TO_ACCESS_ANY_SERVICE = 48;
  WebBluetoothResult.NOT_ALLOWED_TO_ACCESS_SERVICE = 49;
  WebBluetoothResult.REQUEST_DEVICE_WITH_BLOCKLISTED_UUID_OR_MANUFACTURER_DATA = 50;
  WebBluetoothResult.DESCRIPTOR_NO_LONGER_EXISTS = 51;
  WebBluetoothResult.PERMISSIONS_POLICY_VIOLATION = 52;
  WebBluetoothResult.SCANNING_BLOCKED = 53;
  WebBluetoothResult.MIN_VALUE = 0;
  WebBluetoothResult.MAX_VALUE = 53;

  WebBluetoothResult.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
      return true;
    }
    return false;
  };

  WebBluetoothResult.toKnownEnumValue = function(value) {
    return value;
  };

  WebBluetoothResult.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var WebBluetoothGATTQueryQuantity = {};
  WebBluetoothGATTQueryQuantity.SINGLE = 0;
  WebBluetoothGATTQueryQuantity.MULTIPLE = 1;
  WebBluetoothGATTQueryQuantity.MIN_VALUE = 0;
  WebBluetoothGATTQueryQuantity.MAX_VALUE = 1;

  WebBluetoothGATTQueryQuantity.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  WebBluetoothGATTQueryQuantity.toKnownEnumValue = function(value) {
    return value;
  };

  WebBluetoothGATTQueryQuantity.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var WebBluetoothWriteType = {};
  WebBluetoothWriteType.kWriteDefaultDeprecated = 0;
  WebBluetoothWriteType.kWriteWithResponse = 1;
  WebBluetoothWriteType.kWriteWithoutResponse = 2;
  WebBluetoothWriteType.MIN_VALUE = 0;
  WebBluetoothWriteType.MAX_VALUE = 2;

  WebBluetoothWriteType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  WebBluetoothWriteType.toKnownEnumValue = function(value) {
    return value;
  };

  WebBluetoothWriteType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function WebBluetoothLeScanFilter(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothLeScanFilter.prototype.initDefaults_ = function() {
    this.services = null;
    this.name = null;
    this.namePrefix = null;
    this.manufacturerData = null;
  };
  WebBluetoothLeScanFilter.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothLeScanFilter.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothLeScanFilter.services
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(uuid$.UUID), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothLeScanFilter.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothLeScanFilter.namePrefix
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothLeScanFilter.manufacturerData
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 24, true, new codec.PointerTo(WebBluetoothCompany), new codec.ArrayOf(new codec.PointerTo(WebBluetoothDataFilter)), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothLeScanFilter.encodedSize = codec.kStructHeaderSize + 32;

  WebBluetoothLeScanFilter.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothLeScanFilter();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.services =
        decoder.decodeArrayPointer(new codec.PointerTo(uuid$.UUID));
    val.name =
        decoder.decodeStruct(codec.NullableString);
    val.namePrefix =
        decoder.decodeStruct(codec.NullableString);
    val.manufacturerData =
        decoder.decodeMapPointer(new codec.PointerTo(WebBluetoothCompany), new codec.ArrayOf(new codec.PointerTo(WebBluetoothDataFilter)));
    return val;
  };

  WebBluetoothLeScanFilter.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothLeScanFilter.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(uuid$.UUID), val.services);
    encoder.encodeStruct(codec.NullableString, val.name);
    encoder.encodeStruct(codec.NullableString, val.namePrefix);
    encoder.encodeMapPointer(new codec.PointerTo(WebBluetoothCompany), new codec.ArrayOf(new codec.PointerTo(WebBluetoothDataFilter)), val.manufacturerData);
  };
  function WebBluetoothCompany(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothCompany.prototype.initDefaults_ = function() {
    this.id = 0;
  };
  WebBluetoothCompany.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothCompany.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  WebBluetoothCompany.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothCompany.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothCompany();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Uint16);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothCompany.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothCompany.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint16, val.id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothDataFilter(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothDataFilter.prototype.initDefaults_ = function() {
    this.data = 0;
    this.mask = 0;
  };
  WebBluetoothDataFilter.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothDataFilter.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  WebBluetoothDataFilter.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothDataFilter.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothDataFilter();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStruct(codec.Uint8);
    val.mask =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothDataFilter.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothDataFilter.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint8, val.data);
    encoder.encodeStruct(codec.Uint8, val.mask);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothRequestDeviceOptions(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothRequestDeviceOptions.prototype.initDefaults_ = function() {
    this.filters = null;
    this.exclusionFilters = null;
    this.optionalServices = null;
    this.optionalManufacturerData = null;
    this.acceptAllDevices = false;
  };
  WebBluetoothRequestDeviceOptions.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothRequestDeviceOptions.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothRequestDeviceOptions.filters
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(WebBluetoothLeScanFilter), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothRequestDeviceOptions.exclusionFilters
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(WebBluetoothLeScanFilter), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothRequestDeviceOptions.optionalServices
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(uuid$.UUID), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothRequestDeviceOptions.optionalManufacturerData
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 24, 2, codec.Uint16, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  WebBluetoothRequestDeviceOptions.encodedSize = codec.kStructHeaderSize + 40;

  WebBluetoothRequestDeviceOptions.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothRequestDeviceOptions();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.filters =
        decoder.decodeArrayPointer(new codec.PointerTo(WebBluetoothLeScanFilter));
    val.exclusionFilters =
        decoder.decodeArrayPointer(new codec.PointerTo(WebBluetoothLeScanFilter));
    val.optionalServices =
        decoder.decodeArrayPointer(new codec.PointerTo(uuid$.UUID));
    val.optionalManufacturerData =
        decoder.decodeArrayPointer(codec.Uint16);
    packed = decoder.readUint8();
    val.acceptAllDevices = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothRequestDeviceOptions.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothRequestDeviceOptions.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(WebBluetoothLeScanFilter), val.filters);
    encoder.encodeArrayPointer(new codec.PointerTo(WebBluetoothLeScanFilter), val.exclusionFilters);
    encoder.encodeArrayPointer(new codec.PointerTo(uuid$.UUID), val.optionalServices);
    encoder.encodeArrayPointer(codec.Uint16, val.optionalManufacturerData);
    packed = 0;
    packed |= (val.acceptAllDevices & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothRequestLEScanOptions(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothRequestLEScanOptions.prototype.initDefaults_ = function() {
    this.filters = null;
    this.keepRepeatedDevices = false;
    this.acceptAllAdvertisements = false;
  };
  WebBluetoothRequestLEScanOptions.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothRequestLEScanOptions.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothRequestLEScanOptions.filters
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(WebBluetoothLeScanFilter), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  WebBluetoothRequestLEScanOptions.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothRequestLEScanOptions.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothRequestLEScanOptions();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.filters =
        decoder.decodeArrayPointer(new codec.PointerTo(WebBluetoothLeScanFilter));
    packed = decoder.readUint8();
    val.keepRepeatedDevices = (packed >> 0) & 1 ? true : false;
    val.acceptAllAdvertisements = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothRequestLEScanOptions.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothRequestLEScanOptions.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(WebBluetoothLeScanFilter), val.filters);
    packed = 0;
    packed |= (val.keepRepeatedDevices & 1) << 0
    packed |= (val.acceptAllAdvertisements & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothDeviceId(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothDeviceId.prototype.initDefaults_ = function() {
    this.deviceId = null;
  };
  WebBluetoothDeviceId.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothDeviceId.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothDeviceId.deviceId
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [16], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothDeviceId.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothDeviceId.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothDeviceId();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceId =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  WebBluetoothDeviceId.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothDeviceId.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.deviceId);
  };
  function WebBluetoothDevice(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothDevice.prototype.initDefaults_ = function() {
    this.id = null;
    this.name = null;
  };
  WebBluetoothDevice.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothDevice.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothDevice.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebBluetoothDeviceId, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothDevice.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothDevice.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothDevice.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothDevice();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(WebBluetoothDeviceId);
    val.name =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  WebBluetoothDevice.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothDevice.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebBluetoothDeviceId, val.id);
    encoder.encodeStruct(codec.NullableString, val.name);
  };
  function WebBluetoothRemoteGATTService(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothRemoteGATTService.prototype.initDefaults_ = function() {
    this.instanceId = null;
    this.uuid = null;
  };
  WebBluetoothRemoteGATTService.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothRemoteGATTService.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothRemoteGATTService.instanceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothRemoteGATTService.uuid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, uuid$.UUID, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothRemoteGATTService.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothRemoteGATTService.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothRemoteGATTService();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.instanceId =
        decoder.decodeStruct(codec.String);
    val.uuid =
        decoder.decodeStructPointer(uuid$.UUID);
    return val;
  };

  WebBluetoothRemoteGATTService.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothRemoteGATTService.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.instanceId);
    encoder.encodeStructPointer(uuid$.UUID, val.uuid);
  };
  function WebBluetoothRemoteGATTCharacteristic(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothRemoteGATTCharacteristic.prototype.initDefaults_ = function() {
    this.instanceId = null;
    this.uuid = null;
    this.properties = 0;
  };
  WebBluetoothRemoteGATTCharacteristic.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothRemoteGATTCharacteristic.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothRemoteGATTCharacteristic.instanceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothRemoteGATTCharacteristic.uuid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, uuid$.UUID, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  WebBluetoothRemoteGATTCharacteristic.encodedSize = codec.kStructHeaderSize + 24;

  WebBluetoothRemoteGATTCharacteristic.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothRemoteGATTCharacteristic();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.instanceId =
        decoder.decodeStruct(codec.String);
    val.uuid =
        decoder.decodeStructPointer(uuid$.UUID);
    val.properties =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothRemoteGATTCharacteristic.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothRemoteGATTCharacteristic.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.instanceId);
    encoder.encodeStructPointer(uuid$.UUID, val.uuid);
    encoder.encodeStruct(codec.Uint32, val.properties);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothAdvertisingEvent(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothAdvertisingEvent.prototype.initDefaults_ = function() {
    this.device = null;
    this.name = null;
    this.uuids = null;
    this.appearanceIsSet = false;
    this.txPowerIsSet = false;
    this.rssiIsSet = false;
    this.txPower = 0;
    this.appearance = 0;
    this.rssi = 0;
    this.manufacturerData = null;
    this.serviceData = null;
  };
  WebBluetoothAdvertisingEvent.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothAdvertisingEvent.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothAdvertisingEvent.device
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebBluetoothDevice, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothAdvertisingEvent.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothAdvertisingEvent.uuids
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(uuid$.UUID), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;








    // validate WebBluetoothAdvertisingEvent.manufacturerData
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 32, false, codec.Uint16, new codec.ArrayOf(codec.Uint8), false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothAdvertisingEvent.serviceData
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 40, false, new codec.PointerTo(uuid$.UUID), new codec.ArrayOf(codec.Uint8), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothAdvertisingEvent.encodedSize = codec.kStructHeaderSize + 48;

  WebBluetoothAdvertisingEvent.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothAdvertisingEvent();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.device =
        decoder.decodeStructPointer(WebBluetoothDevice);
    val.name =
        decoder.decodeStruct(codec.NullableString);
    val.uuids =
        decoder.decodeArrayPointer(new codec.PointerTo(uuid$.UUID));
    packed = decoder.readUint8();
    val.appearanceIsSet = (packed >> 0) & 1 ? true : false;
    val.txPowerIsSet = (packed >> 1) & 1 ? true : false;
    val.rssiIsSet = (packed >> 2) & 1 ? true : false;
    val.txPower =
        decoder.decodeStruct(codec.Uint8);
    val.appearance =
        decoder.decodeStruct(codec.Uint16);
    val.rssi =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.manufacturerData =
        decoder.decodeMapPointer(codec.Uint16, new codec.ArrayOf(codec.Uint8));
    val.serviceData =
        decoder.decodeMapPointer(new codec.PointerTo(uuid$.UUID), new codec.ArrayOf(codec.Uint8));
    return val;
  };

  WebBluetoothAdvertisingEvent.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothAdvertisingEvent.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebBluetoothDevice, val.device);
    encoder.encodeStruct(codec.NullableString, val.name);
    encoder.encodeArrayPointer(new codec.PointerTo(uuid$.UUID), val.uuids);
    packed = 0;
    packed |= (val.appearanceIsSet & 1) << 0
    packed |= (val.txPowerIsSet & 1) << 1
    packed |= (val.rssiIsSet & 1) << 2
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.txPower);
    encoder.encodeStruct(codec.Uint16, val.appearance);
    encoder.encodeStruct(codec.Uint8, val.rssi);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeMapPointer(codec.Uint16, new codec.ArrayOf(codec.Uint8), val.manufacturerData);
    encoder.encodeMapPointer(new codec.PointerTo(uuid$.UUID), new codec.ArrayOf(codec.Uint8), val.serviceData);
  };
  function WebBluetoothRemoteGATTDescriptor(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothRemoteGATTDescriptor.prototype.initDefaults_ = function() {
    this.instanceId = null;
    this.uuid = null;
  };
  WebBluetoothRemoteGATTDescriptor.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothRemoteGATTDescriptor.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothRemoteGATTDescriptor.instanceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothRemoteGATTDescriptor.uuid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, uuid$.UUID, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothRemoteGATTDescriptor.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothRemoteGATTDescriptor.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothRemoteGATTDescriptor();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.instanceId =
        decoder.decodeStruct(codec.String);
    val.uuid =
        decoder.decodeStructPointer(uuid$.UUID);
    return val;
  };

  WebBluetoothRemoteGATTDescriptor.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothRemoteGATTDescriptor.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.instanceId);
    encoder.encodeStructPointer(uuid$.UUID, val.uuid);
  };
  function WebBluetoothService_GetAvailability_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_GetAvailability_Params.prototype.initDefaults_ = function() {
  };
  WebBluetoothService_GetAvailability_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_GetAvailability_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_GetAvailability_Params.encodedSize = codec.kStructHeaderSize + 0;

  WebBluetoothService_GetAvailability_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_GetAvailability_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  WebBluetoothService_GetAvailability_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_GetAvailability_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function WebBluetoothService_GetAvailability_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_GetAvailability_ResponseParams.prototype.initDefaults_ = function() {
    this.isAvailable = false;
  };
  WebBluetoothService_GetAvailability_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_GetAvailability_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  WebBluetoothService_GetAvailability_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_GetAvailability_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_GetAvailability_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.isAvailable = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothService_GetAvailability_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_GetAvailability_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.isAvailable & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothService_RequestDevice_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RequestDevice_Params.prototype.initDefaults_ = function() {
    this.options = null;
  };
  WebBluetoothService_RequestDevice_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RequestDevice_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RequestDevice_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebBluetoothRequestDeviceOptions, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RequestDevice_Params.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_RequestDevice_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RequestDevice_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.options =
        decoder.decodeStructPointer(WebBluetoothRequestDeviceOptions);
    return val;
  };

  WebBluetoothService_RequestDevice_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RequestDevice_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebBluetoothRequestDeviceOptions, val.options);
  };
  function WebBluetoothService_RequestDevice_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RequestDevice_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.device = null;
  };
  WebBluetoothService_RequestDevice_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RequestDevice_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RequestDevice_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RequestDevice_ResponseParams.device
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, WebBluetoothDevice, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RequestDevice_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothService_RequestDevice_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RequestDevice_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.device =
        decoder.decodeStructPointer(WebBluetoothDevice);
    return val;
  };

  WebBluetoothService_RequestDevice_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RequestDevice_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(WebBluetoothDevice, val.device);
  };
  function WebBluetoothService_GetDevices_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_GetDevices_Params.prototype.initDefaults_ = function() {
  };
  WebBluetoothService_GetDevices_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_GetDevices_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_GetDevices_Params.encodedSize = codec.kStructHeaderSize + 0;

  WebBluetoothService_GetDevices_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_GetDevices_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  WebBluetoothService_GetDevices_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_GetDevices_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function WebBluetoothService_GetDevices_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_GetDevices_ResponseParams.prototype.initDefaults_ = function() {
    this.devices = null;
  };
  WebBluetoothService_GetDevices_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_GetDevices_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_GetDevices_ResponseParams.devices
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(WebBluetoothDevice), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_GetDevices_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_GetDevices_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_GetDevices_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devices =
        decoder.decodeArrayPointer(new codec.PointerTo(WebBluetoothDevice));
    return val;
  };

  WebBluetoothService_GetDevices_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_GetDevices_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(WebBluetoothDevice), val.devices);
  };
  function WebBluetoothService_ForgetDevice_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_ForgetDevice_Params.prototype.initDefaults_ = function() {
    this.deviceId = null;
  };
  WebBluetoothService_ForgetDevice_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_ForgetDevice_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_ForgetDevice_Params.deviceId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebBluetoothDeviceId, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_ForgetDevice_Params.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_ForgetDevice_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_ForgetDevice_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceId =
        decoder.decodeStructPointer(WebBluetoothDeviceId);
    return val;
  };

  WebBluetoothService_ForgetDevice_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_ForgetDevice_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebBluetoothDeviceId, val.deviceId);
  };
  function WebBluetoothService_ForgetDevice_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_ForgetDevice_ResponseParams.prototype.initDefaults_ = function() {
  };
  WebBluetoothService_ForgetDevice_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_ForgetDevice_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_ForgetDevice_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  WebBluetoothService_ForgetDevice_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_ForgetDevice_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  WebBluetoothService_ForgetDevice_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_ForgetDevice_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function WebBluetoothService_RemoteServerConnect_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteServerConnect_Params.prototype.initDefaults_ = function() {
    this.deviceId = null;
    this.client = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  WebBluetoothService_RemoteServerConnect_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteServerConnect_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServerConnect_Params.deviceId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebBluetoothDeviceId, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServerConnect_Params.client
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteServerConnect_Params.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothService_RemoteServerConnect_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteServerConnect_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceId =
        decoder.decodeStructPointer(WebBluetoothDeviceId);
    val.client =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  WebBluetoothService_RemoteServerConnect_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteServerConnect_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebBluetoothDeviceId, val.deviceId);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.client);
  };
  function WebBluetoothService_RemoteServerConnect_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteServerConnect_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  WebBluetoothService_RemoteServerConnect_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteServerConnect_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServerConnect_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteServerConnect_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_RemoteServerConnect_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteServerConnect_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothService_RemoteServerConnect_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteServerConnect_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothService_RemoteServerDisconnect_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteServerDisconnect_Params.prototype.initDefaults_ = function() {
    this.deviceId = null;
  };
  WebBluetoothService_RemoteServerDisconnect_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteServerDisconnect_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServerDisconnect_Params.deviceId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebBluetoothDeviceId, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteServerDisconnect_Params.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_RemoteServerDisconnect_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteServerDisconnect_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceId =
        decoder.decodeStructPointer(WebBluetoothDeviceId);
    return val;
  };

  WebBluetoothService_RemoteServerDisconnect_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteServerDisconnect_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebBluetoothDeviceId, val.deviceId);
  };
  function WebBluetoothService_RemoteServerGetPrimaryServices_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteServerGetPrimaryServices_Params.prototype.initDefaults_ = function() {
    this.deviceId = null;
    this.quantity = 0;
    this.servicesUuid = null;
  };
  WebBluetoothService_RemoteServerGetPrimaryServices_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteServerGetPrimaryServices_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServerGetPrimaryServices_Params.deviceId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebBluetoothDeviceId, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServerGetPrimaryServices_Params.quantity
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, WebBluetoothGATTQueryQuantity);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServerGetPrimaryServices_Params.servicesUuid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, uuid$.UUID, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteServerGetPrimaryServices_Params.encodedSize = codec.kStructHeaderSize + 24;

  WebBluetoothService_RemoteServerGetPrimaryServices_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteServerGetPrimaryServices_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceId =
        decoder.decodeStructPointer(WebBluetoothDeviceId);
    val.quantity =
        decoder.decodeStruct(new codec.Enum(WebBluetoothGATTQueryQuantity));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.servicesUuid =
        decoder.decodeStructPointer(uuid$.UUID);
    return val;
  };

  WebBluetoothService_RemoteServerGetPrimaryServices_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteServerGetPrimaryServices_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebBluetoothDeviceId, val.deviceId);
    encoder.encodeStruct(codec.Int32, val.quantity);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(uuid$.UUID, val.servicesUuid);
  };
  function WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.services = null;
  };
  WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams.services
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(WebBluetoothRemoteGATTService), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.services =
        decoder.decodeArrayPointer(new codec.PointerTo(WebBluetoothRemoteGATTService));
    return val;
  };

  WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(WebBluetoothRemoteGATTService), val.services);
  };
  function WebBluetoothService_RemoteServiceGetCharacteristics_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteServiceGetCharacteristics_Params.prototype.initDefaults_ = function() {
    this.serviceInstanceId = null;
    this.quantity = 0;
    this.characteristicsUuid = null;
  };
  WebBluetoothService_RemoteServiceGetCharacteristics_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteServiceGetCharacteristics_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServiceGetCharacteristics_Params.serviceInstanceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServiceGetCharacteristics_Params.quantity
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, WebBluetoothGATTQueryQuantity);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServiceGetCharacteristics_Params.characteristicsUuid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, uuid$.UUID, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteServiceGetCharacteristics_Params.encodedSize = codec.kStructHeaderSize + 24;

  WebBluetoothService_RemoteServiceGetCharacteristics_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteServiceGetCharacteristics_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.serviceInstanceId =
        decoder.decodeStruct(codec.String);
    val.quantity =
        decoder.decodeStruct(new codec.Enum(WebBluetoothGATTQueryQuantity));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.characteristicsUuid =
        decoder.decodeStructPointer(uuid$.UUID);
    return val;
  };

  WebBluetoothService_RemoteServiceGetCharacteristics_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteServiceGetCharacteristics_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.serviceInstanceId);
    encoder.encodeStruct(codec.Int32, val.quantity);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(uuid$.UUID, val.characteristicsUuid);
  };
  function WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.characteristics = null;
  };
  WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams.characteristics
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(WebBluetoothRemoteGATTCharacteristic), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.characteristics =
        decoder.decodeArrayPointer(new codec.PointerTo(WebBluetoothRemoteGATTCharacteristic));
    return val;
  };

  WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(WebBluetoothRemoteGATTCharacteristic), val.characteristics);
  };
  function WebBluetoothService_RemoteCharacteristicReadValue_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteCharacteristicReadValue_Params.prototype.initDefaults_ = function() {
    this.characteristicInstanceId = null;
  };
  WebBluetoothService_RemoteCharacteristicReadValue_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteCharacteristicReadValue_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicReadValue_Params.characteristicInstanceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteCharacteristicReadValue_Params.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_RemoteCharacteristicReadValue_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteCharacteristicReadValue_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.characteristicInstanceId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  WebBluetoothService_RemoteCharacteristicReadValue_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteCharacteristicReadValue_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.characteristicInstanceId);
  };
  function WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.value = null;
  };
  WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams.value
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.value =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.Uint8, val.value);
  };
  function WebBluetoothService_RemoteCharacteristicWriteValue_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteCharacteristicWriteValue_Params.prototype.initDefaults_ = function() {
    this.characteristicInstanceId = null;
    this.value = null;
    this.writeType = 0;
  };
  WebBluetoothService_RemoteCharacteristicWriteValue_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteCharacteristicWriteValue_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicWriteValue_Params.characteristicInstanceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicWriteValue_Params.value
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicWriteValue_Params.writeType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, WebBluetoothWriteType);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteCharacteristicWriteValue_Params.encodedSize = codec.kStructHeaderSize + 24;

  WebBluetoothService_RemoteCharacteristicWriteValue_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteCharacteristicWriteValue_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.characteristicInstanceId =
        decoder.decodeStruct(codec.String);
    val.value =
        decoder.decodeArrayPointer(codec.Uint8);
    val.writeType =
        decoder.decodeStruct(new codec.Enum(WebBluetoothWriteType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothService_RemoteCharacteristicWriteValue_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteCharacteristicWriteValue_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.characteristicInstanceId);
    encoder.encodeArrayPointer(codec.Uint8, val.value);
    encoder.encodeStruct(codec.Int32, val.writeType);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothService_RemoteCharacteristicStartNotifications_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteCharacteristicStartNotifications_Params.prototype.initDefaults_ = function() {
    this.characteristicInstanceId = null;
    this.client = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  WebBluetoothService_RemoteCharacteristicStartNotifications_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteCharacteristicStartNotifications_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicStartNotifications_Params.characteristicInstanceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicStartNotifications_Params.client
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteCharacteristicStartNotifications_Params.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothService_RemoteCharacteristicStartNotifications_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteCharacteristicStartNotifications_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.characteristicInstanceId =
        decoder.decodeStruct(codec.String);
    val.client =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  WebBluetoothService_RemoteCharacteristicStartNotifications_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteCharacteristicStartNotifications_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.characteristicInstanceId);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.client);
  };
  function WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothService_RemoteCharacteristicStopNotifications_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteCharacteristicStopNotifications_Params.prototype.initDefaults_ = function() {
    this.characteristicInstanceId = null;
  };
  WebBluetoothService_RemoteCharacteristicStopNotifications_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteCharacteristicStopNotifications_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicStopNotifications_Params.characteristicInstanceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteCharacteristicStopNotifications_Params.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_RemoteCharacteristicStopNotifications_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteCharacteristicStopNotifications_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.characteristicInstanceId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  WebBluetoothService_RemoteCharacteristicStopNotifications_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteCharacteristicStopNotifications_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.characteristicInstanceId);
  };
  function WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams.prototype.initDefaults_ = function() {
  };
  WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function WebBluetoothService_RemoteCharacteristicGetDescriptors_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteCharacteristicGetDescriptors_Params.prototype.initDefaults_ = function() {
    this.characteristicsInstanceId = null;
    this.quantity = 0;
    this.descriptorUuid = null;
  };
  WebBluetoothService_RemoteCharacteristicGetDescriptors_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteCharacteristicGetDescriptors_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicGetDescriptors_Params.characteristicsInstanceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicGetDescriptors_Params.quantity
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, WebBluetoothGATTQueryQuantity);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicGetDescriptors_Params.descriptorUuid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, uuid$.UUID, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteCharacteristicGetDescriptors_Params.encodedSize = codec.kStructHeaderSize + 24;

  WebBluetoothService_RemoteCharacteristicGetDescriptors_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteCharacteristicGetDescriptors_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.characteristicsInstanceId =
        decoder.decodeStruct(codec.String);
    val.quantity =
        decoder.decodeStruct(new codec.Enum(WebBluetoothGATTQueryQuantity));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.descriptorUuid =
        decoder.decodeStructPointer(uuid$.UUID);
    return val;
  };

  WebBluetoothService_RemoteCharacteristicGetDescriptors_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteCharacteristicGetDescriptors_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.characteristicsInstanceId);
    encoder.encodeStruct(codec.Int32, val.quantity);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(uuid$.UUID, val.descriptorUuid);
  };
  function WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.descriptors = null;
  };
  WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams.descriptors
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(WebBluetoothRemoteGATTDescriptor), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.descriptors =
        decoder.decodeArrayPointer(new codec.PointerTo(WebBluetoothRemoteGATTDescriptor));
    return val;
  };

  WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(WebBluetoothRemoteGATTDescriptor), val.descriptors);
  };
  function WebBluetoothService_RemoteDescriptorReadValue_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteDescriptorReadValue_Params.prototype.initDefaults_ = function() {
    this.descriptorInstanceId = null;
  };
  WebBluetoothService_RemoteDescriptorReadValue_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteDescriptorReadValue_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteDescriptorReadValue_Params.descriptorInstanceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteDescriptorReadValue_Params.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_RemoteDescriptorReadValue_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteDescriptorReadValue_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.descriptorInstanceId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  WebBluetoothService_RemoteDescriptorReadValue_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteDescriptorReadValue_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.descriptorInstanceId);
  };
  function WebBluetoothService_RemoteDescriptorReadValue_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteDescriptorReadValue_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
    this.value = null;
  };
  WebBluetoothService_RemoteDescriptorReadValue_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteDescriptorReadValue_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteDescriptorReadValue_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteDescriptorReadValue_ResponseParams.value
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteDescriptorReadValue_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothService_RemoteDescriptorReadValue_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteDescriptorReadValue_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.value =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  WebBluetoothService_RemoteDescriptorReadValue_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteDescriptorReadValue_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.Uint8, val.value);
  };
  function WebBluetoothService_RemoteDescriptorWriteValue_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteDescriptorWriteValue_Params.prototype.initDefaults_ = function() {
    this.descriptorInstanceId = null;
    this.value = null;
  };
  WebBluetoothService_RemoteDescriptorWriteValue_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteDescriptorWriteValue_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteDescriptorWriteValue_Params.descriptorInstanceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteDescriptorWriteValue_Params.value
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteDescriptorWriteValue_Params.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothService_RemoteDescriptorWriteValue_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteDescriptorWriteValue_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.descriptorInstanceId =
        decoder.decodeStruct(codec.String);
    val.value =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  WebBluetoothService_RemoteDescriptorWriteValue_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteDescriptorWriteValue_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.descriptorInstanceId);
    encoder.encodeArrayPointer(codec.Uint8, val.value);
  };
  function WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothService_RequestScanningStart_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RequestScanningStart_Params.prototype.initDefaults_ = function() {
    this.client = new associatedBindings.AssociatedInterfacePtrInfo();
    this.options = null;
  };
  WebBluetoothService_RequestScanningStart_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RequestScanningStart_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RequestScanningStart_Params.client
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RequestScanningStart_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, WebBluetoothRequestLEScanOptions, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RequestScanningStart_Params.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothService_RequestScanningStart_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RequestScanningStart_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    val.options =
        decoder.decodeStructPointer(WebBluetoothRequestLEScanOptions);
    return val;
  };

  WebBluetoothService_RequestScanningStart_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RequestScanningStart_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.client);
    encoder.encodeStructPointer(WebBluetoothRequestLEScanOptions, val.options);
  };
  function WebBluetoothService_RequestScanningStart_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_RequestScanningStart_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  WebBluetoothService_RequestScanningStart_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_RequestScanningStart_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_RequestScanningStart_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_RequestScanningStart_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_RequestScanningStart_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_RequestScanningStart_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothService_RequestScanningStart_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_RequestScanningStart_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothService_WatchAdvertisementsForDevice_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_WatchAdvertisementsForDevice_Params.prototype.initDefaults_ = function() {
    this.deviceId = null;
    this.client = new associatedBindings.AssociatedInterfacePtrInfo();
  };
  WebBluetoothService_WatchAdvertisementsForDevice_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_WatchAdvertisementsForDevice_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_WatchAdvertisementsForDevice_Params.deviceId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebBluetoothDeviceId, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_WatchAdvertisementsForDevice_Params.client
    err = messageValidator.validateAssociatedInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_WatchAdvertisementsForDevice_Params.encodedSize = codec.kStructHeaderSize + 16;

  WebBluetoothService_WatchAdvertisementsForDevice_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_WatchAdvertisementsForDevice_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceId =
        decoder.decodeStructPointer(WebBluetoothDeviceId);
    val.client =
        decoder.decodeStruct(codec.AssociatedInterfacePtrInfo);
    return val;
  };

  WebBluetoothService_WatchAdvertisementsForDevice_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_WatchAdvertisementsForDevice_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebBluetoothDeviceId, val.deviceId);
    encoder.encodeStruct(codec.AssociatedInterfacePtrInfo, val.client);
  };
  function WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams.prototype.initDefaults_ = function() {
    this.result = 0;
  };
  WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams.result
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, WebBluetoothResult);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(new codec.Enum(WebBluetoothResult));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.result);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function WebBluetoothServerClient_GATTServerDisconnected_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothServerClient_GATTServerDisconnected_Params.prototype.initDefaults_ = function() {
  };
  WebBluetoothServerClient_GATTServerDisconnected_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothServerClient_GATTServerDisconnected_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothServerClient_GATTServerDisconnected_Params.encodedSize = codec.kStructHeaderSize + 0;

  WebBluetoothServerClient_GATTServerDisconnected_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothServerClient_GATTServerDisconnected_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  WebBluetoothServerClient_GATTServerDisconnected_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothServerClient_GATTServerDisconnected_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params.prototype.initDefaults_ = function() {
    this.value = null;
  };
  WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params.value
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.value);
  };
  function WebBluetoothAdvertisementClient_AdvertisingEvent_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBluetoothAdvertisementClient_AdvertisingEvent_Params.prototype.initDefaults_ = function() {
    this.result = null;
  };
  WebBluetoothAdvertisementClient_AdvertisingEvent_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBluetoothAdvertisementClient_AdvertisingEvent_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBluetoothAdvertisementClient_AdvertisingEvent_Params.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, WebBluetoothAdvertisingEvent, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebBluetoothAdvertisementClient_AdvertisingEvent_Params.encodedSize = codec.kStructHeaderSize + 8;

  WebBluetoothAdvertisementClient_AdvertisingEvent_Params.decode = function(decoder) {
    var packed;
    var val = new WebBluetoothAdvertisementClient_AdvertisingEvent_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStructPointer(WebBluetoothAdvertisingEvent);
    return val;
  };

  WebBluetoothAdvertisementClient_AdvertisingEvent_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBluetoothAdvertisementClient_AdvertisingEvent_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(WebBluetoothAdvertisingEvent, val.result);
  };
  var kWebBluetoothService_GetAvailability_Name = 2014569649;
  var kWebBluetoothService_RequestDevice_Name = 1163203879;
  var kWebBluetoothService_GetDevices_Name = 710977516;
  var kWebBluetoothService_ForgetDevice_Name = 484554245;
  var kWebBluetoothService_RemoteServerConnect_Name = 1726276923;
  var kWebBluetoothService_RemoteServerDisconnect_Name = 1722802496;
  var kWebBluetoothService_RemoteServerGetPrimaryServices_Name = 1219730749;
  var kWebBluetoothService_RemoteServiceGetCharacteristics_Name = 619218081;
  var kWebBluetoothService_RemoteCharacteristicReadValue_Name = 1796856294;
  var kWebBluetoothService_RemoteCharacteristicWriteValue_Name = 1729198461;
  var kWebBluetoothService_RemoteCharacteristicStartNotifications_Name = 1922720116;
  var kWebBluetoothService_RemoteCharacteristicStopNotifications_Name = 1861870073;
  var kWebBluetoothService_RemoteCharacteristicGetDescriptors_Name = 1953780996;
  var kWebBluetoothService_RemoteDescriptorReadValue_Name = 1150794284;
  var kWebBluetoothService_RemoteDescriptorWriteValue_Name = 965397241;
  var kWebBluetoothService_RequestScanningStart_Name = 345253780;
  var kWebBluetoothService_WatchAdvertisementsForDevice_Name = 433876184;

  function WebBluetoothServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WebBluetoothService,
                                                   handleOrPtrInfo);
  }

  function WebBluetoothServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WebBluetoothService, associatedInterfacePtrInfo);
  }

  WebBluetoothServiceAssociatedPtr.prototype =
      Object.create(WebBluetoothServicePtr.prototype);
  WebBluetoothServiceAssociatedPtr.prototype.constructor =
      WebBluetoothServiceAssociatedPtr;

  function WebBluetoothServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  WebBluetoothServicePtr.prototype.getAvailability = function() {
    return WebBluetoothServiceProxy.prototype.getAvailability
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.getAvailability = function() {
    var params_ = new WebBluetoothService_GetAvailability_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_GetAvailability_Name,
          codec.align(WebBluetoothService_GetAvailability_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_GetAvailability_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_GetAvailability_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.requestDevice = function() {
    return WebBluetoothServiceProxy.prototype.requestDevice
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.requestDevice = function(options) {
    var params_ = new WebBluetoothService_RequestDevice_Params();
    params_.options = options;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_RequestDevice_Name,
          codec.align(WebBluetoothService_RequestDevice_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_RequestDevice_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RequestDevice_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.getDevices = function() {
    return WebBluetoothServiceProxy.prototype.getDevices
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.getDevices = function() {
    var params_ = new WebBluetoothService_GetDevices_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_GetDevices_Name,
          codec.align(WebBluetoothService_GetDevices_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_GetDevices_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_GetDevices_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.forgetDevice = function() {
    return WebBluetoothServiceProxy.prototype.forgetDevice
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.forgetDevice = function(deviceId) {
    var params_ = new WebBluetoothService_ForgetDevice_Params();
    params_.deviceId = deviceId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_ForgetDevice_Name,
          codec.align(WebBluetoothService_ForgetDevice_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_ForgetDevice_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_ForgetDevice_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.remoteServerConnect = function() {
    return WebBluetoothServiceProxy.prototype.remoteServerConnect
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.remoteServerConnect = function(deviceId, client) {
    var params_ = new WebBluetoothService_RemoteServerConnect_Params();
    params_.deviceId = deviceId;
    params_.client = client;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kWebBluetoothService_RemoteServerConnect_Name,
          codec.align(WebBluetoothService_RemoteServerConnect_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(WebBluetoothService_RemoteServerConnect_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RemoteServerConnect_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.remoteServerDisconnect = function() {
    return WebBluetoothServiceProxy.prototype.remoteServerDisconnect
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.remoteServerDisconnect = function(deviceId) {
    var params_ = new WebBluetoothService_RemoteServerDisconnect_Params();
    params_.deviceId = deviceId;
    var builder = new codec.MessageV0Builder(
        kWebBluetoothService_RemoteServerDisconnect_Name,
        codec.align(WebBluetoothService_RemoteServerDisconnect_Params.encodedSize));
    builder.encodeStruct(WebBluetoothService_RemoteServerDisconnect_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  WebBluetoothServicePtr.prototype.remoteServerGetPrimaryServices = function() {
    return WebBluetoothServiceProxy.prototype.remoteServerGetPrimaryServices
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.remoteServerGetPrimaryServices = function(deviceId, quantity, servicesUuid) {
    var params_ = new WebBluetoothService_RemoteServerGetPrimaryServices_Params();
    params_.deviceId = deviceId;
    params_.quantity = quantity;
    params_.servicesUuid = servicesUuid;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_RemoteServerGetPrimaryServices_Name,
          codec.align(WebBluetoothService_RemoteServerGetPrimaryServices_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_RemoteServerGetPrimaryServices_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.remoteServiceGetCharacteristics = function() {
    return WebBluetoothServiceProxy.prototype.remoteServiceGetCharacteristics
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.remoteServiceGetCharacteristics = function(serviceInstanceId, quantity, characteristicsUuid) {
    var params_ = new WebBluetoothService_RemoteServiceGetCharacteristics_Params();
    params_.serviceInstanceId = serviceInstanceId;
    params_.quantity = quantity;
    params_.characteristicsUuid = characteristicsUuid;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_RemoteServiceGetCharacteristics_Name,
          codec.align(WebBluetoothService_RemoteServiceGetCharacteristics_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_RemoteServiceGetCharacteristics_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.remoteCharacteristicReadValue = function() {
    return WebBluetoothServiceProxy.prototype.remoteCharacteristicReadValue
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.remoteCharacteristicReadValue = function(characteristicInstanceId) {
    var params_ = new WebBluetoothService_RemoteCharacteristicReadValue_Params();
    params_.characteristicInstanceId = characteristicInstanceId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_RemoteCharacteristicReadValue_Name,
          codec.align(WebBluetoothService_RemoteCharacteristicReadValue_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_RemoteCharacteristicReadValue_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.remoteCharacteristicWriteValue = function() {
    return WebBluetoothServiceProxy.prototype.remoteCharacteristicWriteValue
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.remoteCharacteristicWriteValue = function(characteristicInstanceId, value, writeType) {
    var params_ = new WebBluetoothService_RemoteCharacteristicWriteValue_Params();
    params_.characteristicInstanceId = characteristicInstanceId;
    params_.value = value;
    params_.writeType = writeType;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_RemoteCharacteristicWriteValue_Name,
          codec.align(WebBluetoothService_RemoteCharacteristicWriteValue_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_RemoteCharacteristicWriteValue_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.remoteCharacteristicStartNotifications = function() {
    return WebBluetoothServiceProxy.prototype.remoteCharacteristicStartNotifications
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.remoteCharacteristicStartNotifications = function(characteristicInstanceId, client) {
    var params_ = new WebBluetoothService_RemoteCharacteristicStartNotifications_Params();
    params_.characteristicInstanceId = characteristicInstanceId;
    params_.client = client;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kWebBluetoothService_RemoteCharacteristicStartNotifications_Name,
          codec.align(WebBluetoothService_RemoteCharacteristicStartNotifications_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(WebBluetoothService_RemoteCharacteristicStartNotifications_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.remoteCharacteristicStopNotifications = function() {
    return WebBluetoothServiceProxy.prototype.remoteCharacteristicStopNotifications
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.remoteCharacteristicStopNotifications = function(characteristicInstanceId) {
    var params_ = new WebBluetoothService_RemoteCharacteristicStopNotifications_Params();
    params_.characteristicInstanceId = characteristicInstanceId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_RemoteCharacteristicStopNotifications_Name,
          codec.align(WebBluetoothService_RemoteCharacteristicStopNotifications_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_RemoteCharacteristicStopNotifications_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.remoteCharacteristicGetDescriptors = function() {
    return WebBluetoothServiceProxy.prototype.remoteCharacteristicGetDescriptors
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.remoteCharacteristicGetDescriptors = function(characteristicsInstanceId, quantity, descriptorUuid) {
    var params_ = new WebBluetoothService_RemoteCharacteristicGetDescriptors_Params();
    params_.characteristicsInstanceId = characteristicsInstanceId;
    params_.quantity = quantity;
    params_.descriptorUuid = descriptorUuid;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_RemoteCharacteristicGetDescriptors_Name,
          codec.align(WebBluetoothService_RemoteCharacteristicGetDescriptors_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_RemoteCharacteristicGetDescriptors_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.remoteDescriptorReadValue = function() {
    return WebBluetoothServiceProxy.prototype.remoteDescriptorReadValue
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.remoteDescriptorReadValue = function(descriptorInstanceId) {
    var params_ = new WebBluetoothService_RemoteDescriptorReadValue_Params();
    params_.descriptorInstanceId = descriptorInstanceId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_RemoteDescriptorReadValue_Name,
          codec.align(WebBluetoothService_RemoteDescriptorReadValue_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_RemoteDescriptorReadValue_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RemoteDescriptorReadValue_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.remoteDescriptorWriteValue = function() {
    return WebBluetoothServiceProxy.prototype.remoteDescriptorWriteValue
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.remoteDescriptorWriteValue = function(descriptorInstanceId, value) {
    var params_ = new WebBluetoothService_RemoteDescriptorWriteValue_Params();
    params_.descriptorInstanceId = descriptorInstanceId;
    params_.value = value;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebBluetoothService_RemoteDescriptorWriteValue_Name,
          codec.align(WebBluetoothService_RemoteDescriptorWriteValue_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebBluetoothService_RemoteDescriptorWriteValue_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.requestScanningStart = function() {
    return WebBluetoothServiceProxy.prototype.requestScanningStart
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.requestScanningStart = function(client, options) {
    var params_ = new WebBluetoothService_RequestScanningStart_Params();
    params_.client = client;
    params_.options = options;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kWebBluetoothService_RequestScanningStart_Name,
          codec.align(WebBluetoothService_RequestScanningStart_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(WebBluetoothService_RequestScanningStart_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_RequestScanningStart_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  WebBluetoothServicePtr.prototype.watchAdvertisementsForDevice = function() {
    return WebBluetoothServiceProxy.prototype.watchAdvertisementsForDevice
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServiceProxy.prototype.watchAdvertisementsForDevice = function(deviceId, client) {
    var params_ = new WebBluetoothService_WatchAdvertisementsForDevice_Params();
    params_.deviceId = deviceId;
    params_.client = client;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV2Builder(
          kWebBluetoothService_WatchAdvertisementsForDevice_Name,
          codec.align(WebBluetoothService_WatchAdvertisementsForDevice_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.setPayload(WebBluetoothService_WatchAdvertisementsForDevice_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function WebBluetoothServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  WebBluetoothServiceStub.prototype.getAvailability = function() {
    return this.delegate_ && this.delegate_.getAvailability && this.delegate_.getAvailability();
  }
  WebBluetoothServiceStub.prototype.requestDevice = function(options) {
    return this.delegate_ && this.delegate_.requestDevice && this.delegate_.requestDevice(options);
  }
  WebBluetoothServiceStub.prototype.getDevices = function() {
    return this.delegate_ && this.delegate_.getDevices && this.delegate_.getDevices();
  }
  WebBluetoothServiceStub.prototype.forgetDevice = function(deviceId) {
    return this.delegate_ && this.delegate_.forgetDevice && this.delegate_.forgetDevice(deviceId);
  }
  WebBluetoothServiceStub.prototype.remoteServerConnect = function(deviceId, client) {
    return this.delegate_ && this.delegate_.remoteServerConnect && this.delegate_.remoteServerConnect(deviceId, client);
  }
  WebBluetoothServiceStub.prototype.remoteServerDisconnect = function(deviceId) {
    return this.delegate_ && this.delegate_.remoteServerDisconnect && this.delegate_.remoteServerDisconnect(deviceId);
  }
  WebBluetoothServiceStub.prototype.remoteServerGetPrimaryServices = function(deviceId, quantity, servicesUuid) {
    return this.delegate_ && this.delegate_.remoteServerGetPrimaryServices && this.delegate_.remoteServerGetPrimaryServices(deviceId, quantity, servicesUuid);
  }
  WebBluetoothServiceStub.prototype.remoteServiceGetCharacteristics = function(serviceInstanceId, quantity, characteristicsUuid) {
    return this.delegate_ && this.delegate_.remoteServiceGetCharacteristics && this.delegate_.remoteServiceGetCharacteristics(serviceInstanceId, quantity, characteristicsUuid);
  }
  WebBluetoothServiceStub.prototype.remoteCharacteristicReadValue = function(characteristicInstanceId) {
    return this.delegate_ && this.delegate_.remoteCharacteristicReadValue && this.delegate_.remoteCharacteristicReadValue(characteristicInstanceId);
  }
  WebBluetoothServiceStub.prototype.remoteCharacteristicWriteValue = function(characteristicInstanceId, value, writeType) {
    return this.delegate_ && this.delegate_.remoteCharacteristicWriteValue && this.delegate_.remoteCharacteristicWriteValue(characteristicInstanceId, value, writeType);
  }
  WebBluetoothServiceStub.prototype.remoteCharacteristicStartNotifications = function(characteristicInstanceId, client) {
    return this.delegate_ && this.delegate_.remoteCharacteristicStartNotifications && this.delegate_.remoteCharacteristicStartNotifications(characteristicInstanceId, client);
  }
  WebBluetoothServiceStub.prototype.remoteCharacteristicStopNotifications = function(characteristicInstanceId) {
    return this.delegate_ && this.delegate_.remoteCharacteristicStopNotifications && this.delegate_.remoteCharacteristicStopNotifications(characteristicInstanceId);
  }
  WebBluetoothServiceStub.prototype.remoteCharacteristicGetDescriptors = function(characteristicsInstanceId, quantity, descriptorUuid) {
    return this.delegate_ && this.delegate_.remoteCharacteristicGetDescriptors && this.delegate_.remoteCharacteristicGetDescriptors(characteristicsInstanceId, quantity, descriptorUuid);
  }
  WebBluetoothServiceStub.prototype.remoteDescriptorReadValue = function(descriptorInstanceId) {
    return this.delegate_ && this.delegate_.remoteDescriptorReadValue && this.delegate_.remoteDescriptorReadValue(descriptorInstanceId);
  }
  WebBluetoothServiceStub.prototype.remoteDescriptorWriteValue = function(descriptorInstanceId, value) {
    return this.delegate_ && this.delegate_.remoteDescriptorWriteValue && this.delegate_.remoteDescriptorWriteValue(descriptorInstanceId, value);
  }
  WebBluetoothServiceStub.prototype.requestScanningStart = function(client, options) {
    return this.delegate_ && this.delegate_.requestScanningStart && this.delegate_.requestScanningStart(client, options);
  }
  WebBluetoothServiceStub.prototype.watchAdvertisementsForDevice = function(deviceId, client) {
    return this.delegate_ && this.delegate_.watchAdvertisementsForDevice && this.delegate_.watchAdvertisementsForDevice(deviceId, client);
  }

  WebBluetoothServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWebBluetoothService_RemoteServerDisconnect_Name:
      var params = reader.decodeStruct(WebBluetoothService_RemoteServerDisconnect_Params);
      this.remoteServerDisconnect(params.deviceId);
      return true;
    default:
      return false;
    }
  };

  WebBluetoothServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWebBluetoothService_GetAvailability_Name:
      var params = reader.decodeStruct(WebBluetoothService_GetAvailability_Params);
      this.getAvailability().then(function(response) {
        var responseParams =
            new WebBluetoothService_GetAvailability_ResponseParams();
        responseParams.isAvailable = response.isAvailable;
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_GetAvailability_Name,
            codec.align(WebBluetoothService_GetAvailability_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_GetAvailability_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RequestDevice_Name:
      var params = reader.decodeStruct(WebBluetoothService_RequestDevice_Params);
      this.requestDevice(params.options).then(function(response) {
        var responseParams =
            new WebBluetoothService_RequestDevice_ResponseParams();
        responseParams.result = response.result;
        responseParams.device = response.device;
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_RequestDevice_Name,
            codec.align(WebBluetoothService_RequestDevice_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_RequestDevice_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_GetDevices_Name:
      var params = reader.decodeStruct(WebBluetoothService_GetDevices_Params);
      this.getDevices().then(function(response) {
        var responseParams =
            new WebBluetoothService_GetDevices_ResponseParams();
        responseParams.devices = response.devices;
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_GetDevices_Name,
            codec.align(WebBluetoothService_GetDevices_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_GetDevices_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_ForgetDevice_Name:
      var params = reader.decodeStruct(WebBluetoothService_ForgetDevice_Params);
      this.forgetDevice(params.deviceId).then(function(response) {
        var responseParams =
            new WebBluetoothService_ForgetDevice_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_ForgetDevice_Name,
            codec.align(WebBluetoothService_ForgetDevice_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_ForgetDevice_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RemoteServerConnect_Name:
      var params = reader.decodeStruct(WebBluetoothService_RemoteServerConnect_Params);
      this.remoteServerConnect(params.deviceId, params.client).then(function(response) {
        var responseParams =
            new WebBluetoothService_RemoteServerConnect_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV2Builder(
            kWebBluetoothService_RemoteServerConnect_Name,
            codec.align(WebBluetoothService_RemoteServerConnect_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(WebBluetoothService_RemoteServerConnect_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RemoteServerGetPrimaryServices_Name:
      var params = reader.decodeStruct(WebBluetoothService_RemoteServerGetPrimaryServices_Params);
      this.remoteServerGetPrimaryServices(params.deviceId, params.quantity, params.servicesUuid).then(function(response) {
        var responseParams =
            new WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams();
        responseParams.result = response.result;
        responseParams.services = response.services;
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_RemoteServerGetPrimaryServices_Name,
            codec.align(WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RemoteServiceGetCharacteristics_Name:
      var params = reader.decodeStruct(WebBluetoothService_RemoteServiceGetCharacteristics_Params);
      this.remoteServiceGetCharacteristics(params.serviceInstanceId, params.quantity, params.characteristicsUuid).then(function(response) {
        var responseParams =
            new WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams();
        responseParams.result = response.result;
        responseParams.characteristics = response.characteristics;
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_RemoteServiceGetCharacteristics_Name,
            codec.align(WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RemoteCharacteristicReadValue_Name:
      var params = reader.decodeStruct(WebBluetoothService_RemoteCharacteristicReadValue_Params);
      this.remoteCharacteristicReadValue(params.characteristicInstanceId).then(function(response) {
        var responseParams =
            new WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams();
        responseParams.result = response.result;
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_RemoteCharacteristicReadValue_Name,
            codec.align(WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RemoteCharacteristicWriteValue_Name:
      var params = reader.decodeStruct(WebBluetoothService_RemoteCharacteristicWriteValue_Params);
      this.remoteCharacteristicWriteValue(params.characteristicInstanceId, params.value, params.writeType).then(function(response) {
        var responseParams =
            new WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_RemoteCharacteristicWriteValue_Name,
            codec.align(WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RemoteCharacteristicStartNotifications_Name:
      var params = reader.decodeStruct(WebBluetoothService_RemoteCharacteristicStartNotifications_Params);
      this.remoteCharacteristicStartNotifications(params.characteristicInstanceId, params.client).then(function(response) {
        var responseParams =
            new WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV2Builder(
            kWebBluetoothService_RemoteCharacteristicStartNotifications_Name,
            codec.align(WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RemoteCharacteristicStopNotifications_Name:
      var params = reader.decodeStruct(WebBluetoothService_RemoteCharacteristicStopNotifications_Params);
      this.remoteCharacteristicStopNotifications(params.characteristicInstanceId).then(function(response) {
        var responseParams =
            new WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_RemoteCharacteristicStopNotifications_Name,
            codec.align(WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RemoteCharacteristicGetDescriptors_Name:
      var params = reader.decodeStruct(WebBluetoothService_RemoteCharacteristicGetDescriptors_Params);
      this.remoteCharacteristicGetDescriptors(params.characteristicsInstanceId, params.quantity, params.descriptorUuid).then(function(response) {
        var responseParams =
            new WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams();
        responseParams.result = response.result;
        responseParams.descriptors = response.descriptors;
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_RemoteCharacteristicGetDescriptors_Name,
            codec.align(WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RemoteDescriptorReadValue_Name:
      var params = reader.decodeStruct(WebBluetoothService_RemoteDescriptorReadValue_Params);
      this.remoteDescriptorReadValue(params.descriptorInstanceId).then(function(response) {
        var responseParams =
            new WebBluetoothService_RemoteDescriptorReadValue_ResponseParams();
        responseParams.result = response.result;
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_RemoteDescriptorReadValue_Name,
            codec.align(WebBluetoothService_RemoteDescriptorReadValue_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_RemoteDescriptorReadValue_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RemoteDescriptorWriteValue_Name:
      var params = reader.decodeStruct(WebBluetoothService_RemoteDescriptorWriteValue_Params);
      this.remoteDescriptorWriteValue(params.descriptorInstanceId, params.value).then(function(response) {
        var responseParams =
            new WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kWebBluetoothService_RemoteDescriptorWriteValue_Name,
            codec.align(WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_RequestScanningStart_Name:
      var params = reader.decodeStruct(WebBluetoothService_RequestScanningStart_Params);
      this.requestScanningStart(params.client, params.options).then(function(response) {
        var responseParams =
            new WebBluetoothService_RequestScanningStart_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV2Builder(
            kWebBluetoothService_RequestScanningStart_Name,
            codec.align(WebBluetoothService_RequestScanningStart_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(WebBluetoothService_RequestScanningStart_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kWebBluetoothService_WatchAdvertisementsForDevice_Name:
      var params = reader.decodeStruct(WebBluetoothService_WatchAdvertisementsForDevice_Params);
      this.watchAdvertisementsForDevice(params.deviceId, params.client).then(function(response) {
        var responseParams =
            new WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV2Builder(
            kWebBluetoothService_WatchAdvertisementsForDevice_Name,
            codec.align(WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams
                .encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.setPayload(WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateWebBluetoothServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWebBluetoothService_GetAvailability_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_GetAvailability_Params;
      break;
      case kWebBluetoothService_RequestDevice_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RequestDevice_Params;
      break;
      case kWebBluetoothService_GetDevices_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_GetDevices_Params;
      break;
      case kWebBluetoothService_ForgetDevice_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_ForgetDevice_Params;
      break;
      case kWebBluetoothService_RemoteServerConnect_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RemoteServerConnect_Params;
      break;
      case kWebBluetoothService_RemoteServerDisconnect_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WebBluetoothService_RemoteServerDisconnect_Params;
      break;
      case kWebBluetoothService_RemoteServerGetPrimaryServices_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RemoteServerGetPrimaryServices_Params;
      break;
      case kWebBluetoothService_RemoteServiceGetCharacteristics_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RemoteServiceGetCharacteristics_Params;
      break;
      case kWebBluetoothService_RemoteCharacteristicReadValue_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RemoteCharacteristicReadValue_Params;
      break;
      case kWebBluetoothService_RemoteCharacteristicWriteValue_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RemoteCharacteristicWriteValue_Params;
      break;
      case kWebBluetoothService_RemoteCharacteristicStartNotifications_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RemoteCharacteristicStartNotifications_Params;
      break;
      case kWebBluetoothService_RemoteCharacteristicStopNotifications_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RemoteCharacteristicStopNotifications_Params;
      break;
      case kWebBluetoothService_RemoteCharacteristicGetDescriptors_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RemoteCharacteristicGetDescriptors_Params;
      break;
      case kWebBluetoothService_RemoteDescriptorReadValue_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RemoteDescriptorReadValue_Params;
      break;
      case kWebBluetoothService_RemoteDescriptorWriteValue_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RemoteDescriptorWriteValue_Params;
      break;
      case kWebBluetoothService_RequestScanningStart_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_RequestScanningStart_Params;
      break;
      case kWebBluetoothService_WatchAdvertisementsForDevice_Name:
        if (message.expectsResponse())
          paramsClass = WebBluetoothService_WatchAdvertisementsForDevice_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWebBluetoothServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kWebBluetoothService_GetAvailability_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_GetAvailability_ResponseParams;
        break;
      case kWebBluetoothService_RequestDevice_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RequestDevice_ResponseParams;
        break;
      case kWebBluetoothService_GetDevices_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_GetDevices_ResponseParams;
        break;
      case kWebBluetoothService_ForgetDevice_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_ForgetDevice_ResponseParams;
        break;
      case kWebBluetoothService_RemoteServerConnect_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RemoteServerConnect_ResponseParams;
        break;
      case kWebBluetoothService_RemoteServerGetPrimaryServices_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RemoteServerGetPrimaryServices_ResponseParams;
        break;
      case kWebBluetoothService_RemoteServiceGetCharacteristics_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RemoteServiceGetCharacteristics_ResponseParams;
        break;
      case kWebBluetoothService_RemoteCharacteristicReadValue_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RemoteCharacteristicReadValue_ResponseParams;
        break;
      case kWebBluetoothService_RemoteCharacteristicWriteValue_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RemoteCharacteristicWriteValue_ResponseParams;
        break;
      case kWebBluetoothService_RemoteCharacteristicStartNotifications_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RemoteCharacteristicStartNotifications_ResponseParams;
        break;
      case kWebBluetoothService_RemoteCharacteristicStopNotifications_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RemoteCharacteristicStopNotifications_ResponseParams;
        break;
      case kWebBluetoothService_RemoteCharacteristicGetDescriptors_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RemoteCharacteristicGetDescriptors_ResponseParams;
        break;
      case kWebBluetoothService_RemoteDescriptorReadValue_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RemoteDescriptorReadValue_ResponseParams;
        break;
      case kWebBluetoothService_RemoteDescriptorWriteValue_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RemoteDescriptorWriteValue_ResponseParams;
        break;
      case kWebBluetoothService_RequestScanningStart_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_RequestScanningStart_ResponseParams;
        break;
      case kWebBluetoothService_WatchAdvertisementsForDevice_Name:
        if (message.isResponse())
          paramsClass = WebBluetoothService_WatchAdvertisementsForDevice_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var WebBluetoothService = {
    name: 'blink.mojom.WebBluetoothService',
    kVersion: 0,
    ptrClass: WebBluetoothServicePtr,
    proxyClass: WebBluetoothServiceProxy,
    stubClass: WebBluetoothServiceStub,
    validateRequest: validateWebBluetoothServiceRequest,
    validateResponse: validateWebBluetoothServiceResponse,
  };
  WebBluetoothServiceStub.prototype.validator = validateWebBluetoothServiceRequest;
  WebBluetoothServiceProxy.prototype.validator = validateWebBluetoothServiceResponse;
  var kWebBluetoothServerClient_GATTServerDisconnected_Name = 668577871;

  function WebBluetoothServerClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WebBluetoothServerClient,
                                                   handleOrPtrInfo);
  }

  function WebBluetoothServerClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WebBluetoothServerClient, associatedInterfacePtrInfo);
  }

  WebBluetoothServerClientAssociatedPtr.prototype =
      Object.create(WebBluetoothServerClientPtr.prototype);
  WebBluetoothServerClientAssociatedPtr.prototype.constructor =
      WebBluetoothServerClientAssociatedPtr;

  function WebBluetoothServerClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  WebBluetoothServerClientPtr.prototype.gATTServerDisconnected = function() {
    return WebBluetoothServerClientProxy.prototype.gATTServerDisconnected
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothServerClientProxy.prototype.gATTServerDisconnected = function() {
    var params_ = new WebBluetoothServerClient_GATTServerDisconnected_Params();
    var builder = new codec.MessageV0Builder(
        kWebBluetoothServerClient_GATTServerDisconnected_Name,
        codec.align(WebBluetoothServerClient_GATTServerDisconnected_Params.encodedSize));
    builder.encodeStruct(WebBluetoothServerClient_GATTServerDisconnected_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function WebBluetoothServerClientStub(delegate) {
    this.delegate_ = delegate;
  }
  WebBluetoothServerClientStub.prototype.gATTServerDisconnected = function() {
    return this.delegate_ && this.delegate_.gATTServerDisconnected && this.delegate_.gATTServerDisconnected();
  }

  WebBluetoothServerClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWebBluetoothServerClient_GATTServerDisconnected_Name:
      var params = reader.decodeStruct(WebBluetoothServerClient_GATTServerDisconnected_Params);
      this.gATTServerDisconnected();
      return true;
    default:
      return false;
    }
  };

  WebBluetoothServerClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateWebBluetoothServerClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWebBluetoothServerClient_GATTServerDisconnected_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WebBluetoothServerClient_GATTServerDisconnected_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWebBluetoothServerClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var WebBluetoothServerClient = {
    name: 'blink.mojom.WebBluetoothServerClient',
    kVersion: 0,
    ptrClass: WebBluetoothServerClientPtr,
    proxyClass: WebBluetoothServerClientProxy,
    stubClass: WebBluetoothServerClientStub,
    validateRequest: validateWebBluetoothServerClientRequest,
    validateResponse: null,
  };
  WebBluetoothServerClientStub.prototype.validator = validateWebBluetoothServerClientRequest;
  WebBluetoothServerClientProxy.prototype.validator = null;
  var kWebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Name = 1865010605;

  function WebBluetoothCharacteristicClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WebBluetoothCharacteristicClient,
                                                   handleOrPtrInfo);
  }

  function WebBluetoothCharacteristicClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WebBluetoothCharacteristicClient, associatedInterfacePtrInfo);
  }

  WebBluetoothCharacteristicClientAssociatedPtr.prototype =
      Object.create(WebBluetoothCharacteristicClientPtr.prototype);
  WebBluetoothCharacteristicClientAssociatedPtr.prototype.constructor =
      WebBluetoothCharacteristicClientAssociatedPtr;

  function WebBluetoothCharacteristicClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  WebBluetoothCharacteristicClientPtr.prototype.remoteCharacteristicValueChanged = function() {
    return WebBluetoothCharacteristicClientProxy.prototype.remoteCharacteristicValueChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothCharacteristicClientProxy.prototype.remoteCharacteristicValueChanged = function(value) {
    var params_ = new WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params();
    params_.value = value;
    var builder = new codec.MessageV0Builder(
        kWebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Name,
        codec.align(WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params.encodedSize));
    builder.encodeStruct(WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function WebBluetoothCharacteristicClientStub(delegate) {
    this.delegate_ = delegate;
  }
  WebBluetoothCharacteristicClientStub.prototype.remoteCharacteristicValueChanged = function(value) {
    return this.delegate_ && this.delegate_.remoteCharacteristicValueChanged && this.delegate_.remoteCharacteristicValueChanged(value);
  }

  WebBluetoothCharacteristicClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Name:
      var params = reader.decodeStruct(WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params);
      this.remoteCharacteristicValueChanged(params.value);
      return true;
    default:
      return false;
    }
  };

  WebBluetoothCharacteristicClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateWebBluetoothCharacteristicClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WebBluetoothCharacteristicClient_RemoteCharacteristicValueChanged_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWebBluetoothCharacteristicClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var WebBluetoothCharacteristicClient = {
    name: 'blink.mojom.WebBluetoothCharacteristicClient',
    kVersion: 0,
    ptrClass: WebBluetoothCharacteristicClientPtr,
    proxyClass: WebBluetoothCharacteristicClientProxy,
    stubClass: WebBluetoothCharacteristicClientStub,
    validateRequest: validateWebBluetoothCharacteristicClientRequest,
    validateResponse: null,
  };
  WebBluetoothCharacteristicClientStub.prototype.validator = validateWebBluetoothCharacteristicClientRequest;
  WebBluetoothCharacteristicClientProxy.prototype.validator = null;
  var kWebBluetoothAdvertisementClient_AdvertisingEvent_Name = 200093319;

  function WebBluetoothAdvertisementClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WebBluetoothAdvertisementClient,
                                                   handleOrPtrInfo);
  }

  function WebBluetoothAdvertisementClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WebBluetoothAdvertisementClient, associatedInterfacePtrInfo);
  }

  WebBluetoothAdvertisementClientAssociatedPtr.prototype =
      Object.create(WebBluetoothAdvertisementClientPtr.prototype);
  WebBluetoothAdvertisementClientAssociatedPtr.prototype.constructor =
      WebBluetoothAdvertisementClientAssociatedPtr;

  function WebBluetoothAdvertisementClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  WebBluetoothAdvertisementClientPtr.prototype.advertisingEvent = function() {
    return WebBluetoothAdvertisementClientProxy.prototype.advertisingEvent
        .apply(this.ptr.getProxy(), arguments);
  };

  WebBluetoothAdvertisementClientProxy.prototype.advertisingEvent = function(result) {
    var params_ = new WebBluetoothAdvertisementClient_AdvertisingEvent_Params();
    params_.result = result;
    var builder = new codec.MessageV0Builder(
        kWebBluetoothAdvertisementClient_AdvertisingEvent_Name,
        codec.align(WebBluetoothAdvertisementClient_AdvertisingEvent_Params.encodedSize));
    builder.encodeStruct(WebBluetoothAdvertisementClient_AdvertisingEvent_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function WebBluetoothAdvertisementClientStub(delegate) {
    this.delegate_ = delegate;
  }
  WebBluetoothAdvertisementClientStub.prototype.advertisingEvent = function(result) {
    return this.delegate_ && this.delegate_.advertisingEvent && this.delegate_.advertisingEvent(result);
  }

  WebBluetoothAdvertisementClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWebBluetoothAdvertisementClient_AdvertisingEvent_Name:
      var params = reader.decodeStruct(WebBluetoothAdvertisementClient_AdvertisingEvent_Params);
      this.advertisingEvent(params.result);
      return true;
    default:
      return false;
    }
  };

  WebBluetoothAdvertisementClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateWebBluetoothAdvertisementClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWebBluetoothAdvertisementClient_AdvertisingEvent_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = WebBluetoothAdvertisementClient_AdvertisingEvent_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWebBluetoothAdvertisementClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var WebBluetoothAdvertisementClient = {
    name: 'blink.mojom.WebBluetoothAdvertisementClient',
    kVersion: 0,
    ptrClass: WebBluetoothAdvertisementClientPtr,
    proxyClass: WebBluetoothAdvertisementClientProxy,
    stubClass: WebBluetoothAdvertisementClientStub,
    validateRequest: validateWebBluetoothAdvertisementClientRequest,
    validateResponse: null,
  };
  WebBluetoothAdvertisementClientStub.prototype.validator = validateWebBluetoothAdvertisementClientRequest;
  WebBluetoothAdvertisementClientProxy.prototype.validator = null;
  exports.WebBluetoothResult = WebBluetoothResult;
  exports.WebBluetoothGATTQueryQuantity = WebBluetoothGATTQueryQuantity;
  exports.WebBluetoothWriteType = WebBluetoothWriteType;
  exports.WebBluetoothLeScanFilter = WebBluetoothLeScanFilter;
  exports.WebBluetoothCompany = WebBluetoothCompany;
  exports.WebBluetoothDataFilter = WebBluetoothDataFilter;
  exports.WebBluetoothRequestDeviceOptions = WebBluetoothRequestDeviceOptions;
  exports.WebBluetoothRequestLEScanOptions = WebBluetoothRequestLEScanOptions;
  exports.WebBluetoothDeviceId = WebBluetoothDeviceId;
  exports.WebBluetoothDevice = WebBluetoothDevice;
  exports.WebBluetoothRemoteGATTService = WebBluetoothRemoteGATTService;
  exports.WebBluetoothRemoteGATTCharacteristic = WebBluetoothRemoteGATTCharacteristic;
  exports.WebBluetoothAdvertisingEvent = WebBluetoothAdvertisingEvent;
  exports.WebBluetoothRemoteGATTDescriptor = WebBluetoothRemoteGATTDescriptor;
  exports.WebBluetoothService = WebBluetoothService;
  exports.WebBluetoothServicePtr = WebBluetoothServicePtr;
  exports.WebBluetoothServiceAssociatedPtr = WebBluetoothServiceAssociatedPtr;
  exports.WebBluetoothServerClient = WebBluetoothServerClient;
  exports.WebBluetoothServerClientPtr = WebBluetoothServerClientPtr;
  exports.WebBluetoothServerClientAssociatedPtr = WebBluetoothServerClientAssociatedPtr;
  exports.WebBluetoothCharacteristicClient = WebBluetoothCharacteristicClient;
  exports.WebBluetoothCharacteristicClientPtr = WebBluetoothCharacteristicClientPtr;
  exports.WebBluetoothCharacteristicClientAssociatedPtr = WebBluetoothCharacteristicClientAssociatedPtr;
  exports.WebBluetoothAdvertisementClient = WebBluetoothAdvertisementClient;
  exports.WebBluetoothAdvertisementClientPtr = WebBluetoothAdvertisementClientPtr;
  exports.WebBluetoothAdvertisementClientAssociatedPtr = WebBluetoothAdvertisementClientAssociatedPtr;
})();