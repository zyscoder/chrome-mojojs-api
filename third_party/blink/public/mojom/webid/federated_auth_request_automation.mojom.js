// third_party/blink/public/mojom/webid/federated_auth_request_automation.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/webid/federated_auth_request_automation.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.test.mojom');



  function FederatedAuthRequestAutomation_GetDialogType_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequestAutomation_GetDialogType_Params.prototype.initDefaults_ = function() {
  };
  FederatedAuthRequestAutomation_GetDialogType_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequestAutomation_GetDialogType_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FederatedAuthRequestAutomation_GetDialogType_Params.encodedSize = codec.kStructHeaderSize + 0;

  FederatedAuthRequestAutomation_GetDialogType_Params.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequestAutomation_GetDialogType_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FederatedAuthRequestAutomation_GetDialogType_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequestAutomation_GetDialogType_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FederatedAuthRequestAutomation_GetDialogType_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequestAutomation_GetDialogType_ResponseParams.prototype.initDefaults_ = function() {
    this.title = null;
  };
  FederatedAuthRequestAutomation_GetDialogType_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequestAutomation_GetDialogType_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FederatedAuthRequestAutomation_GetDialogType_ResponseParams.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FederatedAuthRequestAutomation_GetDialogType_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FederatedAuthRequestAutomation_GetDialogType_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequestAutomation_GetDialogType_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.title =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  FederatedAuthRequestAutomation_GetDialogType_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequestAutomation_GetDialogType_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.title);
  };
  function FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params.prototype.initDefaults_ = function() {
  };
  FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params.encodedSize = codec.kStructHeaderSize + 0;

  FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams.prototype.initDefaults_ = function() {
    this.title = null;
  };
  FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.title =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.title);
  };
  function FederatedAuthRequestAutomation_SelectFedCmAccount_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequestAutomation_SelectFedCmAccount_Params.prototype.initDefaults_ = function() {
    this.accountIndex = 0;
  };
  FederatedAuthRequestAutomation_SelectFedCmAccount_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequestAutomation_SelectFedCmAccount_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FederatedAuthRequestAutomation_SelectFedCmAccount_Params.encodedSize = codec.kStructHeaderSize + 8;

  FederatedAuthRequestAutomation_SelectFedCmAccount_Params.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequestAutomation_SelectFedCmAccount_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.accountIndex =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FederatedAuthRequestAutomation_SelectFedCmAccount_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequestAutomation_SelectFedCmAccount_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.accountIndex);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FederatedAuthRequestAutomation_DismissFedCmDialog_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequestAutomation_DismissFedCmDialog_Params.prototype.initDefaults_ = function() {
  };
  FederatedAuthRequestAutomation_DismissFedCmDialog_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequestAutomation_DismissFedCmDialog_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FederatedAuthRequestAutomation_DismissFedCmDialog_Params.encodedSize = codec.kStructHeaderSize + 0;

  FederatedAuthRequestAutomation_DismissFedCmDialog_Params.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequestAutomation_DismissFedCmDialog_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FederatedAuthRequestAutomation_DismissFedCmDialog_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequestAutomation_DismissFedCmDialog_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FederatedAuthRequestAutomation_ConfirmIdpLogin_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequestAutomation_ConfirmIdpLogin_Params.prototype.initDefaults_ = function() {
  };
  FederatedAuthRequestAutomation_ConfirmIdpLogin_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequestAutomation_ConfirmIdpLogin_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FederatedAuthRequestAutomation_ConfirmIdpLogin_Params.encodedSize = codec.kStructHeaderSize + 0;

  FederatedAuthRequestAutomation_ConfirmIdpLogin_Params.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequestAutomation_ConfirmIdpLogin_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FederatedAuthRequestAutomation_ConfirmIdpLogin_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequestAutomation_ConfirmIdpLogin_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kFederatedAuthRequestAutomation_GetDialogType_Name = 0;
  var kFederatedAuthRequestAutomation_GetFedCmDialogTitle_Name = 1;
  var kFederatedAuthRequestAutomation_SelectFedCmAccount_Name = 2;
  var kFederatedAuthRequestAutomation_DismissFedCmDialog_Name = 3;
  var kFederatedAuthRequestAutomation_ConfirmIdpLogin_Name = 4;

  function FederatedAuthRequestAutomationPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FederatedAuthRequestAutomation,
                                                   handleOrPtrInfo);
  }

  function FederatedAuthRequestAutomationAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FederatedAuthRequestAutomation, associatedInterfacePtrInfo);
  }

  FederatedAuthRequestAutomationAssociatedPtr.prototype =
      Object.create(FederatedAuthRequestAutomationPtr.prototype);
  FederatedAuthRequestAutomationAssociatedPtr.prototype.constructor =
      FederatedAuthRequestAutomationAssociatedPtr;

  function FederatedAuthRequestAutomationProxy(receiver) {
    this.receiver_ = receiver;
  }
  FederatedAuthRequestAutomationPtr.prototype.getDialogType = function() {
    return FederatedAuthRequestAutomationProxy.prototype.getDialogType
        .apply(this.ptr.getProxy(), arguments);
  };

  FederatedAuthRequestAutomationProxy.prototype.getDialogType = function() {
    var params_ = new FederatedAuthRequestAutomation_GetDialogType_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFederatedAuthRequestAutomation_GetDialogType_Name,
          codec.align(FederatedAuthRequestAutomation_GetDialogType_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FederatedAuthRequestAutomation_GetDialogType_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FederatedAuthRequestAutomation_GetDialogType_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FederatedAuthRequestAutomationPtr.prototype.getFedCmDialogTitle = function() {
    return FederatedAuthRequestAutomationProxy.prototype.getFedCmDialogTitle
        .apply(this.ptr.getProxy(), arguments);
  };

  FederatedAuthRequestAutomationProxy.prototype.getFedCmDialogTitle = function() {
    var params_ = new FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFederatedAuthRequestAutomation_GetFedCmDialogTitle_Name,
          codec.align(FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FederatedAuthRequestAutomationPtr.prototype.selectFedCmAccount = function() {
    return FederatedAuthRequestAutomationProxy.prototype.selectFedCmAccount
        .apply(this.ptr.getProxy(), arguments);
  };

  FederatedAuthRequestAutomationProxy.prototype.selectFedCmAccount = function(accountIndex) {
    var params_ = new FederatedAuthRequestAutomation_SelectFedCmAccount_Params();
    params_.accountIndex = accountIndex;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFederatedAuthRequestAutomation_SelectFedCmAccount_Name,
          codec.align(FederatedAuthRequestAutomation_SelectFedCmAccount_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FederatedAuthRequestAutomation_SelectFedCmAccount_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FederatedAuthRequestAutomationPtr.prototype.dismissFedCmDialog = function() {
    return FederatedAuthRequestAutomationProxy.prototype.dismissFedCmDialog
        .apply(this.ptr.getProxy(), arguments);
  };

  FederatedAuthRequestAutomationProxy.prototype.dismissFedCmDialog = function() {
    var params_ = new FederatedAuthRequestAutomation_DismissFedCmDialog_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFederatedAuthRequestAutomation_DismissFedCmDialog_Name,
          codec.align(FederatedAuthRequestAutomation_DismissFedCmDialog_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FederatedAuthRequestAutomation_DismissFedCmDialog_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FederatedAuthRequestAutomationPtr.prototype.confirmIdpLogin = function() {
    return FederatedAuthRequestAutomationProxy.prototype.confirmIdpLogin
        .apply(this.ptr.getProxy(), arguments);
  };

  FederatedAuthRequestAutomationProxy.prototype.confirmIdpLogin = function() {
    var params_ = new FederatedAuthRequestAutomation_ConfirmIdpLogin_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFederatedAuthRequestAutomation_ConfirmIdpLogin_Name,
          codec.align(FederatedAuthRequestAutomation_ConfirmIdpLogin_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FederatedAuthRequestAutomation_ConfirmIdpLogin_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function FederatedAuthRequestAutomationStub(delegate) {
    this.delegate_ = delegate;
  }
  FederatedAuthRequestAutomationStub.prototype.getDialogType = function() {
    return this.delegate_ && this.delegate_.getDialogType && this.delegate_.getDialogType();
  }
  FederatedAuthRequestAutomationStub.prototype.getFedCmDialogTitle = function() {
    return this.delegate_ && this.delegate_.getFedCmDialogTitle && this.delegate_.getFedCmDialogTitle();
  }
  FederatedAuthRequestAutomationStub.prototype.selectFedCmAccount = function(accountIndex) {
    return this.delegate_ && this.delegate_.selectFedCmAccount && this.delegate_.selectFedCmAccount(accountIndex);
  }
  FederatedAuthRequestAutomationStub.prototype.dismissFedCmDialog = function() {
    return this.delegate_ && this.delegate_.dismissFedCmDialog && this.delegate_.dismissFedCmDialog();
  }
  FederatedAuthRequestAutomationStub.prototype.confirmIdpLogin = function() {
    return this.delegate_ && this.delegate_.confirmIdpLogin && this.delegate_.confirmIdpLogin();
  }

  FederatedAuthRequestAutomationStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  FederatedAuthRequestAutomationStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFederatedAuthRequestAutomation_GetDialogType_Name:
      var params = reader.decodeStruct(FederatedAuthRequestAutomation_GetDialogType_Params);
      this.getDialogType().then(function(response) {
        var responseParams =
            new FederatedAuthRequestAutomation_GetDialogType_ResponseParams();
        responseParams.title = response.title;
        var builder = new codec.MessageV1Builder(
            kFederatedAuthRequestAutomation_GetDialogType_Name,
            codec.align(FederatedAuthRequestAutomation_GetDialogType_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FederatedAuthRequestAutomation_GetDialogType_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFederatedAuthRequestAutomation_GetFedCmDialogTitle_Name:
      var params = reader.decodeStruct(FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params);
      this.getFedCmDialogTitle().then(function(response) {
        var responseParams =
            new FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams();
        responseParams.title = response.title;
        var builder = new codec.MessageV1Builder(
            kFederatedAuthRequestAutomation_GetFedCmDialogTitle_Name,
            codec.align(FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFederatedAuthRequestAutomation_SelectFedCmAccount_Name:
      var params = reader.decodeStruct(FederatedAuthRequestAutomation_SelectFedCmAccount_Params);
      this.selectFedCmAccount(params.accountIndex).then(function(response) {
        var responseParams =
            new FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kFederatedAuthRequestAutomation_SelectFedCmAccount_Name,
            codec.align(FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFederatedAuthRequestAutomation_DismissFedCmDialog_Name:
      var params = reader.decodeStruct(FederatedAuthRequestAutomation_DismissFedCmDialog_Params);
      this.dismissFedCmDialog().then(function(response) {
        var responseParams =
            new FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kFederatedAuthRequestAutomation_DismissFedCmDialog_Name,
            codec.align(FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFederatedAuthRequestAutomation_ConfirmIdpLogin_Name:
      var params = reader.decodeStruct(FederatedAuthRequestAutomation_ConfirmIdpLogin_Params);
      this.confirmIdpLogin().then(function(response) {
        var responseParams =
            new FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kFederatedAuthRequestAutomation_ConfirmIdpLogin_Name,
            codec.align(FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFederatedAuthRequestAutomationRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFederatedAuthRequestAutomation_GetDialogType_Name:
        if (message.expectsResponse())
          paramsClass = FederatedAuthRequestAutomation_GetDialogType_Params;
      break;
      case kFederatedAuthRequestAutomation_GetFedCmDialogTitle_Name:
        if (message.expectsResponse())
          paramsClass = FederatedAuthRequestAutomation_GetFedCmDialogTitle_Params;
      break;
      case kFederatedAuthRequestAutomation_SelectFedCmAccount_Name:
        if (message.expectsResponse())
          paramsClass = FederatedAuthRequestAutomation_SelectFedCmAccount_Params;
      break;
      case kFederatedAuthRequestAutomation_DismissFedCmDialog_Name:
        if (message.expectsResponse())
          paramsClass = FederatedAuthRequestAutomation_DismissFedCmDialog_Params;
      break;
      case kFederatedAuthRequestAutomation_ConfirmIdpLogin_Name:
        if (message.expectsResponse())
          paramsClass = FederatedAuthRequestAutomation_ConfirmIdpLogin_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFederatedAuthRequestAutomationResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFederatedAuthRequestAutomation_GetDialogType_Name:
        if (message.isResponse())
          paramsClass = FederatedAuthRequestAutomation_GetDialogType_ResponseParams;
        break;
      case kFederatedAuthRequestAutomation_GetFedCmDialogTitle_Name:
        if (message.isResponse())
          paramsClass = FederatedAuthRequestAutomation_GetFedCmDialogTitle_ResponseParams;
        break;
      case kFederatedAuthRequestAutomation_SelectFedCmAccount_Name:
        if (message.isResponse())
          paramsClass = FederatedAuthRequestAutomation_SelectFedCmAccount_ResponseParams;
        break;
      case kFederatedAuthRequestAutomation_DismissFedCmDialog_Name:
        if (message.isResponse())
          paramsClass = FederatedAuthRequestAutomation_DismissFedCmDialog_ResponseParams;
        break;
      case kFederatedAuthRequestAutomation_ConfirmIdpLogin_Name:
        if (message.isResponse())
          paramsClass = FederatedAuthRequestAutomation_ConfirmIdpLogin_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var FederatedAuthRequestAutomation = {
    name: 'blink.test.mojom.FederatedAuthRequestAutomation',
    kVersion: 0,
    ptrClass: FederatedAuthRequestAutomationPtr,
    proxyClass: FederatedAuthRequestAutomationProxy,
    stubClass: FederatedAuthRequestAutomationStub,
    validateRequest: validateFederatedAuthRequestAutomationRequest,
    validateResponse: validateFederatedAuthRequestAutomationResponse,
  };
  FederatedAuthRequestAutomationStub.prototype.validator = validateFederatedAuthRequestAutomationRequest;
  FederatedAuthRequestAutomationProxy.prototype.validator = validateFederatedAuthRequestAutomationResponse;
  exports.FederatedAuthRequestAutomation = FederatedAuthRequestAutomation;
  exports.FederatedAuthRequestAutomationPtr = FederatedAuthRequestAutomationPtr;
  exports.FederatedAuthRequestAutomationAssociatedPtr = FederatedAuthRequestAutomationAssociatedPtr;
})();