// skia/public/mojom/skcolor4f.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'skia/public/mojom/skcolor4f.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('skia.mojom');



  function SkColor4f(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SkColor4f.prototype.initDefaults_ = function() {
    this.r = 0;
    this.g = 0;
    this.b = 0;
    this.a = 0;
  };
  SkColor4f.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SkColor4f.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    return validator.validationError.NONE;
  };

  SkColor4f.encodedSize = codec.kStructHeaderSize + 16;

  SkColor4f.decode = function(decoder) {
    var packed;
    var val = new SkColor4f();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.r =
        decoder.decodeStruct(codec.Float);
    val.g =
        decoder.decodeStruct(codec.Float);
    val.b =
        decoder.decodeStruct(codec.Float);
    val.a =
        decoder.decodeStruct(codec.Float);
    return val;
  };

  SkColor4f.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SkColor4f.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Float, val.r);
    encoder.encodeStruct(codec.Float, val.g);
    encoder.encodeStruct(codec.Float, val.b);
    encoder.encodeStruct(codec.Float, val.a);
  };
  exports.SkColor4f = SkColor4f;
})();