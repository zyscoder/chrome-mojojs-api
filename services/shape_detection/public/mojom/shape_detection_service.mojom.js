// services/shape_detection/public/mojom/shape_detection_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/shape_detection/public/mojom/shape_detection_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('shapeDetection.mojom');
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var barcodedetection_provider$ =
      mojo.internal.exposeNamespace('shapeDetection.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/shape_detection/public/mojom/barcodedetection_provider.mojom', 'barcodedetection_provider.mojom.js');
  }
  var facedetection_provider$ =
      mojo.internal.exposeNamespace('shapeDetection.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/shape_detection/public/mojom/facedetection_provider.mojom', 'facedetection_provider.mojom.js');
  }
  var textdetection$ =
      mojo.internal.exposeNamespace('shapeDetection.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/shape_detection/public/mojom/textdetection.mojom', 'textdetection.mojom.js');
  }


  var SHAPE_DETECTION_SANDBOX = sandbox$.Sandbox.kGpu;

  function ShapeDetectionService_BindBarcodeDetectionProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ShapeDetectionService_BindBarcodeDetectionProvider_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  ShapeDetectionService_BindBarcodeDetectionProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ShapeDetectionService_BindBarcodeDetectionProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ShapeDetectionService_BindBarcodeDetectionProvider_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ShapeDetectionService_BindBarcodeDetectionProvider_Params.encodedSize = codec.kStructHeaderSize + 8;

  ShapeDetectionService_BindBarcodeDetectionProvider_Params.decode = function(decoder) {
    var packed;
    var val = new ShapeDetectionService_BindBarcodeDetectionProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ShapeDetectionService_BindBarcodeDetectionProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ShapeDetectionService_BindBarcodeDetectionProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ShapeDetectionService_BindFaceDetectionProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ShapeDetectionService_BindFaceDetectionProvider_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  ShapeDetectionService_BindFaceDetectionProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ShapeDetectionService_BindFaceDetectionProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ShapeDetectionService_BindFaceDetectionProvider_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ShapeDetectionService_BindFaceDetectionProvider_Params.encodedSize = codec.kStructHeaderSize + 8;

  ShapeDetectionService_BindFaceDetectionProvider_Params.decode = function(decoder) {
    var packed;
    var val = new ShapeDetectionService_BindFaceDetectionProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ShapeDetectionService_BindFaceDetectionProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ShapeDetectionService_BindFaceDetectionProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ShapeDetectionService_BindTextDetection_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ShapeDetectionService_BindTextDetection_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  ShapeDetectionService_BindTextDetection_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ShapeDetectionService_BindTextDetection_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ShapeDetectionService_BindTextDetection_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ShapeDetectionService_BindTextDetection_Params.encodedSize = codec.kStructHeaderSize + 8;

  ShapeDetectionService_BindTextDetection_Params.decode = function(decoder) {
    var packed;
    var val = new ShapeDetectionService_BindTextDetection_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ShapeDetectionService_BindTextDetection_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ShapeDetectionService_BindTextDetection_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kShapeDetectionService_BindBarcodeDetectionProvider_Name = 1565436983;
  var kShapeDetectionService_BindFaceDetectionProvider_Name = 566618542;
  var kShapeDetectionService_BindTextDetection_Name = 2012371759;

  function ShapeDetectionServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ShapeDetectionService,
                                                   handleOrPtrInfo);
  }

  function ShapeDetectionServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ShapeDetectionService, associatedInterfacePtrInfo);
  }

  ShapeDetectionServiceAssociatedPtr.prototype =
      Object.create(ShapeDetectionServicePtr.prototype);
  ShapeDetectionServiceAssociatedPtr.prototype.constructor =
      ShapeDetectionServiceAssociatedPtr;

  function ShapeDetectionServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  ShapeDetectionServicePtr.prototype.bindBarcodeDetectionProvider = function() {
    return ShapeDetectionServiceProxy.prototype.bindBarcodeDetectionProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  ShapeDetectionServiceProxy.prototype.bindBarcodeDetectionProvider = function(receiver) {
    var params_ = new ShapeDetectionService_BindBarcodeDetectionProvider_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kShapeDetectionService_BindBarcodeDetectionProvider_Name,
        codec.align(ShapeDetectionService_BindBarcodeDetectionProvider_Params.encodedSize));
    builder.encodeStruct(ShapeDetectionService_BindBarcodeDetectionProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ShapeDetectionServicePtr.prototype.bindFaceDetectionProvider = function() {
    return ShapeDetectionServiceProxy.prototype.bindFaceDetectionProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  ShapeDetectionServiceProxy.prototype.bindFaceDetectionProvider = function(receiver) {
    var params_ = new ShapeDetectionService_BindFaceDetectionProvider_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kShapeDetectionService_BindFaceDetectionProvider_Name,
        codec.align(ShapeDetectionService_BindFaceDetectionProvider_Params.encodedSize));
    builder.encodeStruct(ShapeDetectionService_BindFaceDetectionProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ShapeDetectionServicePtr.prototype.bindTextDetection = function() {
    return ShapeDetectionServiceProxy.prototype.bindTextDetection
        .apply(this.ptr.getProxy(), arguments);
  };

  ShapeDetectionServiceProxy.prototype.bindTextDetection = function(receiver) {
    var params_ = new ShapeDetectionService_BindTextDetection_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kShapeDetectionService_BindTextDetection_Name,
        codec.align(ShapeDetectionService_BindTextDetection_Params.encodedSize));
    builder.encodeStruct(ShapeDetectionService_BindTextDetection_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ShapeDetectionServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  ShapeDetectionServiceStub.prototype.bindBarcodeDetectionProvider = function(receiver) {
    return this.delegate_ && this.delegate_.bindBarcodeDetectionProvider && this.delegate_.bindBarcodeDetectionProvider(receiver);
  }
  ShapeDetectionServiceStub.prototype.bindFaceDetectionProvider = function(receiver) {
    return this.delegate_ && this.delegate_.bindFaceDetectionProvider && this.delegate_.bindFaceDetectionProvider(receiver);
  }
  ShapeDetectionServiceStub.prototype.bindTextDetection = function(receiver) {
    return this.delegate_ && this.delegate_.bindTextDetection && this.delegate_.bindTextDetection(receiver);
  }

  ShapeDetectionServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kShapeDetectionService_BindBarcodeDetectionProvider_Name:
      var params = reader.decodeStruct(ShapeDetectionService_BindBarcodeDetectionProvider_Params);
      this.bindBarcodeDetectionProvider(params.receiver);
      return true;
    case kShapeDetectionService_BindFaceDetectionProvider_Name:
      var params = reader.decodeStruct(ShapeDetectionService_BindFaceDetectionProvider_Params);
      this.bindFaceDetectionProvider(params.receiver);
      return true;
    case kShapeDetectionService_BindTextDetection_Name:
      var params = reader.decodeStruct(ShapeDetectionService_BindTextDetection_Params);
      this.bindTextDetection(params.receiver);
      return true;
    default:
      return false;
    }
  };

  ShapeDetectionServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateShapeDetectionServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kShapeDetectionService_BindBarcodeDetectionProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ShapeDetectionService_BindBarcodeDetectionProvider_Params;
      break;
      case kShapeDetectionService_BindFaceDetectionProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ShapeDetectionService_BindFaceDetectionProvider_Params;
      break;
      case kShapeDetectionService_BindTextDetection_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ShapeDetectionService_BindTextDetection_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateShapeDetectionServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ShapeDetectionService = {
    name: 'shape_detection.mojom.ShapeDetectionService',
    kVersion: 0,
    ptrClass: ShapeDetectionServicePtr,
    proxyClass: ShapeDetectionServiceProxy,
    stubClass: ShapeDetectionServiceStub,
    validateRequest: validateShapeDetectionServiceRequest,
    validateResponse: null,
  };
  ShapeDetectionServiceStub.prototype.validator = validateShapeDetectionServiceRequest;
  ShapeDetectionServiceProxy.prototype.validator = null;
  exports.SHAPE_DETECTION_SANDBOX = SHAPE_DETECTION_SANDBOX;
  exports.ShapeDetectionService = ShapeDetectionService;
  exports.ShapeDetectionServicePtr = ShapeDetectionServicePtr;
  exports.ShapeDetectionServiceAssociatedPtr = ShapeDetectionServiceAssociatedPtr;
})();