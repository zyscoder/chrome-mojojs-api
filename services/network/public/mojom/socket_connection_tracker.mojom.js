// services/network/public/mojom/socket_connection_tracker.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/network/public/mojom/socket_connection_tracker.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('network.mojom');




  function SocketConnectionTrackerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SocketConnectionTracker,
                                                   handleOrPtrInfo);
  }

  function SocketConnectionTrackerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SocketConnectionTracker, associatedInterfacePtrInfo);
  }

  SocketConnectionTrackerAssociatedPtr.prototype =
      Object.create(SocketConnectionTrackerPtr.prototype);
  SocketConnectionTrackerAssociatedPtr.prototype.constructor =
      SocketConnectionTrackerAssociatedPtr;

  function SocketConnectionTrackerProxy(receiver) {
    this.receiver_ = receiver;
  }

  function SocketConnectionTrackerStub(delegate) {
    this.delegate_ = delegate;
  }

  SocketConnectionTrackerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  SocketConnectionTrackerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateSocketConnectionTrackerRequest(messageValidator) {
    return validator.validationError.NONE;
  }

  function validateSocketConnectionTrackerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var SocketConnectionTracker = {
    name: 'network.mojom.SocketConnectionTracker',
    kVersion: 0,
    ptrClass: SocketConnectionTrackerPtr,
    proxyClass: SocketConnectionTrackerProxy,
    stubClass: SocketConnectionTrackerStub,
    validateRequest: validateSocketConnectionTrackerRequest,
    validateResponse: null,
  };
  SocketConnectionTrackerStub.prototype.validator = validateSocketConnectionTrackerRequest;
  SocketConnectionTrackerProxy.prototype.validator = null;
  exports.SocketConnectionTracker = SocketConnectionTracker;
  exports.SocketConnectionTrackerPtr = SocketConnectionTrackerPtr;
  exports.SocketConnectionTrackerAssociatedPtr = SocketConnectionTrackerAssociatedPtr;
})();