// services/video_capture/public/mojom/virtual_device.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/video_capture/public/mojom/virtual_device.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('videoCapture.mojom');
  var video_capture_buffer$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/capture/mojom/video_capture_buffer.mojom', '../../../../media/capture/mojom/video_capture_buffer.mojom.js');
  }
  var video_capture_types$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/capture/mojom/video_capture_types.mojom', '../../../../media/capture/mojom/video_capture_types.mojom.js');
  }
  var producer$ =
      mojo.internal.exposeNamespace('videoCapture.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/video_capture/public/mojom/producer.mojom', 'producer.mojom.js');
  }
  var video_frame_handler$ =
      mojo.internal.exposeNamespace('videoCapture.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/video_capture/public/mojom/video_frame_handler.mojom', 'video_frame_handler.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var buffer_types$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/buffer_types.mojom', '../../../../ui/gfx/mojom/buffer_types.mojom.js');
  }



  function SharedMemoryVirtualDevice_RequestFrameBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedMemoryVirtualDevice_RequestFrameBuffer_Params.prototype.initDefaults_ = function() {
    this.dimension = null;
    this.pixelFormat = 0;
    this.strides = null;
  };
  SharedMemoryVirtualDevice_RequestFrameBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedMemoryVirtualDevice_RequestFrameBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedMemoryVirtualDevice_RequestFrameBuffer_Params.dimension
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedMemoryVirtualDevice_RequestFrameBuffer_Params.pixelFormat
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, video_capture_types$.VideoCapturePixelFormat);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SharedMemoryVirtualDevice_RequestFrameBuffer_Params.strides
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, video_capture_types$.PlaneStrides, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedMemoryVirtualDevice_RequestFrameBuffer_Params.encodedSize = codec.kStructHeaderSize + 24;

  SharedMemoryVirtualDevice_RequestFrameBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new SharedMemoryVirtualDevice_RequestFrameBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dimension =
        decoder.decodeStructPointer(geometry$.Size);
    val.pixelFormat =
        decoder.decodeStruct(new codec.Enum(video_capture_types$.VideoCapturePixelFormat));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.strides =
        decoder.decodeStructPointer(video_capture_types$.PlaneStrides);
    return val;
  };

  SharedMemoryVirtualDevice_RequestFrameBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedMemoryVirtualDevice_RequestFrameBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Size, val.dimension);
    encoder.encodeStruct(codec.Int32, val.pixelFormat);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(video_capture_types$.PlaneStrides, val.strides);
  };
  function SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams.prototype.initDefaults_ = function() {
    this.bufferId = 0;
  };
  SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
    this.frameInfo = null;
  };
  SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params.frameInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, video_capture_buffer$.VideoFrameInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params.encodedSize = codec.kStructHeaderSize + 16;

  SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.frameInfo =
        decoder.decodeStructPointer(video_capture_buffer$.VideoFrameInfo);
    return val;
  };

  SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(video_capture_buffer$.VideoFrameInfo, val.frameInfo);
  };
  function TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
    this.mailboxHandles = null;
  };
  TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params.mailboxHandles
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, video_capture_buffer$.MailboxBufferHandleSet, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params.encodedSize = codec.kStructHeaderSize + 16;

  TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params.decode = function(decoder) {
    var packed;
    var val = new TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.mailboxHandles =
        decoder.decodeStructPointer(video_capture_buffer$.MailboxBufferHandleSet);
    return val;
  };

  TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(video_capture_buffer$.MailboxBufferHandleSet, val.mailboxHandles);
  };
  function TextureVirtualDevice_OnFrameAccessHandlerReady_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TextureVirtualDevice_OnFrameAccessHandlerReady_Params.prototype.initDefaults_ = function() {
    this.frameAccessHandler = new video_frame_handler$.VideoFrameAccessHandlerPtr();
  };
  TextureVirtualDevice_OnFrameAccessHandlerReady_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TextureVirtualDevice_OnFrameAccessHandlerReady_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TextureVirtualDevice_OnFrameAccessHandlerReady_Params.frameAccessHandler
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TextureVirtualDevice_OnFrameAccessHandlerReady_Params.encodedSize = codec.kStructHeaderSize + 8;

  TextureVirtualDevice_OnFrameAccessHandlerReady_Params.decode = function(decoder) {
    var packed;
    var val = new TextureVirtualDevice_OnFrameAccessHandlerReady_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameAccessHandler =
        decoder.decodeStruct(new codec.Interface(video_frame_handler$.VideoFrameAccessHandlerPtr));
    return val;
  };

  TextureVirtualDevice_OnFrameAccessHandlerReady_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TextureVirtualDevice_OnFrameAccessHandlerReady_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(video_frame_handler$.VideoFrameAccessHandlerPtr), val.frameAccessHandler);
  };
  function TextureVirtualDevice_OnFrameReadyInBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TextureVirtualDevice_OnFrameReadyInBuffer_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
    this.frameInfo = null;
  };
  TextureVirtualDevice_OnFrameReadyInBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TextureVirtualDevice_OnFrameReadyInBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate TextureVirtualDevice_OnFrameReadyInBuffer_Params.frameInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, video_capture_buffer$.VideoFrameInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TextureVirtualDevice_OnFrameReadyInBuffer_Params.encodedSize = codec.kStructHeaderSize + 16;

  TextureVirtualDevice_OnFrameReadyInBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new TextureVirtualDevice_OnFrameReadyInBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.frameInfo =
        decoder.decodeStructPointer(video_capture_buffer$.VideoFrameInfo);
    return val;
  };

  TextureVirtualDevice_OnFrameReadyInBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TextureVirtualDevice_OnFrameReadyInBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(video_capture_buffer$.VideoFrameInfo, val.frameInfo);
  };
  function TextureVirtualDevice_OnBufferRetired_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TextureVirtualDevice_OnBufferRetired_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
  };
  TextureVirtualDevice_OnBufferRetired_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TextureVirtualDevice_OnBufferRetired_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TextureVirtualDevice_OnBufferRetired_Params.encodedSize = codec.kStructHeaderSize + 8;

  TextureVirtualDevice_OnBufferRetired_Params.decode = function(decoder) {
    var packed;
    var val = new TextureVirtualDevice_OnBufferRetired_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TextureVirtualDevice_OnBufferRetired_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TextureVirtualDevice_OnBufferRetired_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
    this.gmbHandle = null;
  };
  GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params.gmbHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, buffer_types$.GpuMemoryBufferHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params.encodedSize = codec.kStructHeaderSize + 16;

  GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params.decode = function(decoder) {
    var packed;
    var val = new GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.gmbHandle =
        decoder.decodeStructPointer(buffer_types$.GpuMemoryBufferHandle);
    return val;
  };

  GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(buffer_types$.GpuMemoryBufferHandle, val.gmbHandle);
  };
  function GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params.prototype.initDefaults_ = function() {
    this.frameAccessHandler = new video_frame_handler$.VideoFrameAccessHandlerPtr();
  };
  GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params.frameAccessHandler
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params.decode = function(decoder) {
    var packed;
    var val = new GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameAccessHandler =
        decoder.decodeStruct(new codec.Interface(video_frame_handler$.VideoFrameAccessHandlerPtr));
    return val;
  };

  GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(video_frame_handler$.VideoFrameAccessHandlerPtr), val.frameAccessHandler);
  };
  function GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
    this.frameInfo = null;
  };
  GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params.frameInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, video_capture_buffer$.VideoFrameInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params.encodedSize = codec.kStructHeaderSize + 16;

  GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.frameInfo =
        decoder.decodeStructPointer(video_capture_buffer$.VideoFrameInfo);
    return val;
  };

  GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(video_capture_buffer$.VideoFrameInfo, val.frameInfo);
  };
  function GpuMemoryBufferVirtualDevice_OnBufferRetired_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuMemoryBufferVirtualDevice_OnBufferRetired_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
  };
  GpuMemoryBufferVirtualDevice_OnBufferRetired_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuMemoryBufferVirtualDevice_OnBufferRetired_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuMemoryBufferVirtualDevice_OnBufferRetired_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuMemoryBufferVirtualDevice_OnBufferRetired_Params.decode = function(decoder) {
    var packed;
    var val = new GpuMemoryBufferVirtualDevice_OnBufferRetired_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuMemoryBufferVirtualDevice_OnBufferRetired_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuMemoryBufferVirtualDevice_OnBufferRetired_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kSharedMemoryVirtualDevice_RequestFrameBuffer_Name = 1626706498;
  var kSharedMemoryVirtualDevice_OnFrameReadyInBuffer_Name = 1331863462;

  function SharedMemoryVirtualDevicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(SharedMemoryVirtualDevice,
                                                   handleOrPtrInfo);
  }

  function SharedMemoryVirtualDeviceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        SharedMemoryVirtualDevice, associatedInterfacePtrInfo);
  }

  SharedMemoryVirtualDeviceAssociatedPtr.prototype =
      Object.create(SharedMemoryVirtualDevicePtr.prototype);
  SharedMemoryVirtualDeviceAssociatedPtr.prototype.constructor =
      SharedMemoryVirtualDeviceAssociatedPtr;

  function SharedMemoryVirtualDeviceProxy(receiver) {
    this.receiver_ = receiver;
  }
  SharedMemoryVirtualDevicePtr.prototype.requestFrameBuffer = function() {
    return SharedMemoryVirtualDeviceProxy.prototype.requestFrameBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  SharedMemoryVirtualDeviceProxy.prototype.requestFrameBuffer = function(dimension, pixelFormat, strides) {
    var params_ = new SharedMemoryVirtualDevice_RequestFrameBuffer_Params();
    params_.dimension = dimension;
    params_.pixelFormat = pixelFormat;
    params_.strides = strides;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kSharedMemoryVirtualDevice_RequestFrameBuffer_Name,
          codec.align(SharedMemoryVirtualDevice_RequestFrameBuffer_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(SharedMemoryVirtualDevice_RequestFrameBuffer_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  SharedMemoryVirtualDevicePtr.prototype.onFrameReadyInBuffer = function() {
    return SharedMemoryVirtualDeviceProxy.prototype.onFrameReadyInBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  SharedMemoryVirtualDeviceProxy.prototype.onFrameReadyInBuffer = function(bufferId, frameInfo) {
    var params_ = new SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params();
    params_.bufferId = bufferId;
    params_.frameInfo = frameInfo;
    var builder = new codec.MessageV0Builder(
        kSharedMemoryVirtualDevice_OnFrameReadyInBuffer_Name,
        codec.align(SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params.encodedSize));
    builder.encodeStruct(SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function SharedMemoryVirtualDeviceStub(delegate) {
    this.delegate_ = delegate;
  }
  SharedMemoryVirtualDeviceStub.prototype.requestFrameBuffer = function(dimension, pixelFormat, strides) {
    return this.delegate_ && this.delegate_.requestFrameBuffer && this.delegate_.requestFrameBuffer(dimension, pixelFormat, strides);
  }
  SharedMemoryVirtualDeviceStub.prototype.onFrameReadyInBuffer = function(bufferId, frameInfo) {
    return this.delegate_ && this.delegate_.onFrameReadyInBuffer && this.delegate_.onFrameReadyInBuffer(bufferId, frameInfo);
  }

  SharedMemoryVirtualDeviceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSharedMemoryVirtualDevice_OnFrameReadyInBuffer_Name:
      var params = reader.decodeStruct(SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params);
      this.onFrameReadyInBuffer(params.bufferId, params.frameInfo);
      return true;
    default:
      return false;
    }
  };

  SharedMemoryVirtualDeviceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kSharedMemoryVirtualDevice_RequestFrameBuffer_Name:
      var params = reader.decodeStruct(SharedMemoryVirtualDevice_RequestFrameBuffer_Params);
      this.requestFrameBuffer(params.dimension, params.pixelFormat, params.strides).then(function(response) {
        var responseParams =
            new SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams();
        responseParams.bufferId = response.bufferId;
        var builder = new codec.MessageV1Builder(
            kSharedMemoryVirtualDevice_RequestFrameBuffer_Name,
            codec.align(SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateSharedMemoryVirtualDeviceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kSharedMemoryVirtualDevice_RequestFrameBuffer_Name:
        if (message.expectsResponse())
          paramsClass = SharedMemoryVirtualDevice_RequestFrameBuffer_Params;
      break;
      case kSharedMemoryVirtualDevice_OnFrameReadyInBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = SharedMemoryVirtualDevice_OnFrameReadyInBuffer_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateSharedMemoryVirtualDeviceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kSharedMemoryVirtualDevice_RequestFrameBuffer_Name:
        if (message.isResponse())
          paramsClass = SharedMemoryVirtualDevice_RequestFrameBuffer_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var SharedMemoryVirtualDevice = {
    name: 'video_capture.mojom.SharedMemoryVirtualDevice',
    kVersion: 0,
    ptrClass: SharedMemoryVirtualDevicePtr,
    proxyClass: SharedMemoryVirtualDeviceProxy,
    stubClass: SharedMemoryVirtualDeviceStub,
    validateRequest: validateSharedMemoryVirtualDeviceRequest,
    validateResponse: validateSharedMemoryVirtualDeviceResponse,
  };
  SharedMemoryVirtualDeviceStub.prototype.validator = validateSharedMemoryVirtualDeviceRequest;
  SharedMemoryVirtualDeviceProxy.prototype.validator = validateSharedMemoryVirtualDeviceResponse;
  var kTextureVirtualDevice_OnNewMailboxHolderBufferHandle_Name = 552477539;
  var kTextureVirtualDevice_OnFrameAccessHandlerReady_Name = 403551006;
  var kTextureVirtualDevice_OnFrameReadyInBuffer_Name = 867732518;
  var kTextureVirtualDevice_OnBufferRetired_Name = 1489248454;

  function TextureVirtualDevicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TextureVirtualDevice,
                                                   handleOrPtrInfo);
  }

  function TextureVirtualDeviceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TextureVirtualDevice, associatedInterfacePtrInfo);
  }

  TextureVirtualDeviceAssociatedPtr.prototype =
      Object.create(TextureVirtualDevicePtr.prototype);
  TextureVirtualDeviceAssociatedPtr.prototype.constructor =
      TextureVirtualDeviceAssociatedPtr;

  function TextureVirtualDeviceProxy(receiver) {
    this.receiver_ = receiver;
  }
  TextureVirtualDevicePtr.prototype.onNewMailboxHolderBufferHandle = function() {
    return TextureVirtualDeviceProxy.prototype.onNewMailboxHolderBufferHandle
        .apply(this.ptr.getProxy(), arguments);
  };

  TextureVirtualDeviceProxy.prototype.onNewMailboxHolderBufferHandle = function(bufferId, mailboxHandles) {
    var params_ = new TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params();
    params_.bufferId = bufferId;
    params_.mailboxHandles = mailboxHandles;
    var builder = new codec.MessageV0Builder(
        kTextureVirtualDevice_OnNewMailboxHolderBufferHandle_Name,
        codec.align(TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params.encodedSize));
    builder.encodeStruct(TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TextureVirtualDevicePtr.prototype.onFrameAccessHandlerReady = function() {
    return TextureVirtualDeviceProxy.prototype.onFrameAccessHandlerReady
        .apply(this.ptr.getProxy(), arguments);
  };

  TextureVirtualDeviceProxy.prototype.onFrameAccessHandlerReady = function(frameAccessHandler) {
    var params_ = new TextureVirtualDevice_OnFrameAccessHandlerReady_Params();
    params_.frameAccessHandler = frameAccessHandler;
    var builder = new codec.MessageV0Builder(
        kTextureVirtualDevice_OnFrameAccessHandlerReady_Name,
        codec.align(TextureVirtualDevice_OnFrameAccessHandlerReady_Params.encodedSize));
    builder.encodeStruct(TextureVirtualDevice_OnFrameAccessHandlerReady_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TextureVirtualDevicePtr.prototype.onFrameReadyInBuffer = function() {
    return TextureVirtualDeviceProxy.prototype.onFrameReadyInBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  TextureVirtualDeviceProxy.prototype.onFrameReadyInBuffer = function(bufferId, frameInfo) {
    var params_ = new TextureVirtualDevice_OnFrameReadyInBuffer_Params();
    params_.bufferId = bufferId;
    params_.frameInfo = frameInfo;
    var builder = new codec.MessageV0Builder(
        kTextureVirtualDevice_OnFrameReadyInBuffer_Name,
        codec.align(TextureVirtualDevice_OnFrameReadyInBuffer_Params.encodedSize));
    builder.encodeStruct(TextureVirtualDevice_OnFrameReadyInBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TextureVirtualDevicePtr.prototype.onBufferRetired = function() {
    return TextureVirtualDeviceProxy.prototype.onBufferRetired
        .apply(this.ptr.getProxy(), arguments);
  };

  TextureVirtualDeviceProxy.prototype.onBufferRetired = function(bufferId) {
    var params_ = new TextureVirtualDevice_OnBufferRetired_Params();
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kTextureVirtualDevice_OnBufferRetired_Name,
        codec.align(TextureVirtualDevice_OnBufferRetired_Params.encodedSize));
    builder.encodeStruct(TextureVirtualDevice_OnBufferRetired_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TextureVirtualDeviceStub(delegate) {
    this.delegate_ = delegate;
  }
  TextureVirtualDeviceStub.prototype.onNewMailboxHolderBufferHandle = function(bufferId, mailboxHandles) {
    return this.delegate_ && this.delegate_.onNewMailboxHolderBufferHandle && this.delegate_.onNewMailboxHolderBufferHandle(bufferId, mailboxHandles);
  }
  TextureVirtualDeviceStub.prototype.onFrameAccessHandlerReady = function(frameAccessHandler) {
    return this.delegate_ && this.delegate_.onFrameAccessHandlerReady && this.delegate_.onFrameAccessHandlerReady(frameAccessHandler);
  }
  TextureVirtualDeviceStub.prototype.onFrameReadyInBuffer = function(bufferId, frameInfo) {
    return this.delegate_ && this.delegate_.onFrameReadyInBuffer && this.delegate_.onFrameReadyInBuffer(bufferId, frameInfo);
  }
  TextureVirtualDeviceStub.prototype.onBufferRetired = function(bufferId) {
    return this.delegate_ && this.delegate_.onBufferRetired && this.delegate_.onBufferRetired(bufferId);
  }

  TextureVirtualDeviceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTextureVirtualDevice_OnNewMailboxHolderBufferHandle_Name:
      var params = reader.decodeStruct(TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params);
      this.onNewMailboxHolderBufferHandle(params.bufferId, params.mailboxHandles);
      return true;
    case kTextureVirtualDevice_OnFrameAccessHandlerReady_Name:
      var params = reader.decodeStruct(TextureVirtualDevice_OnFrameAccessHandlerReady_Params);
      this.onFrameAccessHandlerReady(params.frameAccessHandler);
      return true;
    case kTextureVirtualDevice_OnFrameReadyInBuffer_Name:
      var params = reader.decodeStruct(TextureVirtualDevice_OnFrameReadyInBuffer_Params);
      this.onFrameReadyInBuffer(params.bufferId, params.frameInfo);
      return true;
    case kTextureVirtualDevice_OnBufferRetired_Name:
      var params = reader.decodeStruct(TextureVirtualDevice_OnBufferRetired_Params);
      this.onBufferRetired(params.bufferId);
      return true;
    default:
      return false;
    }
  };

  TextureVirtualDeviceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTextureVirtualDeviceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTextureVirtualDevice_OnNewMailboxHolderBufferHandle_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TextureVirtualDevice_OnNewMailboxHolderBufferHandle_Params;
      break;
      case kTextureVirtualDevice_OnFrameAccessHandlerReady_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TextureVirtualDevice_OnFrameAccessHandlerReady_Params;
      break;
      case kTextureVirtualDevice_OnFrameReadyInBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TextureVirtualDevice_OnFrameReadyInBuffer_Params;
      break;
      case kTextureVirtualDevice_OnBufferRetired_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TextureVirtualDevice_OnBufferRetired_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTextureVirtualDeviceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var TextureVirtualDevice = {
    name: 'video_capture.mojom.TextureVirtualDevice',
    kVersion: 0,
    ptrClass: TextureVirtualDevicePtr,
    proxyClass: TextureVirtualDeviceProxy,
    stubClass: TextureVirtualDeviceStub,
    validateRequest: validateTextureVirtualDeviceRequest,
    validateResponse: null,
  };
  TextureVirtualDeviceStub.prototype.validator = validateTextureVirtualDeviceRequest;
  TextureVirtualDeviceProxy.prototype.validator = null;
  var kGpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Name = 265958849;
  var kGpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Name = 1440309623;
  var kGpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Name = 506267467;
  var kGpuMemoryBufferVirtualDevice_OnBufferRetired_Name = 1229717920;

  function GpuMemoryBufferVirtualDevicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(GpuMemoryBufferVirtualDevice,
                                                   handleOrPtrInfo);
  }

  function GpuMemoryBufferVirtualDeviceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        GpuMemoryBufferVirtualDevice, associatedInterfacePtrInfo);
  }

  GpuMemoryBufferVirtualDeviceAssociatedPtr.prototype =
      Object.create(GpuMemoryBufferVirtualDevicePtr.prototype);
  GpuMemoryBufferVirtualDeviceAssociatedPtr.prototype.constructor =
      GpuMemoryBufferVirtualDeviceAssociatedPtr;

  function GpuMemoryBufferVirtualDeviceProxy(receiver) {
    this.receiver_ = receiver;
  }
  GpuMemoryBufferVirtualDevicePtr.prototype.onNewGpuMemoryBufferHandle = function() {
    return GpuMemoryBufferVirtualDeviceProxy.prototype.onNewGpuMemoryBufferHandle
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuMemoryBufferVirtualDeviceProxy.prototype.onNewGpuMemoryBufferHandle = function(bufferId, gmbHandle) {
    var params_ = new GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params();
    params_.bufferId = bufferId;
    params_.gmbHandle = gmbHandle;
    var builder = new codec.MessageV0Builder(
        kGpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Name,
        codec.align(GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params.encodedSize));
    builder.encodeStruct(GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuMemoryBufferVirtualDevicePtr.prototype.onFrameAccessHandlerReady = function() {
    return GpuMemoryBufferVirtualDeviceProxy.prototype.onFrameAccessHandlerReady
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuMemoryBufferVirtualDeviceProxy.prototype.onFrameAccessHandlerReady = function(frameAccessHandler) {
    var params_ = new GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params();
    params_.frameAccessHandler = frameAccessHandler;
    var builder = new codec.MessageV0Builder(
        kGpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Name,
        codec.align(GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params.encodedSize));
    builder.encodeStruct(GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuMemoryBufferVirtualDevicePtr.prototype.onFrameReadyInBuffer = function() {
    return GpuMemoryBufferVirtualDeviceProxy.prototype.onFrameReadyInBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuMemoryBufferVirtualDeviceProxy.prototype.onFrameReadyInBuffer = function(bufferId, frameInfo) {
    var params_ = new GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params();
    params_.bufferId = bufferId;
    params_.frameInfo = frameInfo;
    var builder = new codec.MessageV0Builder(
        kGpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Name,
        codec.align(GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params.encodedSize));
    builder.encodeStruct(GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuMemoryBufferVirtualDevicePtr.prototype.onBufferRetired = function() {
    return GpuMemoryBufferVirtualDeviceProxy.prototype.onBufferRetired
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuMemoryBufferVirtualDeviceProxy.prototype.onBufferRetired = function(bufferId) {
    var params_ = new GpuMemoryBufferVirtualDevice_OnBufferRetired_Params();
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kGpuMemoryBufferVirtualDevice_OnBufferRetired_Name,
        codec.align(GpuMemoryBufferVirtualDevice_OnBufferRetired_Params.encodedSize));
    builder.encodeStruct(GpuMemoryBufferVirtualDevice_OnBufferRetired_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function GpuMemoryBufferVirtualDeviceStub(delegate) {
    this.delegate_ = delegate;
  }
  GpuMemoryBufferVirtualDeviceStub.prototype.onNewGpuMemoryBufferHandle = function(bufferId, gmbHandle) {
    return this.delegate_ && this.delegate_.onNewGpuMemoryBufferHandle && this.delegate_.onNewGpuMemoryBufferHandle(bufferId, gmbHandle);
  }
  GpuMemoryBufferVirtualDeviceStub.prototype.onFrameAccessHandlerReady = function(frameAccessHandler) {
    return this.delegate_ && this.delegate_.onFrameAccessHandlerReady && this.delegate_.onFrameAccessHandlerReady(frameAccessHandler);
  }
  GpuMemoryBufferVirtualDeviceStub.prototype.onFrameReadyInBuffer = function(bufferId, frameInfo) {
    return this.delegate_ && this.delegate_.onFrameReadyInBuffer && this.delegate_.onFrameReadyInBuffer(bufferId, frameInfo);
  }
  GpuMemoryBufferVirtualDeviceStub.prototype.onBufferRetired = function(bufferId) {
    return this.delegate_ && this.delegate_.onBufferRetired && this.delegate_.onBufferRetired(bufferId);
  }

  GpuMemoryBufferVirtualDeviceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Name:
      var params = reader.decodeStruct(GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params);
      this.onNewGpuMemoryBufferHandle(params.bufferId, params.gmbHandle);
      return true;
    case kGpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Name:
      var params = reader.decodeStruct(GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params);
      this.onFrameAccessHandlerReady(params.frameAccessHandler);
      return true;
    case kGpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Name:
      var params = reader.decodeStruct(GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params);
      this.onFrameReadyInBuffer(params.bufferId, params.frameInfo);
      return true;
    case kGpuMemoryBufferVirtualDevice_OnBufferRetired_Name:
      var params = reader.decodeStruct(GpuMemoryBufferVirtualDevice_OnBufferRetired_Params);
      this.onBufferRetired(params.bufferId);
      return true;
    default:
      return false;
    }
  };

  GpuMemoryBufferVirtualDeviceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateGpuMemoryBufferVirtualDeviceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kGpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuMemoryBufferVirtualDevice_OnNewGpuMemoryBufferHandle_Params;
      break;
      case kGpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuMemoryBufferVirtualDevice_OnFrameAccessHandlerReady_Params;
      break;
      case kGpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuMemoryBufferVirtualDevice_OnFrameReadyInBuffer_Params;
      break;
      case kGpuMemoryBufferVirtualDevice_OnBufferRetired_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuMemoryBufferVirtualDevice_OnBufferRetired_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateGpuMemoryBufferVirtualDeviceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var GpuMemoryBufferVirtualDevice = {
    name: 'video_capture.mojom.GpuMemoryBufferVirtualDevice',
    kVersion: 0,
    ptrClass: GpuMemoryBufferVirtualDevicePtr,
    proxyClass: GpuMemoryBufferVirtualDeviceProxy,
    stubClass: GpuMemoryBufferVirtualDeviceStub,
    validateRequest: validateGpuMemoryBufferVirtualDeviceRequest,
    validateResponse: null,
  };
  GpuMemoryBufferVirtualDeviceStub.prototype.validator = validateGpuMemoryBufferVirtualDeviceRequest;
  GpuMemoryBufferVirtualDeviceProxy.prototype.validator = null;
  exports.SharedMemoryVirtualDevice = SharedMemoryVirtualDevice;
  exports.SharedMemoryVirtualDevicePtr = SharedMemoryVirtualDevicePtr;
  exports.SharedMemoryVirtualDeviceAssociatedPtr = SharedMemoryVirtualDeviceAssociatedPtr;
  exports.TextureVirtualDevice = TextureVirtualDevice;
  exports.TextureVirtualDevicePtr = TextureVirtualDevicePtr;
  exports.TextureVirtualDeviceAssociatedPtr = TextureVirtualDeviceAssociatedPtr;
  exports.GpuMemoryBufferVirtualDevice = GpuMemoryBufferVirtualDevice;
  exports.GpuMemoryBufferVirtualDevicePtr = GpuMemoryBufferVirtualDevicePtr;
  exports.GpuMemoryBufferVirtualDeviceAssociatedPtr = GpuMemoryBufferVirtualDeviceAssociatedPtr;
})();