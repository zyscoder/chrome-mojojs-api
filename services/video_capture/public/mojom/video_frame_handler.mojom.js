// services/video_capture/public/mojom/video_frame_handler.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/video_capture/public/mojom/video_frame_handler.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('videoCapture.mojom');
  var video_capture_buffer$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/capture/mojom/video_capture_buffer.mojom', '../../../../media/capture/mojom/video_capture_buffer.mojom.js');
  }
  var video_capture_types$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/capture/mojom/video_capture_types.mojom', '../../../../media/capture/mojom/video_capture_types.mojom.js');
  }



  function ReadyFrameInBuffer(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ReadyFrameInBuffer.prototype.initDefaults_ = function() {
    this.bufferId = 0;
    this.frameFeedbackId = 0;
    this.frameInfo = null;
  };
  ReadyFrameInBuffer.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ReadyFrameInBuffer.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate ReadyFrameInBuffer.frameInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, video_capture_buffer$.VideoFrameInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ReadyFrameInBuffer.encodedSize = codec.kStructHeaderSize + 16;

  ReadyFrameInBuffer.decode = function(decoder) {
    var packed;
    var val = new ReadyFrameInBuffer();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    val.frameFeedbackId =
        decoder.decodeStruct(codec.Int32);
    val.frameInfo =
        decoder.decodeStructPointer(video_capture_buffer$.VideoFrameInfo);
    return val;
  };

  ReadyFrameInBuffer.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ReadyFrameInBuffer.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.encodeStruct(codec.Int32, val.frameFeedbackId);
    encoder.encodeStructPointer(video_capture_buffer$.VideoFrameInfo, val.frameInfo);
  };
  function VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
  };
  VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VideoFrameHandler_OnCaptureConfigurationChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnCaptureConfigurationChanged_Params.prototype.initDefaults_ = function() {
  };
  VideoFrameHandler_OnCaptureConfigurationChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnCaptureConfigurationChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnCaptureConfigurationChanged_Params.encodedSize = codec.kStructHeaderSize + 0;

  VideoFrameHandler_OnCaptureConfigurationChanged_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnCaptureConfigurationChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  VideoFrameHandler_OnCaptureConfigurationChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnCaptureConfigurationChanged_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function VideoFrameHandler_OnNewBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnNewBuffer_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
    this.bufferHandle = null;
  };
  VideoFrameHandler_OnNewBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnNewBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate VideoFrameHandler_OnNewBuffer_Params.bufferHandle
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 8, video_capture_buffer$.VideoBufferHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnNewBuffer_Params.encodedSize = codec.kStructHeaderSize + 24;

  VideoFrameHandler_OnNewBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnNewBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.bufferHandle =
        decoder.decodeStruct(video_capture_buffer$.VideoBufferHandle);
    return val;
  };

  VideoFrameHandler_OnNewBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnNewBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(video_capture_buffer$.VideoBufferHandle, val.bufferHandle);
  };
  function VideoFrameHandler_OnFrameAccessHandlerReady_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnFrameAccessHandlerReady_Params.prototype.initDefaults_ = function() {
    this.frameAccessHandler = new VideoFrameAccessHandlerPtr();
  };
  VideoFrameHandler_OnFrameAccessHandlerReady_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnFrameAccessHandlerReady_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoFrameHandler_OnFrameAccessHandlerReady_Params.frameAccessHandler
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnFrameAccessHandlerReady_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoFrameHandler_OnFrameAccessHandlerReady_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnFrameAccessHandlerReady_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameAccessHandler =
        decoder.decodeStruct(new codec.Interface(VideoFrameAccessHandlerPtr));
    return val;
  };

  VideoFrameHandler_OnFrameAccessHandlerReady_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnFrameAccessHandlerReady_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(VideoFrameAccessHandlerPtr), val.frameAccessHandler);
  };
  function VideoFrameHandler_OnFrameReadyInBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnFrameReadyInBuffer_Params.prototype.initDefaults_ = function() {
    this.buffer = null;
  };
  VideoFrameHandler_OnFrameReadyInBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnFrameReadyInBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoFrameHandler_OnFrameReadyInBuffer_Params.buffer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ReadyFrameInBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnFrameReadyInBuffer_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoFrameHandler_OnFrameReadyInBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnFrameReadyInBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.buffer =
        decoder.decodeStructPointer(ReadyFrameInBuffer);
    return val;
  };

  VideoFrameHandler_OnFrameReadyInBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnFrameReadyInBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ReadyFrameInBuffer, val.buffer);
  };
  function VideoFrameHandler_OnBufferRetired_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnBufferRetired_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
  };
  VideoFrameHandler_OnBufferRetired_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnBufferRetired_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnBufferRetired_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoFrameHandler_OnBufferRetired_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnBufferRetired_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VideoFrameHandler_OnBufferRetired_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnBufferRetired_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VideoFrameHandler_OnError_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnError_Params.prototype.initDefaults_ = function() {
    this.error = 0;
  };
  VideoFrameHandler_OnError_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnError_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoFrameHandler_OnError_Params.error
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, video_capture_types$.VideoCaptureError);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnError_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoFrameHandler_OnError_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnError_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.error =
        decoder.decodeStruct(new codec.Enum(video_capture_types$.VideoCaptureError));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VideoFrameHandler_OnError_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnError_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.error);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VideoFrameHandler_OnFrameDropped_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnFrameDropped_Params.prototype.initDefaults_ = function() {
    this.reason = 0;
  };
  VideoFrameHandler_OnFrameDropped_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnFrameDropped_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoFrameHandler_OnFrameDropped_Params.reason
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, video_capture_types$.VideoCaptureFrameDropReason);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnFrameDropped_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoFrameHandler_OnFrameDropped_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnFrameDropped_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.reason =
        decoder.decodeStruct(new codec.Enum(video_capture_types$.VideoCaptureFrameDropReason));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VideoFrameHandler_OnFrameDropped_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnFrameDropped_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.reason);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VideoFrameHandler_OnNewCropVersion_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnNewCropVersion_Params.prototype.initDefaults_ = function() {
    this.cropVersion = 0;
  };
  VideoFrameHandler_OnNewCropVersion_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnNewCropVersion_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnNewCropVersion_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoFrameHandler_OnNewCropVersion_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnNewCropVersion_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cropVersion =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  VideoFrameHandler_OnNewCropVersion_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnNewCropVersion_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.cropVersion);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params.prototype.initDefaults_ = function() {
  };
  VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params.encodedSize = codec.kStructHeaderSize + 0;

  VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function VideoFrameHandler_OnLog_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnLog_Params.prototype.initDefaults_ = function() {
    this.message = null;
  };
  VideoFrameHandler_OnLog_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnLog_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoFrameHandler_OnLog_Params.message
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnLog_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoFrameHandler_OnLog_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnLog_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.message =
        decoder.decodeStruct(codec.String);
    return val;
  };

  VideoFrameHandler_OnLog_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnLog_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.message);
  };
  function VideoFrameHandler_OnStarted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnStarted_Params.prototype.initDefaults_ = function() {
  };
  VideoFrameHandler_OnStarted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnStarted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnStarted_Params.encodedSize = codec.kStructHeaderSize + 0;

  VideoFrameHandler_OnStarted_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnStarted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  VideoFrameHandler_OnStarted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnStarted_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function VideoFrameHandler_OnStartedUsingGpuDecode_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnStartedUsingGpuDecode_Params.prototype.initDefaults_ = function() {
  };
  VideoFrameHandler_OnStartedUsingGpuDecode_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnStartedUsingGpuDecode_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnStartedUsingGpuDecode_Params.encodedSize = codec.kStructHeaderSize + 0;

  VideoFrameHandler_OnStartedUsingGpuDecode_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnStartedUsingGpuDecode_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  VideoFrameHandler_OnStartedUsingGpuDecode_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnStartedUsingGpuDecode_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function VideoFrameHandler_OnStopped_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoFrameHandler_OnStopped_Params.prototype.initDefaults_ = function() {
  };
  VideoFrameHandler_OnStopped_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoFrameHandler_OnStopped_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoFrameHandler_OnStopped_Params.encodedSize = codec.kStructHeaderSize + 0;

  VideoFrameHandler_OnStopped_Params.decode = function(decoder) {
    var packed;
    var val = new VideoFrameHandler_OnStopped_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  VideoFrameHandler_OnStopped_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoFrameHandler_OnStopped_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kVideoFrameAccessHandler_OnFinishedConsumingBuffer_Name = 951675054;

  function VideoFrameAccessHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(VideoFrameAccessHandler,
                                                   handleOrPtrInfo);
  }

  function VideoFrameAccessHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        VideoFrameAccessHandler, associatedInterfacePtrInfo);
  }

  VideoFrameAccessHandlerAssociatedPtr.prototype =
      Object.create(VideoFrameAccessHandlerPtr.prototype);
  VideoFrameAccessHandlerAssociatedPtr.prototype.constructor =
      VideoFrameAccessHandlerAssociatedPtr;

  function VideoFrameAccessHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  VideoFrameAccessHandlerPtr.prototype.onFinishedConsumingBuffer = function() {
    return VideoFrameAccessHandlerProxy.prototype.onFinishedConsumingBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameAccessHandlerProxy.prototype.onFinishedConsumingBuffer = function(bufferId) {
    var params_ = new VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params();
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kVideoFrameAccessHandler_OnFinishedConsumingBuffer_Name,
        codec.align(VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params.encodedSize));
    builder.encodeStruct(VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function VideoFrameAccessHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  VideoFrameAccessHandlerStub.prototype.onFinishedConsumingBuffer = function(bufferId) {
    return this.delegate_ && this.delegate_.onFinishedConsumingBuffer && this.delegate_.onFinishedConsumingBuffer(bufferId);
  }

  VideoFrameAccessHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVideoFrameAccessHandler_OnFinishedConsumingBuffer_Name:
      var params = reader.decodeStruct(VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params);
      this.onFinishedConsumingBuffer(params.bufferId);
      return true;
    default:
      return false;
    }
  };

  VideoFrameAccessHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateVideoFrameAccessHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kVideoFrameAccessHandler_OnFinishedConsumingBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameAccessHandler_OnFinishedConsumingBuffer_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateVideoFrameAccessHandlerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var VideoFrameAccessHandler = {
    name: 'video_capture.mojom.VideoFrameAccessHandler',
    kVersion: 0,
    ptrClass: VideoFrameAccessHandlerPtr,
    proxyClass: VideoFrameAccessHandlerProxy,
    stubClass: VideoFrameAccessHandlerStub,
    validateRequest: validateVideoFrameAccessHandlerRequest,
    validateResponse: null,
  };
  VideoFrameAccessHandlerStub.prototype.validator = validateVideoFrameAccessHandlerRequest;
  VideoFrameAccessHandlerProxy.prototype.validator = null;
  var kVideoFrameHandler_OnCaptureConfigurationChanged_Name = 1301900912;
  var kVideoFrameHandler_OnNewBuffer_Name = 605524008;
  var kVideoFrameHandler_OnFrameAccessHandlerReady_Name = 345999448;
  var kVideoFrameHandler_OnFrameReadyInBuffer_Name = 1952064807;
  var kVideoFrameHandler_OnBufferRetired_Name = 1779707142;
  var kVideoFrameHandler_OnError_Name = 165781983;
  var kVideoFrameHandler_OnFrameDropped_Name = 1461319311;
  var kVideoFrameHandler_OnNewCropVersion_Name = 639717044;
  var kVideoFrameHandler_OnFrameWithEmptyRegionCapture_Name = 1900874954;
  var kVideoFrameHandler_OnLog_Name = 156070889;
  var kVideoFrameHandler_OnStarted_Name = 232726902;
  var kVideoFrameHandler_OnStartedUsingGpuDecode_Name = 981705367;
  var kVideoFrameHandler_OnStopped_Name = 217145469;

  function VideoFrameHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(VideoFrameHandler,
                                                   handleOrPtrInfo);
  }

  function VideoFrameHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        VideoFrameHandler, associatedInterfacePtrInfo);
  }

  VideoFrameHandlerAssociatedPtr.prototype =
      Object.create(VideoFrameHandlerPtr.prototype);
  VideoFrameHandlerAssociatedPtr.prototype.constructor =
      VideoFrameHandlerAssociatedPtr;

  function VideoFrameHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  VideoFrameHandlerPtr.prototype.onCaptureConfigurationChanged = function() {
    return VideoFrameHandlerProxy.prototype.onCaptureConfigurationChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onCaptureConfigurationChanged = function() {
    var params_ = new VideoFrameHandler_OnCaptureConfigurationChanged_Params();
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnCaptureConfigurationChanged_Name,
        codec.align(VideoFrameHandler_OnCaptureConfigurationChanged_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnCaptureConfigurationChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onNewBuffer = function() {
    return VideoFrameHandlerProxy.prototype.onNewBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onNewBuffer = function(bufferId, bufferHandle) {
    var params_ = new VideoFrameHandler_OnNewBuffer_Params();
    params_.bufferId = bufferId;
    params_.bufferHandle = bufferHandle;
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnNewBuffer_Name,
        codec.align(VideoFrameHandler_OnNewBuffer_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnNewBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onFrameAccessHandlerReady = function() {
    return VideoFrameHandlerProxy.prototype.onFrameAccessHandlerReady
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onFrameAccessHandlerReady = function(frameAccessHandler) {
    var params_ = new VideoFrameHandler_OnFrameAccessHandlerReady_Params();
    params_.frameAccessHandler = frameAccessHandler;
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnFrameAccessHandlerReady_Name,
        codec.align(VideoFrameHandler_OnFrameAccessHandlerReady_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnFrameAccessHandlerReady_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onFrameReadyInBuffer = function() {
    return VideoFrameHandlerProxy.prototype.onFrameReadyInBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onFrameReadyInBuffer = function(buffer) {
    var params_ = new VideoFrameHandler_OnFrameReadyInBuffer_Params();
    params_.buffer = buffer;
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnFrameReadyInBuffer_Name,
        codec.align(VideoFrameHandler_OnFrameReadyInBuffer_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnFrameReadyInBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onBufferRetired = function() {
    return VideoFrameHandlerProxy.prototype.onBufferRetired
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onBufferRetired = function(bufferId) {
    var params_ = new VideoFrameHandler_OnBufferRetired_Params();
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnBufferRetired_Name,
        codec.align(VideoFrameHandler_OnBufferRetired_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnBufferRetired_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onError = function() {
    return VideoFrameHandlerProxy.prototype.onError
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onError = function(error) {
    var params_ = new VideoFrameHandler_OnError_Params();
    params_.error = error;
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnError_Name,
        codec.align(VideoFrameHandler_OnError_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnError_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onFrameDropped = function() {
    return VideoFrameHandlerProxy.prototype.onFrameDropped
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onFrameDropped = function(reason) {
    var params_ = new VideoFrameHandler_OnFrameDropped_Params();
    params_.reason = reason;
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnFrameDropped_Name,
        codec.align(VideoFrameHandler_OnFrameDropped_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnFrameDropped_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onNewCropVersion = function() {
    return VideoFrameHandlerProxy.prototype.onNewCropVersion
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onNewCropVersion = function(cropVersion) {
    var params_ = new VideoFrameHandler_OnNewCropVersion_Params();
    params_.cropVersion = cropVersion;
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnNewCropVersion_Name,
        codec.align(VideoFrameHandler_OnNewCropVersion_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnNewCropVersion_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onFrameWithEmptyRegionCapture = function() {
    return VideoFrameHandlerProxy.prototype.onFrameWithEmptyRegionCapture
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onFrameWithEmptyRegionCapture = function() {
    var params_ = new VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params();
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnFrameWithEmptyRegionCapture_Name,
        codec.align(VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onLog = function() {
    return VideoFrameHandlerProxy.prototype.onLog
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onLog = function(message) {
    var params_ = new VideoFrameHandler_OnLog_Params();
    params_.message = message;
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnLog_Name,
        codec.align(VideoFrameHandler_OnLog_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnLog_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onStarted = function() {
    return VideoFrameHandlerProxy.prototype.onStarted
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onStarted = function() {
    var params_ = new VideoFrameHandler_OnStarted_Params();
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnStarted_Name,
        codec.align(VideoFrameHandler_OnStarted_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnStarted_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onStartedUsingGpuDecode = function() {
    return VideoFrameHandlerProxy.prototype.onStartedUsingGpuDecode
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onStartedUsingGpuDecode = function() {
    var params_ = new VideoFrameHandler_OnStartedUsingGpuDecode_Params();
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnStartedUsingGpuDecode_Name,
        codec.align(VideoFrameHandler_OnStartedUsingGpuDecode_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnStartedUsingGpuDecode_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  VideoFrameHandlerPtr.prototype.onStopped = function() {
    return VideoFrameHandlerProxy.prototype.onStopped
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoFrameHandlerProxy.prototype.onStopped = function() {
    var params_ = new VideoFrameHandler_OnStopped_Params();
    var builder = new codec.MessageV0Builder(
        kVideoFrameHandler_OnStopped_Name,
        codec.align(VideoFrameHandler_OnStopped_Params.encodedSize));
    builder.encodeStruct(VideoFrameHandler_OnStopped_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function VideoFrameHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  VideoFrameHandlerStub.prototype.onCaptureConfigurationChanged = function() {
    return this.delegate_ && this.delegate_.onCaptureConfigurationChanged && this.delegate_.onCaptureConfigurationChanged();
  }
  VideoFrameHandlerStub.prototype.onNewBuffer = function(bufferId, bufferHandle) {
    return this.delegate_ && this.delegate_.onNewBuffer && this.delegate_.onNewBuffer(bufferId, bufferHandle);
  }
  VideoFrameHandlerStub.prototype.onFrameAccessHandlerReady = function(frameAccessHandler) {
    return this.delegate_ && this.delegate_.onFrameAccessHandlerReady && this.delegate_.onFrameAccessHandlerReady(frameAccessHandler);
  }
  VideoFrameHandlerStub.prototype.onFrameReadyInBuffer = function(buffer) {
    return this.delegate_ && this.delegate_.onFrameReadyInBuffer && this.delegate_.onFrameReadyInBuffer(buffer);
  }
  VideoFrameHandlerStub.prototype.onBufferRetired = function(bufferId) {
    return this.delegate_ && this.delegate_.onBufferRetired && this.delegate_.onBufferRetired(bufferId);
  }
  VideoFrameHandlerStub.prototype.onError = function(error) {
    return this.delegate_ && this.delegate_.onError && this.delegate_.onError(error);
  }
  VideoFrameHandlerStub.prototype.onFrameDropped = function(reason) {
    return this.delegate_ && this.delegate_.onFrameDropped && this.delegate_.onFrameDropped(reason);
  }
  VideoFrameHandlerStub.prototype.onNewCropVersion = function(cropVersion) {
    return this.delegate_ && this.delegate_.onNewCropVersion && this.delegate_.onNewCropVersion(cropVersion);
  }
  VideoFrameHandlerStub.prototype.onFrameWithEmptyRegionCapture = function() {
    return this.delegate_ && this.delegate_.onFrameWithEmptyRegionCapture && this.delegate_.onFrameWithEmptyRegionCapture();
  }
  VideoFrameHandlerStub.prototype.onLog = function(message) {
    return this.delegate_ && this.delegate_.onLog && this.delegate_.onLog(message);
  }
  VideoFrameHandlerStub.prototype.onStarted = function() {
    return this.delegate_ && this.delegate_.onStarted && this.delegate_.onStarted();
  }
  VideoFrameHandlerStub.prototype.onStartedUsingGpuDecode = function() {
    return this.delegate_ && this.delegate_.onStartedUsingGpuDecode && this.delegate_.onStartedUsingGpuDecode();
  }
  VideoFrameHandlerStub.prototype.onStopped = function() {
    return this.delegate_ && this.delegate_.onStopped && this.delegate_.onStopped();
  }

  VideoFrameHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVideoFrameHandler_OnCaptureConfigurationChanged_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnCaptureConfigurationChanged_Params);
      this.onCaptureConfigurationChanged();
      return true;
    case kVideoFrameHandler_OnNewBuffer_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnNewBuffer_Params);
      this.onNewBuffer(params.bufferId, params.bufferHandle);
      return true;
    case kVideoFrameHandler_OnFrameAccessHandlerReady_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnFrameAccessHandlerReady_Params);
      this.onFrameAccessHandlerReady(params.frameAccessHandler);
      return true;
    case kVideoFrameHandler_OnFrameReadyInBuffer_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnFrameReadyInBuffer_Params);
      this.onFrameReadyInBuffer(params.buffer);
      return true;
    case kVideoFrameHandler_OnBufferRetired_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnBufferRetired_Params);
      this.onBufferRetired(params.bufferId);
      return true;
    case kVideoFrameHandler_OnError_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnError_Params);
      this.onError(params.error);
      return true;
    case kVideoFrameHandler_OnFrameDropped_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnFrameDropped_Params);
      this.onFrameDropped(params.reason);
      return true;
    case kVideoFrameHandler_OnNewCropVersion_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnNewCropVersion_Params);
      this.onNewCropVersion(params.cropVersion);
      return true;
    case kVideoFrameHandler_OnFrameWithEmptyRegionCapture_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params);
      this.onFrameWithEmptyRegionCapture();
      return true;
    case kVideoFrameHandler_OnLog_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnLog_Params);
      this.onLog(params.message);
      return true;
    case kVideoFrameHandler_OnStarted_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnStarted_Params);
      this.onStarted();
      return true;
    case kVideoFrameHandler_OnStartedUsingGpuDecode_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnStartedUsingGpuDecode_Params);
      this.onStartedUsingGpuDecode();
      return true;
    case kVideoFrameHandler_OnStopped_Name:
      var params = reader.decodeStruct(VideoFrameHandler_OnStopped_Params);
      this.onStopped();
      return true;
    default:
      return false;
    }
  };

  VideoFrameHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateVideoFrameHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kVideoFrameHandler_OnCaptureConfigurationChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnCaptureConfigurationChanged_Params;
      break;
      case kVideoFrameHandler_OnNewBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnNewBuffer_Params;
      break;
      case kVideoFrameHandler_OnFrameAccessHandlerReady_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnFrameAccessHandlerReady_Params;
      break;
      case kVideoFrameHandler_OnFrameReadyInBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnFrameReadyInBuffer_Params;
      break;
      case kVideoFrameHandler_OnBufferRetired_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnBufferRetired_Params;
      break;
      case kVideoFrameHandler_OnError_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnError_Params;
      break;
      case kVideoFrameHandler_OnFrameDropped_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnFrameDropped_Params;
      break;
      case kVideoFrameHandler_OnNewCropVersion_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnNewCropVersion_Params;
      break;
      case kVideoFrameHandler_OnFrameWithEmptyRegionCapture_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnFrameWithEmptyRegionCapture_Params;
      break;
      case kVideoFrameHandler_OnLog_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnLog_Params;
      break;
      case kVideoFrameHandler_OnStarted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnStarted_Params;
      break;
      case kVideoFrameHandler_OnStartedUsingGpuDecode_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnStartedUsingGpuDecode_Params;
      break;
      case kVideoFrameHandler_OnStopped_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoFrameHandler_OnStopped_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateVideoFrameHandlerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var VideoFrameHandler = {
    name: 'video_capture.mojom.VideoFrameHandler',
    kVersion: 0,
    ptrClass: VideoFrameHandlerPtr,
    proxyClass: VideoFrameHandlerProxy,
    stubClass: VideoFrameHandlerStub,
    validateRequest: validateVideoFrameHandlerRequest,
    validateResponse: null,
  };
  VideoFrameHandlerStub.prototype.validator = validateVideoFrameHandlerRequest;
  VideoFrameHandlerProxy.prototype.validator = null;
  exports.ReadyFrameInBuffer = ReadyFrameInBuffer;
  exports.VideoFrameAccessHandler = VideoFrameAccessHandler;
  exports.VideoFrameAccessHandlerPtr = VideoFrameAccessHandlerPtr;
  exports.VideoFrameAccessHandlerAssociatedPtr = VideoFrameAccessHandlerAssociatedPtr;
  exports.VideoFrameHandler = VideoFrameHandler;
  exports.VideoFrameHandlerPtr = VideoFrameHandlerPtr;
  exports.VideoFrameHandlerAssociatedPtr = VideoFrameHandlerAssociatedPtr;
})();