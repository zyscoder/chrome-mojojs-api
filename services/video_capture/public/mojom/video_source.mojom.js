// services/video_capture/public/mojom/video_source.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/video_capture/public/mojom/video_source.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('videoCapture.mojom');
  var image_capture$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/capture/mojom/image_capture.mojom', '../../../../media/capture/mojom/image_capture.mojom.js');
  }
  var video_capture_types$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/capture/mojom/video_capture_types.mojom', '../../../../media/capture/mojom/video_capture_types.mojom.js');
  }
  var video_effects_manager$ =
      mojo.internal.exposeNamespace('videoCapture.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/video_capture/public/mojom/video_effects_manager.mojom', 'video_effects_manager.mojom.js');
  }
  var video_frame_handler$ =
      mojo.internal.exposeNamespace('videoCapture.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/video_capture/public/mojom/video_frame_handler.mojom', 'video_frame_handler.mojom.js');
  }


  var CreatePushSubscriptionSuccessCode = {};
  CreatePushSubscriptionSuccessCode.kCreatedWithRequestedSettings = 0;
  CreatePushSubscriptionSuccessCode.kCreatedWithDifferentSettings = 1;
  CreatePushSubscriptionSuccessCode.MIN_VALUE = 0;
  CreatePushSubscriptionSuccessCode.MAX_VALUE = 1;

  CreatePushSubscriptionSuccessCode.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  CreatePushSubscriptionSuccessCode.toKnownEnumValue = function(value) {
    return value;
  };

  CreatePushSubscriptionSuccessCode.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function PushVideoStreamSubscription_Activate_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_Activate_Params.prototype.initDefaults_ = function() {
  };
  PushVideoStreamSubscription_Activate_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_Activate_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_Activate_Params.encodedSize = codec.kStructHeaderSize + 0;

  PushVideoStreamSubscription_Activate_Params.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_Activate_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PushVideoStreamSubscription_Activate_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_Activate_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PushVideoStreamSubscription_Suspend_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_Suspend_Params.prototype.initDefaults_ = function() {
  };
  PushVideoStreamSubscription_Suspend_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_Suspend_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_Suspend_Params.encodedSize = codec.kStructHeaderSize + 0;

  PushVideoStreamSubscription_Suspend_Params.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_Suspend_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PushVideoStreamSubscription_Suspend_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_Suspend_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PushVideoStreamSubscription_Suspend_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_Suspend_ResponseParams.prototype.initDefaults_ = function() {
  };
  PushVideoStreamSubscription_Suspend_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_Suspend_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_Suspend_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  PushVideoStreamSubscription_Suspend_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_Suspend_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PushVideoStreamSubscription_Suspend_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_Suspend_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function PushVideoStreamSubscription_Resume_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_Resume_Params.prototype.initDefaults_ = function() {
  };
  PushVideoStreamSubscription_Resume_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_Resume_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_Resume_Params.encodedSize = codec.kStructHeaderSize + 0;

  PushVideoStreamSubscription_Resume_Params.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_Resume_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PushVideoStreamSubscription_Resume_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_Resume_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PushVideoStreamSubscription_GetPhotoState_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_GetPhotoState_Params.prototype.initDefaults_ = function() {
  };
  PushVideoStreamSubscription_GetPhotoState_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_GetPhotoState_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_GetPhotoState_Params.encodedSize = codec.kStructHeaderSize + 0;

  PushVideoStreamSubscription_GetPhotoState_Params.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_GetPhotoState_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PushVideoStreamSubscription_GetPhotoState_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_GetPhotoState_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PushVideoStreamSubscription_GetPhotoState_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_GetPhotoState_ResponseParams.prototype.initDefaults_ = function() {
    this.capabilities = null;
  };
  PushVideoStreamSubscription_GetPhotoState_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_GetPhotoState_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PushVideoStreamSubscription_GetPhotoState_ResponseParams.capabilities
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, image_capture$.PhotoState, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_GetPhotoState_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PushVideoStreamSubscription_GetPhotoState_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_GetPhotoState_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.capabilities =
        decoder.decodeStructPointer(image_capture$.PhotoState);
    return val;
  };

  PushVideoStreamSubscription_GetPhotoState_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_GetPhotoState_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(image_capture$.PhotoState, val.capabilities);
  };
  function PushVideoStreamSubscription_SetPhotoOptions_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_SetPhotoOptions_Params.prototype.initDefaults_ = function() {
    this.settings = null;
  };
  PushVideoStreamSubscription_SetPhotoOptions_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_SetPhotoOptions_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PushVideoStreamSubscription_SetPhotoOptions_Params.settings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, image_capture$.PhotoSettings, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_SetPhotoOptions_Params.encodedSize = codec.kStructHeaderSize + 8;

  PushVideoStreamSubscription_SetPhotoOptions_Params.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_SetPhotoOptions_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.settings =
        decoder.decodeStructPointer(image_capture$.PhotoSettings);
    return val;
  };

  PushVideoStreamSubscription_SetPhotoOptions_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_SetPhotoOptions_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(image_capture$.PhotoSettings, val.settings);
  };
  function PushVideoStreamSubscription_SetPhotoOptions_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_SetPhotoOptions_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  PushVideoStreamSubscription_SetPhotoOptions_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_SetPhotoOptions_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_SetPhotoOptions_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PushVideoStreamSubscription_SetPhotoOptions_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_SetPhotoOptions_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PushVideoStreamSubscription_SetPhotoOptions_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_SetPhotoOptions_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PushVideoStreamSubscription_TakePhoto_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_TakePhoto_Params.prototype.initDefaults_ = function() {
  };
  PushVideoStreamSubscription_TakePhoto_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_TakePhoto_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_TakePhoto_Params.encodedSize = codec.kStructHeaderSize + 0;

  PushVideoStreamSubscription_TakePhoto_Params.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_TakePhoto_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PushVideoStreamSubscription_TakePhoto_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_TakePhoto_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PushVideoStreamSubscription_TakePhoto_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_TakePhoto_ResponseParams.prototype.initDefaults_ = function() {
    this.blob = null;
  };
  PushVideoStreamSubscription_TakePhoto_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_TakePhoto_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PushVideoStreamSubscription_TakePhoto_ResponseParams.blob
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, image_capture$.Blob, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_TakePhoto_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PushVideoStreamSubscription_TakePhoto_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_TakePhoto_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.blob =
        decoder.decodeStructPointer(image_capture$.Blob);
    return val;
  };

  PushVideoStreamSubscription_TakePhoto_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_TakePhoto_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(image_capture$.Blob, val.blob);
  };
  function PushVideoStreamSubscription_Close_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_Close_Params.prototype.initDefaults_ = function() {
  };
  PushVideoStreamSubscription_Close_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_Close_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_Close_Params.encodedSize = codec.kStructHeaderSize + 0;

  PushVideoStreamSubscription_Close_Params.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_Close_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PushVideoStreamSubscription_Close_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_Close_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PushVideoStreamSubscription_Close_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_Close_ResponseParams.prototype.initDefaults_ = function() {
  };
  PushVideoStreamSubscription_Close_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_Close_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_Close_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  PushVideoStreamSubscription_Close_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_Close_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PushVideoStreamSubscription_Close_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_Close_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function PushVideoStreamSubscription_ProcessFeedback_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PushVideoStreamSubscription_ProcessFeedback_Params.prototype.initDefaults_ = function() {
    this.feedback = null;
  };
  PushVideoStreamSubscription_ProcessFeedback_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PushVideoStreamSubscription_ProcessFeedback_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PushVideoStreamSubscription_ProcessFeedback_Params.feedback
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, video_capture_types$.VideoCaptureFeedback, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PushVideoStreamSubscription_ProcessFeedback_Params.encodedSize = codec.kStructHeaderSize + 8;

  PushVideoStreamSubscription_ProcessFeedback_Params.decode = function(decoder) {
    var packed;
    var val = new PushVideoStreamSubscription_ProcessFeedback_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.feedback =
        decoder.decodeStructPointer(video_capture_types$.VideoCaptureFeedback);
    return val;
  };

  PushVideoStreamSubscription_ProcessFeedback_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PushVideoStreamSubscription_ProcessFeedback_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(video_capture_types$.VideoCaptureFeedback, val.feedback);
  };
  function VideoSource_CreatePushSubscription_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoSource_CreatePushSubscription_Params.prototype.initDefaults_ = function() {
    this.subscriber = new video_frame_handler$.VideoFrameHandlerPtr();
    this.requestedSettings = null;
    this.forceReopenWithNewSettings = false;
    this.subscription = new bindings.InterfaceRequest();
  };
  VideoSource_CreatePushSubscription_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoSource_CreatePushSubscription_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoSource_CreatePushSubscription_Params.subscriber
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoSource_CreatePushSubscription_Params.requestedSettings
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, video_capture_types$.VideoCaptureParams, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate VideoSource_CreatePushSubscription_Params.subscription
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 20, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoSource_CreatePushSubscription_Params.encodedSize = codec.kStructHeaderSize + 24;

  VideoSource_CreatePushSubscription_Params.decode = function(decoder) {
    var packed;
    var val = new VideoSource_CreatePushSubscription_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.subscriber =
        decoder.decodeStruct(new codec.Interface(video_frame_handler$.VideoFrameHandlerPtr));
    val.requestedSettings =
        decoder.decodeStructPointer(video_capture_types$.VideoCaptureParams);
    packed = decoder.readUint8();
    val.forceReopenWithNewSettings = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.subscription =
        decoder.decodeStruct(codec.InterfaceRequest);
    return val;
  };

  VideoSource_CreatePushSubscription_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoSource_CreatePushSubscription_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(video_frame_handler$.VideoFrameHandlerPtr), val.subscriber);
    encoder.encodeStructPointer(video_capture_types$.VideoCaptureParams, val.requestedSettings);
    packed = 0;
    packed |= (val.forceReopenWithNewSettings & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.InterfaceRequest, val.subscription);
  };
  function VideoSource_CreatePushSubscription_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoSource_CreatePushSubscription_ResponseParams.prototype.initDefaults_ = function() {
    this.resultCode = null;
    this.settingsSourceWasOpenedWith = null;
  };
  VideoSource_CreatePushSubscription_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoSource_CreatePushSubscription_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoSource_CreatePushSubscription_ResponseParams.resultCode
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, CreatePushSubscriptionResultCode, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoSource_CreatePushSubscription_ResponseParams.settingsSourceWasOpenedWith
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, video_capture_types$.VideoCaptureParams, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoSource_CreatePushSubscription_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  VideoSource_CreatePushSubscription_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new VideoSource_CreatePushSubscription_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.resultCode =
        decoder.decodeStruct(CreatePushSubscriptionResultCode);
    val.settingsSourceWasOpenedWith =
        decoder.decodeStructPointer(video_capture_types$.VideoCaptureParams);
    return val;
  };

  VideoSource_CreatePushSubscription_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoSource_CreatePushSubscription_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(CreatePushSubscriptionResultCode, val.resultCode);
    encoder.encodeStructPointer(video_capture_types$.VideoCaptureParams, val.settingsSourceWasOpenedWith);
  };
  function VideoSource_RegisterVideoEffectsManager_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VideoSource_RegisterVideoEffectsManager_Params.prototype.initDefaults_ = function() {
    this.remote = new video_effects_manager$.VideoEffectsManagerPtr();
  };
  VideoSource_RegisterVideoEffectsManager_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VideoSource_RegisterVideoEffectsManager_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VideoSource_RegisterVideoEffectsManager_Params.remote
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VideoSource_RegisterVideoEffectsManager_Params.encodedSize = codec.kStructHeaderSize + 8;

  VideoSource_RegisterVideoEffectsManager_Params.decode = function(decoder) {
    var packed;
    var val = new VideoSource_RegisterVideoEffectsManager_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.remote =
        decoder.decodeStruct(new codec.Interface(video_effects_manager$.VideoEffectsManagerPtr));
    return val;
  };

  VideoSource_RegisterVideoEffectsManager_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VideoSource_RegisterVideoEffectsManager_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(video_effects_manager$.VideoEffectsManagerPtr), val.remote);
  };

  function CreatePushSubscriptionResultCode(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  CreatePushSubscriptionResultCode.Tags = {
    successCode: 0,
    errorCode: 1,
  };

  CreatePushSubscriptionResultCode.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  CreatePushSubscriptionResultCode.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "successCode",
        "errorCode",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a CreatePushSubscriptionResultCode member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(CreatePushSubscriptionResultCode.prototype, "successCode", {
    get: function() {
      if (this.$tag != CreatePushSubscriptionResultCode.Tags.successCode) {
        throw new ReferenceError(
            "CreatePushSubscriptionResultCode.successCode is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = CreatePushSubscriptionResultCode.Tags.successCode;
      this.$data = value;
    }
  });
  Object.defineProperty(CreatePushSubscriptionResultCode.prototype, "errorCode", {
    get: function() {
      if (this.$tag != CreatePushSubscriptionResultCode.Tags.errorCode) {
        throw new ReferenceError(
            "CreatePushSubscriptionResultCode.errorCode is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = CreatePushSubscriptionResultCode.Tags.errorCode;
      this.$data = value;
    }
  });


    CreatePushSubscriptionResultCode.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case CreatePushSubscriptionResultCode.Tags.successCode:
          encoder.encodeStruct(codec.Int32, val.successCode);
          break;
        case CreatePushSubscriptionResultCode.Tags.errorCode:
          encoder.encodeStruct(codec.Int32, val.errorCode);
          break;
      }
      encoder.align();
    };


    CreatePushSubscriptionResultCode.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new CreatePushSubscriptionResultCode();
      var tag = decoder.readUint32();
      switch (tag) {
        case CreatePushSubscriptionResultCode.Tags.successCode:
          result.successCode = decoder.decodeStruct(new codec.Enum(CreatePushSubscriptionSuccessCode));
          break;
        case CreatePushSubscriptionResultCode.Tags.errorCode:
          result.errorCode = decoder.decodeStruct(new codec.Enum(video_capture_types$.VideoCaptureError));
          break;
      }
      decoder.align();

      return result;
    };


    CreatePushSubscriptionResultCode.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case CreatePushSubscriptionResultCode.Tags.successCode:
          

    // validate CreatePushSubscriptionResultCode.successCode
    err = messageValidator.validateEnum(data_offset, CreatePushSubscriptionSuccessCode);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case CreatePushSubscriptionResultCode.Tags.errorCode:
          

    // validate CreatePushSubscriptionResultCode.errorCode
    err = messageValidator.validateEnum(data_offset, video_capture_types$.VideoCaptureError);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  CreatePushSubscriptionResultCode.encodedSize = 16;
  var kPushVideoStreamSubscription_Activate_Name = 818479023;
  var kPushVideoStreamSubscription_Suspend_Name = 619673478;
  var kPushVideoStreamSubscription_Resume_Name = 135406407;
  var kPushVideoStreamSubscription_GetPhotoState_Name = 1719831518;
  var kPushVideoStreamSubscription_SetPhotoOptions_Name = 1994871952;
  var kPushVideoStreamSubscription_TakePhoto_Name = 1390471312;
  var kPushVideoStreamSubscription_Close_Name = 1469677638;
  var kPushVideoStreamSubscription_ProcessFeedback_Name = 1228797654;

  function PushVideoStreamSubscriptionPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PushVideoStreamSubscription,
                                                   handleOrPtrInfo);
  }

  function PushVideoStreamSubscriptionAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PushVideoStreamSubscription, associatedInterfacePtrInfo);
  }

  PushVideoStreamSubscriptionAssociatedPtr.prototype =
      Object.create(PushVideoStreamSubscriptionPtr.prototype);
  PushVideoStreamSubscriptionAssociatedPtr.prototype.constructor =
      PushVideoStreamSubscriptionAssociatedPtr;

  function PushVideoStreamSubscriptionProxy(receiver) {
    this.receiver_ = receiver;
  }
  PushVideoStreamSubscriptionPtr.prototype.activate = function() {
    return PushVideoStreamSubscriptionProxy.prototype.activate
        .apply(this.ptr.getProxy(), arguments);
  };

  PushVideoStreamSubscriptionProxy.prototype.activate = function() {
    var params_ = new PushVideoStreamSubscription_Activate_Params();
    var builder = new codec.MessageV0Builder(
        kPushVideoStreamSubscription_Activate_Name,
        codec.align(PushVideoStreamSubscription_Activate_Params.encodedSize));
    builder.encodeStruct(PushVideoStreamSubscription_Activate_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PushVideoStreamSubscriptionPtr.prototype.suspend = function() {
    return PushVideoStreamSubscriptionProxy.prototype.suspend
        .apply(this.ptr.getProxy(), arguments);
  };

  PushVideoStreamSubscriptionProxy.prototype.suspend = function() {
    var params_ = new PushVideoStreamSubscription_Suspend_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPushVideoStreamSubscription_Suspend_Name,
          codec.align(PushVideoStreamSubscription_Suspend_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PushVideoStreamSubscription_Suspend_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PushVideoStreamSubscription_Suspend_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PushVideoStreamSubscriptionPtr.prototype.resume = function() {
    return PushVideoStreamSubscriptionProxy.prototype.resume
        .apply(this.ptr.getProxy(), arguments);
  };

  PushVideoStreamSubscriptionProxy.prototype.resume = function() {
    var params_ = new PushVideoStreamSubscription_Resume_Params();
    var builder = new codec.MessageV0Builder(
        kPushVideoStreamSubscription_Resume_Name,
        codec.align(PushVideoStreamSubscription_Resume_Params.encodedSize));
    builder.encodeStruct(PushVideoStreamSubscription_Resume_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PushVideoStreamSubscriptionPtr.prototype.getPhotoState = function() {
    return PushVideoStreamSubscriptionProxy.prototype.getPhotoState
        .apply(this.ptr.getProxy(), arguments);
  };

  PushVideoStreamSubscriptionProxy.prototype.getPhotoState = function() {
    var params_ = new PushVideoStreamSubscription_GetPhotoState_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPushVideoStreamSubscription_GetPhotoState_Name,
          codec.align(PushVideoStreamSubscription_GetPhotoState_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PushVideoStreamSubscription_GetPhotoState_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PushVideoStreamSubscription_GetPhotoState_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PushVideoStreamSubscriptionPtr.prototype.setPhotoOptions = function() {
    return PushVideoStreamSubscriptionProxy.prototype.setPhotoOptions
        .apply(this.ptr.getProxy(), arguments);
  };

  PushVideoStreamSubscriptionProxy.prototype.setPhotoOptions = function(settings) {
    var params_ = new PushVideoStreamSubscription_SetPhotoOptions_Params();
    params_.settings = settings;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPushVideoStreamSubscription_SetPhotoOptions_Name,
          codec.align(PushVideoStreamSubscription_SetPhotoOptions_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PushVideoStreamSubscription_SetPhotoOptions_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PushVideoStreamSubscription_SetPhotoOptions_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PushVideoStreamSubscriptionPtr.prototype.takePhoto = function() {
    return PushVideoStreamSubscriptionProxy.prototype.takePhoto
        .apply(this.ptr.getProxy(), arguments);
  };

  PushVideoStreamSubscriptionProxy.prototype.takePhoto = function() {
    var params_ = new PushVideoStreamSubscription_TakePhoto_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPushVideoStreamSubscription_TakePhoto_Name,
          codec.align(PushVideoStreamSubscription_TakePhoto_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PushVideoStreamSubscription_TakePhoto_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PushVideoStreamSubscription_TakePhoto_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PushVideoStreamSubscriptionPtr.prototype.close = function() {
    return PushVideoStreamSubscriptionProxy.prototype.close
        .apply(this.ptr.getProxy(), arguments);
  };

  PushVideoStreamSubscriptionProxy.prototype.close = function() {
    var params_ = new PushVideoStreamSubscription_Close_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPushVideoStreamSubscription_Close_Name,
          codec.align(PushVideoStreamSubscription_Close_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PushVideoStreamSubscription_Close_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PushVideoStreamSubscription_Close_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PushVideoStreamSubscriptionPtr.prototype.processFeedback = function() {
    return PushVideoStreamSubscriptionProxy.prototype.processFeedback
        .apply(this.ptr.getProxy(), arguments);
  };

  PushVideoStreamSubscriptionProxy.prototype.processFeedback = function(feedback) {
    var params_ = new PushVideoStreamSubscription_ProcessFeedback_Params();
    params_.feedback = feedback;
    var builder = new codec.MessageV0Builder(
        kPushVideoStreamSubscription_ProcessFeedback_Name,
        codec.align(PushVideoStreamSubscription_ProcessFeedback_Params.encodedSize));
    builder.encodeStruct(PushVideoStreamSubscription_ProcessFeedback_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PushVideoStreamSubscriptionStub(delegate) {
    this.delegate_ = delegate;
  }
  PushVideoStreamSubscriptionStub.prototype.activate = function() {
    return this.delegate_ && this.delegate_.activate && this.delegate_.activate();
  }
  PushVideoStreamSubscriptionStub.prototype.suspend = function() {
    return this.delegate_ && this.delegate_.suspend && this.delegate_.suspend();
  }
  PushVideoStreamSubscriptionStub.prototype.resume = function() {
    return this.delegate_ && this.delegate_.resume && this.delegate_.resume();
  }
  PushVideoStreamSubscriptionStub.prototype.getPhotoState = function() {
    return this.delegate_ && this.delegate_.getPhotoState && this.delegate_.getPhotoState();
  }
  PushVideoStreamSubscriptionStub.prototype.setPhotoOptions = function(settings) {
    return this.delegate_ && this.delegate_.setPhotoOptions && this.delegate_.setPhotoOptions(settings);
  }
  PushVideoStreamSubscriptionStub.prototype.takePhoto = function() {
    return this.delegate_ && this.delegate_.takePhoto && this.delegate_.takePhoto();
  }
  PushVideoStreamSubscriptionStub.prototype.close = function() {
    return this.delegate_ && this.delegate_.close && this.delegate_.close();
  }
  PushVideoStreamSubscriptionStub.prototype.processFeedback = function(feedback) {
    return this.delegate_ && this.delegate_.processFeedback && this.delegate_.processFeedback(feedback);
  }

  PushVideoStreamSubscriptionStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPushVideoStreamSubscription_Activate_Name:
      var params = reader.decodeStruct(PushVideoStreamSubscription_Activate_Params);
      this.activate();
      return true;
    case kPushVideoStreamSubscription_Resume_Name:
      var params = reader.decodeStruct(PushVideoStreamSubscription_Resume_Params);
      this.resume();
      return true;
    case kPushVideoStreamSubscription_ProcessFeedback_Name:
      var params = reader.decodeStruct(PushVideoStreamSubscription_ProcessFeedback_Params);
      this.processFeedback(params.feedback);
      return true;
    default:
      return false;
    }
  };

  PushVideoStreamSubscriptionStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPushVideoStreamSubscription_Suspend_Name:
      var params = reader.decodeStruct(PushVideoStreamSubscription_Suspend_Params);
      this.suspend().then(function(response) {
        var responseParams =
            new PushVideoStreamSubscription_Suspend_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kPushVideoStreamSubscription_Suspend_Name,
            codec.align(PushVideoStreamSubscription_Suspend_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PushVideoStreamSubscription_Suspend_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPushVideoStreamSubscription_GetPhotoState_Name:
      var params = reader.decodeStruct(PushVideoStreamSubscription_GetPhotoState_Params);
      this.getPhotoState().then(function(response) {
        var responseParams =
            new PushVideoStreamSubscription_GetPhotoState_ResponseParams();
        responseParams.capabilities = response.capabilities;
        var builder = new codec.MessageV1Builder(
            kPushVideoStreamSubscription_GetPhotoState_Name,
            codec.align(PushVideoStreamSubscription_GetPhotoState_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PushVideoStreamSubscription_GetPhotoState_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPushVideoStreamSubscription_SetPhotoOptions_Name:
      var params = reader.decodeStruct(PushVideoStreamSubscription_SetPhotoOptions_Params);
      this.setPhotoOptions(params.settings).then(function(response) {
        var responseParams =
            new PushVideoStreamSubscription_SetPhotoOptions_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kPushVideoStreamSubscription_SetPhotoOptions_Name,
            codec.align(PushVideoStreamSubscription_SetPhotoOptions_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PushVideoStreamSubscription_SetPhotoOptions_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPushVideoStreamSubscription_TakePhoto_Name:
      var params = reader.decodeStruct(PushVideoStreamSubscription_TakePhoto_Params);
      this.takePhoto().then(function(response) {
        var responseParams =
            new PushVideoStreamSubscription_TakePhoto_ResponseParams();
        responseParams.blob = response.blob;
        var builder = new codec.MessageV1Builder(
            kPushVideoStreamSubscription_TakePhoto_Name,
            codec.align(PushVideoStreamSubscription_TakePhoto_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PushVideoStreamSubscription_TakePhoto_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPushVideoStreamSubscription_Close_Name:
      var params = reader.decodeStruct(PushVideoStreamSubscription_Close_Params);
      this.close().then(function(response) {
        var responseParams =
            new PushVideoStreamSubscription_Close_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kPushVideoStreamSubscription_Close_Name,
            codec.align(PushVideoStreamSubscription_Close_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PushVideoStreamSubscription_Close_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePushVideoStreamSubscriptionRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPushVideoStreamSubscription_Activate_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PushVideoStreamSubscription_Activate_Params;
      break;
      case kPushVideoStreamSubscription_Suspend_Name:
        if (message.expectsResponse())
          paramsClass = PushVideoStreamSubscription_Suspend_Params;
      break;
      case kPushVideoStreamSubscription_Resume_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PushVideoStreamSubscription_Resume_Params;
      break;
      case kPushVideoStreamSubscription_GetPhotoState_Name:
        if (message.expectsResponse())
          paramsClass = PushVideoStreamSubscription_GetPhotoState_Params;
      break;
      case kPushVideoStreamSubscription_SetPhotoOptions_Name:
        if (message.expectsResponse())
          paramsClass = PushVideoStreamSubscription_SetPhotoOptions_Params;
      break;
      case kPushVideoStreamSubscription_TakePhoto_Name:
        if (message.expectsResponse())
          paramsClass = PushVideoStreamSubscription_TakePhoto_Params;
      break;
      case kPushVideoStreamSubscription_Close_Name:
        if (message.expectsResponse())
          paramsClass = PushVideoStreamSubscription_Close_Params;
      break;
      case kPushVideoStreamSubscription_ProcessFeedback_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PushVideoStreamSubscription_ProcessFeedback_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePushVideoStreamSubscriptionResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPushVideoStreamSubscription_Suspend_Name:
        if (message.isResponse())
          paramsClass = PushVideoStreamSubscription_Suspend_ResponseParams;
        break;
      case kPushVideoStreamSubscription_GetPhotoState_Name:
        if (message.isResponse())
          paramsClass = PushVideoStreamSubscription_GetPhotoState_ResponseParams;
        break;
      case kPushVideoStreamSubscription_SetPhotoOptions_Name:
        if (message.isResponse())
          paramsClass = PushVideoStreamSubscription_SetPhotoOptions_ResponseParams;
        break;
      case kPushVideoStreamSubscription_TakePhoto_Name:
        if (message.isResponse())
          paramsClass = PushVideoStreamSubscription_TakePhoto_ResponseParams;
        break;
      case kPushVideoStreamSubscription_Close_Name:
        if (message.isResponse())
          paramsClass = PushVideoStreamSubscription_Close_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PushVideoStreamSubscription = {
    name: 'video_capture.mojom.PushVideoStreamSubscription',
    kVersion: 0,
    ptrClass: PushVideoStreamSubscriptionPtr,
    proxyClass: PushVideoStreamSubscriptionProxy,
    stubClass: PushVideoStreamSubscriptionStub,
    validateRequest: validatePushVideoStreamSubscriptionRequest,
    validateResponse: validatePushVideoStreamSubscriptionResponse,
  };
  PushVideoStreamSubscriptionStub.prototype.validator = validatePushVideoStreamSubscriptionRequest;
  PushVideoStreamSubscriptionProxy.prototype.validator = validatePushVideoStreamSubscriptionResponse;
  var kVideoSource_CreatePushSubscription_Name = 1287310509;
  var kVideoSource_RegisterVideoEffectsManager_Name = 598143431;

  function VideoSourcePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(VideoSource,
                                                   handleOrPtrInfo);
  }

  function VideoSourceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        VideoSource, associatedInterfacePtrInfo);
  }

  VideoSourceAssociatedPtr.prototype =
      Object.create(VideoSourcePtr.prototype);
  VideoSourceAssociatedPtr.prototype.constructor =
      VideoSourceAssociatedPtr;

  function VideoSourceProxy(receiver) {
    this.receiver_ = receiver;
  }
  VideoSourcePtr.prototype.createPushSubscription = function() {
    return VideoSourceProxy.prototype.createPushSubscription
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoSourceProxy.prototype.createPushSubscription = function(subscriber, requestedSettings, forceReopenWithNewSettings, subscription) {
    var params_ = new VideoSource_CreatePushSubscription_Params();
    params_.subscriber = subscriber;
    params_.requestedSettings = requestedSettings;
    params_.forceReopenWithNewSettings = forceReopenWithNewSettings;
    params_.subscription = subscription;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kVideoSource_CreatePushSubscription_Name,
          codec.align(VideoSource_CreatePushSubscription_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(VideoSource_CreatePushSubscription_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(VideoSource_CreatePushSubscription_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  VideoSourcePtr.prototype.registerVideoEffectsManager = function() {
    return VideoSourceProxy.prototype.registerVideoEffectsManager
        .apply(this.ptr.getProxy(), arguments);
  };

  VideoSourceProxy.prototype.registerVideoEffectsManager = function(remote) {
    var params_ = new VideoSource_RegisterVideoEffectsManager_Params();
    params_.remote = remote;
    var builder = new codec.MessageV0Builder(
        kVideoSource_RegisterVideoEffectsManager_Name,
        codec.align(VideoSource_RegisterVideoEffectsManager_Params.encodedSize));
    builder.encodeStruct(VideoSource_RegisterVideoEffectsManager_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function VideoSourceStub(delegate) {
    this.delegate_ = delegate;
  }
  VideoSourceStub.prototype.createPushSubscription = function(subscriber, requestedSettings, forceReopenWithNewSettings, subscription) {
    return this.delegate_ && this.delegate_.createPushSubscription && this.delegate_.createPushSubscription(subscriber, requestedSettings, forceReopenWithNewSettings, subscription);
  }
  VideoSourceStub.prototype.registerVideoEffectsManager = function(remote) {
    return this.delegate_ && this.delegate_.registerVideoEffectsManager && this.delegate_.registerVideoEffectsManager(remote);
  }

  VideoSourceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVideoSource_RegisterVideoEffectsManager_Name:
      var params = reader.decodeStruct(VideoSource_RegisterVideoEffectsManager_Params);
      this.registerVideoEffectsManager(params.remote);
      return true;
    default:
      return false;
    }
  };

  VideoSourceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVideoSource_CreatePushSubscription_Name:
      var params = reader.decodeStruct(VideoSource_CreatePushSubscription_Params);
      this.createPushSubscription(params.subscriber, params.requestedSettings, params.forceReopenWithNewSettings, params.subscription).then(function(response) {
        var responseParams =
            new VideoSource_CreatePushSubscription_ResponseParams();
        responseParams.resultCode = response.resultCode;
        responseParams.settingsSourceWasOpenedWith = response.settingsSourceWasOpenedWith;
        var builder = new codec.MessageV1Builder(
            kVideoSource_CreatePushSubscription_Name,
            codec.align(VideoSource_CreatePushSubscription_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(VideoSource_CreatePushSubscription_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateVideoSourceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kVideoSource_CreatePushSubscription_Name:
        if (message.expectsResponse())
          paramsClass = VideoSource_CreatePushSubscription_Params;
      break;
      case kVideoSource_RegisterVideoEffectsManager_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VideoSource_RegisterVideoEffectsManager_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateVideoSourceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kVideoSource_CreatePushSubscription_Name:
        if (message.isResponse())
          paramsClass = VideoSource_CreatePushSubscription_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var VideoSource = {
    name: 'video_capture.mojom.VideoSource',
    kVersion: 0,
    ptrClass: VideoSourcePtr,
    proxyClass: VideoSourceProxy,
    stubClass: VideoSourceStub,
    validateRequest: validateVideoSourceRequest,
    validateResponse: validateVideoSourceResponse,
  };
  VideoSourceStub.prototype.validator = validateVideoSourceRequest;
  VideoSourceProxy.prototype.validator = validateVideoSourceResponse;
  exports.CreatePushSubscriptionSuccessCode = CreatePushSubscriptionSuccessCode;
  exports.CreatePushSubscriptionResultCode = CreatePushSubscriptionResultCode;
  exports.PushVideoStreamSubscription = PushVideoStreamSubscription;
  exports.PushVideoStreamSubscriptionPtr = PushVideoStreamSubscriptionPtr;
  exports.PushVideoStreamSubscriptionAssociatedPtr = PushVideoStreamSubscriptionAssociatedPtr;
  exports.VideoSource = VideoSource;
  exports.VideoSourcePtr = VideoSourcePtr;
  exports.VideoSourceAssociatedPtr = VideoSourceAssociatedPtr;
})();