// services/video_capture/public/mojom/producer.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/video_capture/public/mojom/producer.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('videoCapture.mojom');
  var video_capture_buffer$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/capture/mojom/video_capture_buffer.mojom', '../../../../media/capture/mojom/video_capture_buffer.mojom.js');
  }
  var video_capture_types$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/capture/mojom/video_capture_types.mojom', '../../../../media/capture/mojom/video_capture_types.mojom.js');
  }



  function Producer_OnNewBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Producer_OnNewBuffer_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
    this.bufferHandle = null;
  };
  Producer_OnNewBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Producer_OnNewBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Producer_OnNewBuffer_Params.bufferHandle
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 8, video_capture_buffer$.VideoBufferHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Producer_OnNewBuffer_Params.encodedSize = codec.kStructHeaderSize + 24;

  Producer_OnNewBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new Producer_OnNewBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.bufferHandle =
        decoder.decodeStruct(video_capture_buffer$.VideoBufferHandle);
    return val;
  };

  Producer_OnNewBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Producer_OnNewBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(video_capture_buffer$.VideoBufferHandle, val.bufferHandle);
  };
  function Producer_OnNewBuffer_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Producer_OnNewBuffer_ResponseParams.prototype.initDefaults_ = function() {
  };
  Producer_OnNewBuffer_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Producer_OnNewBuffer_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Producer_OnNewBuffer_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  Producer_OnNewBuffer_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Producer_OnNewBuffer_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Producer_OnNewBuffer_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Producer_OnNewBuffer_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function Producer_OnBufferRetired_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Producer_OnBufferRetired_Params.prototype.initDefaults_ = function() {
    this.bufferId = 0;
  };
  Producer_OnBufferRetired_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Producer_OnBufferRetired_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Producer_OnBufferRetired_Params.encodedSize = codec.kStructHeaderSize + 8;

  Producer_OnBufferRetired_Params.decode = function(decoder) {
    var packed;
    var val = new Producer_OnBufferRetired_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Producer_OnBufferRetired_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Producer_OnBufferRetired_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.bufferId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kProducer_OnNewBuffer_Name = 104532542;
  var kProducer_OnBufferRetired_Name = 1365640905;

  function ProducerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Producer,
                                                   handleOrPtrInfo);
  }

  function ProducerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Producer, associatedInterfacePtrInfo);
  }

  ProducerAssociatedPtr.prototype =
      Object.create(ProducerPtr.prototype);
  ProducerAssociatedPtr.prototype.constructor =
      ProducerAssociatedPtr;

  function ProducerProxy(receiver) {
    this.receiver_ = receiver;
  }
  ProducerPtr.prototype.onNewBuffer = function() {
    return ProducerProxy.prototype.onNewBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  ProducerProxy.prototype.onNewBuffer = function(bufferId, bufferHandle) {
    var params_ = new Producer_OnNewBuffer_Params();
    params_.bufferId = bufferId;
    params_.bufferHandle = bufferHandle;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kProducer_OnNewBuffer_Name,
          codec.align(Producer_OnNewBuffer_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Producer_OnNewBuffer_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Producer_OnNewBuffer_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ProducerPtr.prototype.onBufferRetired = function() {
    return ProducerProxy.prototype.onBufferRetired
        .apply(this.ptr.getProxy(), arguments);
  };

  ProducerProxy.prototype.onBufferRetired = function(bufferId) {
    var params_ = new Producer_OnBufferRetired_Params();
    params_.bufferId = bufferId;
    var builder = new codec.MessageV0Builder(
        kProducer_OnBufferRetired_Name,
        codec.align(Producer_OnBufferRetired_Params.encodedSize));
    builder.encodeStruct(Producer_OnBufferRetired_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ProducerStub(delegate) {
    this.delegate_ = delegate;
  }
  ProducerStub.prototype.onNewBuffer = function(bufferId, bufferHandle) {
    return this.delegate_ && this.delegate_.onNewBuffer && this.delegate_.onNewBuffer(bufferId, bufferHandle);
  }
  ProducerStub.prototype.onBufferRetired = function(bufferId) {
    return this.delegate_ && this.delegate_.onBufferRetired && this.delegate_.onBufferRetired(bufferId);
  }

  ProducerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kProducer_OnBufferRetired_Name:
      var params = reader.decodeStruct(Producer_OnBufferRetired_Params);
      this.onBufferRetired(params.bufferId);
      return true;
    default:
      return false;
    }
  };

  ProducerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kProducer_OnNewBuffer_Name:
      var params = reader.decodeStruct(Producer_OnNewBuffer_Params);
      this.onNewBuffer(params.bufferId, params.bufferHandle).then(function(response) {
        var responseParams =
            new Producer_OnNewBuffer_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kProducer_OnNewBuffer_Name,
            codec.align(Producer_OnNewBuffer_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Producer_OnNewBuffer_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateProducerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kProducer_OnNewBuffer_Name:
        if (message.expectsResponse())
          paramsClass = Producer_OnNewBuffer_Params;
      break;
      case kProducer_OnBufferRetired_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Producer_OnBufferRetired_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateProducerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kProducer_OnNewBuffer_Name:
        if (message.isResponse())
          paramsClass = Producer_OnNewBuffer_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Producer = {
    name: 'video_capture.mojom.Producer',
    kVersion: 0,
    ptrClass: ProducerPtr,
    proxyClass: ProducerProxy,
    stubClass: ProducerStub,
    validateRequest: validateProducerRequest,
    validateResponse: validateProducerResponse,
  };
  ProducerStub.prototype.validator = validateProducerRequest;
  ProducerProxy.prototype.validator = validateProducerResponse;
  exports.Producer = Producer;
  exports.ProducerPtr = ProducerPtr;
  exports.ProducerAssociatedPtr = ProducerAssociatedPtr;
})();