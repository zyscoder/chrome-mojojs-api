// services/webnn/public/mojom/webnn_context_provider.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/webnn/public/mojom/webnn_context_provider.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('webnn.mojom');
  var webnn_graph$ =
      mojo.internal.exposeNamespace('webnn.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/webnn/public/mojom/webnn_graph.mojom', 'webnn_graph.mojom.js');
  }


  var PowerPreference = {};
  PowerPreference.kDefault = 0;
  PowerPreference.kHighPerformance = 1;
  PowerPreference.kLowPower = 2;
  PowerPreference.MIN_VALUE = 0;
  PowerPreference.MAX_VALUE = 2;

  PowerPreference.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  PowerPreference.toKnownEnumValue = function(value) {
    return value;
  };

  PowerPreference.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function CreateContextOptions(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CreateContextOptions.prototype.initDefaults_ = function() {
    this.powerPreference = 0;
  };
  CreateContextOptions.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CreateContextOptions.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CreateContextOptions.powerPreference
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PowerPreference);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CreateContextOptions.encodedSize = codec.kStructHeaderSize + 8;

  CreateContextOptions.decode = function(decoder) {
    var packed;
    var val = new CreateContextOptions();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.powerPreference =
        decoder.decodeStruct(new codec.Enum(PowerPreference));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CreateContextOptions.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CreateContextOptions.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.powerPreference);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Error(values) {
    this.initDefaults_();
    this.initFields_(values);
  }

  Error.Code = {};
  Error.Code.kUnknownError = 0;
  Error.Code.kNotSupportedError = 1;
  Error.Code.MIN_VALUE = 0;
  Error.Code.MAX_VALUE = 1;

  Error.Code.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  Error.Code.toKnownEnumValue = function(value) {
    return value;
  };

  Error.Code.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  Error.prototype.initDefaults_ = function() {
    this.errorCode = 0;
    this.errorMessage = null;
  };
  Error.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Error.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Error.errorCode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, Error.Code);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Error.errorMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Error.encodedSize = codec.kStructHeaderSize + 16;

  Error.decode = function(decoder) {
    var packed;
    var val = new Error();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.errorCode =
        decoder.decodeStruct(new codec.Enum(Error.Code));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.errorMessage =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Error.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Error.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.errorCode);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.errorMessage);
  };
  function WebNNContext_CreateGraph_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebNNContext_CreateGraph_Params.prototype.initDefaults_ = function() {
    this.graphInfo = null;
  };
  WebNNContext_CreateGraph_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebNNContext_CreateGraph_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebNNContext_CreateGraph_Params.graphInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, webnn_graph$.GraphInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebNNContext_CreateGraph_Params.encodedSize = codec.kStructHeaderSize + 8;

  WebNNContext_CreateGraph_Params.decode = function(decoder) {
    var packed;
    var val = new WebNNContext_CreateGraph_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.graphInfo =
        decoder.decodeStructPointer(webnn_graph$.GraphInfo);
    return val;
  };

  WebNNContext_CreateGraph_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebNNContext_CreateGraph_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(webnn_graph$.GraphInfo, val.graphInfo);
  };
  function WebNNContext_CreateGraph_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebNNContext_CreateGraph_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  WebNNContext_CreateGraph_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebNNContext_CreateGraph_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebNNContext_CreateGraph_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, CreateGraphResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebNNContext_CreateGraph_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebNNContext_CreateGraph_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebNNContext_CreateGraph_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(CreateGraphResult);
    return val;
  };

  WebNNContext_CreateGraph_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebNNContext_CreateGraph_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(CreateGraphResult, val.result);
  };
  function WebNNContextProvider_CreateWebNNContext_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebNNContextProvider_CreateWebNNContext_Params.prototype.initDefaults_ = function() {
    this.options = null;
  };
  WebNNContextProvider_CreateWebNNContext_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebNNContextProvider_CreateWebNNContext_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebNNContextProvider_CreateWebNNContext_Params.options
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, CreateContextOptions, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebNNContextProvider_CreateWebNNContext_Params.encodedSize = codec.kStructHeaderSize + 8;

  WebNNContextProvider_CreateWebNNContext_Params.decode = function(decoder) {
    var packed;
    var val = new WebNNContextProvider_CreateWebNNContext_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.options =
        decoder.decodeStructPointer(CreateContextOptions);
    return val;
  };

  WebNNContextProvider_CreateWebNNContext_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebNNContextProvider_CreateWebNNContext_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(CreateContextOptions, val.options);
  };
  function WebNNContextProvider_CreateWebNNContext_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebNNContextProvider_CreateWebNNContext_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  WebNNContextProvider_CreateWebNNContext_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebNNContextProvider_CreateWebNNContext_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebNNContextProvider_CreateWebNNContext_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, CreateContextResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  WebNNContextProvider_CreateWebNNContext_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  WebNNContextProvider_CreateWebNNContext_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new WebNNContextProvider_CreateWebNNContext_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(CreateContextResult);
    return val;
  };

  WebNNContextProvider_CreateWebNNContext_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebNNContextProvider_CreateWebNNContext_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(CreateContextResult, val.result);
  };

  function CreateGraphResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  CreateGraphResult.Tags = {
    graphRemote: 0,
    error: 1,
  };

  CreateGraphResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  CreateGraphResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "graphRemote",
        "error",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a CreateGraphResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(CreateGraphResult.prototype, "graphRemote", {
    get: function() {
      if (this.$tag != CreateGraphResult.Tags.graphRemote) {
        throw new ReferenceError(
            "CreateGraphResult.graphRemote is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = CreateGraphResult.Tags.graphRemote;
      this.$data = value;
    }
  });
  Object.defineProperty(CreateGraphResult.prototype, "error", {
    get: function() {
      if (this.$tag != CreateGraphResult.Tags.error) {
        throw new ReferenceError(
            "CreateGraphResult.error is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = CreateGraphResult.Tags.error;
      this.$data = value;
    }
  });


    CreateGraphResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case CreateGraphResult.Tags.graphRemote:
          encoder.encodeStruct(new codec.Interface(webnn_graph$.WebNNGraphPtr), val.graphRemote);
          break;
        case CreateGraphResult.Tags.error:
          encoder.encodeStructPointer(Error, val.error);
          break;
      }
      encoder.align();
    };


    CreateGraphResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new CreateGraphResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case CreateGraphResult.Tags.graphRemote:
          result.graphRemote = decoder.decodeStruct(new codec.Interface(webnn_graph$.WebNNGraphPtr));
          break;
        case CreateGraphResult.Tags.error:
          result.error = decoder.decodeStructPointer(Error);
          break;
      }
      decoder.align();

      return result;
    };


    CreateGraphResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case CreateGraphResult.Tags.graphRemote:
          

    // validate CreateGraphResult.graphRemote
    err = messageValidator.validateInterface(data_offset, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case CreateGraphResult.Tags.error:
          

    // validate CreateGraphResult.error
    err = messageValidator.validateStructPointer(data_offset, Error, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  CreateGraphResult.encodedSize = 16;

  function CreateContextResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  CreateContextResult.Tags = {
    contextRemote: 0,
    error: 1,
  };

  CreateContextResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  CreateContextResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "contextRemote",
        "error",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a CreateContextResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(CreateContextResult.prototype, "contextRemote", {
    get: function() {
      if (this.$tag != CreateContextResult.Tags.contextRemote) {
        throw new ReferenceError(
            "CreateContextResult.contextRemote is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = CreateContextResult.Tags.contextRemote;
      this.$data = value;
    }
  });
  Object.defineProperty(CreateContextResult.prototype, "error", {
    get: function() {
      if (this.$tag != CreateContextResult.Tags.error) {
        throw new ReferenceError(
            "CreateContextResult.error is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = CreateContextResult.Tags.error;
      this.$data = value;
    }
  });


    CreateContextResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case CreateContextResult.Tags.contextRemote:
          encoder.encodeStruct(new codec.Interface(WebNNContextPtr), val.contextRemote);
          break;
        case CreateContextResult.Tags.error:
          encoder.encodeStructPointer(Error, val.error);
          break;
      }
      encoder.align();
    };


    CreateContextResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new CreateContextResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case CreateContextResult.Tags.contextRemote:
          result.contextRemote = decoder.decodeStruct(new codec.Interface(WebNNContextPtr));
          break;
        case CreateContextResult.Tags.error:
          result.error = decoder.decodeStructPointer(Error);
          break;
      }
      decoder.align();

      return result;
    };


    CreateContextResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case CreateContextResult.Tags.contextRemote:
          

    // validate CreateContextResult.contextRemote
    err = messageValidator.validateInterface(data_offset, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case CreateContextResult.Tags.error:
          

    // validate CreateContextResult.error
    err = messageValidator.validateStructPointer(data_offset, Error, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  CreateContextResult.encodedSize = 16;
  var kWebNNContext_CreateGraph_Name = 1616014066;

  function WebNNContextPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WebNNContext,
                                                   handleOrPtrInfo);
  }

  function WebNNContextAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WebNNContext, associatedInterfacePtrInfo);
  }

  WebNNContextAssociatedPtr.prototype =
      Object.create(WebNNContextPtr.prototype);
  WebNNContextAssociatedPtr.prototype.constructor =
      WebNNContextAssociatedPtr;

  function WebNNContextProxy(receiver) {
    this.receiver_ = receiver;
  }
  WebNNContextPtr.prototype.createGraph = function() {
    return WebNNContextProxy.prototype.createGraph
        .apply(this.ptr.getProxy(), arguments);
  };

  WebNNContextProxy.prototype.createGraph = function(graphInfo) {
    var params_ = new WebNNContext_CreateGraph_Params();
    params_.graphInfo = graphInfo;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebNNContext_CreateGraph_Name,
          codec.align(WebNNContext_CreateGraph_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebNNContext_CreateGraph_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebNNContext_CreateGraph_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function WebNNContextStub(delegate) {
    this.delegate_ = delegate;
  }
  WebNNContextStub.prototype.createGraph = function(graphInfo) {
    return this.delegate_ && this.delegate_.createGraph && this.delegate_.createGraph(graphInfo);
  }

  WebNNContextStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  WebNNContextStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWebNNContext_CreateGraph_Name:
      var params = reader.decodeStruct(WebNNContext_CreateGraph_Params);
      this.createGraph(params.graphInfo).then(function(response) {
        var responseParams =
            new WebNNContext_CreateGraph_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kWebNNContext_CreateGraph_Name,
            codec.align(WebNNContext_CreateGraph_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebNNContext_CreateGraph_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateWebNNContextRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWebNNContext_CreateGraph_Name:
        if (message.expectsResponse())
          paramsClass = WebNNContext_CreateGraph_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWebNNContextResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kWebNNContext_CreateGraph_Name:
        if (message.isResponse())
          paramsClass = WebNNContext_CreateGraph_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var WebNNContext = {
    name: 'webnn.mojom.WebNNContext',
    kVersion: 0,
    ptrClass: WebNNContextPtr,
    proxyClass: WebNNContextProxy,
    stubClass: WebNNContextStub,
    validateRequest: validateWebNNContextRequest,
    validateResponse: validateWebNNContextResponse,
  };
  WebNNContextStub.prototype.validator = validateWebNNContextRequest;
  WebNNContextProxy.prototype.validator = validateWebNNContextResponse;
  var kWebNNContextProvider_CreateWebNNContext_Name = 476267030;

  function WebNNContextProviderPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(WebNNContextProvider,
                                                   handleOrPtrInfo);
  }

  function WebNNContextProviderAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        WebNNContextProvider, associatedInterfacePtrInfo);
  }

  WebNNContextProviderAssociatedPtr.prototype =
      Object.create(WebNNContextProviderPtr.prototype);
  WebNNContextProviderAssociatedPtr.prototype.constructor =
      WebNNContextProviderAssociatedPtr;

  function WebNNContextProviderProxy(receiver) {
    this.receiver_ = receiver;
  }
  WebNNContextProviderPtr.prototype.createWebNNContext = function() {
    return WebNNContextProviderProxy.prototype.createWebNNContext
        .apply(this.ptr.getProxy(), arguments);
  };

  WebNNContextProviderProxy.prototype.createWebNNContext = function(options) {
    var params_ = new WebNNContextProvider_CreateWebNNContext_Params();
    params_.options = options;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kWebNNContextProvider_CreateWebNNContext_Name,
          codec.align(WebNNContextProvider_CreateWebNNContext_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(WebNNContextProvider_CreateWebNNContext_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(WebNNContextProvider_CreateWebNNContext_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function WebNNContextProviderStub(delegate) {
    this.delegate_ = delegate;
  }
  WebNNContextProviderStub.prototype.createWebNNContext = function(options) {
    return this.delegate_ && this.delegate_.createWebNNContext && this.delegate_.createWebNNContext(options);
  }

  WebNNContextProviderStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  WebNNContextProviderStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kWebNNContextProvider_CreateWebNNContext_Name:
      var params = reader.decodeStruct(WebNNContextProvider_CreateWebNNContext_Params);
      this.createWebNNContext(params.options).then(function(response) {
        var responseParams =
            new WebNNContextProvider_CreateWebNNContext_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kWebNNContextProvider_CreateWebNNContext_Name,
            codec.align(WebNNContextProvider_CreateWebNNContext_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(WebNNContextProvider_CreateWebNNContext_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateWebNNContextProviderRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kWebNNContextProvider_CreateWebNNContext_Name:
        if (message.expectsResponse())
          paramsClass = WebNNContextProvider_CreateWebNNContext_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateWebNNContextProviderResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kWebNNContextProvider_CreateWebNNContext_Name:
        if (message.isResponse())
          paramsClass = WebNNContextProvider_CreateWebNNContext_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var WebNNContextProvider = {
    name: 'webnn.mojom.WebNNContextProvider',
    kVersion: 0,
    ptrClass: WebNNContextProviderPtr,
    proxyClass: WebNNContextProviderProxy,
    stubClass: WebNNContextProviderStub,
    validateRequest: validateWebNNContextProviderRequest,
    validateResponse: validateWebNNContextProviderResponse,
  };
  WebNNContextProviderStub.prototype.validator = validateWebNNContextProviderRequest;
  WebNNContextProviderProxy.prototype.validator = validateWebNNContextProviderResponse;
  exports.PowerPreference = PowerPreference;
  exports.CreateContextOptions = CreateContextOptions;
  exports.Error = Error;
  exports.CreateGraphResult = CreateGraphResult;
  exports.CreateContextResult = CreateContextResult;
  exports.WebNNContext = WebNNContext;
  exports.WebNNContextPtr = WebNNContextPtr;
  exports.WebNNContextAssociatedPtr = WebNNContextAssociatedPtr;
  exports.WebNNContextProvider = WebNNContextProvider;
  exports.WebNNContextProviderPtr = WebNNContextProviderPtr;
  exports.WebNNContextProviderAssociatedPtr = WebNNContextProviderAssociatedPtr;
})();