// services/image_annotation/public/mojom/image_annotation.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/image_annotation/public/mojom/image_annotation.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('imageAnnotation.mojom');


  var AnnotateImageError = {};
  AnnotateImageError.kCanceled = 0;
  AnnotateImageError.kFailure = 1;
  AnnotateImageError.kAdult = 2;
  AnnotateImageError.MIN_VALUE = 0;
  AnnotateImageError.MAX_VALUE = 2;

  AnnotateImageError.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  AnnotateImageError.toKnownEnumValue = function(value) {
    return value;
  };

  AnnotateImageError.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var AnnotationType = {};
  AnnotationType.kOcr = 1;
  AnnotationType.kLabel = 2;
  AnnotationType.kCaption = 3;
  AnnotationType.kIcon = 4;
  AnnotationType.MIN_VALUE = 1;
  AnnotationType.MAX_VALUE = 4;

  AnnotationType.isKnownEnumValue = function(value) {
    switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  AnnotationType.toKnownEnumValue = function(value) {
    return value;
  };

  AnnotationType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function Annotation(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Annotation.prototype.initDefaults_ = function() {
    this.type = 0;
    this.score = 0;
    this.text = null;
  };
  Annotation.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Annotation.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Annotation.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, AnnotationType);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Annotation.text
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Annotation.encodedSize = codec.kStructHeaderSize + 24;

  Annotation.decode = function(decoder) {
    var packed;
    var val = new Annotation();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(new codec.Enum(AnnotationType));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.score =
        decoder.decodeStruct(codec.Double);
    val.text =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Annotation.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Annotation.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Double, val.score);
    encoder.encodeStruct(codec.String, val.text);
  };
  function ImageProcessor_GetJpgImageData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImageProcessor_GetJpgImageData_Params.prototype.initDefaults_ = function() {
  };
  ImageProcessor_GetJpgImageData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImageProcessor_GetJpgImageData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ImageProcessor_GetJpgImageData_Params.encodedSize = codec.kStructHeaderSize + 0;

  ImageProcessor_GetJpgImageData_Params.decode = function(decoder) {
    var packed;
    var val = new ImageProcessor_GetJpgImageData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ImageProcessor_GetJpgImageData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImageProcessor_GetJpgImageData_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ImageProcessor_GetJpgImageData_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImageProcessor_GetJpgImageData_ResponseParams.prototype.initDefaults_ = function() {
    this.bytes = null;
    this.width = 0;
    this.height = 0;
  };
  ImageProcessor_GetJpgImageData_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImageProcessor_GetJpgImageData_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImageProcessor_GetJpgImageData_ResponseParams.bytes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ImageProcessor_GetJpgImageData_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  ImageProcessor_GetJpgImageData_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ImageProcessor_GetJpgImageData_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bytes =
        decoder.decodeArrayPointer(codec.Uint8);
    val.width =
        decoder.decodeStruct(codec.Int32);
    val.height =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  ImageProcessor_GetJpgImageData_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImageProcessor_GetJpgImageData_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.Uint8, val.bytes);
    encoder.encodeStruct(codec.Int32, val.width);
    encoder.encodeStruct(codec.Int32, val.height);
  };
  function Annotator_AnnotateImage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Annotator_AnnotateImage_Params.prototype.initDefaults_ = function() {
    this.sourceId = null;
    this.descriptionLanguageTag = null;
    this.imageProcessor = new ImageProcessorPtr();
  };
  Annotator_AnnotateImage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Annotator_AnnotateImage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Annotator_AnnotateImage_Params.sourceId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Annotator_AnnotateImage_Params.descriptionLanguageTag
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Annotator_AnnotateImage_Params.imageProcessor
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 16, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Annotator_AnnotateImage_Params.encodedSize = codec.kStructHeaderSize + 24;

  Annotator_AnnotateImage_Params.decode = function(decoder) {
    var packed;
    var val = new Annotator_AnnotateImage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sourceId =
        decoder.decodeStruct(codec.String);
    val.descriptionLanguageTag =
        decoder.decodeStruct(codec.String);
    val.imageProcessor =
        decoder.decodeStruct(new codec.Interface(ImageProcessorPtr));
    return val;
  };

  Annotator_AnnotateImage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Annotator_AnnotateImage_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.sourceId);
    encoder.encodeStruct(codec.String, val.descriptionLanguageTag);
    encoder.encodeStruct(new codec.Interface(ImageProcessorPtr), val.imageProcessor);
  };
  function Annotator_AnnotateImage_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Annotator_AnnotateImage_ResponseParams.prototype.initDefaults_ = function() {
    this.result = null;
  };
  Annotator_AnnotateImage_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Annotator_AnnotateImage_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Annotator_AnnotateImage_ResponseParams.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, AnnotateImageResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Annotator_AnnotateImage_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  Annotator_AnnotateImage_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Annotator_AnnotateImage_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(AnnotateImageResult);
    return val;
  };

  Annotator_AnnotateImage_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Annotator_AnnotateImage_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(AnnotateImageResult, val.result);
  };
  function ImageAnnotationService_BindAnnotator_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImageAnnotationService_BindAnnotator_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  ImageAnnotationService_BindAnnotator_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImageAnnotationService_BindAnnotator_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImageAnnotationService_BindAnnotator_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ImageAnnotationService_BindAnnotator_Params.encodedSize = codec.kStructHeaderSize + 8;

  ImageAnnotationService_BindAnnotator_Params.decode = function(decoder) {
    var packed;
    var val = new ImageAnnotationService_BindAnnotator_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ImageAnnotationService_BindAnnotator_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImageAnnotationService_BindAnnotator_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function AnnotateImageResult(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  AnnotateImageResult.Tags = {
    errorCode: 0,
    annotations: 1,
  };

  AnnotateImageResult.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  AnnotateImageResult.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "errorCode",
        "annotations",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a AnnotateImageResult member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(AnnotateImageResult.prototype, "errorCode", {
    get: function() {
      if (this.$tag != AnnotateImageResult.Tags.errorCode) {
        throw new ReferenceError(
            "AnnotateImageResult.errorCode is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AnnotateImageResult.Tags.errorCode;
      this.$data = value;
    }
  });
  Object.defineProperty(AnnotateImageResult.prototype, "annotations", {
    get: function() {
      if (this.$tag != AnnotateImageResult.Tags.annotations) {
        throw new ReferenceError(
            "AnnotateImageResult.annotations is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = AnnotateImageResult.Tags.annotations;
      this.$data = value;
    }
  });


    AnnotateImageResult.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case AnnotateImageResult.Tags.errorCode:
          encoder.encodeStruct(codec.Int32, val.errorCode);
          break;
        case AnnotateImageResult.Tags.annotations:
          encoder.encodeArrayPointer(new codec.PointerTo(Annotation), val.annotations);
          break;
      }
      encoder.align();
    };


    AnnotateImageResult.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new AnnotateImageResult();
      var tag = decoder.readUint32();
      switch (tag) {
        case AnnotateImageResult.Tags.errorCode:
          result.errorCode = decoder.decodeStruct(new codec.Enum(AnnotateImageError));
          break;
        case AnnotateImageResult.Tags.annotations:
          result.annotations = decoder.decodeArrayPointer(new codec.PointerTo(Annotation));
          break;
      }
      decoder.align();

      return result;
    };


    AnnotateImageResult.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case AnnotateImageResult.Tags.errorCode:
          

    // validate AnnotateImageResult.errorCode
    err = messageValidator.validateEnum(data_offset, AnnotateImageError);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case AnnotateImageResult.Tags.annotations:
          

    // validate AnnotateImageResult.annotations
    err = messageValidator.validateArrayPointer(data_offset, 8, new codec.PointerTo(Annotation), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  AnnotateImageResult.encodedSize = 16;
  var kImageProcessor_GetJpgImageData_Name = 991890104;

  function ImageProcessorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ImageProcessor,
                                                   handleOrPtrInfo);
  }

  function ImageProcessorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ImageProcessor, associatedInterfacePtrInfo);
  }

  ImageProcessorAssociatedPtr.prototype =
      Object.create(ImageProcessorPtr.prototype);
  ImageProcessorAssociatedPtr.prototype.constructor =
      ImageProcessorAssociatedPtr;

  function ImageProcessorProxy(receiver) {
    this.receiver_ = receiver;
  }
  ImageProcessorPtr.prototype.getJpgImageData = function() {
    return ImageProcessorProxy.prototype.getJpgImageData
        .apply(this.ptr.getProxy(), arguments);
  };

  ImageProcessorProxy.prototype.getJpgImageData = function() {
    var params_ = new ImageProcessor_GetJpgImageData_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kImageProcessor_GetJpgImageData_Name,
          codec.align(ImageProcessor_GetJpgImageData_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ImageProcessor_GetJpgImageData_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ImageProcessor_GetJpgImageData_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function ImageProcessorStub(delegate) {
    this.delegate_ = delegate;
  }
  ImageProcessorStub.prototype.getJpgImageData = function() {
    return this.delegate_ && this.delegate_.getJpgImageData && this.delegate_.getJpgImageData();
  }

  ImageProcessorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  ImageProcessorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kImageProcessor_GetJpgImageData_Name:
      var params = reader.decodeStruct(ImageProcessor_GetJpgImageData_Params);
      this.getJpgImageData().then(function(response) {
        var responseParams =
            new ImageProcessor_GetJpgImageData_ResponseParams();
        responseParams.bytes = response.bytes;
        responseParams.width = response.width;
        responseParams.height = response.height;
        var builder = new codec.MessageV1Builder(
            kImageProcessor_GetJpgImageData_Name,
            codec.align(ImageProcessor_GetJpgImageData_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ImageProcessor_GetJpgImageData_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateImageProcessorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kImageProcessor_GetJpgImageData_Name:
        if (message.expectsResponse())
          paramsClass = ImageProcessor_GetJpgImageData_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateImageProcessorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kImageProcessor_GetJpgImageData_Name:
        if (message.isResponse())
          paramsClass = ImageProcessor_GetJpgImageData_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ImageProcessor = {
    name: 'image_annotation.mojom.ImageProcessor',
    kVersion: 0,
    ptrClass: ImageProcessorPtr,
    proxyClass: ImageProcessorProxy,
    stubClass: ImageProcessorStub,
    validateRequest: validateImageProcessorRequest,
    validateResponse: validateImageProcessorResponse,
  };
  ImageProcessorStub.prototype.validator = validateImageProcessorRequest;
  ImageProcessorProxy.prototype.validator = validateImageProcessorResponse;
  var kAnnotator_AnnotateImage_Name = 646843667;

  function AnnotatorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Annotator,
                                                   handleOrPtrInfo);
  }

  function AnnotatorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Annotator, associatedInterfacePtrInfo);
  }

  AnnotatorAssociatedPtr.prototype =
      Object.create(AnnotatorPtr.prototype);
  AnnotatorAssociatedPtr.prototype.constructor =
      AnnotatorAssociatedPtr;

  function AnnotatorProxy(receiver) {
    this.receiver_ = receiver;
  }
  AnnotatorPtr.prototype.annotateImage = function() {
    return AnnotatorProxy.prototype.annotateImage
        .apply(this.ptr.getProxy(), arguments);
  };

  AnnotatorProxy.prototype.annotateImage = function(sourceId, descriptionLanguageTag, imageProcessor) {
    var params_ = new Annotator_AnnotateImage_Params();
    params_.sourceId = sourceId;
    params_.descriptionLanguageTag = descriptionLanguageTag;
    params_.imageProcessor = imageProcessor;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kAnnotator_AnnotateImage_Name,
          codec.align(Annotator_AnnotateImage_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Annotator_AnnotateImage_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Annotator_AnnotateImage_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function AnnotatorStub(delegate) {
    this.delegate_ = delegate;
  }
  AnnotatorStub.prototype.annotateImage = function(sourceId, descriptionLanguageTag, imageProcessor) {
    return this.delegate_ && this.delegate_.annotateImage && this.delegate_.annotateImage(sourceId, descriptionLanguageTag, imageProcessor);
  }

  AnnotatorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  AnnotatorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAnnotator_AnnotateImage_Name:
      var params = reader.decodeStruct(Annotator_AnnotateImage_Params);
      this.annotateImage(params.sourceId, params.descriptionLanguageTag, params.imageProcessor).then(function(response) {
        var responseParams =
            new Annotator_AnnotateImage_ResponseParams();
        responseParams.result = response.result;
        var builder = new codec.MessageV1Builder(
            kAnnotator_AnnotateImage_Name,
            codec.align(Annotator_AnnotateImage_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Annotator_AnnotateImage_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateAnnotatorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAnnotator_AnnotateImage_Name:
        if (message.expectsResponse())
          paramsClass = Annotator_AnnotateImage_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAnnotatorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kAnnotator_AnnotateImage_Name:
        if (message.isResponse())
          paramsClass = Annotator_AnnotateImage_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Annotator = {
    name: 'image_annotation.mojom.Annotator',
    kVersion: 0,
    ptrClass: AnnotatorPtr,
    proxyClass: AnnotatorProxy,
    stubClass: AnnotatorStub,
    validateRequest: validateAnnotatorRequest,
    validateResponse: validateAnnotatorResponse,
  };
  AnnotatorStub.prototype.validator = validateAnnotatorRequest;
  AnnotatorProxy.prototype.validator = validateAnnotatorResponse;
  var kImageAnnotationService_BindAnnotator_Name = 1017686020;

  function ImageAnnotationServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ImageAnnotationService,
                                                   handleOrPtrInfo);
  }

  function ImageAnnotationServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ImageAnnotationService, associatedInterfacePtrInfo);
  }

  ImageAnnotationServiceAssociatedPtr.prototype =
      Object.create(ImageAnnotationServicePtr.prototype);
  ImageAnnotationServiceAssociatedPtr.prototype.constructor =
      ImageAnnotationServiceAssociatedPtr;

  function ImageAnnotationServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  ImageAnnotationServicePtr.prototype.bindAnnotator = function() {
    return ImageAnnotationServiceProxy.prototype.bindAnnotator
        .apply(this.ptr.getProxy(), arguments);
  };

  ImageAnnotationServiceProxy.prototype.bindAnnotator = function(receiver) {
    var params_ = new ImageAnnotationService_BindAnnotator_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kImageAnnotationService_BindAnnotator_Name,
        codec.align(ImageAnnotationService_BindAnnotator_Params.encodedSize));
    builder.encodeStruct(ImageAnnotationService_BindAnnotator_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ImageAnnotationServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  ImageAnnotationServiceStub.prototype.bindAnnotator = function(receiver) {
    return this.delegate_ && this.delegate_.bindAnnotator && this.delegate_.bindAnnotator(receiver);
  }

  ImageAnnotationServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kImageAnnotationService_BindAnnotator_Name:
      var params = reader.decodeStruct(ImageAnnotationService_BindAnnotator_Params);
      this.bindAnnotator(params.receiver);
      return true;
    default:
      return false;
    }
  };

  ImageAnnotationServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateImageAnnotationServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kImageAnnotationService_BindAnnotator_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ImageAnnotationService_BindAnnotator_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateImageAnnotationServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ImageAnnotationService = {
    name: 'image_annotation.mojom.ImageAnnotationService',
    kVersion: 0,
    ptrClass: ImageAnnotationServicePtr,
    proxyClass: ImageAnnotationServiceProxy,
    stubClass: ImageAnnotationServiceStub,
    validateRequest: validateImageAnnotationServiceRequest,
    validateResponse: null,
  };
  ImageAnnotationServiceStub.prototype.validator = validateImageAnnotationServiceRequest;
  ImageAnnotationServiceProxy.prototype.validator = null;
  exports.AnnotateImageError = AnnotateImageError;
  exports.AnnotationType = AnnotationType;
  exports.Annotation = Annotation;
  exports.AnnotateImageResult = AnnotateImageResult;
  exports.ImageProcessor = ImageProcessor;
  exports.ImageProcessorPtr = ImageProcessorPtr;
  exports.ImageProcessorAssociatedPtr = ImageProcessorAssociatedPtr;
  exports.Annotator = Annotator;
  exports.AnnotatorPtr = AnnotatorPtr;
  exports.AnnotatorAssociatedPtr = AnnotatorAssociatedPtr;
  exports.ImageAnnotationService = ImageAnnotationService;
  exports.ImageAnnotationServicePtr = ImageAnnotationServicePtr;
  exports.ImageAnnotationServiceAssociatedPtr = ImageAnnotationServiceAssociatedPtr;
})();