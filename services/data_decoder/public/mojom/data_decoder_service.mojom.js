// services/data_decoder/public/mojom/data_decoder_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/data_decoder/public/mojom/data_decoder_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('dataDecoder.mojom');
  var web_bundle_parser$ =
      mojo.internal.exposeNamespace('webPackage.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'components/web_package/mojom/web_bundle_parser.mojom', '../../../../components/web_package/mojom/web_bundle_parser.mojom.js');
  }
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var cbor_parser$ =
      mojo.internal.exposeNamespace('dataDecoder.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/data_decoder/public/mojom/cbor_parser.mojom', 'cbor_parser.mojom.js');
  }
  var gzipper$ =
      mojo.internal.exposeNamespace('dataDecoder.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/data_decoder/public/mojom/gzipper.mojom', 'gzipper.mojom.js');
  }
  var image_decoder$ =
      mojo.internal.exposeNamespace('dataDecoder.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/data_decoder/public/mojom/image_decoder.mojom', 'image_decoder.mojom.js');
  }
  var json_parser$ =
      mojo.internal.exposeNamespace('dataDecoder.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/data_decoder/public/mojom/json_parser.mojom', 'json_parser.mojom.js');
  }
  var structured_headers_parser$ =
      mojo.internal.exposeNamespace('dataDecoder.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/data_decoder/public/mojom/structured_headers_parser.mojom', 'structured_headers_parser.mojom.js');
  }
  var xml_parser$ =
      mojo.internal.exposeNamespace('dataDecoder.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/data_decoder/public/mojom/xml_parser.mojom', 'xml_parser.mojom.js');
  }



  function DataDecoderService_BindImageDecoder_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataDecoderService_BindImageDecoder_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  DataDecoderService_BindImageDecoder_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataDecoderService_BindImageDecoder_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataDecoderService_BindImageDecoder_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataDecoderService_BindImageDecoder_Params.encodedSize = codec.kStructHeaderSize + 8;

  DataDecoderService_BindImageDecoder_Params.decode = function(decoder) {
    var packed;
    var val = new DataDecoderService_BindImageDecoder_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DataDecoderService_BindImageDecoder_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataDecoderService_BindImageDecoder_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DataDecoderService_BindJsonParser_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataDecoderService_BindJsonParser_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  DataDecoderService_BindJsonParser_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataDecoderService_BindJsonParser_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataDecoderService_BindJsonParser_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataDecoderService_BindJsonParser_Params.encodedSize = codec.kStructHeaderSize + 8;

  DataDecoderService_BindJsonParser_Params.decode = function(decoder) {
    var packed;
    var val = new DataDecoderService_BindJsonParser_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DataDecoderService_BindJsonParser_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataDecoderService_BindJsonParser_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DataDecoderService_BindXmlParser_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataDecoderService_BindXmlParser_Params.prototype.initDefaults_ = function() {
    this.reciever = new bindings.InterfaceRequest();
  };
  DataDecoderService_BindXmlParser_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataDecoderService_BindXmlParser_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataDecoderService_BindXmlParser_Params.reciever
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataDecoderService_BindXmlParser_Params.encodedSize = codec.kStructHeaderSize + 8;

  DataDecoderService_BindXmlParser_Params.decode = function(decoder) {
    var packed;
    var val = new DataDecoderService_BindXmlParser_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.reciever =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DataDecoderService_BindXmlParser_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataDecoderService_BindXmlParser_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.reciever);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DataDecoderService_BindWebBundleParserFactory_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataDecoderService_BindWebBundleParserFactory_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  DataDecoderService_BindWebBundleParserFactory_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataDecoderService_BindWebBundleParserFactory_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataDecoderService_BindWebBundleParserFactory_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataDecoderService_BindWebBundleParserFactory_Params.encodedSize = codec.kStructHeaderSize + 8;

  DataDecoderService_BindWebBundleParserFactory_Params.decode = function(decoder) {
    var packed;
    var val = new DataDecoderService_BindWebBundleParserFactory_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DataDecoderService_BindWebBundleParserFactory_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataDecoderService_BindWebBundleParserFactory_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DataDecoderService_BindGzipper_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataDecoderService_BindGzipper_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  DataDecoderService_BindGzipper_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataDecoderService_BindGzipper_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataDecoderService_BindGzipper_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataDecoderService_BindGzipper_Params.encodedSize = codec.kStructHeaderSize + 8;

  DataDecoderService_BindGzipper_Params.decode = function(decoder) {
    var packed;
    var val = new DataDecoderService_BindGzipper_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DataDecoderService_BindGzipper_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataDecoderService_BindGzipper_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DataDecoderService_BindStructuredHeadersParser_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataDecoderService_BindStructuredHeadersParser_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  DataDecoderService_BindStructuredHeadersParser_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataDecoderService_BindStructuredHeadersParser_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataDecoderService_BindStructuredHeadersParser_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataDecoderService_BindStructuredHeadersParser_Params.encodedSize = codec.kStructHeaderSize + 8;

  DataDecoderService_BindStructuredHeadersParser_Params.decode = function(decoder) {
    var packed;
    var val = new DataDecoderService_BindStructuredHeadersParser_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DataDecoderService_BindStructuredHeadersParser_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataDecoderService_BindStructuredHeadersParser_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DataDecoderService_BindCborParser_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataDecoderService_BindCborParser_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  DataDecoderService_BindCborParser_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataDecoderService_BindCborParser_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataDecoderService_BindCborParser_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataDecoderService_BindCborParser_Params.encodedSize = codec.kStructHeaderSize + 8;

  DataDecoderService_BindCborParser_Params.decode = function(decoder) {
    var packed;
    var val = new DataDecoderService_BindCborParser_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DataDecoderService_BindCborParser_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataDecoderService_BindCborParser_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kDataDecoderService_BindImageDecoder_Name = 8101316;
  var kDataDecoderService_BindJsonParser_Name = 1257556056;
  var kDataDecoderService_BindXmlParser_Name = 782659087;
  var kDataDecoderService_BindWebBundleParserFactory_Name = 725897953;
  var kDataDecoderService_BindGzipper_Name = 1052888567;
  var kDataDecoderService_BindStructuredHeadersParser_Name = 2050520368;
  var kDataDecoderService_BindCborParser_Name = 322850885;

  function DataDecoderServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DataDecoderService,
                                                   handleOrPtrInfo);
  }

  function DataDecoderServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DataDecoderService, associatedInterfacePtrInfo);
  }

  DataDecoderServiceAssociatedPtr.prototype =
      Object.create(DataDecoderServicePtr.prototype);
  DataDecoderServiceAssociatedPtr.prototype.constructor =
      DataDecoderServiceAssociatedPtr;

  function DataDecoderServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  DataDecoderServicePtr.prototype.bindImageDecoder = function() {
    return DataDecoderServiceProxy.prototype.bindImageDecoder
        .apply(this.ptr.getProxy(), arguments);
  };

  DataDecoderServiceProxy.prototype.bindImageDecoder = function(receiver) {
    var params_ = new DataDecoderService_BindImageDecoder_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDataDecoderService_BindImageDecoder_Name,
        codec.align(DataDecoderService_BindImageDecoder_Params.encodedSize));
    builder.encodeStruct(DataDecoderService_BindImageDecoder_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DataDecoderServicePtr.prototype.bindJsonParser = function() {
    return DataDecoderServiceProxy.prototype.bindJsonParser
        .apply(this.ptr.getProxy(), arguments);
  };

  DataDecoderServiceProxy.prototype.bindJsonParser = function(receiver) {
    var params_ = new DataDecoderService_BindJsonParser_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDataDecoderService_BindJsonParser_Name,
        codec.align(DataDecoderService_BindJsonParser_Params.encodedSize));
    builder.encodeStruct(DataDecoderService_BindJsonParser_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DataDecoderServicePtr.prototype.bindXmlParser = function() {
    return DataDecoderServiceProxy.prototype.bindXmlParser
        .apply(this.ptr.getProxy(), arguments);
  };

  DataDecoderServiceProxy.prototype.bindXmlParser = function(reciever) {
    var params_ = new DataDecoderService_BindXmlParser_Params();
    params_.reciever = reciever;
    var builder = new codec.MessageV0Builder(
        kDataDecoderService_BindXmlParser_Name,
        codec.align(DataDecoderService_BindXmlParser_Params.encodedSize));
    builder.encodeStruct(DataDecoderService_BindXmlParser_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DataDecoderServicePtr.prototype.bindWebBundleParserFactory = function() {
    return DataDecoderServiceProxy.prototype.bindWebBundleParserFactory
        .apply(this.ptr.getProxy(), arguments);
  };

  DataDecoderServiceProxy.prototype.bindWebBundleParserFactory = function(receiver) {
    var params_ = new DataDecoderService_BindWebBundleParserFactory_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDataDecoderService_BindWebBundleParserFactory_Name,
        codec.align(DataDecoderService_BindWebBundleParserFactory_Params.encodedSize));
    builder.encodeStruct(DataDecoderService_BindWebBundleParserFactory_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DataDecoderServicePtr.prototype.bindGzipper = function() {
    return DataDecoderServiceProxy.prototype.bindGzipper
        .apply(this.ptr.getProxy(), arguments);
  };

  DataDecoderServiceProxy.prototype.bindGzipper = function(receiver) {
    var params_ = new DataDecoderService_BindGzipper_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDataDecoderService_BindGzipper_Name,
        codec.align(DataDecoderService_BindGzipper_Params.encodedSize));
    builder.encodeStruct(DataDecoderService_BindGzipper_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DataDecoderServicePtr.prototype.bindStructuredHeadersParser = function() {
    return DataDecoderServiceProxy.prototype.bindStructuredHeadersParser
        .apply(this.ptr.getProxy(), arguments);
  };

  DataDecoderServiceProxy.prototype.bindStructuredHeadersParser = function(receiver) {
    var params_ = new DataDecoderService_BindStructuredHeadersParser_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDataDecoderService_BindStructuredHeadersParser_Name,
        codec.align(DataDecoderService_BindStructuredHeadersParser_Params.encodedSize));
    builder.encodeStruct(DataDecoderService_BindStructuredHeadersParser_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DataDecoderServicePtr.prototype.bindCborParser = function() {
    return DataDecoderServiceProxy.prototype.bindCborParser
        .apply(this.ptr.getProxy(), arguments);
  };

  DataDecoderServiceProxy.prototype.bindCborParser = function(receiver) {
    var params_ = new DataDecoderService_BindCborParser_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDataDecoderService_BindCborParser_Name,
        codec.align(DataDecoderService_BindCborParser_Params.encodedSize));
    builder.encodeStruct(DataDecoderService_BindCborParser_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DataDecoderServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  DataDecoderServiceStub.prototype.bindImageDecoder = function(receiver) {
    return this.delegate_ && this.delegate_.bindImageDecoder && this.delegate_.bindImageDecoder(receiver);
  }
  DataDecoderServiceStub.prototype.bindJsonParser = function(receiver) {
    return this.delegate_ && this.delegate_.bindJsonParser && this.delegate_.bindJsonParser(receiver);
  }
  DataDecoderServiceStub.prototype.bindXmlParser = function(reciever) {
    return this.delegate_ && this.delegate_.bindXmlParser && this.delegate_.bindXmlParser(reciever);
  }
  DataDecoderServiceStub.prototype.bindWebBundleParserFactory = function(receiver) {
    return this.delegate_ && this.delegate_.bindWebBundleParserFactory && this.delegate_.bindWebBundleParserFactory(receiver);
  }
  DataDecoderServiceStub.prototype.bindGzipper = function(receiver) {
    return this.delegate_ && this.delegate_.bindGzipper && this.delegate_.bindGzipper(receiver);
  }
  DataDecoderServiceStub.prototype.bindStructuredHeadersParser = function(receiver) {
    return this.delegate_ && this.delegate_.bindStructuredHeadersParser && this.delegate_.bindStructuredHeadersParser(receiver);
  }
  DataDecoderServiceStub.prototype.bindCborParser = function(receiver) {
    return this.delegate_ && this.delegate_.bindCborParser && this.delegate_.bindCborParser(receiver);
  }

  DataDecoderServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDataDecoderService_BindImageDecoder_Name:
      var params = reader.decodeStruct(DataDecoderService_BindImageDecoder_Params);
      this.bindImageDecoder(params.receiver);
      return true;
    case kDataDecoderService_BindJsonParser_Name:
      var params = reader.decodeStruct(DataDecoderService_BindJsonParser_Params);
      this.bindJsonParser(params.receiver);
      return true;
    case kDataDecoderService_BindXmlParser_Name:
      var params = reader.decodeStruct(DataDecoderService_BindXmlParser_Params);
      this.bindXmlParser(params.reciever);
      return true;
    case kDataDecoderService_BindWebBundleParserFactory_Name:
      var params = reader.decodeStruct(DataDecoderService_BindWebBundleParserFactory_Params);
      this.bindWebBundleParserFactory(params.receiver);
      return true;
    case kDataDecoderService_BindGzipper_Name:
      var params = reader.decodeStruct(DataDecoderService_BindGzipper_Params);
      this.bindGzipper(params.receiver);
      return true;
    case kDataDecoderService_BindStructuredHeadersParser_Name:
      var params = reader.decodeStruct(DataDecoderService_BindStructuredHeadersParser_Params);
      this.bindStructuredHeadersParser(params.receiver);
      return true;
    case kDataDecoderService_BindCborParser_Name:
      var params = reader.decodeStruct(DataDecoderService_BindCborParser_Params);
      this.bindCborParser(params.receiver);
      return true;
    default:
      return false;
    }
  };

  DataDecoderServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDataDecoderServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDataDecoderService_BindImageDecoder_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DataDecoderService_BindImageDecoder_Params;
      break;
      case kDataDecoderService_BindJsonParser_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DataDecoderService_BindJsonParser_Params;
      break;
      case kDataDecoderService_BindXmlParser_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DataDecoderService_BindXmlParser_Params;
      break;
      case kDataDecoderService_BindWebBundleParserFactory_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DataDecoderService_BindWebBundleParserFactory_Params;
      break;
      case kDataDecoderService_BindGzipper_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DataDecoderService_BindGzipper_Params;
      break;
      case kDataDecoderService_BindStructuredHeadersParser_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DataDecoderService_BindStructuredHeadersParser_Params;
      break;
      case kDataDecoderService_BindCborParser_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DataDecoderService_BindCborParser_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDataDecoderServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DataDecoderService = {
    name: 'data_decoder.mojom.DataDecoderService',
    kVersion: 0,
    ptrClass: DataDecoderServicePtr,
    proxyClass: DataDecoderServiceProxy,
    stubClass: DataDecoderServiceStub,
    validateRequest: validateDataDecoderServiceRequest,
    validateResponse: null,
  };
  DataDecoderServiceStub.prototype.validator = validateDataDecoderServiceRequest;
  DataDecoderServiceProxy.prototype.validator = null;
  exports.DataDecoderService = DataDecoderService;
  exports.DataDecoderServicePtr = DataDecoderServicePtr;
  exports.DataDecoderServiceAssociatedPtr = DataDecoderServiceAssociatedPtr;
})();