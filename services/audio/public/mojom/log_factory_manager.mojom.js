// services/audio/public/mojom/log_factory_manager.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/audio/public/mojom/log_factory_manager.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('audio.mojom');
  var audio_logging$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/audio_logging.mojom', '../../../../media/mojo/mojom/audio_logging.mojom.js');
  }



  function LogFactoryManager_SetLogFactory_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LogFactoryManager_SetLogFactory_Params.prototype.initDefaults_ = function() {
    this.factory = new audio_logging$.AudioLogFactoryPtr();
  };
  LogFactoryManager_SetLogFactory_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LogFactoryManager_SetLogFactory_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LogFactoryManager_SetLogFactory_Params.factory
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LogFactoryManager_SetLogFactory_Params.encodedSize = codec.kStructHeaderSize + 8;

  LogFactoryManager_SetLogFactory_Params.decode = function(decoder) {
    var packed;
    var val = new LogFactoryManager_SetLogFactory_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.factory =
        decoder.decodeStruct(new codec.Interface(audio_logging$.AudioLogFactoryPtr));
    return val;
  };

  LogFactoryManager_SetLogFactory_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LogFactoryManager_SetLogFactory_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(audio_logging$.AudioLogFactoryPtr), val.factory);
  };
  var kLogFactoryManager_SetLogFactory_Name = 1574026140;

  function LogFactoryManagerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(LogFactoryManager,
                                                   handleOrPtrInfo);
  }

  function LogFactoryManagerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        LogFactoryManager, associatedInterfacePtrInfo);
  }

  LogFactoryManagerAssociatedPtr.prototype =
      Object.create(LogFactoryManagerPtr.prototype);
  LogFactoryManagerAssociatedPtr.prototype.constructor =
      LogFactoryManagerAssociatedPtr;

  function LogFactoryManagerProxy(receiver) {
    this.receiver_ = receiver;
  }
  LogFactoryManagerPtr.prototype.setLogFactory = function() {
    return LogFactoryManagerProxy.prototype.setLogFactory
        .apply(this.ptr.getProxy(), arguments);
  };

  LogFactoryManagerProxy.prototype.setLogFactory = function(factory) {
    var params_ = new LogFactoryManager_SetLogFactory_Params();
    params_.factory = factory;
    var builder = new codec.MessageV0Builder(
        kLogFactoryManager_SetLogFactory_Name,
        codec.align(LogFactoryManager_SetLogFactory_Params.encodedSize));
    builder.encodeStruct(LogFactoryManager_SetLogFactory_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function LogFactoryManagerStub(delegate) {
    this.delegate_ = delegate;
  }
  LogFactoryManagerStub.prototype.setLogFactory = function(factory) {
    return this.delegate_ && this.delegate_.setLogFactory && this.delegate_.setLogFactory(factory);
  }

  LogFactoryManagerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kLogFactoryManager_SetLogFactory_Name:
      var params = reader.decodeStruct(LogFactoryManager_SetLogFactory_Params);
      this.setLogFactory(params.factory);
      return true;
    default:
      return false;
    }
  };

  LogFactoryManagerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateLogFactoryManagerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kLogFactoryManager_SetLogFactory_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = LogFactoryManager_SetLogFactory_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateLogFactoryManagerResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var LogFactoryManager = {
    name: 'audio.mojom.LogFactoryManager',
    kVersion: 0,
    ptrClass: LogFactoryManagerPtr,
    proxyClass: LogFactoryManagerProxy,
    stubClass: LogFactoryManagerStub,
    validateRequest: validateLogFactoryManagerRequest,
    validateResponse: null,
  };
  LogFactoryManagerStub.prototype.validator = validateLogFactoryManagerRequest;
  LogFactoryManagerProxy.prototype.validator = null;
  exports.LogFactoryManager = LogFactoryManager;
  exports.LogFactoryManagerPtr = LogFactoryManagerPtr;
  exports.LogFactoryManagerAssociatedPtr = LogFactoryManagerAssociatedPtr;
})();