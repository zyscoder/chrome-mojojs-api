// services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('certVerifier.mojom');
  var big_buffer$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/big_buffer.mojom', '../../../../mojo/public/mojom/base/big_buffer.mojom.js');
  }
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var read_only_buffer$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/read_only_buffer.mojom', '../../../../mojo/public/mojom/base/read_only_buffer.mojom.js');
  }
  var cert_verifier_service$ =
      mojo.internal.exposeNamespace('certVerifier.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/cert_verifier_service.mojom', '../../../network/public/mojom/cert_verifier_service.mojom.js');
  }



  function CertVerifierCreationParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CertVerifierCreationParams.prototype.initDefaults_ = function() {
  };
  CertVerifierCreationParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CertVerifierCreationParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CertVerifierCreationParams.encodedSize = codec.kStructHeaderSize + 0;

  CertVerifierCreationParams.decode = function(decoder) {
    var packed;
    var val = new CertVerifierCreationParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CertVerifierCreationParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CertVerifierCreationParams.encodedSize);
    encoder.writeUint32(0);
  };
  function ChromeRootStore(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeRootStore.prototype.initDefaults_ = function() {
    this.serializedProtoRootStore = null;
  };
  ChromeRootStore.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeRootStore.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRootStore.serializedProtoRootStore
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, big_buffer$.BigBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeRootStore.encodedSize = codec.kStructHeaderSize + 16;

  ChromeRootStore.decode = function(decoder) {
    var packed;
    var val = new ChromeRootStore();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.serializedProtoRootStore =
        decoder.decodeStruct(big_buffer$.BigBuffer);
    return val;
  };

  ChromeRootStore.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeRootStore.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(big_buffer$.BigBuffer, val.serializedProtoRootStore);
  };
  function ChromeRootCertInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeRootCertInfo.prototype.initDefaults_ = function() {
    this.name = null;
    this.sha256hashHex = null;
  };
  ChromeRootCertInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeRootCertInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRootCertInfo.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeRootCertInfo.sha256hashHex
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeRootCertInfo.encodedSize = codec.kStructHeaderSize + 16;

  ChromeRootCertInfo.decode = function(decoder) {
    var packed;
    var val = new ChromeRootCertInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.sha256hashHex =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ChromeRootCertInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeRootCertInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.String, val.sha256hashHex);
  };
  function ChromeRootStoreInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeRootStoreInfo.prototype.initDefaults_ = function() {
    this.version = 0;
    this.rootCertInfo = null;
  };
  ChromeRootStoreInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeRootStoreInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ChromeRootStoreInfo.rootCertInfo
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(ChromeRootCertInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeRootStoreInfo.encodedSize = codec.kStructHeaderSize + 16;

  ChromeRootStoreInfo.decode = function(decoder) {
    var packed;
    var val = new ChromeRootStoreInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.version =
        decoder.decodeStruct(codec.Int64);
    val.rootCertInfo =
        decoder.decodeArrayPointer(new codec.PointerTo(ChromeRootCertInfo));
    return val;
  };

  ChromeRootStoreInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeRootStoreInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int64, val.version);
    encoder.encodeArrayPointer(new codec.PointerTo(ChromeRootCertInfo), val.rootCertInfo);
  };
  function CertVerifierServiceFactory_GetNewCertVerifier_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CertVerifierServiceFactory_GetNewCertVerifier_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
    this.client = new cert_verifier_service$.CertVerifierServiceClientPtr();
    this.creationParams = null;
  };
  CertVerifierServiceFactory_GetNewCertVerifier_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CertVerifierServiceFactory_GetNewCertVerifier_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CertVerifierServiceFactory_GetNewCertVerifier_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CertVerifierServiceFactory_GetNewCertVerifier_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CertVerifierServiceFactory_GetNewCertVerifier_Params.creationParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, CertVerifierCreationParams, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CertVerifierServiceFactory_GetNewCertVerifier_Params.encodedSize = codec.kStructHeaderSize + 24;

  CertVerifierServiceFactory_GetNewCertVerifier_Params.decode = function(decoder) {
    var packed;
    var val = new CertVerifierServiceFactory_GetNewCertVerifier_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.client =
        decoder.decodeStruct(new codec.Interface(cert_verifier_service$.CertVerifierServiceClientPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.creationParams =
        decoder.decodeStructPointer(CertVerifierCreationParams);
    return val;
  };

  CertVerifierServiceFactory_GetNewCertVerifier_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CertVerifierServiceFactory_GetNewCertVerifier_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(new codec.Interface(cert_verifier_service$.CertVerifierServiceClientPtr), val.client);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(CertVerifierCreationParams, val.creationParams);
  };
  function CertVerifierServiceFactory_UpdateCRLSet_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CertVerifierServiceFactory_UpdateCRLSet_Params.prototype.initDefaults_ = function() {
    this.crlSet = null;
  };
  CertVerifierServiceFactory_UpdateCRLSet_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CertVerifierServiceFactory_UpdateCRLSet_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CertVerifierServiceFactory_UpdateCRLSet_Params.crlSet
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, big_buffer$.BigBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CertVerifierServiceFactory_UpdateCRLSet_Params.encodedSize = codec.kStructHeaderSize + 16;

  CertVerifierServiceFactory_UpdateCRLSet_Params.decode = function(decoder) {
    var packed;
    var val = new CertVerifierServiceFactory_UpdateCRLSet_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.crlSet =
        decoder.decodeStruct(big_buffer$.BigBuffer);
    return val;
  };

  CertVerifierServiceFactory_UpdateCRLSet_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CertVerifierServiceFactory_UpdateCRLSet_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(big_buffer$.BigBuffer, val.crlSet);
  };
  function CertVerifierServiceFactory_UpdateCRLSet_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CertVerifierServiceFactory_UpdateCRLSet_ResponseParams.prototype.initDefaults_ = function() {
  };
  CertVerifierServiceFactory_UpdateCRLSet_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CertVerifierServiceFactory_UpdateCRLSet_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CertVerifierServiceFactory_UpdateCRLSet_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  CertVerifierServiceFactory_UpdateCRLSet_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CertVerifierServiceFactory_UpdateCRLSet_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CertVerifierServiceFactory_UpdateCRLSet_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CertVerifierServiceFactory_UpdateCRLSet_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function CertVerifierServiceFactory_UpdateChromeRootStore_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CertVerifierServiceFactory_UpdateChromeRootStore_Params.prototype.initDefaults_ = function() {
    this.newRootStore = null;
  };
  CertVerifierServiceFactory_UpdateChromeRootStore_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CertVerifierServiceFactory_UpdateChromeRootStore_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CertVerifierServiceFactory_UpdateChromeRootStore_Params.newRootStore
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ChromeRootStore, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CertVerifierServiceFactory_UpdateChromeRootStore_Params.encodedSize = codec.kStructHeaderSize + 8;

  CertVerifierServiceFactory_UpdateChromeRootStore_Params.decode = function(decoder) {
    var packed;
    var val = new CertVerifierServiceFactory_UpdateChromeRootStore_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.newRootStore =
        decoder.decodeStructPointer(ChromeRootStore);
    return val;
  };

  CertVerifierServiceFactory_UpdateChromeRootStore_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CertVerifierServiceFactory_UpdateChromeRootStore_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ChromeRootStore, val.newRootStore);
  };
  function CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams.prototype.initDefaults_ = function() {
  };
  CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function CertVerifierServiceFactory_GetChromeRootStoreInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CertVerifierServiceFactory_GetChromeRootStoreInfo_Params.prototype.initDefaults_ = function() {
  };
  CertVerifierServiceFactory_GetChromeRootStoreInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CertVerifierServiceFactory_GetChromeRootStoreInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CertVerifierServiceFactory_GetChromeRootStoreInfo_Params.encodedSize = codec.kStructHeaderSize + 0;

  CertVerifierServiceFactory_GetChromeRootStoreInfo_Params.decode = function(decoder) {
    var packed;
    var val = new CertVerifierServiceFactory_GetChromeRootStoreInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CertVerifierServiceFactory_GetChromeRootStoreInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CertVerifierServiceFactory_GetChromeRootStoreInfo_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams.prototype.initDefaults_ = function() {
    this.rootStoreInfo = null;
  };
  CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams.rootStoreInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ChromeRootStoreInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rootStoreInfo =
        decoder.decodeStructPointer(ChromeRootStoreInfo);
    return val;
  };

  CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ChromeRootStoreInfo, val.rootStoreInfo);
  };
  var kCertVerifierServiceFactory_GetNewCertVerifier_Name = 1376943485;
  var kCertVerifierServiceFactory_UpdateCRLSet_Name = 1772096993;
  var kCertVerifierServiceFactory_UpdateChromeRootStore_Name = 2108771138;
  var kCertVerifierServiceFactory_GetChromeRootStoreInfo_Name = 169176199;

  function CertVerifierServiceFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CertVerifierServiceFactory,
                                                   handleOrPtrInfo);
  }

  function CertVerifierServiceFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CertVerifierServiceFactory, associatedInterfacePtrInfo);
  }

  CertVerifierServiceFactoryAssociatedPtr.prototype =
      Object.create(CertVerifierServiceFactoryPtr.prototype);
  CertVerifierServiceFactoryAssociatedPtr.prototype.constructor =
      CertVerifierServiceFactoryAssociatedPtr;

  function CertVerifierServiceFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  CertVerifierServiceFactoryPtr.prototype.getNewCertVerifier = function() {
    return CertVerifierServiceFactoryProxy.prototype.getNewCertVerifier
        .apply(this.ptr.getProxy(), arguments);
  };

  CertVerifierServiceFactoryProxy.prototype.getNewCertVerifier = function(receiver, client, creationParams) {
    var params_ = new CertVerifierServiceFactory_GetNewCertVerifier_Params();
    params_.receiver = receiver;
    params_.client = client;
    params_.creationParams = creationParams;
    var builder = new codec.MessageV0Builder(
        kCertVerifierServiceFactory_GetNewCertVerifier_Name,
        codec.align(CertVerifierServiceFactory_GetNewCertVerifier_Params.encodedSize));
    builder.encodeStruct(CertVerifierServiceFactory_GetNewCertVerifier_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  CertVerifierServiceFactoryPtr.prototype.updateCRLSet = function() {
    return CertVerifierServiceFactoryProxy.prototype.updateCRLSet
        .apply(this.ptr.getProxy(), arguments);
  };

  CertVerifierServiceFactoryProxy.prototype.updateCRLSet = function(crlSet) {
    var params_ = new CertVerifierServiceFactory_UpdateCRLSet_Params();
    params_.crlSet = crlSet;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCertVerifierServiceFactory_UpdateCRLSet_Name,
          codec.align(CertVerifierServiceFactory_UpdateCRLSet_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CertVerifierServiceFactory_UpdateCRLSet_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CertVerifierServiceFactory_UpdateCRLSet_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CertVerifierServiceFactoryPtr.prototype.updateChromeRootStore = function() {
    return CertVerifierServiceFactoryProxy.prototype.updateChromeRootStore
        .apply(this.ptr.getProxy(), arguments);
  };

  CertVerifierServiceFactoryProxy.prototype.updateChromeRootStore = function(newRootStore) {
    var params_ = new CertVerifierServiceFactory_UpdateChromeRootStore_Params();
    params_.newRootStore = newRootStore;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCertVerifierServiceFactory_UpdateChromeRootStore_Name,
          codec.align(CertVerifierServiceFactory_UpdateChromeRootStore_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CertVerifierServiceFactory_UpdateChromeRootStore_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CertVerifierServiceFactoryPtr.prototype.getChromeRootStoreInfo = function() {
    return CertVerifierServiceFactoryProxy.prototype.getChromeRootStoreInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  CertVerifierServiceFactoryProxy.prototype.getChromeRootStoreInfo = function() {
    var params_ = new CertVerifierServiceFactory_GetChromeRootStoreInfo_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCertVerifierServiceFactory_GetChromeRootStoreInfo_Name,
          codec.align(CertVerifierServiceFactory_GetChromeRootStoreInfo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CertVerifierServiceFactory_GetChromeRootStoreInfo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function CertVerifierServiceFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  CertVerifierServiceFactoryStub.prototype.getNewCertVerifier = function(receiver, client, creationParams) {
    return this.delegate_ && this.delegate_.getNewCertVerifier && this.delegate_.getNewCertVerifier(receiver, client, creationParams);
  }
  CertVerifierServiceFactoryStub.prototype.updateCRLSet = function(crlSet) {
    return this.delegate_ && this.delegate_.updateCRLSet && this.delegate_.updateCRLSet(crlSet);
  }
  CertVerifierServiceFactoryStub.prototype.updateChromeRootStore = function(newRootStore) {
    return this.delegate_ && this.delegate_.updateChromeRootStore && this.delegate_.updateChromeRootStore(newRootStore);
  }
  CertVerifierServiceFactoryStub.prototype.getChromeRootStoreInfo = function() {
    return this.delegate_ && this.delegate_.getChromeRootStoreInfo && this.delegate_.getChromeRootStoreInfo();
  }

  CertVerifierServiceFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCertVerifierServiceFactory_GetNewCertVerifier_Name:
      var params = reader.decodeStruct(CertVerifierServiceFactory_GetNewCertVerifier_Params);
      this.getNewCertVerifier(params.receiver, params.client, params.creationParams);
      return true;
    default:
      return false;
    }
  };

  CertVerifierServiceFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCertVerifierServiceFactory_UpdateCRLSet_Name:
      var params = reader.decodeStruct(CertVerifierServiceFactory_UpdateCRLSet_Params);
      this.updateCRLSet(params.crlSet).then(function(response) {
        var responseParams =
            new CertVerifierServiceFactory_UpdateCRLSet_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kCertVerifierServiceFactory_UpdateCRLSet_Name,
            codec.align(CertVerifierServiceFactory_UpdateCRLSet_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CertVerifierServiceFactory_UpdateCRLSet_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCertVerifierServiceFactory_UpdateChromeRootStore_Name:
      var params = reader.decodeStruct(CertVerifierServiceFactory_UpdateChromeRootStore_Params);
      this.updateChromeRootStore(params.newRootStore).then(function(response) {
        var responseParams =
            new CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kCertVerifierServiceFactory_UpdateChromeRootStore_Name,
            codec.align(CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCertVerifierServiceFactory_GetChromeRootStoreInfo_Name:
      var params = reader.decodeStruct(CertVerifierServiceFactory_GetChromeRootStoreInfo_Params);
      this.getChromeRootStoreInfo().then(function(response) {
        var responseParams =
            new CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams();
        responseParams.rootStoreInfo = response.rootStoreInfo;
        var builder = new codec.MessageV1Builder(
            kCertVerifierServiceFactory_GetChromeRootStoreInfo_Name,
            codec.align(CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateCertVerifierServiceFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCertVerifierServiceFactory_GetNewCertVerifier_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = CertVerifierServiceFactory_GetNewCertVerifier_Params;
      break;
      case kCertVerifierServiceFactory_UpdateCRLSet_Name:
        if (message.expectsResponse())
          paramsClass = CertVerifierServiceFactory_UpdateCRLSet_Params;
      break;
      case kCertVerifierServiceFactory_UpdateChromeRootStore_Name:
        if (message.expectsResponse())
          paramsClass = CertVerifierServiceFactory_UpdateChromeRootStore_Params;
      break;
      case kCertVerifierServiceFactory_GetChromeRootStoreInfo_Name:
        if (message.expectsResponse())
          paramsClass = CertVerifierServiceFactory_GetChromeRootStoreInfo_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCertVerifierServiceFactoryResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kCertVerifierServiceFactory_UpdateCRLSet_Name:
        if (message.isResponse())
          paramsClass = CertVerifierServiceFactory_UpdateCRLSet_ResponseParams;
        break;
      case kCertVerifierServiceFactory_UpdateChromeRootStore_Name:
        if (message.isResponse())
          paramsClass = CertVerifierServiceFactory_UpdateChromeRootStore_ResponseParams;
        break;
      case kCertVerifierServiceFactory_GetChromeRootStoreInfo_Name:
        if (message.isResponse())
          paramsClass = CertVerifierServiceFactory_GetChromeRootStoreInfo_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var CertVerifierServiceFactory = {
    name: 'cert_verifier.mojom.CertVerifierServiceFactory',
    kVersion: 0,
    ptrClass: CertVerifierServiceFactoryPtr,
    proxyClass: CertVerifierServiceFactoryProxy,
    stubClass: CertVerifierServiceFactoryStub,
    validateRequest: validateCertVerifierServiceFactoryRequest,
    validateResponse: validateCertVerifierServiceFactoryResponse,
  };
  CertVerifierServiceFactoryStub.prototype.validator = validateCertVerifierServiceFactoryRequest;
  CertVerifierServiceFactoryProxy.prototype.validator = validateCertVerifierServiceFactoryResponse;
  exports.CertVerifierCreationParams = CertVerifierCreationParams;
  exports.ChromeRootStore = ChromeRootStore;
  exports.ChromeRootCertInfo = ChromeRootCertInfo;
  exports.ChromeRootStoreInfo = ChromeRootStoreInfo;
  exports.CertVerifierServiceFactory = CertVerifierServiceFactory;
  exports.CertVerifierServiceFactoryPtr = CertVerifierServiceFactoryPtr;
  exports.CertVerifierServiceFactoryAssociatedPtr = CertVerifierServiceFactoryAssociatedPtr;
})();