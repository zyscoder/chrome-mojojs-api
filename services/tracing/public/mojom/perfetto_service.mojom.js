// services/tracing/public/mojom/perfetto_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/tracing/public/mojom/perfetto_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('tracing.mojom');
  var file$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file.mojom', '../../../../mojo/public/mojom/base/file.mojom.js');
  }
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }


  var PERFETTO_PRODUCER_NAME_PREFIX = "org.chromium-";
  var TRACE_EVENT_DATA_SOURCE_NAME = "org.chromium.trace_event";
  var MEMORY_INSTRUMENTATION_DATA_SOURCE_NAME = "org.chromium.memory_instrumentation";
  var META_DATA_SOURCE_NAME = "org.chromium.trace_metadata";
  var SYSTEM_TRACE_DATA_SOURCE_NAME = "org.chromium.trace_system";
  var ARC_TRACE_DATA_SOURCE_NAME = "org.chromium.trace_arc";
  var SAMPLER_PROFILER_SOURCE_NAME = "org.chromium.sampler_profiler";
  var JAVA_HEAP_PROFILER_SOURCE_NAME = "org.chromium.java_heap_profiler";
  var REACHED_CODE_PROFILER_SOURCE_NAME = "org.chromium.reached_code_profiler";
  var NATIVE_HEAP_PROFILER_SOURCE_NAME = "org.chromium.native_heap_profiler";
  var BufferFillPolicy = {};
  BufferFillPolicy.kUnspecified = 0;
  BufferFillPolicy.kRingBuffer = 1;
  BufferFillPolicy.kDiscard = 2;
  BufferFillPolicy.MIN_VALUE = 0;
  BufferFillPolicy.MAX_VALUE = 2;

  BufferFillPolicy.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  BufferFillPolicy.toKnownEnumValue = function(value) {
    return value;
  };

  BufferFillPolicy.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var TracingClientPriority = {};
  TracingClientPriority.kUnknown = 0;
  TracingClientPriority.kBackground = 1;
  TracingClientPriority.kUserInitiated = 2;
  TracingClientPriority.MIN_VALUE = 0;
  TracingClientPriority.MAX_VALUE = 2;

  TracingClientPriority.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  TracingClientPriority.toKnownEnumValue = function(value) {
    return value;
  };

  TracingClientPriority.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function ChunksToMove(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChunksToMove.prototype.initDefaults_ = function() {
    this.page = 0;
    this.chunk = 0;
    this.targetBuffer = 0;
  };
  ChunksToMove.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChunksToMove.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  ChunksToMove.encodedSize = codec.kStructHeaderSize + 16;

  ChunksToMove.decode = function(decoder) {
    var packed;
    var val = new ChunksToMove();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.page =
        decoder.decodeStruct(codec.Uint32);
    val.chunk =
        decoder.decodeStruct(codec.Uint32);
    val.targetBuffer =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ChunksToMove.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChunksToMove.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.page);
    encoder.encodeStruct(codec.Uint32, val.chunk);
    encoder.encodeStruct(codec.Uint32, val.targetBuffer);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ChunkPatch(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChunkPatch.prototype.initDefaults_ = function() {
    this.offset = 0;
    this.data = null;
  };
  ChunkPatch.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChunkPatch.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ChunkPatch.data
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChunkPatch.encodedSize = codec.kStructHeaderSize + 16;

  ChunkPatch.decode = function(decoder) {
    var packed;
    var val = new ChunkPatch();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.offset =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.data =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ChunkPatch.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChunkPatch.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.offset);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.data);
  };
  function ChunksToPatch(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChunksToPatch.prototype.initDefaults_ = function() {
    this.targetBuffer = 0;
    this.writerId = 0;
    this.chunkId = 0;
    this.hasMorePatches = false;
    this.patches = null;
  };
  ChunksToPatch.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChunksToPatch.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    // validate ChunksToPatch.patches
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(ChunkPatch), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ChunksToPatch.encodedSize = codec.kStructHeaderSize + 24;

  ChunksToPatch.decode = function(decoder) {
    var packed;
    var val = new ChunksToPatch();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.targetBuffer =
        decoder.decodeStruct(codec.Uint32);
    val.writerId =
        decoder.decodeStruct(codec.Uint32);
    val.chunkId =
        decoder.decodeStruct(codec.Uint32);
    packed = decoder.readUint8();
    val.hasMorePatches = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.patches =
        decoder.decodeArrayPointer(new codec.PointerTo(ChunkPatch));
    return val;
  };

  ChunksToPatch.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChunksToPatch.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.targetBuffer);
    encoder.encodeStruct(codec.Uint32, val.writerId);
    encoder.encodeStruct(codec.Uint32, val.chunkId);
    packed = 0;
    packed |= (val.hasMorePatches & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(ChunkPatch), val.patches);
  };
  function CommitDataRequest(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CommitDataRequest.prototype.initDefaults_ = function() {
    this.chunksToMove = null;
    this.chunksToPatch = null;
    this.flushRequestId = 0;
  };
  CommitDataRequest.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CommitDataRequest.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CommitDataRequest.chunksToMove
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(ChunksToMove), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CommitDataRequest.chunksToPatch
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(ChunksToPatch), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  CommitDataRequest.encodedSize = codec.kStructHeaderSize + 24;

  CommitDataRequest.decode = function(decoder) {
    var packed;
    var val = new CommitDataRequest();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.chunksToMove =
        decoder.decodeArrayPointer(new codec.PointerTo(ChunksToMove));
    val.chunksToPatch =
        decoder.decodeArrayPointer(new codec.PointerTo(ChunksToPatch));
    val.flushRequestId =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  CommitDataRequest.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CommitDataRequest.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(ChunksToMove), val.chunksToMove);
    encoder.encodeArrayPointer(new codec.PointerTo(ChunksToPatch), val.chunksToPatch);
    encoder.encodeStruct(codec.Uint64, val.flushRequestId);
  };
  function ChromeConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeConfig.prototype.initDefaults_ = function() {
    this.traceConfig = null;
    this.privacyFilteringEnabled = false;
    this.convertToLegacyJson = false;
    this.clientPriority = 0;
  };
  ChromeConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeConfig.traceConfig
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;




    // validate ChromeConfig.clientPriority
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 12, TracingClientPriority);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeConfig.encodedSize = codec.kStructHeaderSize + 16;

  ChromeConfig.decode = function(decoder) {
    var packed;
    var val = new ChromeConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.traceConfig =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.privacyFilteringEnabled = (packed >> 0) & 1 ? true : false;
    val.convertToLegacyJson = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.clientPriority =
        decoder.decodeStruct(new codec.Enum(TracingClientPriority));
    return val;
  };

  ChromeConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.traceConfig);
    packed = 0;
    packed |= (val.privacyFilteringEnabled & 1) << 0
    packed |= (val.convertToLegacyJson & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.clientPriority);
  };
  function DataSourceConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataSourceConfig.prototype.initDefaults_ = function() {
    this.name = null;
    this.targetBuffer = 0;
    this.traceDurationMs = 0;
    this.tracingSessionId = 0;
    this.chromeConfig = null;
    this.legacyConfig = null;
    this.trackEventConfigRaw = null;
  };
  DataSourceConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataSourceConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataSourceConfig.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;





    // validate DataSourceConfig.chromeConfig
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, ChromeConfig, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataSourceConfig.legacyConfig
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataSourceConfig.trackEventConfigRaw
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataSourceConfig.encodedSize = codec.kStructHeaderSize + 48;

  DataSourceConfig.decode = function(decoder) {
    var packed;
    var val = new DataSourceConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    val.targetBuffer =
        decoder.decodeStruct(codec.Uint32);
    val.traceDurationMs =
        decoder.decodeStruct(codec.Uint32);
    val.tracingSessionId =
        decoder.decodeStruct(codec.Uint64);
    val.chromeConfig =
        decoder.decodeStructPointer(ChromeConfig);
    val.legacyConfig =
        decoder.decodeStruct(codec.String);
    val.trackEventConfigRaw =
        decoder.decodeStruct(codec.String);
    return val;
  };

  DataSourceConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataSourceConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    encoder.encodeStruct(codec.Uint32, val.targetBuffer);
    encoder.encodeStruct(codec.Uint32, val.traceDurationMs);
    encoder.encodeStruct(codec.Uint64, val.tracingSessionId);
    encoder.encodeStructPointer(ChromeConfig, val.chromeConfig);
    encoder.encodeStruct(codec.String, val.legacyConfig);
    encoder.encodeStruct(codec.String, val.trackEventConfigRaw);
  };
  function DataSourceRegistration(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataSourceRegistration.prototype.initDefaults_ = function() {
    this.name = null;
    this.willNotifyOnStart = false;
    this.willNotifyOnStop = false;
    this.handlesIncrementalStateClear = false;
  };
  DataSourceRegistration.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataSourceRegistration.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataSourceRegistration.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  DataSourceRegistration.encodedSize = codec.kStructHeaderSize + 16;

  DataSourceRegistration.decode = function(decoder) {
    var packed;
    var val = new DataSourceRegistration();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.name =
        decoder.decodeStruct(codec.String);
    packed = decoder.readUint8();
    val.willNotifyOnStart = (packed >> 0) & 1 ? true : false;
    val.willNotifyOnStop = (packed >> 1) & 1 ? true : false;
    val.handlesIncrementalStateClear = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DataSourceRegistration.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataSourceRegistration.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.name);
    packed = 0;
    packed |= (val.willNotifyOnStart & 1) << 0
    packed |= (val.willNotifyOnStop & 1) << 1
    packed |= (val.handlesIncrementalStateClear & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function BufferConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BufferConfig.prototype.initDefaults_ = function() {
    this.sizeKb = 0;
    this.fillPolicy = 0;
  };
  BufferConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BufferConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate BufferConfig.fillPolicy
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 4, BufferFillPolicy);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BufferConfig.encodedSize = codec.kStructHeaderSize + 8;

  BufferConfig.decode = function(decoder) {
    var packed;
    var val = new BufferConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sizeKb =
        decoder.decodeStruct(codec.Uint32);
    val.fillPolicy =
        decoder.decodeStruct(new codec.Enum(BufferFillPolicy));
    return val;
  };

  BufferConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BufferConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.sizeKb);
    encoder.encodeStruct(codec.Int32, val.fillPolicy);
  };
  function DataSource(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataSource.prototype.initDefaults_ = function() {
    this.config = null;
    this.producerNameFilter = null;
  };
  DataSource.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataSource.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataSource.config
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DataSourceConfig, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataSource.producerNameFilter
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataSource.encodedSize = codec.kStructHeaderSize + 16;

  DataSource.decode = function(decoder) {
    var packed;
    var val = new DataSource();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.config =
        decoder.decodeStructPointer(DataSourceConfig);
    val.producerNameFilter =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  DataSource.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataSource.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DataSourceConfig, val.config);
    encoder.encodeArrayPointer(codec.String, val.producerNameFilter);
  };
  function PerfettoBuiltinDataSource(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PerfettoBuiltinDataSource.prototype.initDefaults_ = function() {
    this.disableClockSnapshotting = false;
    this.disableTraceConfig = false;
    this.disableSystemInfo = false;
    this.disableServiceEvents = false;
    this.primaryTraceClockId = 0;
  };
  PerfettoBuiltinDataSource.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PerfettoBuiltinDataSource.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;






    return validator.validationError.NONE;
  };

  PerfettoBuiltinDataSource.encodedSize = codec.kStructHeaderSize + 8;

  PerfettoBuiltinDataSource.decode = function(decoder) {
    var packed;
    var val = new PerfettoBuiltinDataSource();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.disableClockSnapshotting = (packed >> 0) & 1 ? true : false;
    val.disableTraceConfig = (packed >> 1) & 1 ? true : false;
    val.disableSystemInfo = (packed >> 2) & 1 ? true : false;
    val.disableServiceEvents = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.primaryTraceClockId =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  PerfettoBuiltinDataSource.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PerfettoBuiltinDataSource.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.disableClockSnapshotting & 1) << 0
    packed |= (val.disableTraceConfig & 1) << 1
    packed |= (val.disableSystemInfo & 1) << 2
    packed |= (val.disableServiceEvents & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.primaryTraceClockId);
  };
  function IncrementalStateConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IncrementalStateConfig.prototype.initDefaults_ = function() {
    this.clearPeriodMs = 0;
  };
  IncrementalStateConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IncrementalStateConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  IncrementalStateConfig.encodedSize = codec.kStructHeaderSize + 8;

  IncrementalStateConfig.decode = function(decoder) {
    var packed;
    var val = new IncrementalStateConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clearPeriodMs =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  IncrementalStateConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IncrementalStateConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.clearPeriodMs);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TraceConfig(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TraceConfig.prototype.initDefaults_ = function() {
    this.dataSources = null;
    this.perfettoBuiltinDataSource = null;
    this.buffers = null;
    this.incrementalStateConfig = null;
    this.durationMs = 0;
    this.writeIntoFile = false;
  };
  TraceConfig.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TraceConfig.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraceConfig.dataSources
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(DataSource), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraceConfig.perfettoBuiltinDataSource
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, PerfettoBuiltinDataSource, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraceConfig.buffers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(BufferConfig), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TraceConfig.incrementalStateConfig
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, IncrementalStateConfig, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  TraceConfig.encodedSize = codec.kStructHeaderSize + 40;

  TraceConfig.decode = function(decoder) {
    var packed;
    var val = new TraceConfig();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dataSources =
        decoder.decodeArrayPointer(new codec.PointerTo(DataSource));
    val.perfettoBuiltinDataSource =
        decoder.decodeStructPointer(PerfettoBuiltinDataSource);
    val.buffers =
        decoder.decodeArrayPointer(new codec.PointerTo(BufferConfig));
    val.incrementalStateConfig =
        decoder.decodeStructPointer(IncrementalStateConfig);
    val.durationMs =
        decoder.decodeStruct(codec.Uint32);
    packed = decoder.readUint8();
    val.writeIntoFile = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TraceConfig.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TraceConfig.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(DataSource), val.dataSources);
    encoder.encodeStructPointer(PerfettoBuiltinDataSource, val.perfettoBuiltinDataSource);
    encoder.encodeArrayPointer(new codec.PointerTo(BufferConfig), val.buffers);
    encoder.encodeStructPointer(IncrementalStateConfig, val.incrementalStateConfig);
    encoder.encodeStruct(codec.Uint32, val.durationMs);
    packed = 0;
    packed |= (val.writeIntoFile & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ProducerHost_CommitData_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerHost_CommitData_Params.prototype.initDefaults_ = function() {
    this.dataRequest = null;
  };
  ProducerHost_CommitData_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerHost_CommitData_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ProducerHost_CommitData_Params.dataRequest
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, CommitDataRequest, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ProducerHost_CommitData_Params.encodedSize = codec.kStructHeaderSize + 8;

  ProducerHost_CommitData_Params.decode = function(decoder) {
    var packed;
    var val = new ProducerHost_CommitData_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dataRequest =
        decoder.decodeStructPointer(CommitDataRequest);
    return val;
  };

  ProducerHost_CommitData_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerHost_CommitData_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(CommitDataRequest, val.dataRequest);
  };
  function ProducerHost_CommitData_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerHost_CommitData_ResponseParams.prototype.initDefaults_ = function() {
  };
  ProducerHost_CommitData_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerHost_CommitData_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ProducerHost_CommitData_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  ProducerHost_CommitData_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ProducerHost_CommitData_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ProducerHost_CommitData_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerHost_CommitData_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function ProducerHost_RegisterDataSource_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerHost_RegisterDataSource_Params.prototype.initDefaults_ = function() {
    this.registrationInfo = null;
  };
  ProducerHost_RegisterDataSource_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerHost_RegisterDataSource_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ProducerHost_RegisterDataSource_Params.registrationInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, DataSourceRegistration, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ProducerHost_RegisterDataSource_Params.encodedSize = codec.kStructHeaderSize + 8;

  ProducerHost_RegisterDataSource_Params.decode = function(decoder) {
    var packed;
    var val = new ProducerHost_RegisterDataSource_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.registrationInfo =
        decoder.decodeStructPointer(DataSourceRegistration);
    return val;
  };

  ProducerHost_RegisterDataSource_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerHost_RegisterDataSource_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(DataSourceRegistration, val.registrationInfo);
  };
  function ProducerHost_RegisterTraceWriter_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerHost_RegisterTraceWriter_Params.prototype.initDefaults_ = function() {
    this.writerId = 0;
    this.targetBuffer = 0;
  };
  ProducerHost_RegisterTraceWriter_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerHost_RegisterTraceWriter_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  ProducerHost_RegisterTraceWriter_Params.encodedSize = codec.kStructHeaderSize + 8;

  ProducerHost_RegisterTraceWriter_Params.decode = function(decoder) {
    var packed;
    var val = new ProducerHost_RegisterTraceWriter_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.writerId =
        decoder.decodeStruct(codec.Uint32);
    val.targetBuffer =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  ProducerHost_RegisterTraceWriter_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerHost_RegisterTraceWriter_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.writerId);
    encoder.encodeStruct(codec.Uint32, val.targetBuffer);
  };
  function ProducerHost_UnregisterTraceWriter_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerHost_UnregisterTraceWriter_Params.prototype.initDefaults_ = function() {
    this.writerId = 0;
  };
  ProducerHost_UnregisterTraceWriter_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerHost_UnregisterTraceWriter_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ProducerHost_UnregisterTraceWriter_Params.encodedSize = codec.kStructHeaderSize + 8;

  ProducerHost_UnregisterTraceWriter_Params.decode = function(decoder) {
    var packed;
    var val = new ProducerHost_UnregisterTraceWriter_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.writerId =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ProducerHost_UnregisterTraceWriter_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerHost_UnregisterTraceWriter_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.writerId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function ProducerClient_OnTracingStart_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerClient_OnTracingStart_Params.prototype.initDefaults_ = function() {
  };
  ProducerClient_OnTracingStart_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerClient_OnTracingStart_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ProducerClient_OnTracingStart_Params.encodedSize = codec.kStructHeaderSize + 0;

  ProducerClient_OnTracingStart_Params.decode = function(decoder) {
    var packed;
    var val = new ProducerClient_OnTracingStart_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ProducerClient_OnTracingStart_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerClient_OnTracingStart_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function ProducerClient_StartDataSource_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerClient_StartDataSource_Params.prototype.initDefaults_ = function() {
    this.id = 0;
    this.dataSourceConfig = null;
  };
  ProducerClient_StartDataSource_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerClient_StartDataSource_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ProducerClient_StartDataSource_Params.dataSourceConfig
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, DataSourceConfig, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ProducerClient_StartDataSource_Params.encodedSize = codec.kStructHeaderSize + 16;

  ProducerClient_StartDataSource_Params.decode = function(decoder) {
    var packed;
    var val = new ProducerClient_StartDataSource_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Uint64);
    val.dataSourceConfig =
        decoder.decodeStructPointer(DataSourceConfig);
    return val;
  };

  ProducerClient_StartDataSource_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerClient_StartDataSource_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.id);
    encoder.encodeStructPointer(DataSourceConfig, val.dataSourceConfig);
  };
  function ProducerClient_StartDataSource_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerClient_StartDataSource_ResponseParams.prototype.initDefaults_ = function() {
  };
  ProducerClient_StartDataSource_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerClient_StartDataSource_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ProducerClient_StartDataSource_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  ProducerClient_StartDataSource_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ProducerClient_StartDataSource_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ProducerClient_StartDataSource_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerClient_StartDataSource_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function ProducerClient_StopDataSource_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerClient_StopDataSource_Params.prototype.initDefaults_ = function() {
    this.id = 0;
  };
  ProducerClient_StopDataSource_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerClient_StopDataSource_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  ProducerClient_StopDataSource_Params.encodedSize = codec.kStructHeaderSize + 8;

  ProducerClient_StopDataSource_Params.decode = function(decoder) {
    var packed;
    var val = new ProducerClient_StopDataSource_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  ProducerClient_StopDataSource_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerClient_StopDataSource_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.id);
  };
  function ProducerClient_StopDataSource_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerClient_StopDataSource_ResponseParams.prototype.initDefaults_ = function() {
  };
  ProducerClient_StopDataSource_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerClient_StopDataSource_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ProducerClient_StopDataSource_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  ProducerClient_StopDataSource_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new ProducerClient_StopDataSource_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ProducerClient_StopDataSource_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerClient_StopDataSource_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function ProducerClient_Flush_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerClient_Flush_Params.prototype.initDefaults_ = function() {
    this.flushRequestId = 0;
    this.dataSourceIds = null;
  };
  ProducerClient_Flush_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerClient_Flush_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ProducerClient_Flush_Params.dataSourceIds
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.Uint64, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ProducerClient_Flush_Params.encodedSize = codec.kStructHeaderSize + 16;

  ProducerClient_Flush_Params.decode = function(decoder) {
    var packed;
    var val = new ProducerClient_Flush_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.flushRequestId =
        decoder.decodeStruct(codec.Uint64);
    val.dataSourceIds =
        decoder.decodeArrayPointer(codec.Uint64);
    return val;
  };

  ProducerClient_Flush_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerClient_Flush_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.flushRequestId);
    encoder.encodeArrayPointer(codec.Uint64, val.dataSourceIds);
  };
  function ProducerClient_ClearIncrementalState_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ProducerClient_ClearIncrementalState_Params.prototype.initDefaults_ = function() {
  };
  ProducerClient_ClearIncrementalState_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ProducerClient_ClearIncrementalState_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ProducerClient_ClearIncrementalState_Params.encodedSize = codec.kStructHeaderSize + 0;

  ProducerClient_ClearIncrementalState_Params.decode = function(decoder) {
    var packed;
    var val = new ProducerClient_ClearIncrementalState_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  ProducerClient_ClearIncrementalState_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ProducerClient_ClearIncrementalState_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PerfettoService_ConnectToProducerHost_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PerfettoService_ConnectToProducerHost_Params.prototype.initDefaults_ = function() {
    this.producerClient = new ProducerClientPtr();
    this.producerHostReceiver = new bindings.InterfaceRequest();
    this.sharedMemory = null;
    this.sharedMemoryBufferPageSizeBytes = 0;
  };
  PerfettoService_ConnectToProducerHost_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PerfettoService_ConnectToProducerHost_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PerfettoService_ConnectToProducerHost_Params.producerClient
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PerfettoService_ConnectToProducerHost_Params.producerHostReceiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PerfettoService_ConnectToProducerHost_Params.sharedMemory
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, shared_memory$.UnsafeSharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PerfettoService_ConnectToProducerHost_Params.encodedSize = codec.kStructHeaderSize + 32;

  PerfettoService_ConnectToProducerHost_Params.decode = function(decoder) {
    var packed;
    var val = new PerfettoService_ConnectToProducerHost_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.producerClient =
        decoder.decodeStruct(new codec.Interface(ProducerClientPtr));
    val.producerHostReceiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.sharedMemory =
        decoder.decodeStructPointer(shared_memory$.UnsafeSharedMemoryRegion);
    val.sharedMemoryBufferPageSizeBytes =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  PerfettoService_ConnectToProducerHost_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PerfettoService_ConnectToProducerHost_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(ProducerClientPtr), val.producerClient);
    encoder.encodeStruct(codec.InterfaceRequest, val.producerHostReceiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(shared_memory$.UnsafeSharedMemoryRegion, val.sharedMemory);
    encoder.encodeStruct(codec.Uint64, val.sharedMemoryBufferPageSizeBytes);
  };
  function ConsumerHost_EnableTracing_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ConsumerHost_EnableTracing_Params.prototype.initDefaults_ = function() {
    this.tracingSessionHost = new bindings.InterfaceRequest();
    this.tracingSessionClient = new TracingSessionClientPtr();
    this.config = null;
    this.outputFile = null;
  };
  ConsumerHost_EnableTracing_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ConsumerHost_EnableTracing_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ConsumerHost_EnableTracing_Params.tracingSessionHost
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ConsumerHost_EnableTracing_Params.tracingSessionClient
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ConsumerHost_EnableTracing_Params.config
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, TraceConfig, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ConsumerHost_EnableTracing_Params.outputFile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, file$.File, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ConsumerHost_EnableTracing_Params.encodedSize = codec.kStructHeaderSize + 32;

  ConsumerHost_EnableTracing_Params.decode = function(decoder) {
    var packed;
    var val = new ConsumerHost_EnableTracing_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tracingSessionHost =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.tracingSessionClient =
        decoder.decodeStruct(new codec.Interface(TracingSessionClientPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.config =
        decoder.decodeStructPointer(TraceConfig);
    val.outputFile =
        decoder.decodeStructPointer(file$.File);
    return val;
  };

  ConsumerHost_EnableTracing_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ConsumerHost_EnableTracing_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.tracingSessionHost);
    encoder.encodeStruct(new codec.Interface(TracingSessionClientPtr), val.tracingSessionClient);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(TraceConfig, val.config);
    encoder.encodeStructPointer(file$.File, val.outputFile);
  };
  function TracingSessionHost_ChangeTraceConfig_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingSessionHost_ChangeTraceConfig_Params.prototype.initDefaults_ = function() {
    this.config = null;
  };
  TracingSessionHost_ChangeTraceConfig_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingSessionHost_ChangeTraceConfig_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TracingSessionHost_ChangeTraceConfig_Params.config
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, TraceConfig, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TracingSessionHost_ChangeTraceConfig_Params.encodedSize = codec.kStructHeaderSize + 8;

  TracingSessionHost_ChangeTraceConfig_Params.decode = function(decoder) {
    var packed;
    var val = new TracingSessionHost_ChangeTraceConfig_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.config =
        decoder.decodeStructPointer(TraceConfig);
    return val;
  };

  TracingSessionHost_ChangeTraceConfig_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingSessionHost_ChangeTraceConfig_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(TraceConfig, val.config);
  };
  function TracingSessionHost_DisableTracing_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingSessionHost_DisableTracing_Params.prototype.initDefaults_ = function() {
  };
  TracingSessionHost_DisableTracing_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingSessionHost_DisableTracing_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TracingSessionHost_DisableTracing_Params.encodedSize = codec.kStructHeaderSize + 0;

  TracingSessionHost_DisableTracing_Params.decode = function(decoder) {
    var packed;
    var val = new TracingSessionHost_DisableTracing_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TracingSessionHost_DisableTracing_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingSessionHost_DisableTracing_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TracingSessionHost_ReadBuffers_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingSessionHost_ReadBuffers_Params.prototype.initDefaults_ = function() {
    this.stream = null;
  };
  TracingSessionHost_ReadBuffers_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingSessionHost_ReadBuffers_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TracingSessionHost_ReadBuffers_Params.stream
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TracingSessionHost_ReadBuffers_Params.encodedSize = codec.kStructHeaderSize + 8;

  TracingSessionHost_ReadBuffers_Params.decode = function(decoder) {
    var packed;
    var val = new TracingSessionHost_ReadBuffers_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.stream =
        decoder.decodeStruct(codec.Handle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TracingSessionHost_ReadBuffers_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingSessionHost_ReadBuffers_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Handle, val.stream);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TracingSessionHost_ReadBuffers_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingSessionHost_ReadBuffers_ResponseParams.prototype.initDefaults_ = function() {
  };
  TracingSessionHost_ReadBuffers_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingSessionHost_ReadBuffers_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TracingSessionHost_ReadBuffers_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TracingSessionHost_ReadBuffers_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TracingSessionHost_ReadBuffers_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TracingSessionHost_ReadBuffers_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingSessionHost_ReadBuffers_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TracingSessionHost_RequestBufferUsage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingSessionHost_RequestBufferUsage_Params.prototype.initDefaults_ = function() {
  };
  TracingSessionHost_RequestBufferUsage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingSessionHost_RequestBufferUsage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TracingSessionHost_RequestBufferUsage_Params.encodedSize = codec.kStructHeaderSize + 0;

  TracingSessionHost_RequestBufferUsage_Params.decode = function(decoder) {
    var packed;
    var val = new TracingSessionHost_RequestBufferUsage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TracingSessionHost_RequestBufferUsage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingSessionHost_RequestBufferUsage_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TracingSessionHost_RequestBufferUsage_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingSessionHost_RequestBufferUsage_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
    this.dataLoss = false;
    this.percentFull = 0;
  };
  TracingSessionHost_RequestBufferUsage_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingSessionHost_RequestBufferUsage_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  TracingSessionHost_RequestBufferUsage_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  TracingSessionHost_RequestBufferUsage_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TracingSessionHost_RequestBufferUsage_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    val.dataLoss = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.percentFull =
        decoder.decodeStruct(codec.Float);
    return val;
  };

  TracingSessionHost_RequestBufferUsage_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingSessionHost_RequestBufferUsage_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    packed |= (val.dataLoss & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Float, val.percentFull);
  };
  function TracingSessionHost_DisableTracingAndEmitJson_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingSessionHost_DisableTracingAndEmitJson_Params.prototype.initDefaults_ = function() {
    this.agentLabelFilter = null;
    this.stream = null;
    this.privacyFilteringEnabled = false;
  };
  TracingSessionHost_DisableTracingAndEmitJson_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingSessionHost_DisableTracingAndEmitJson_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TracingSessionHost_DisableTracingAndEmitJson_Params.agentLabelFilter
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate TracingSessionHost_DisableTracingAndEmitJson_Params.stream
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TracingSessionHost_DisableTracingAndEmitJson_Params.encodedSize = codec.kStructHeaderSize + 16;

  TracingSessionHost_DisableTracingAndEmitJson_Params.decode = function(decoder) {
    var packed;
    var val = new TracingSessionHost_DisableTracingAndEmitJson_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.agentLabelFilter =
        decoder.decodeStruct(codec.String);
    val.stream =
        decoder.decodeStruct(codec.Handle);
    packed = decoder.readUint8();
    val.privacyFilteringEnabled = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TracingSessionHost_DisableTracingAndEmitJson_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingSessionHost_DisableTracingAndEmitJson_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.agentLabelFilter);
    encoder.encodeStruct(codec.Handle, val.stream);
    packed = 0;
    packed |= (val.privacyFilteringEnabled & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TracingSessionHost_DisableTracingAndEmitJson_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingSessionHost_DisableTracingAndEmitJson_ResponseParams.prototype.initDefaults_ = function() {
  };
  TracingSessionHost_DisableTracingAndEmitJson_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingSessionHost_DisableTracingAndEmitJson_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TracingSessionHost_DisableTracingAndEmitJson_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  TracingSessionHost_DisableTracingAndEmitJson_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new TracingSessionHost_DisableTracingAndEmitJson_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TracingSessionHost_DisableTracingAndEmitJson_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingSessionHost_DisableTracingAndEmitJson_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function TracingSessionClient_OnTracingEnabled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingSessionClient_OnTracingEnabled_Params.prototype.initDefaults_ = function() {
  };
  TracingSessionClient_OnTracingEnabled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingSessionClient_OnTracingEnabled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TracingSessionClient_OnTracingEnabled_Params.encodedSize = codec.kStructHeaderSize + 0;

  TracingSessionClient_OnTracingEnabled_Params.decode = function(decoder) {
    var packed;
    var val = new TracingSessionClient_OnTracingEnabled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  TracingSessionClient_OnTracingEnabled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingSessionClient_OnTracingEnabled_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function TracingSessionClient_OnTracingDisabled_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingSessionClient_OnTracingDisabled_Params.prototype.initDefaults_ = function() {
    this.tracingSucceeded = false;
  };
  TracingSessionClient_OnTracingDisabled_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingSessionClient_OnTracingDisabled_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  TracingSessionClient_OnTracingDisabled_Params.encodedSize = codec.kStructHeaderSize + 8;

  TracingSessionClient_OnTracingDisabled_Params.decode = function(decoder) {
    var packed;
    var val = new TracingSessionClient_OnTracingDisabled_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.tracingSucceeded = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TracingSessionClient_OnTracingDisabled_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingSessionClient_OnTracingDisabled_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.tracingSucceeded & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kProducerHost_CommitData_Name = 1039783184;
  var kProducerHost_RegisterDataSource_Name = 1540088780;
  var kProducerHost_RegisterTraceWriter_Name = 595621503;
  var kProducerHost_UnregisterTraceWriter_Name = 694286206;

  function ProducerHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ProducerHost,
                                                   handleOrPtrInfo);
  }

  function ProducerHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ProducerHost, associatedInterfacePtrInfo);
  }

  ProducerHostAssociatedPtr.prototype =
      Object.create(ProducerHostPtr.prototype);
  ProducerHostAssociatedPtr.prototype.constructor =
      ProducerHostAssociatedPtr;

  function ProducerHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  ProducerHostPtr.prototype.commitData = function() {
    return ProducerHostProxy.prototype.commitData
        .apply(this.ptr.getProxy(), arguments);
  };

  ProducerHostProxy.prototype.commitData = function(dataRequest) {
    var params_ = new ProducerHost_CommitData_Params();
    params_.dataRequest = dataRequest;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kProducerHost_CommitData_Name,
          codec.align(ProducerHost_CommitData_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ProducerHost_CommitData_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ProducerHost_CommitData_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ProducerHostPtr.prototype.registerDataSource = function() {
    return ProducerHostProxy.prototype.registerDataSource
        .apply(this.ptr.getProxy(), arguments);
  };

  ProducerHostProxy.prototype.registerDataSource = function(registrationInfo) {
    var params_ = new ProducerHost_RegisterDataSource_Params();
    params_.registrationInfo = registrationInfo;
    var builder = new codec.MessageV0Builder(
        kProducerHost_RegisterDataSource_Name,
        codec.align(ProducerHost_RegisterDataSource_Params.encodedSize));
    builder.encodeStruct(ProducerHost_RegisterDataSource_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ProducerHostPtr.prototype.registerTraceWriter = function() {
    return ProducerHostProxy.prototype.registerTraceWriter
        .apply(this.ptr.getProxy(), arguments);
  };

  ProducerHostProxy.prototype.registerTraceWriter = function(writerId, targetBuffer) {
    var params_ = new ProducerHost_RegisterTraceWriter_Params();
    params_.writerId = writerId;
    params_.targetBuffer = targetBuffer;
    var builder = new codec.MessageV0Builder(
        kProducerHost_RegisterTraceWriter_Name,
        codec.align(ProducerHost_RegisterTraceWriter_Params.encodedSize));
    builder.encodeStruct(ProducerHost_RegisterTraceWriter_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ProducerHostPtr.prototype.unregisterTraceWriter = function() {
    return ProducerHostProxy.prototype.unregisterTraceWriter
        .apply(this.ptr.getProxy(), arguments);
  };

  ProducerHostProxy.prototype.unregisterTraceWriter = function(writerId) {
    var params_ = new ProducerHost_UnregisterTraceWriter_Params();
    params_.writerId = writerId;
    var builder = new codec.MessageV0Builder(
        kProducerHost_UnregisterTraceWriter_Name,
        codec.align(ProducerHost_UnregisterTraceWriter_Params.encodedSize));
    builder.encodeStruct(ProducerHost_UnregisterTraceWriter_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ProducerHostStub(delegate) {
    this.delegate_ = delegate;
  }
  ProducerHostStub.prototype.commitData = function(dataRequest) {
    return this.delegate_ && this.delegate_.commitData && this.delegate_.commitData(dataRequest);
  }
  ProducerHostStub.prototype.registerDataSource = function(registrationInfo) {
    return this.delegate_ && this.delegate_.registerDataSource && this.delegate_.registerDataSource(registrationInfo);
  }
  ProducerHostStub.prototype.registerTraceWriter = function(writerId, targetBuffer) {
    return this.delegate_ && this.delegate_.registerTraceWriter && this.delegate_.registerTraceWriter(writerId, targetBuffer);
  }
  ProducerHostStub.prototype.unregisterTraceWriter = function(writerId) {
    return this.delegate_ && this.delegate_.unregisterTraceWriter && this.delegate_.unregisterTraceWriter(writerId);
  }

  ProducerHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kProducerHost_RegisterDataSource_Name:
      var params = reader.decodeStruct(ProducerHost_RegisterDataSource_Params);
      this.registerDataSource(params.registrationInfo);
      return true;
    case kProducerHost_RegisterTraceWriter_Name:
      var params = reader.decodeStruct(ProducerHost_RegisterTraceWriter_Params);
      this.registerTraceWriter(params.writerId, params.targetBuffer);
      return true;
    case kProducerHost_UnregisterTraceWriter_Name:
      var params = reader.decodeStruct(ProducerHost_UnregisterTraceWriter_Params);
      this.unregisterTraceWriter(params.writerId);
      return true;
    default:
      return false;
    }
  };

  ProducerHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kProducerHost_CommitData_Name:
      var params = reader.decodeStruct(ProducerHost_CommitData_Params);
      this.commitData(params.dataRequest).then(function(response) {
        var responseParams =
            new ProducerHost_CommitData_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kProducerHost_CommitData_Name,
            codec.align(ProducerHost_CommitData_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ProducerHost_CommitData_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateProducerHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kProducerHost_CommitData_Name:
        if (message.expectsResponse())
          paramsClass = ProducerHost_CommitData_Params;
      break;
      case kProducerHost_RegisterDataSource_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ProducerHost_RegisterDataSource_Params;
      break;
      case kProducerHost_RegisterTraceWriter_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ProducerHost_RegisterTraceWriter_Params;
      break;
      case kProducerHost_UnregisterTraceWriter_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ProducerHost_UnregisterTraceWriter_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateProducerHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kProducerHost_CommitData_Name:
        if (message.isResponse())
          paramsClass = ProducerHost_CommitData_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ProducerHost = {
    name: 'tracing.mojom.ProducerHost',
    kVersion: 0,
    ptrClass: ProducerHostPtr,
    proxyClass: ProducerHostProxy,
    stubClass: ProducerHostStub,
    validateRequest: validateProducerHostRequest,
    validateResponse: validateProducerHostResponse,
  };
  ProducerHostStub.prototype.validator = validateProducerHostRequest;
  ProducerHostProxy.prototype.validator = validateProducerHostResponse;
  var kProducerClient_OnTracingStart_Name = 1101946632;
  var kProducerClient_StartDataSource_Name = 84430390;
  var kProducerClient_StopDataSource_Name = 705613201;
  var kProducerClient_Flush_Name = 1599275505;
  var kProducerClient_ClearIncrementalState_Name = 331132684;

  function ProducerClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ProducerClient,
                                                   handleOrPtrInfo);
  }

  function ProducerClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ProducerClient, associatedInterfacePtrInfo);
  }

  ProducerClientAssociatedPtr.prototype =
      Object.create(ProducerClientPtr.prototype);
  ProducerClientAssociatedPtr.prototype.constructor =
      ProducerClientAssociatedPtr;

  function ProducerClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  ProducerClientPtr.prototype.onTracingStart = function() {
    return ProducerClientProxy.prototype.onTracingStart
        .apply(this.ptr.getProxy(), arguments);
  };

  ProducerClientProxy.prototype.onTracingStart = function() {
    var params_ = new ProducerClient_OnTracingStart_Params();
    var builder = new codec.MessageV0Builder(
        kProducerClient_OnTracingStart_Name,
        codec.align(ProducerClient_OnTracingStart_Params.encodedSize));
    builder.encodeStruct(ProducerClient_OnTracingStart_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ProducerClientPtr.prototype.startDataSource = function() {
    return ProducerClientProxy.prototype.startDataSource
        .apply(this.ptr.getProxy(), arguments);
  };

  ProducerClientProxy.prototype.startDataSource = function(id, dataSourceConfig) {
    var params_ = new ProducerClient_StartDataSource_Params();
    params_.id = id;
    params_.dataSourceConfig = dataSourceConfig;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kProducerClient_StartDataSource_Name,
          codec.align(ProducerClient_StartDataSource_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ProducerClient_StartDataSource_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ProducerClient_StartDataSource_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ProducerClientPtr.prototype.stopDataSource = function() {
    return ProducerClientProxy.prototype.stopDataSource
        .apply(this.ptr.getProxy(), arguments);
  };

  ProducerClientProxy.prototype.stopDataSource = function(id) {
    var params_ = new ProducerClient_StopDataSource_Params();
    params_.id = id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kProducerClient_StopDataSource_Name,
          codec.align(ProducerClient_StopDataSource_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(ProducerClient_StopDataSource_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(ProducerClient_StopDataSource_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  ProducerClientPtr.prototype.flush = function() {
    return ProducerClientProxy.prototype.flush
        .apply(this.ptr.getProxy(), arguments);
  };

  ProducerClientProxy.prototype.flush = function(flushRequestId, dataSourceIds) {
    var params_ = new ProducerClient_Flush_Params();
    params_.flushRequestId = flushRequestId;
    params_.dataSourceIds = dataSourceIds;
    var builder = new codec.MessageV0Builder(
        kProducerClient_Flush_Name,
        codec.align(ProducerClient_Flush_Params.encodedSize));
    builder.encodeStruct(ProducerClient_Flush_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  ProducerClientPtr.prototype.clearIncrementalState = function() {
    return ProducerClientProxy.prototype.clearIncrementalState
        .apply(this.ptr.getProxy(), arguments);
  };

  ProducerClientProxy.prototype.clearIncrementalState = function() {
    var params_ = new ProducerClient_ClearIncrementalState_Params();
    var builder = new codec.MessageV0Builder(
        kProducerClient_ClearIncrementalState_Name,
        codec.align(ProducerClient_ClearIncrementalState_Params.encodedSize));
    builder.encodeStruct(ProducerClient_ClearIncrementalState_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ProducerClientStub(delegate) {
    this.delegate_ = delegate;
  }
  ProducerClientStub.prototype.onTracingStart = function() {
    return this.delegate_ && this.delegate_.onTracingStart && this.delegate_.onTracingStart();
  }
  ProducerClientStub.prototype.startDataSource = function(id, dataSourceConfig) {
    return this.delegate_ && this.delegate_.startDataSource && this.delegate_.startDataSource(id, dataSourceConfig);
  }
  ProducerClientStub.prototype.stopDataSource = function(id) {
    return this.delegate_ && this.delegate_.stopDataSource && this.delegate_.stopDataSource(id);
  }
  ProducerClientStub.prototype.flush = function(flushRequestId, dataSourceIds) {
    return this.delegate_ && this.delegate_.flush && this.delegate_.flush(flushRequestId, dataSourceIds);
  }
  ProducerClientStub.prototype.clearIncrementalState = function() {
    return this.delegate_ && this.delegate_.clearIncrementalState && this.delegate_.clearIncrementalState();
  }

  ProducerClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kProducerClient_OnTracingStart_Name:
      var params = reader.decodeStruct(ProducerClient_OnTracingStart_Params);
      this.onTracingStart();
      return true;
    case kProducerClient_Flush_Name:
      var params = reader.decodeStruct(ProducerClient_Flush_Params);
      this.flush(params.flushRequestId, params.dataSourceIds);
      return true;
    case kProducerClient_ClearIncrementalState_Name:
      var params = reader.decodeStruct(ProducerClient_ClearIncrementalState_Params);
      this.clearIncrementalState();
      return true;
    default:
      return false;
    }
  };

  ProducerClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kProducerClient_StartDataSource_Name:
      var params = reader.decodeStruct(ProducerClient_StartDataSource_Params);
      this.startDataSource(params.id, params.dataSourceConfig).then(function(response) {
        var responseParams =
            new ProducerClient_StartDataSource_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kProducerClient_StartDataSource_Name,
            codec.align(ProducerClient_StartDataSource_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ProducerClient_StartDataSource_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kProducerClient_StopDataSource_Name:
      var params = reader.decodeStruct(ProducerClient_StopDataSource_Params);
      this.stopDataSource(params.id).then(function(response) {
        var responseParams =
            new ProducerClient_StopDataSource_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kProducerClient_StopDataSource_Name,
            codec.align(ProducerClient_StopDataSource_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(ProducerClient_StopDataSource_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateProducerClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kProducerClient_OnTracingStart_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ProducerClient_OnTracingStart_Params;
      break;
      case kProducerClient_StartDataSource_Name:
        if (message.expectsResponse())
          paramsClass = ProducerClient_StartDataSource_Params;
      break;
      case kProducerClient_StopDataSource_Name:
        if (message.expectsResponse())
          paramsClass = ProducerClient_StopDataSource_Params;
      break;
      case kProducerClient_Flush_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ProducerClient_Flush_Params;
      break;
      case kProducerClient_ClearIncrementalState_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ProducerClient_ClearIncrementalState_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateProducerClientResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kProducerClient_StartDataSource_Name:
        if (message.isResponse())
          paramsClass = ProducerClient_StartDataSource_ResponseParams;
        break;
      case kProducerClient_StopDataSource_Name:
        if (message.isResponse())
          paramsClass = ProducerClient_StopDataSource_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var ProducerClient = {
    name: 'tracing.mojom.ProducerClient',
    kVersion: 0,
    ptrClass: ProducerClientPtr,
    proxyClass: ProducerClientProxy,
    stubClass: ProducerClientStub,
    validateRequest: validateProducerClientRequest,
    validateResponse: validateProducerClientResponse,
  };
  ProducerClientStub.prototype.validator = validateProducerClientRequest;
  ProducerClientProxy.prototype.validator = validateProducerClientResponse;
  var kPerfettoService_ConnectToProducerHost_Name = 174940184;

  function PerfettoServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PerfettoService,
                                                   handleOrPtrInfo);
  }

  function PerfettoServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PerfettoService, associatedInterfacePtrInfo);
  }

  PerfettoServiceAssociatedPtr.prototype =
      Object.create(PerfettoServicePtr.prototype);
  PerfettoServiceAssociatedPtr.prototype.constructor =
      PerfettoServiceAssociatedPtr;

  function PerfettoServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  PerfettoServicePtr.prototype.connectToProducerHost = function() {
    return PerfettoServiceProxy.prototype.connectToProducerHost
        .apply(this.ptr.getProxy(), arguments);
  };

  PerfettoServiceProxy.prototype.connectToProducerHost = function(producerClient, producerHostReceiver, sharedMemory, sharedMemoryBufferPageSizeBytes) {
    var params_ = new PerfettoService_ConnectToProducerHost_Params();
    params_.producerClient = producerClient;
    params_.producerHostReceiver = producerHostReceiver;
    params_.sharedMemory = sharedMemory;
    params_.sharedMemoryBufferPageSizeBytes = sharedMemoryBufferPageSizeBytes;
    var builder = new codec.MessageV0Builder(
        kPerfettoService_ConnectToProducerHost_Name,
        codec.align(PerfettoService_ConnectToProducerHost_Params.encodedSize));
    builder.encodeStruct(PerfettoService_ConnectToProducerHost_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PerfettoServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  PerfettoServiceStub.prototype.connectToProducerHost = function(producerClient, producerHostReceiver, sharedMemory, sharedMemoryBufferPageSizeBytes) {
    return this.delegate_ && this.delegate_.connectToProducerHost && this.delegate_.connectToProducerHost(producerClient, producerHostReceiver, sharedMemory, sharedMemoryBufferPageSizeBytes);
  }

  PerfettoServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPerfettoService_ConnectToProducerHost_Name:
      var params = reader.decodeStruct(PerfettoService_ConnectToProducerHost_Params);
      this.connectToProducerHost(params.producerClient, params.producerHostReceiver, params.sharedMemory, params.sharedMemoryBufferPageSizeBytes);
      return true;
    default:
      return false;
    }
  };

  PerfettoServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePerfettoServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPerfettoService_ConnectToProducerHost_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PerfettoService_ConnectToProducerHost_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePerfettoServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PerfettoService = {
    name: 'tracing.mojom.PerfettoService',
    kVersion: 0,
    ptrClass: PerfettoServicePtr,
    proxyClass: PerfettoServiceProxy,
    stubClass: PerfettoServiceStub,
    validateRequest: validatePerfettoServiceRequest,
    validateResponse: null,
  };
  PerfettoServiceStub.prototype.validator = validatePerfettoServiceRequest;
  PerfettoServiceProxy.prototype.validator = null;
  var kConsumerHost_EnableTracing_Name = 2039681635;

  function ConsumerHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(ConsumerHost,
                                                   handleOrPtrInfo);
  }

  function ConsumerHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        ConsumerHost, associatedInterfacePtrInfo);
  }

  ConsumerHostAssociatedPtr.prototype =
      Object.create(ConsumerHostPtr.prototype);
  ConsumerHostAssociatedPtr.prototype.constructor =
      ConsumerHostAssociatedPtr;

  function ConsumerHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  ConsumerHostPtr.prototype.enableTracing = function() {
    return ConsumerHostProxy.prototype.enableTracing
        .apply(this.ptr.getProxy(), arguments);
  };

  ConsumerHostProxy.prototype.enableTracing = function(tracingSessionHost, tracingSessionClient, config, outputFile) {
    var params_ = new ConsumerHost_EnableTracing_Params();
    params_.tracingSessionHost = tracingSessionHost;
    params_.tracingSessionClient = tracingSessionClient;
    params_.config = config;
    params_.outputFile = outputFile;
    var builder = new codec.MessageV0Builder(
        kConsumerHost_EnableTracing_Name,
        codec.align(ConsumerHost_EnableTracing_Params.encodedSize));
    builder.encodeStruct(ConsumerHost_EnableTracing_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function ConsumerHostStub(delegate) {
    this.delegate_ = delegate;
  }
  ConsumerHostStub.prototype.enableTracing = function(tracingSessionHost, tracingSessionClient, config, outputFile) {
    return this.delegate_ && this.delegate_.enableTracing && this.delegate_.enableTracing(tracingSessionHost, tracingSessionClient, config, outputFile);
  }

  ConsumerHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kConsumerHost_EnableTracing_Name:
      var params = reader.decodeStruct(ConsumerHost_EnableTracing_Params);
      this.enableTracing(params.tracingSessionHost, params.tracingSessionClient, params.config, params.outputFile);
      return true;
    default:
      return false;
    }
  };

  ConsumerHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateConsumerHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kConsumerHost_EnableTracing_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = ConsumerHost_EnableTracing_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateConsumerHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var ConsumerHost = {
    name: 'tracing.mojom.ConsumerHost',
    kVersion: 0,
    ptrClass: ConsumerHostPtr,
    proxyClass: ConsumerHostProxy,
    stubClass: ConsumerHostStub,
    validateRequest: validateConsumerHostRequest,
    validateResponse: null,
  };
  ConsumerHostStub.prototype.validator = validateConsumerHostRequest;
  ConsumerHostProxy.prototype.validator = null;
  var kTracingSessionHost_ChangeTraceConfig_Name = 1318139436;
  var kTracingSessionHost_DisableTracing_Name = 886544573;
  var kTracingSessionHost_ReadBuffers_Name = 863772;
  var kTracingSessionHost_RequestBufferUsage_Name = 322283850;
  var kTracingSessionHost_DisableTracingAndEmitJson_Name = 768525291;

  function TracingSessionHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TracingSessionHost,
                                                   handleOrPtrInfo);
  }

  function TracingSessionHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TracingSessionHost, associatedInterfacePtrInfo);
  }

  TracingSessionHostAssociatedPtr.prototype =
      Object.create(TracingSessionHostPtr.prototype);
  TracingSessionHostAssociatedPtr.prototype.constructor =
      TracingSessionHostAssociatedPtr;

  function TracingSessionHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  TracingSessionHostPtr.prototype.changeTraceConfig = function() {
    return TracingSessionHostProxy.prototype.changeTraceConfig
        .apply(this.ptr.getProxy(), arguments);
  };

  TracingSessionHostProxy.prototype.changeTraceConfig = function(config) {
    var params_ = new TracingSessionHost_ChangeTraceConfig_Params();
    params_.config = config;
    var builder = new codec.MessageV0Builder(
        kTracingSessionHost_ChangeTraceConfig_Name,
        codec.align(TracingSessionHost_ChangeTraceConfig_Params.encodedSize));
    builder.encodeStruct(TracingSessionHost_ChangeTraceConfig_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TracingSessionHostPtr.prototype.disableTracing = function() {
    return TracingSessionHostProxy.prototype.disableTracing
        .apply(this.ptr.getProxy(), arguments);
  };

  TracingSessionHostProxy.prototype.disableTracing = function() {
    var params_ = new TracingSessionHost_DisableTracing_Params();
    var builder = new codec.MessageV0Builder(
        kTracingSessionHost_DisableTracing_Name,
        codec.align(TracingSessionHost_DisableTracing_Params.encodedSize));
    builder.encodeStruct(TracingSessionHost_DisableTracing_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TracingSessionHostPtr.prototype.readBuffers = function() {
    return TracingSessionHostProxy.prototype.readBuffers
        .apply(this.ptr.getProxy(), arguments);
  };

  TracingSessionHostProxy.prototype.readBuffers = function(stream) {
    var params_ = new TracingSessionHost_ReadBuffers_Params();
    params_.stream = stream;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTracingSessionHost_ReadBuffers_Name,
          codec.align(TracingSessionHost_ReadBuffers_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TracingSessionHost_ReadBuffers_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TracingSessionHost_ReadBuffers_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TracingSessionHostPtr.prototype.requestBufferUsage = function() {
    return TracingSessionHostProxy.prototype.requestBufferUsage
        .apply(this.ptr.getProxy(), arguments);
  };

  TracingSessionHostProxy.prototype.requestBufferUsage = function() {
    var params_ = new TracingSessionHost_RequestBufferUsage_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTracingSessionHost_RequestBufferUsage_Name,
          codec.align(TracingSessionHost_RequestBufferUsage_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TracingSessionHost_RequestBufferUsage_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TracingSessionHost_RequestBufferUsage_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  TracingSessionHostPtr.prototype.disableTracingAndEmitJson = function() {
    return TracingSessionHostProxy.prototype.disableTracingAndEmitJson
        .apply(this.ptr.getProxy(), arguments);
  };

  TracingSessionHostProxy.prototype.disableTracingAndEmitJson = function(agentLabelFilter, stream, privacyFilteringEnabled) {
    var params_ = new TracingSessionHost_DisableTracingAndEmitJson_Params();
    params_.agentLabelFilter = agentLabelFilter;
    params_.stream = stream;
    params_.privacyFilteringEnabled = privacyFilteringEnabled;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kTracingSessionHost_DisableTracingAndEmitJson_Name,
          codec.align(TracingSessionHost_DisableTracingAndEmitJson_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(TracingSessionHost_DisableTracingAndEmitJson_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(TracingSessionHost_DisableTracingAndEmitJson_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function TracingSessionHostStub(delegate) {
    this.delegate_ = delegate;
  }
  TracingSessionHostStub.prototype.changeTraceConfig = function(config) {
    return this.delegate_ && this.delegate_.changeTraceConfig && this.delegate_.changeTraceConfig(config);
  }
  TracingSessionHostStub.prototype.disableTracing = function() {
    return this.delegate_ && this.delegate_.disableTracing && this.delegate_.disableTracing();
  }
  TracingSessionHostStub.prototype.readBuffers = function(stream) {
    return this.delegate_ && this.delegate_.readBuffers && this.delegate_.readBuffers(stream);
  }
  TracingSessionHostStub.prototype.requestBufferUsage = function() {
    return this.delegate_ && this.delegate_.requestBufferUsage && this.delegate_.requestBufferUsage();
  }
  TracingSessionHostStub.prototype.disableTracingAndEmitJson = function(agentLabelFilter, stream, privacyFilteringEnabled) {
    return this.delegate_ && this.delegate_.disableTracingAndEmitJson && this.delegate_.disableTracingAndEmitJson(agentLabelFilter, stream, privacyFilteringEnabled);
  }

  TracingSessionHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTracingSessionHost_ChangeTraceConfig_Name:
      var params = reader.decodeStruct(TracingSessionHost_ChangeTraceConfig_Params);
      this.changeTraceConfig(params.config);
      return true;
    case kTracingSessionHost_DisableTracing_Name:
      var params = reader.decodeStruct(TracingSessionHost_DisableTracing_Params);
      this.disableTracing();
      return true;
    default:
      return false;
    }
  };

  TracingSessionHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTracingSessionHost_ReadBuffers_Name:
      var params = reader.decodeStruct(TracingSessionHost_ReadBuffers_Params);
      this.readBuffers(params.stream).then(function(response) {
        var responseParams =
            new TracingSessionHost_ReadBuffers_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTracingSessionHost_ReadBuffers_Name,
            codec.align(TracingSessionHost_ReadBuffers_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TracingSessionHost_ReadBuffers_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTracingSessionHost_RequestBufferUsage_Name:
      var params = reader.decodeStruct(TracingSessionHost_RequestBufferUsage_Params);
      this.requestBufferUsage().then(function(response) {
        var responseParams =
            new TracingSessionHost_RequestBufferUsage_ResponseParams();
        responseParams.success = response.success;
        responseParams.percentFull = response.percentFull;
        responseParams.dataLoss = response.dataLoss;
        var builder = new codec.MessageV1Builder(
            kTracingSessionHost_RequestBufferUsage_Name,
            codec.align(TracingSessionHost_RequestBufferUsage_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TracingSessionHost_RequestBufferUsage_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kTracingSessionHost_DisableTracingAndEmitJson_Name:
      var params = reader.decodeStruct(TracingSessionHost_DisableTracingAndEmitJson_Params);
      this.disableTracingAndEmitJson(params.agentLabelFilter, params.stream, params.privacyFilteringEnabled).then(function(response) {
        var responseParams =
            new TracingSessionHost_DisableTracingAndEmitJson_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kTracingSessionHost_DisableTracingAndEmitJson_Name,
            codec.align(TracingSessionHost_DisableTracingAndEmitJson_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(TracingSessionHost_DisableTracingAndEmitJson_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateTracingSessionHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTracingSessionHost_ChangeTraceConfig_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TracingSessionHost_ChangeTraceConfig_Params;
      break;
      case kTracingSessionHost_DisableTracing_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TracingSessionHost_DisableTracing_Params;
      break;
      case kTracingSessionHost_ReadBuffers_Name:
        if (message.expectsResponse())
          paramsClass = TracingSessionHost_ReadBuffers_Params;
      break;
      case kTracingSessionHost_RequestBufferUsage_Name:
        if (message.expectsResponse())
          paramsClass = TracingSessionHost_RequestBufferUsage_Params;
      break;
      case kTracingSessionHost_DisableTracingAndEmitJson_Name:
        if (message.expectsResponse())
          paramsClass = TracingSessionHost_DisableTracingAndEmitJson_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTracingSessionHostResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kTracingSessionHost_ReadBuffers_Name:
        if (message.isResponse())
          paramsClass = TracingSessionHost_ReadBuffers_ResponseParams;
        break;
      case kTracingSessionHost_RequestBufferUsage_Name:
        if (message.isResponse())
          paramsClass = TracingSessionHost_RequestBufferUsage_ResponseParams;
        break;
      case kTracingSessionHost_DisableTracingAndEmitJson_Name:
        if (message.isResponse())
          paramsClass = TracingSessionHost_DisableTracingAndEmitJson_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var TracingSessionHost = {
    name: 'tracing.mojom.TracingSessionHost',
    kVersion: 0,
    ptrClass: TracingSessionHostPtr,
    proxyClass: TracingSessionHostProxy,
    stubClass: TracingSessionHostStub,
    validateRequest: validateTracingSessionHostRequest,
    validateResponse: validateTracingSessionHostResponse,
  };
  TracingSessionHostStub.prototype.validator = validateTracingSessionHostRequest;
  TracingSessionHostProxy.prototype.validator = validateTracingSessionHostResponse;
  var kTracingSessionClient_OnTracingEnabled_Name = 1557837312;
  var kTracingSessionClient_OnTracingDisabled_Name = 1381504918;

  function TracingSessionClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TracingSessionClient,
                                                   handleOrPtrInfo);
  }

  function TracingSessionClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TracingSessionClient, associatedInterfacePtrInfo);
  }

  TracingSessionClientAssociatedPtr.prototype =
      Object.create(TracingSessionClientPtr.prototype);
  TracingSessionClientAssociatedPtr.prototype.constructor =
      TracingSessionClientAssociatedPtr;

  function TracingSessionClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  TracingSessionClientPtr.prototype.onTracingEnabled = function() {
    return TracingSessionClientProxy.prototype.onTracingEnabled
        .apply(this.ptr.getProxy(), arguments);
  };

  TracingSessionClientProxy.prototype.onTracingEnabled = function() {
    var params_ = new TracingSessionClient_OnTracingEnabled_Params();
    var builder = new codec.MessageV0Builder(
        kTracingSessionClient_OnTracingEnabled_Name,
        codec.align(TracingSessionClient_OnTracingEnabled_Params.encodedSize));
    builder.encodeStruct(TracingSessionClient_OnTracingEnabled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TracingSessionClientPtr.prototype.onTracingDisabled = function() {
    return TracingSessionClientProxy.prototype.onTracingDisabled
        .apply(this.ptr.getProxy(), arguments);
  };

  TracingSessionClientProxy.prototype.onTracingDisabled = function(tracingSucceeded) {
    var params_ = new TracingSessionClient_OnTracingDisabled_Params();
    params_.tracingSucceeded = tracingSucceeded;
    var builder = new codec.MessageV0Builder(
        kTracingSessionClient_OnTracingDisabled_Name,
        codec.align(TracingSessionClient_OnTracingDisabled_Params.encodedSize));
    builder.encodeStruct(TracingSessionClient_OnTracingDisabled_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TracingSessionClientStub(delegate) {
    this.delegate_ = delegate;
  }
  TracingSessionClientStub.prototype.onTracingEnabled = function() {
    return this.delegate_ && this.delegate_.onTracingEnabled && this.delegate_.onTracingEnabled();
  }
  TracingSessionClientStub.prototype.onTracingDisabled = function(tracingSucceeded) {
    return this.delegate_ && this.delegate_.onTracingDisabled && this.delegate_.onTracingDisabled(tracingSucceeded);
  }

  TracingSessionClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTracingSessionClient_OnTracingEnabled_Name:
      var params = reader.decodeStruct(TracingSessionClient_OnTracingEnabled_Params);
      this.onTracingEnabled();
      return true;
    case kTracingSessionClient_OnTracingDisabled_Name:
      var params = reader.decodeStruct(TracingSessionClient_OnTracingDisabled_Params);
      this.onTracingDisabled(params.tracingSucceeded);
      return true;
    default:
      return false;
    }
  };

  TracingSessionClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTracingSessionClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTracingSessionClient_OnTracingEnabled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TracingSessionClient_OnTracingEnabled_Params;
      break;
      case kTracingSessionClient_OnTracingDisabled_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TracingSessionClient_OnTracingDisabled_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTracingSessionClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var TracingSessionClient = {
    name: 'tracing.mojom.TracingSessionClient',
    kVersion: 0,
    ptrClass: TracingSessionClientPtr,
    proxyClass: TracingSessionClientProxy,
    stubClass: TracingSessionClientStub,
    validateRequest: validateTracingSessionClientRequest,
    validateResponse: null,
  };
  TracingSessionClientStub.prototype.validator = validateTracingSessionClientRequest;
  TracingSessionClientProxy.prototype.validator = null;
  exports.PERFETTO_PRODUCER_NAME_PREFIX = PERFETTO_PRODUCER_NAME_PREFIX;
  exports.TRACE_EVENT_DATA_SOURCE_NAME = TRACE_EVENT_DATA_SOURCE_NAME;
  exports.MEMORY_INSTRUMENTATION_DATA_SOURCE_NAME = MEMORY_INSTRUMENTATION_DATA_SOURCE_NAME;
  exports.META_DATA_SOURCE_NAME = META_DATA_SOURCE_NAME;
  exports.SYSTEM_TRACE_DATA_SOURCE_NAME = SYSTEM_TRACE_DATA_SOURCE_NAME;
  exports.ARC_TRACE_DATA_SOURCE_NAME = ARC_TRACE_DATA_SOURCE_NAME;
  exports.SAMPLER_PROFILER_SOURCE_NAME = SAMPLER_PROFILER_SOURCE_NAME;
  exports.JAVA_HEAP_PROFILER_SOURCE_NAME = JAVA_HEAP_PROFILER_SOURCE_NAME;
  exports.REACHED_CODE_PROFILER_SOURCE_NAME = REACHED_CODE_PROFILER_SOURCE_NAME;
  exports.NATIVE_HEAP_PROFILER_SOURCE_NAME = NATIVE_HEAP_PROFILER_SOURCE_NAME;
  exports.BufferFillPolicy = BufferFillPolicy;
  exports.TracingClientPriority = TracingClientPriority;
  exports.ChunksToMove = ChunksToMove;
  exports.ChunkPatch = ChunkPatch;
  exports.ChunksToPatch = ChunksToPatch;
  exports.CommitDataRequest = CommitDataRequest;
  exports.ChromeConfig = ChromeConfig;
  exports.DataSourceConfig = DataSourceConfig;
  exports.DataSourceRegistration = DataSourceRegistration;
  exports.BufferConfig = BufferConfig;
  exports.DataSource = DataSource;
  exports.PerfettoBuiltinDataSource = PerfettoBuiltinDataSource;
  exports.IncrementalStateConfig = IncrementalStateConfig;
  exports.TraceConfig = TraceConfig;
  exports.ProducerHost = ProducerHost;
  exports.ProducerHostPtr = ProducerHostPtr;
  exports.ProducerHostAssociatedPtr = ProducerHostAssociatedPtr;
  exports.ProducerClient = ProducerClient;
  exports.ProducerClientPtr = ProducerClientPtr;
  exports.ProducerClientAssociatedPtr = ProducerClientAssociatedPtr;
  exports.PerfettoService = PerfettoService;
  exports.PerfettoServicePtr = PerfettoServicePtr;
  exports.PerfettoServiceAssociatedPtr = PerfettoServiceAssociatedPtr;
  exports.ConsumerHost = ConsumerHost;
  exports.ConsumerHostPtr = ConsumerHostPtr;
  exports.ConsumerHostAssociatedPtr = ConsumerHostAssociatedPtr;
  exports.TracingSessionHost = TracingSessionHost;
  exports.TracingSessionHostPtr = TracingSessionHostPtr;
  exports.TracingSessionHostAssociatedPtr = TracingSessionHostAssociatedPtr;
  exports.TracingSessionClient = TracingSessionClient;
  exports.TracingSessionClientPtr = TracingSessionClientPtr;
  exports.TracingSessionClientAssociatedPtr = TracingSessionClientAssociatedPtr;
})();