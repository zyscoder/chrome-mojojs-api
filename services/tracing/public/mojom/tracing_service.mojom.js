// services/tracing/public/mojom/tracing_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/tracing/public/mojom/tracing_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('tracing.mojom');
  var perfetto_service$ =
      mojo.internal.exposeNamespace('tracing.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/tracing/public/mojom/perfetto_service.mojom', 'perfetto_service.mojom.js');
  }
  var context$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/context.mojom', '../../../../sandbox/policy/mojom/context.mojom.js');
  }
  var sandbox$ =
      mojo.internal.exposeNamespace('sandbox.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'sandbox/policy/mojom/sandbox.mojom', '../../../../sandbox/policy/mojom/sandbox.mojom.js');
  }
  var traced_process$ =
      mojo.internal.exposeNamespace('tracing.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/tracing/public/mojom/traced_process.mojom', 'traced_process.mojom.js');
  }


  var TRACING_SANDBOX = sandbox$.Sandbox.kUtility;

  function ClientInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ClientInfo.prototype.initDefaults_ = function() {
    this.pid = 0;
    this.process = new traced_process$.TracedProcessPtr();
  };
  ClientInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ClientInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ClientInfo.process
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 4, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ClientInfo.encodedSize = codec.kStructHeaderSize + 16;

  ClientInfo.decode = function(decoder) {
    var packed;
    var val = new ClientInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.pid =
        decoder.decodeStruct(codec.Int32);
    val.process =
        decoder.decodeStruct(new codec.Interface(traced_process$.TracedProcessPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  ClientInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ClientInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.pid);
    encoder.encodeStruct(new codec.Interface(traced_process$.TracedProcessPtr), val.process);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function TracingService_Initialize_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingService_Initialize_Params.prototype.initDefaults_ = function() {
    this.clients = null;
  };
  TracingService_Initialize_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingService_Initialize_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TracingService_Initialize_Params.clients
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(ClientInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TracingService_Initialize_Params.encodedSize = codec.kStructHeaderSize + 8;

  TracingService_Initialize_Params.decode = function(decoder) {
    var packed;
    var val = new TracingService_Initialize_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clients =
        decoder.decodeArrayPointer(new codec.PointerTo(ClientInfo));
    return val;
  };

  TracingService_Initialize_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingService_Initialize_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(ClientInfo), val.clients);
  };
  function TracingService_AddClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingService_AddClient_Params.prototype.initDefaults_ = function() {
    this.client = null;
  };
  TracingService_AddClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingService_AddClient_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TracingService_AddClient_Params.client
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, ClientInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TracingService_AddClient_Params.encodedSize = codec.kStructHeaderSize + 8;

  TracingService_AddClient_Params.decode = function(decoder) {
    var packed;
    var val = new TracingService_AddClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client =
        decoder.decodeStructPointer(ClientInfo);
    return val;
  };

  TracingService_AddClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingService_AddClient_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(ClientInfo, val.client);
  };
  function TracingService_BindConsumerHost_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TracingService_BindConsumerHost_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  TracingService_BindConsumerHost_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TracingService_BindConsumerHost_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TracingService_BindConsumerHost_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TracingService_BindConsumerHost_Params.encodedSize = codec.kStructHeaderSize + 8;

  TracingService_BindConsumerHost_Params.decode = function(decoder) {
    var packed;
    var val = new TracingService_BindConsumerHost_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  TracingService_BindConsumerHost_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TracingService_BindConsumerHost_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kTracingService_Initialize_Name = 754235580;
  var kTracingService_AddClient_Name = 43751557;
  var kTracingService_BindConsumerHost_Name = 215956971;

  function TracingServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(TracingService,
                                                   handleOrPtrInfo);
  }

  function TracingServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        TracingService, associatedInterfacePtrInfo);
  }

  TracingServiceAssociatedPtr.prototype =
      Object.create(TracingServicePtr.prototype);
  TracingServiceAssociatedPtr.prototype.constructor =
      TracingServiceAssociatedPtr;

  function TracingServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  TracingServicePtr.prototype.initialize = function() {
    return TracingServiceProxy.prototype.initialize
        .apply(this.ptr.getProxy(), arguments);
  };

  TracingServiceProxy.prototype.initialize = function(clients) {
    var params_ = new TracingService_Initialize_Params();
    params_.clients = clients;
    var builder = new codec.MessageV0Builder(
        kTracingService_Initialize_Name,
        codec.align(TracingService_Initialize_Params.encodedSize));
    builder.encodeStruct(TracingService_Initialize_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TracingServicePtr.prototype.addClient = function() {
    return TracingServiceProxy.prototype.addClient
        .apply(this.ptr.getProxy(), arguments);
  };

  TracingServiceProxy.prototype.addClient = function(client) {
    var params_ = new TracingService_AddClient_Params();
    params_.client = client;
    var builder = new codec.MessageV0Builder(
        kTracingService_AddClient_Name,
        codec.align(TracingService_AddClient_Params.encodedSize));
    builder.encodeStruct(TracingService_AddClient_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  TracingServicePtr.prototype.bindConsumerHost = function() {
    return TracingServiceProxy.prototype.bindConsumerHost
        .apply(this.ptr.getProxy(), arguments);
  };

  TracingServiceProxy.prototype.bindConsumerHost = function(receiver) {
    var params_ = new TracingService_BindConsumerHost_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kTracingService_BindConsumerHost_Name,
        codec.align(TracingService_BindConsumerHost_Params.encodedSize));
    builder.encodeStruct(TracingService_BindConsumerHost_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function TracingServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  TracingServiceStub.prototype.initialize = function(clients) {
    return this.delegate_ && this.delegate_.initialize && this.delegate_.initialize(clients);
  }
  TracingServiceStub.prototype.addClient = function(client) {
    return this.delegate_ && this.delegate_.addClient && this.delegate_.addClient(client);
  }
  TracingServiceStub.prototype.bindConsumerHost = function(receiver) {
    return this.delegate_ && this.delegate_.bindConsumerHost && this.delegate_.bindConsumerHost(receiver);
  }

  TracingServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kTracingService_Initialize_Name:
      var params = reader.decodeStruct(TracingService_Initialize_Params);
      this.initialize(params.clients);
      return true;
    case kTracingService_AddClient_Name:
      var params = reader.decodeStruct(TracingService_AddClient_Params);
      this.addClient(params.client);
      return true;
    case kTracingService_BindConsumerHost_Name:
      var params = reader.decodeStruct(TracingService_BindConsumerHost_Params);
      this.bindConsumerHost(params.receiver);
      return true;
    default:
      return false;
    }
  };

  TracingServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateTracingServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kTracingService_Initialize_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TracingService_Initialize_Params;
      break;
      case kTracingService_AddClient_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TracingService_AddClient_Params;
      break;
      case kTracingService_BindConsumerHost_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = TracingService_BindConsumerHost_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateTracingServiceResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var TracingService = {
    name: 'tracing.mojom.TracingService',
    kVersion: 0,
    ptrClass: TracingServicePtr,
    proxyClass: TracingServiceProxy,
    stubClass: TracingServiceStub,
    validateRequest: validateTracingServiceRequest,
    validateResponse: null,
  };
  TracingServiceStub.prototype.validator = validateTracingServiceRequest;
  TracingServiceProxy.prototype.validator = null;
  exports.TRACING_SANDBOX = TRACING_SANDBOX;
  exports.ClientInfo = ClientInfo;
  exports.TracingService = TracingService;
  exports.TracingServicePtr = TracingServicePtr;
  exports.TracingServiceAssociatedPtr = TracingServiceAssociatedPtr;
})();