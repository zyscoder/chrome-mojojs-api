// services/viz/privileged/mojom/compositing/vsync_parameter_observer.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/viz/privileged/mojom/compositing/vsync_parameter_observer.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('viz.mojom');
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }



  function VSyncParameterObserver_OnUpdateVSyncParameters_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  VSyncParameterObserver_OnUpdateVSyncParameters_Params.prototype.initDefaults_ = function() {
    this.timebase = null;
    this.interval = null;
  };
  VSyncParameterObserver_OnUpdateVSyncParameters_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  VSyncParameterObserver_OnUpdateVSyncParameters_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VSyncParameterObserver_OnUpdateVSyncParameters_Params.timebase
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate VSyncParameterObserver_OnUpdateVSyncParameters_Params.interval
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  VSyncParameterObserver_OnUpdateVSyncParameters_Params.encodedSize = codec.kStructHeaderSize + 16;

  VSyncParameterObserver_OnUpdateVSyncParameters_Params.decode = function(decoder) {
    var packed;
    var val = new VSyncParameterObserver_OnUpdateVSyncParameters_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.timebase =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.interval =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  VSyncParameterObserver_OnUpdateVSyncParameters_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(VSyncParameterObserver_OnUpdateVSyncParameters_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeTicks, val.timebase);
    encoder.encodeStructPointer(time$.TimeDelta, val.interval);
  };
  var kVSyncParameterObserver_OnUpdateVSyncParameters_Name = 930680381;

  function VSyncParameterObserverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(VSyncParameterObserver,
                                                   handleOrPtrInfo);
  }

  function VSyncParameterObserverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        VSyncParameterObserver, associatedInterfacePtrInfo);
  }

  VSyncParameterObserverAssociatedPtr.prototype =
      Object.create(VSyncParameterObserverPtr.prototype);
  VSyncParameterObserverAssociatedPtr.prototype.constructor =
      VSyncParameterObserverAssociatedPtr;

  function VSyncParameterObserverProxy(receiver) {
    this.receiver_ = receiver;
  }
  VSyncParameterObserverPtr.prototype.onUpdateVSyncParameters = function() {
    return VSyncParameterObserverProxy.prototype.onUpdateVSyncParameters
        .apply(this.ptr.getProxy(), arguments);
  };

  VSyncParameterObserverProxy.prototype.onUpdateVSyncParameters = function(timebase, interval) {
    var params_ = new VSyncParameterObserver_OnUpdateVSyncParameters_Params();
    params_.timebase = timebase;
    params_.interval = interval;
    var builder = new codec.MessageV0Builder(
        kVSyncParameterObserver_OnUpdateVSyncParameters_Name,
        codec.align(VSyncParameterObserver_OnUpdateVSyncParameters_Params.encodedSize));
    builder.encodeStruct(VSyncParameterObserver_OnUpdateVSyncParameters_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function VSyncParameterObserverStub(delegate) {
    this.delegate_ = delegate;
  }
  VSyncParameterObserverStub.prototype.onUpdateVSyncParameters = function(timebase, interval) {
    return this.delegate_ && this.delegate_.onUpdateVSyncParameters && this.delegate_.onUpdateVSyncParameters(timebase, interval);
  }

  VSyncParameterObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kVSyncParameterObserver_OnUpdateVSyncParameters_Name:
      var params = reader.decodeStruct(VSyncParameterObserver_OnUpdateVSyncParameters_Params);
      this.onUpdateVSyncParameters(params.timebase, params.interval);
      return true;
    default:
      return false;
    }
  };

  VSyncParameterObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateVSyncParameterObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kVSyncParameterObserver_OnUpdateVSyncParameters_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = VSyncParameterObserver_OnUpdateVSyncParameters_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateVSyncParameterObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var VSyncParameterObserver = {
    name: 'viz.mojom.VSyncParameterObserver',
    kVersion: 0,
    ptrClass: VSyncParameterObserverPtr,
    proxyClass: VSyncParameterObserverProxy,
    stubClass: VSyncParameterObserverStub,
    validateRequest: validateVSyncParameterObserverRequest,
    validateResponse: null,
  };
  VSyncParameterObserverStub.prototype.validator = validateVSyncParameterObserverRequest;
  VSyncParameterObserverProxy.prototype.validator = null;
  exports.VSyncParameterObserver = VSyncParameterObserver;
  exports.VSyncParameterObserverPtr = VSyncParameterObserverPtr;
  exports.VSyncParameterObserverAssociatedPtr = VSyncParameterObserverAssociatedPtr;
})();