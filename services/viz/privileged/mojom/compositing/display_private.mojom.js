// services/viz/privileged/mojom/compositing/display_private.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/viz/privileged/mojom/compositing/display_private.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('viz.mojom');
  var context_result$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/context_result.mojom', '../../../../../gpu/ipc/common/context_result.mojom.js');
  }
  var surface_handle$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/surface_handle.mojom', '../../../../../gpu/ipc/common/surface_handle.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var ca_layer_params$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/ca_layer_params.mojom', '../../../../../ui/gfx/mojom/ca_layer_params.mojom.js');
  }
  var delegated_ink_point_renderer$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/delegated_ink_point_renderer.mojom', '../../../../../ui/gfx/mojom/delegated_ink_point_renderer.mojom.js');
  }
  var display_color_spaces$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/display_color_spaces.mojom', '../../../../../ui/gfx/mojom/display_color_spaces.mojom.js');
  }
  var overlay_transform$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/overlay_transform.mojom', '../../../../../ui/gfx/mojom/overlay_transform.mojom.js');
  }
  var transform$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/transform.mojom', '../../../../../ui/gfx/mojom/transform.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var latency_info$ =
      mojo.internal.exposeNamespace('ui.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/latency/mojom/latency_info.mojom', '../../../../../ui/latency/mojom/latency_info.mojom.js');
  }
  var begin_frame_observer$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/privileged/mojom/compositing/begin_frame_observer.mojom', 'begin_frame_observer.mojom.js');
  }
  var layered_window_updater$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/privileged/mojom/compositing/layered_window_updater.mojom', 'layered_window_updater.mojom.js');
  }
  var vsync_parameter_observer$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/privileged/mojom/compositing/vsync_parameter_observer.mojom', 'vsync_parameter_observer.mojom.js');
  }



  function DisplayPrivate_SetDisplayVisible_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayPrivate_SetDisplayVisible_Params.prototype.initDefaults_ = function() {
    this.visible = false;
  };
  DisplayPrivate_SetDisplayVisible_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayPrivate_SetDisplayVisible_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DisplayPrivate_SetDisplayVisible_Params.encodedSize = codec.kStructHeaderSize + 8;

  DisplayPrivate_SetDisplayVisible_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayPrivate_SetDisplayVisible_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.visible = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DisplayPrivate_SetDisplayVisible_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayPrivate_SetDisplayVisible_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.visible & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DisplayPrivate_Resize_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayPrivate_Resize_Params.prototype.initDefaults_ = function() {
    this.size = null;
  };
  DisplayPrivate_Resize_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayPrivate_Resize_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DisplayPrivate_Resize_Params.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DisplayPrivate_Resize_Params.encodedSize = codec.kStructHeaderSize + 8;

  DisplayPrivate_Resize_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayPrivate_Resize_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.size =
        decoder.decodeStructPointer(geometry$.Size);
    return val;
  };

  DisplayPrivate_Resize_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayPrivate_Resize_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Size, val.size);
  };
  function DisplayPrivate_SetDisplayColorMatrix_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayPrivate_SetDisplayColorMatrix_Params.prototype.initDefaults_ = function() {
    this.colorMatrix = null;
  };
  DisplayPrivate_SetDisplayColorMatrix_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayPrivate_SetDisplayColorMatrix_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DisplayPrivate_SetDisplayColorMatrix_Params.colorMatrix
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, transform$.Transform, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DisplayPrivate_SetDisplayColorMatrix_Params.encodedSize = codec.kStructHeaderSize + 8;

  DisplayPrivate_SetDisplayColorMatrix_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayPrivate_SetDisplayColorMatrix_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.colorMatrix =
        decoder.decodeStructPointer(transform$.Transform);
    return val;
  };

  DisplayPrivate_SetDisplayColorMatrix_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayPrivate_SetDisplayColorMatrix_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(transform$.Transform, val.colorMatrix);
  };
  function DisplayPrivate_SetDisplayColorSpaces_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayPrivate_SetDisplayColorSpaces_Params.prototype.initDefaults_ = function() {
    this.displayColorSpaces = null;
  };
  DisplayPrivate_SetDisplayColorSpaces_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayPrivate_SetDisplayColorSpaces_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DisplayPrivate_SetDisplayColorSpaces_Params.displayColorSpaces
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, display_color_spaces$.DisplayColorSpaces, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DisplayPrivate_SetDisplayColorSpaces_Params.encodedSize = codec.kStructHeaderSize + 8;

  DisplayPrivate_SetDisplayColorSpaces_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayPrivate_SetDisplayColorSpaces_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.displayColorSpaces =
        decoder.decodeStructPointer(display_color_spaces$.DisplayColorSpaces);
    return val;
  };

  DisplayPrivate_SetDisplayColorSpaces_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayPrivate_SetDisplayColorSpaces_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(display_color_spaces$.DisplayColorSpaces, val.displayColorSpaces);
  };
  function DisplayPrivate_SetOutputIsSecure_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayPrivate_SetOutputIsSecure_Params.prototype.initDefaults_ = function() {
    this.secure = false;
  };
  DisplayPrivate_SetOutputIsSecure_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayPrivate_SetOutputIsSecure_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DisplayPrivate_SetOutputIsSecure_Params.encodedSize = codec.kStructHeaderSize + 8;

  DisplayPrivate_SetOutputIsSecure_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayPrivate_SetOutputIsSecure_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.secure = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DisplayPrivate_SetOutputIsSecure_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayPrivate_SetOutputIsSecure_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.secure & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DisplayPrivate_SetDisplayVSyncParameters_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayPrivate_SetDisplayVSyncParameters_Params.prototype.initDefaults_ = function() {
    this.timebase = null;
    this.interval = null;
  };
  DisplayPrivate_SetDisplayVSyncParameters_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayPrivate_SetDisplayVSyncParameters_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DisplayPrivate_SetDisplayVSyncParameters_Params.timebase
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeTicks, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DisplayPrivate_SetDisplayVSyncParameters_Params.interval
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DisplayPrivate_SetDisplayVSyncParameters_Params.encodedSize = codec.kStructHeaderSize + 16;

  DisplayPrivate_SetDisplayVSyncParameters_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayPrivate_SetDisplayVSyncParameters_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.timebase =
        decoder.decodeStructPointer(time$.TimeTicks);
    val.interval =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  DisplayPrivate_SetDisplayVSyncParameters_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayPrivate_SetDisplayVSyncParameters_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeTicks, val.timebase);
    encoder.encodeStructPointer(time$.TimeDelta, val.interval);
  };
  function DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params.prototype.initDefaults_ = function() {
  };
  DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params.encodedSize = codec.kStructHeaderSize + 0;

  DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function DisplayPrivate_AddVSyncParameterObserver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayPrivate_AddVSyncParameterObserver_Params.prototype.initDefaults_ = function() {
    this.observer = new vsync_parameter_observer$.VSyncParameterObserverPtr();
  };
  DisplayPrivate_AddVSyncParameterObserver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayPrivate_AddVSyncParameterObserver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DisplayPrivate_AddVSyncParameterObserver_Params.observer
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DisplayPrivate_AddVSyncParameterObserver_Params.encodedSize = codec.kStructHeaderSize + 8;

  DisplayPrivate_AddVSyncParameterObserver_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayPrivate_AddVSyncParameterObserver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.observer =
        decoder.decodeStruct(new codec.Interface(vsync_parameter_observer$.VSyncParameterObserverPtr));
    return val;
  };

  DisplayPrivate_AddVSyncParameterObserver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayPrivate_AddVSyncParameterObserver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(vsync_parameter_observer$.VSyncParameterObserverPtr), val.observer);
  };
  function DisplayPrivate_SetDelegatedInkPointRenderer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayPrivate_SetDelegatedInkPointRenderer_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
  };
  DisplayPrivate_SetDelegatedInkPointRenderer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayPrivate_SetDelegatedInkPointRenderer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DisplayPrivate_SetDelegatedInkPointRenderer_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DisplayPrivate_SetDelegatedInkPointRenderer_Params.encodedSize = codec.kStructHeaderSize + 8;

  DisplayPrivate_SetDelegatedInkPointRenderer_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayPrivate_SetDelegatedInkPointRenderer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DisplayPrivate_SetDelegatedInkPointRenderer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayPrivate_SetDelegatedInkPointRenderer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DisplayPrivate_SetStandaloneBeginFrameObserver_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayPrivate_SetStandaloneBeginFrameObserver_Params.prototype.initDefaults_ = function() {
    this.observer = new begin_frame_observer$.BeginFrameObserverPtr();
  };
  DisplayPrivate_SetStandaloneBeginFrameObserver_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayPrivate_SetStandaloneBeginFrameObserver_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DisplayPrivate_SetStandaloneBeginFrameObserver_Params.observer
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DisplayPrivate_SetStandaloneBeginFrameObserver_Params.encodedSize = codec.kStructHeaderSize + 8;

  DisplayPrivate_SetStandaloneBeginFrameObserver_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayPrivate_SetStandaloneBeginFrameObserver_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.observer =
        decoder.decodeStruct(new codec.Interface(begin_frame_observer$.BeginFrameObserverPtr));
    return val;
  };

  DisplayPrivate_SetStandaloneBeginFrameObserver_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayPrivate_SetStandaloneBeginFrameObserver_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(begin_frame_observer$.BeginFrameObserverPtr), val.observer);
  };
  function DisplayPrivate_SetMaxVrrInterval_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayPrivate_SetMaxVrrInterval_Params.prototype.initDefaults_ = function() {
    this.maxVrrInterval = null;
  };
  DisplayPrivate_SetMaxVrrInterval_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayPrivate_SetMaxVrrInterval_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DisplayPrivate_SetMaxVrrInterval_Params.maxVrrInterval
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeDelta, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DisplayPrivate_SetMaxVrrInterval_Params.encodedSize = codec.kStructHeaderSize + 8;

  DisplayPrivate_SetMaxVrrInterval_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayPrivate_SetMaxVrrInterval_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.maxVrrInterval =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  DisplayPrivate_SetMaxVrrInterval_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayPrivate_SetMaxVrrInterval_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeDelta, val.maxVrrInterval);
  };
  function DisplayClient_DidCompleteSwapWithNewSize_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DisplayClient_DidCompleteSwapWithNewSize_Params.prototype.initDefaults_ = function() {
    this.size = null;
  };
  DisplayClient_DidCompleteSwapWithNewSize_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DisplayClient_DidCompleteSwapWithNewSize_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DisplayClient_DidCompleteSwapWithNewSize_Params.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DisplayClient_DidCompleteSwapWithNewSize_Params.encodedSize = codec.kStructHeaderSize + 8;

  DisplayClient_DidCompleteSwapWithNewSize_Params.decode = function(decoder) {
    var packed;
    var val = new DisplayClient_DidCompleteSwapWithNewSize_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.size =
        decoder.decodeStructPointer(geometry$.Size);
    return val;
  };

  DisplayClient_DidCompleteSwapWithNewSize_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DisplayClient_DidCompleteSwapWithNewSize_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(geometry$.Size, val.size);
  };
  var kDisplayPrivate_SetDisplayVisible_Name = 1683699510;
  var kDisplayPrivate_Resize_Name = 1294133650;
  var kDisplayPrivate_SetDisplayColorMatrix_Name = 1861274866;
  var kDisplayPrivate_SetDisplayColorSpaces_Name = 1820177824;
  var kDisplayPrivate_SetOutputIsSecure_Name = 1966474476;
  var kDisplayPrivate_SetDisplayVSyncParameters_Name = 1871228554;
  var kDisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Name = 428120747;
  var kDisplayPrivate_AddVSyncParameterObserver_Name = 682811806;
  var kDisplayPrivate_SetDelegatedInkPointRenderer_Name = 1977793051;
  var kDisplayPrivate_SetStandaloneBeginFrameObserver_Name = 830231297;
  var kDisplayPrivate_SetMaxVrrInterval_Name = 515923403;

  function DisplayPrivatePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DisplayPrivate,
                                                   handleOrPtrInfo);
  }

  function DisplayPrivateAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DisplayPrivate, associatedInterfacePtrInfo);
  }

  DisplayPrivateAssociatedPtr.prototype =
      Object.create(DisplayPrivatePtr.prototype);
  DisplayPrivateAssociatedPtr.prototype.constructor =
      DisplayPrivateAssociatedPtr;

  function DisplayPrivateProxy(receiver) {
    this.receiver_ = receiver;
  }
  DisplayPrivatePtr.prototype.setDisplayVisible = function() {
    return DisplayPrivateProxy.prototype.setDisplayVisible
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayPrivateProxy.prototype.setDisplayVisible = function(visible) {
    var params_ = new DisplayPrivate_SetDisplayVisible_Params();
    params_.visible = visible;
    var builder = new codec.MessageV0Builder(
        kDisplayPrivate_SetDisplayVisible_Name,
        codec.align(DisplayPrivate_SetDisplayVisible_Params.encodedSize));
    builder.encodeStruct(DisplayPrivate_SetDisplayVisible_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DisplayPrivatePtr.prototype.resize = function() {
    return DisplayPrivateProxy.prototype.resize
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayPrivateProxy.prototype.resize = function(size) {
    var params_ = new DisplayPrivate_Resize_Params();
    params_.size = size;
    var builder = new codec.MessageV0Builder(
        kDisplayPrivate_Resize_Name,
        codec.align(DisplayPrivate_Resize_Params.encodedSize));
    builder.encodeStruct(DisplayPrivate_Resize_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DisplayPrivatePtr.prototype.setDisplayColorMatrix = function() {
    return DisplayPrivateProxy.prototype.setDisplayColorMatrix
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayPrivateProxy.prototype.setDisplayColorMatrix = function(colorMatrix) {
    var params_ = new DisplayPrivate_SetDisplayColorMatrix_Params();
    params_.colorMatrix = colorMatrix;
    var builder = new codec.MessageV0Builder(
        kDisplayPrivate_SetDisplayColorMatrix_Name,
        codec.align(DisplayPrivate_SetDisplayColorMatrix_Params.encodedSize));
    builder.encodeStruct(DisplayPrivate_SetDisplayColorMatrix_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DisplayPrivatePtr.prototype.setDisplayColorSpaces = function() {
    return DisplayPrivateProxy.prototype.setDisplayColorSpaces
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayPrivateProxy.prototype.setDisplayColorSpaces = function(displayColorSpaces) {
    var params_ = new DisplayPrivate_SetDisplayColorSpaces_Params();
    params_.displayColorSpaces = displayColorSpaces;
    var builder = new codec.MessageV0Builder(
        kDisplayPrivate_SetDisplayColorSpaces_Name,
        codec.align(DisplayPrivate_SetDisplayColorSpaces_Params.encodedSize));
    builder.encodeStruct(DisplayPrivate_SetDisplayColorSpaces_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DisplayPrivatePtr.prototype.setOutputIsSecure = function() {
    return DisplayPrivateProxy.prototype.setOutputIsSecure
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayPrivateProxy.prototype.setOutputIsSecure = function(secure) {
    var params_ = new DisplayPrivate_SetOutputIsSecure_Params();
    params_.secure = secure;
    var builder = new codec.MessageV0Builder(
        kDisplayPrivate_SetOutputIsSecure_Name,
        codec.align(DisplayPrivate_SetOutputIsSecure_Params.encodedSize));
    builder.encodeStruct(DisplayPrivate_SetOutputIsSecure_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DisplayPrivatePtr.prototype.setDisplayVSyncParameters = function() {
    return DisplayPrivateProxy.prototype.setDisplayVSyncParameters
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayPrivateProxy.prototype.setDisplayVSyncParameters = function(timebase, interval) {
    var params_ = new DisplayPrivate_SetDisplayVSyncParameters_Params();
    params_.timebase = timebase;
    params_.interval = interval;
    var builder = new codec.MessageV0Builder(
        kDisplayPrivate_SetDisplayVSyncParameters_Name,
        codec.align(DisplayPrivate_SetDisplayVSyncParameters_Params.encodedSize));
    builder.encodeStruct(DisplayPrivate_SetDisplayVSyncParameters_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DisplayPrivatePtr.prototype.forceImmediateDrawAndSwapIfPossible = function() {
    return DisplayPrivateProxy.prototype.forceImmediateDrawAndSwapIfPossible
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayPrivateProxy.prototype.forceImmediateDrawAndSwapIfPossible = function() {
    var params_ = new DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params();
    var builder = new codec.MessageV0Builder(
        kDisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Name,
        codec.align(DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params.encodedSize));
    builder.encodeStruct(DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DisplayPrivatePtr.prototype.addVSyncParameterObserver = function() {
    return DisplayPrivateProxy.prototype.addVSyncParameterObserver
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayPrivateProxy.prototype.addVSyncParameterObserver = function(observer) {
    var params_ = new DisplayPrivate_AddVSyncParameterObserver_Params();
    params_.observer = observer;
    var builder = new codec.MessageV0Builder(
        kDisplayPrivate_AddVSyncParameterObserver_Name,
        codec.align(DisplayPrivate_AddVSyncParameterObserver_Params.encodedSize));
    builder.encodeStruct(DisplayPrivate_AddVSyncParameterObserver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DisplayPrivatePtr.prototype.setDelegatedInkPointRenderer = function() {
    return DisplayPrivateProxy.prototype.setDelegatedInkPointRenderer
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayPrivateProxy.prototype.setDelegatedInkPointRenderer = function(receiver) {
    var params_ = new DisplayPrivate_SetDelegatedInkPointRenderer_Params();
    params_.receiver = receiver;
    var builder = new codec.MessageV0Builder(
        kDisplayPrivate_SetDelegatedInkPointRenderer_Name,
        codec.align(DisplayPrivate_SetDelegatedInkPointRenderer_Params.encodedSize));
    builder.encodeStruct(DisplayPrivate_SetDelegatedInkPointRenderer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DisplayPrivatePtr.prototype.setStandaloneBeginFrameObserver = function() {
    return DisplayPrivateProxy.prototype.setStandaloneBeginFrameObserver
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayPrivateProxy.prototype.setStandaloneBeginFrameObserver = function(observer) {
    var params_ = new DisplayPrivate_SetStandaloneBeginFrameObserver_Params();
    params_.observer = observer;
    var builder = new codec.MessageV0Builder(
        kDisplayPrivate_SetStandaloneBeginFrameObserver_Name,
        codec.align(DisplayPrivate_SetStandaloneBeginFrameObserver_Params.encodedSize));
    builder.encodeStruct(DisplayPrivate_SetStandaloneBeginFrameObserver_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DisplayPrivatePtr.prototype.setMaxVrrInterval = function() {
    return DisplayPrivateProxy.prototype.setMaxVrrInterval
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayPrivateProxy.prototype.setMaxVrrInterval = function(maxVrrInterval) {
    var params_ = new DisplayPrivate_SetMaxVrrInterval_Params();
    params_.maxVrrInterval = maxVrrInterval;
    var builder = new codec.MessageV0Builder(
        kDisplayPrivate_SetMaxVrrInterval_Name,
        codec.align(DisplayPrivate_SetMaxVrrInterval_Params.encodedSize));
    builder.encodeStruct(DisplayPrivate_SetMaxVrrInterval_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DisplayPrivateStub(delegate) {
    this.delegate_ = delegate;
  }
  DisplayPrivateStub.prototype.setDisplayVisible = function(visible) {
    return this.delegate_ && this.delegate_.setDisplayVisible && this.delegate_.setDisplayVisible(visible);
  }
  DisplayPrivateStub.prototype.resize = function(size) {
    return this.delegate_ && this.delegate_.resize && this.delegate_.resize(size);
  }
  DisplayPrivateStub.prototype.setDisplayColorMatrix = function(colorMatrix) {
    return this.delegate_ && this.delegate_.setDisplayColorMatrix && this.delegate_.setDisplayColorMatrix(colorMatrix);
  }
  DisplayPrivateStub.prototype.setDisplayColorSpaces = function(displayColorSpaces) {
    return this.delegate_ && this.delegate_.setDisplayColorSpaces && this.delegate_.setDisplayColorSpaces(displayColorSpaces);
  }
  DisplayPrivateStub.prototype.setOutputIsSecure = function(secure) {
    return this.delegate_ && this.delegate_.setOutputIsSecure && this.delegate_.setOutputIsSecure(secure);
  }
  DisplayPrivateStub.prototype.setDisplayVSyncParameters = function(timebase, interval) {
    return this.delegate_ && this.delegate_.setDisplayVSyncParameters && this.delegate_.setDisplayVSyncParameters(timebase, interval);
  }
  DisplayPrivateStub.prototype.forceImmediateDrawAndSwapIfPossible = function() {
    return this.delegate_ && this.delegate_.forceImmediateDrawAndSwapIfPossible && this.delegate_.forceImmediateDrawAndSwapIfPossible();
  }
  DisplayPrivateStub.prototype.addVSyncParameterObserver = function(observer) {
    return this.delegate_ && this.delegate_.addVSyncParameterObserver && this.delegate_.addVSyncParameterObserver(observer);
  }
  DisplayPrivateStub.prototype.setDelegatedInkPointRenderer = function(receiver) {
    return this.delegate_ && this.delegate_.setDelegatedInkPointRenderer && this.delegate_.setDelegatedInkPointRenderer(receiver);
  }
  DisplayPrivateStub.prototype.setStandaloneBeginFrameObserver = function(observer) {
    return this.delegate_ && this.delegate_.setStandaloneBeginFrameObserver && this.delegate_.setStandaloneBeginFrameObserver(observer);
  }
  DisplayPrivateStub.prototype.setMaxVrrInterval = function(maxVrrInterval) {
    return this.delegate_ && this.delegate_.setMaxVrrInterval && this.delegate_.setMaxVrrInterval(maxVrrInterval);
  }

  DisplayPrivateStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDisplayPrivate_SetDisplayVisible_Name:
      var params = reader.decodeStruct(DisplayPrivate_SetDisplayVisible_Params);
      this.setDisplayVisible(params.visible);
      return true;
    case kDisplayPrivate_Resize_Name:
      var params = reader.decodeStruct(DisplayPrivate_Resize_Params);
      this.resize(params.size);
      return true;
    case kDisplayPrivate_SetDisplayColorMatrix_Name:
      var params = reader.decodeStruct(DisplayPrivate_SetDisplayColorMatrix_Params);
      this.setDisplayColorMatrix(params.colorMatrix);
      return true;
    case kDisplayPrivate_SetDisplayColorSpaces_Name:
      var params = reader.decodeStruct(DisplayPrivate_SetDisplayColorSpaces_Params);
      this.setDisplayColorSpaces(params.displayColorSpaces);
      return true;
    case kDisplayPrivate_SetOutputIsSecure_Name:
      var params = reader.decodeStruct(DisplayPrivate_SetOutputIsSecure_Params);
      this.setOutputIsSecure(params.secure);
      return true;
    case kDisplayPrivate_SetDisplayVSyncParameters_Name:
      var params = reader.decodeStruct(DisplayPrivate_SetDisplayVSyncParameters_Params);
      this.setDisplayVSyncParameters(params.timebase, params.interval);
      return true;
    case kDisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Name:
      var params = reader.decodeStruct(DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params);
      this.forceImmediateDrawAndSwapIfPossible();
      return true;
    case kDisplayPrivate_AddVSyncParameterObserver_Name:
      var params = reader.decodeStruct(DisplayPrivate_AddVSyncParameterObserver_Params);
      this.addVSyncParameterObserver(params.observer);
      return true;
    case kDisplayPrivate_SetDelegatedInkPointRenderer_Name:
      var params = reader.decodeStruct(DisplayPrivate_SetDelegatedInkPointRenderer_Params);
      this.setDelegatedInkPointRenderer(params.receiver);
      return true;
    case kDisplayPrivate_SetStandaloneBeginFrameObserver_Name:
      var params = reader.decodeStruct(DisplayPrivate_SetStandaloneBeginFrameObserver_Params);
      this.setStandaloneBeginFrameObserver(params.observer);
      return true;
    case kDisplayPrivate_SetMaxVrrInterval_Name:
      var params = reader.decodeStruct(DisplayPrivate_SetMaxVrrInterval_Params);
      this.setMaxVrrInterval(params.maxVrrInterval);
      return true;
    default:
      return false;
    }
  };

  DisplayPrivateStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDisplayPrivateRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDisplayPrivate_SetDisplayVisible_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayPrivate_SetDisplayVisible_Params;
      break;
      case kDisplayPrivate_Resize_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayPrivate_Resize_Params;
      break;
      case kDisplayPrivate_SetDisplayColorMatrix_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayPrivate_SetDisplayColorMatrix_Params;
      break;
      case kDisplayPrivate_SetDisplayColorSpaces_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayPrivate_SetDisplayColorSpaces_Params;
      break;
      case kDisplayPrivate_SetOutputIsSecure_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayPrivate_SetOutputIsSecure_Params;
      break;
      case kDisplayPrivate_SetDisplayVSyncParameters_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayPrivate_SetDisplayVSyncParameters_Params;
      break;
      case kDisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayPrivate_ForceImmediateDrawAndSwapIfPossible_Params;
      break;
      case kDisplayPrivate_AddVSyncParameterObserver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayPrivate_AddVSyncParameterObserver_Params;
      break;
      case kDisplayPrivate_SetDelegatedInkPointRenderer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayPrivate_SetDelegatedInkPointRenderer_Params;
      break;
      case kDisplayPrivate_SetStandaloneBeginFrameObserver_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayPrivate_SetStandaloneBeginFrameObserver_Params;
      break;
      case kDisplayPrivate_SetMaxVrrInterval_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayPrivate_SetMaxVrrInterval_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDisplayPrivateResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DisplayPrivate = {
    name: 'viz.mojom.DisplayPrivate',
    kVersion: 0,
    ptrClass: DisplayPrivatePtr,
    proxyClass: DisplayPrivateProxy,
    stubClass: DisplayPrivateStub,
    validateRequest: validateDisplayPrivateRequest,
    validateResponse: null,
  };
  DisplayPrivateStub.prototype.validator = validateDisplayPrivateRequest;
  DisplayPrivateProxy.prototype.validator = null;
  var kDisplayClient_DidCompleteSwapWithNewSize_Name = 687667507;

  function DisplayClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DisplayClient,
                                                   handleOrPtrInfo);
  }

  function DisplayClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DisplayClient, associatedInterfacePtrInfo);
  }

  DisplayClientAssociatedPtr.prototype =
      Object.create(DisplayClientPtr.prototype);
  DisplayClientAssociatedPtr.prototype.constructor =
      DisplayClientAssociatedPtr;

  function DisplayClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  DisplayClientPtr.prototype.didCompleteSwapWithNewSize = function() {
    return DisplayClientProxy.prototype.didCompleteSwapWithNewSize
        .apply(this.ptr.getProxy(), arguments);
  };

  DisplayClientProxy.prototype.didCompleteSwapWithNewSize = function(size) {
    var params_ = new DisplayClient_DidCompleteSwapWithNewSize_Params();
    params_.size = size;
    var builder = new codec.MessageV0Builder(
        kDisplayClient_DidCompleteSwapWithNewSize_Name,
        codec.align(DisplayClient_DidCompleteSwapWithNewSize_Params.encodedSize));
    builder.encodeStruct(DisplayClient_DidCompleteSwapWithNewSize_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DisplayClientStub(delegate) {
    this.delegate_ = delegate;
  }
  DisplayClientStub.prototype.didCompleteSwapWithNewSize = function(size) {
    return this.delegate_ && this.delegate_.didCompleteSwapWithNewSize && this.delegate_.didCompleteSwapWithNewSize(size);
  }

  DisplayClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDisplayClient_DidCompleteSwapWithNewSize_Name:
      var params = reader.decodeStruct(DisplayClient_DidCompleteSwapWithNewSize_Params);
      this.didCompleteSwapWithNewSize(params.size);
      return true;
    default:
      return false;
    }
  };

  DisplayClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDisplayClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDisplayClient_DidCompleteSwapWithNewSize_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DisplayClient_DidCompleteSwapWithNewSize_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDisplayClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DisplayClient = {
    name: 'viz.mojom.DisplayClient',
    kVersion: 0,
    ptrClass: DisplayClientPtr,
    proxyClass: DisplayClientProxy,
    stubClass: DisplayClientStub,
    validateRequest: validateDisplayClientRequest,
    validateResponse: null,
  };
  DisplayClientStub.prototype.validator = validateDisplayClientRequest;
  DisplayClientProxy.prototype.validator = null;
  exports.DisplayPrivate = DisplayPrivate;
  exports.DisplayPrivatePtr = DisplayPrivatePtr;
  exports.DisplayPrivateAssociatedPtr = DisplayPrivateAssociatedPtr;
  exports.DisplayClient = DisplayClient;
  exports.DisplayClientPtr = DisplayClientPtr;
  exports.DisplayClientAssociatedPtr = DisplayClientAssociatedPtr;
})();