// services/viz/privileged/mojom/compositing/renderer_settings.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/viz/privileged/mojom/compositing/renderer_settings.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('viz.mojom');
  var overlay_strategy$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/privileged/mojom/compositing/overlay_strategy.mojom', 'overlay_strategy.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var color_space$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/color_space.mojom', '../../../../../ui/gfx/mojom/color_space.mojom.js');
  }


  var INVALID_DISPLAY_ID = -1;

  function RendererSettings(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  RendererSettings.prototype.initDefaults_ = function() {
    this.allowAntialiasing = false;
    this.forceAntialiasing = false;
    this.forceBlendingWithShaders = false;
    this.partialSwapEnabled = false;
    this.releaseOverlayResourcesAfterGpuQuery = false;
    this.shouldClearRootRenderPass = false;
    this.autoResizeOutputSurface = false;
    this.requiresAlphaChannel = false;
    this.highpThresholdMin = 0;
    this.slowDownCompositingScaleFactor = 0;
    this.overlayStrategies = null;
  };
  RendererSettings.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  RendererSettings.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;












    // validate RendererSettings.overlayStrategies
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 4, new codec.Enum(overlay_strategy$.OverlayStrategy), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  RendererSettings.encodedSize = codec.kStructHeaderSize + 24;

  RendererSettings.decode = function(decoder) {
    var packed;
    var val = new RendererSettings();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.allowAntialiasing = (packed >> 0) & 1 ? true : false;
    val.forceAntialiasing = (packed >> 1) & 1 ? true : false;
    val.forceBlendingWithShaders = (packed >> 2) & 1 ? true : false;
    val.partialSwapEnabled = (packed >> 3) & 1 ? true : false;
    val.releaseOverlayResourcesAfterGpuQuery = (packed >> 4) & 1 ? true : false;
    val.shouldClearRootRenderPass = (packed >> 5) & 1 ? true : false;
    val.autoResizeOutputSurface = (packed >> 6) & 1 ? true : false;
    val.requiresAlphaChannel = (packed >> 7) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.highpThresholdMin =
        decoder.decodeStruct(codec.Int32);
    val.slowDownCompositingScaleFactor =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.overlayStrategies =
        decoder.decodeArrayPointer(new codec.Enum(overlay_strategy$.OverlayStrategy));
    return val;
  };

  RendererSettings.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(RendererSettings.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.allowAntialiasing & 1) << 0
    packed |= (val.forceAntialiasing & 1) << 1
    packed |= (val.forceBlendingWithShaders & 1) << 2
    packed |= (val.partialSwapEnabled & 1) << 3
    packed |= (val.releaseOverlayResourcesAfterGpuQuery & 1) << 4
    packed |= (val.shouldClearRootRenderPass & 1) << 5
    packed |= (val.autoResizeOutputSurface & 1) << 6
    packed |= (val.requiresAlphaChannel & 1) << 7
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.highpThresholdMin);
    encoder.encodeStruct(codec.Int32, val.slowDownCompositingScaleFactor);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.Enum(overlay_strategy$.OverlayStrategy), val.overlayStrategies);
  };
  function DebugRendererSettings(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DebugRendererSettings.prototype.initDefaults_ = function() {
    this.tintCompositedContent = false;
    this.tintCompositedContentModulate = false;
    this.showOverdrawFeedback = false;
    this.showDcLayerDebugBorders = false;
    this.showAggregatedDamage = false;
  };
  DebugRendererSettings.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DebugRendererSettings.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;






    return validator.validationError.NONE;
  };

  DebugRendererSettings.encodedSize = codec.kStructHeaderSize + 8;

  DebugRendererSettings.decode = function(decoder) {
    var packed;
    var val = new DebugRendererSettings();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.tintCompositedContent = (packed >> 0) & 1 ? true : false;
    val.tintCompositedContentModulate = (packed >> 1) & 1 ? true : false;
    val.showOverdrawFeedback = (packed >> 2) & 1 ? true : false;
    val.showDcLayerDebugBorders = (packed >> 3) & 1 ? true : false;
    val.showAggregatedDamage = (packed >> 4) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DebugRendererSettings.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DebugRendererSettings.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.tintCompositedContent & 1) << 0
    packed |= (val.tintCompositedContentModulate & 1) << 1
    packed |= (val.showOverdrawFeedback & 1) << 2
    packed |= (val.showDcLayerDebugBorders & 1) << 3
    packed |= (val.showAggregatedDamage & 1) << 4
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  exports.INVALID_DISPLAY_ID = INVALID_DISPLAY_ID;
  exports.RendererSettings = RendererSettings;
  exports.DebugRendererSettings = DebugRendererSettings;
})();