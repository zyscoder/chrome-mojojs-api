// services/viz/privileged/mojom/gl/gpu_service.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/viz/privileged/mojom/gl/gpu_service.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('viz.mojom');
  var device_perf_info$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/device_perf_info.mojom', '../../../../../gpu/ipc/common/device_perf_info.mojom.js');
  }
  var dx_diag_node$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/dx_diag_node.mojom', '../../../../../gpu/ipc/common/dx_diag_node.mojom.js');
  }
  var gpu_disk_cache_type$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/gpu_disk_cache_type.mojom', '../../../../../gpu/ipc/common/gpu_disk_cache_type.mojom.js');
  }
  var gpu_feature_info$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/gpu_feature_info.mojom', '../../../../../gpu/ipc/common/gpu_feature_info.mojom.js');
  }
  var gpu_info$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/gpu_info.mojom', '../../../../../gpu/ipc/common/gpu_info.mojom.js');
  }
  var gpu_peak_memory$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/gpu_peak_memory.mojom', '../../../../../gpu/ipc/common/gpu_peak_memory.mojom.js');
  }
  var memory_stats$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/memory_stats.mojom', '../../../../../gpu/ipc/common/memory_stats.mojom.js');
  }
  var client_gmb_interface$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/client_gmb_interface.mojom', '../../../../../gpu/ipc/common/client_gmb_interface.mojom.js');
  }
  var shared_image_capabilities$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/shared_image_capabilities.mojom', '../../../../../gpu/ipc/common/shared_image_capabilities.mojom.js');
  }
  var surface_handle$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/surface_handle.mojom', '../../../../../gpu/ipc/common/surface_handle.mojom.js');
  }
  var sync_token$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/sync_token.mojom', '../../../../../gpu/ipc/common/sync_token.mojom.js');
  }
  var video_encode_accelerator$ =
      mojo.internal.exposeNamespace('media.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'media/mojo/mojom/video_encode_accelerator.mojom', '../../../../../media/mojo/mojom/video_encode_accelerator.mojom.js');
  }
  var byte_string$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/byte_string.mojom', '../../../../../mojo/public/mojom/base/byte_string.mojom.js');
  }
  var process_id$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/process_id.mojom', '../../../../../mojo/public/mojom/base/process_id.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var buffer_types$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/buffer_types.mojom', '../../../../../ui/gfx/mojom/buffer_types.mojom.js');
  }
  var gpu_preference$ =
      mojo.internal.exposeNamespace('gl.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gl/mojom/gpu_preference.mojom', '../../../../../ui/gl/mojom/gpu_preference.mojom.js');
  }
  var memory_pressure_level$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/memory_pressure_level.mojom', '../../../../../mojo/public/mojom/base/memory_pressure_level.mojom.js');
  }
  var shared_memory$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/shared_memory.mojom', '../../../../../mojo/public/mojom/base/shared_memory.mojom.js');
  }
  var webnn_context_provider$ =
      mojo.internal.exposeNamespace('webnn.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/webnn/public/mojom/webnn_context_provider.mojom', '../../../../webnn/public/mojom/webnn_context_provider.mojom.js');
  }



  function GpuService_EstablishGpuChannel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_EstablishGpuChannel_Params.prototype.initDefaults_ = function() {
    this.clientId = 0;
    this.isGpuHost = false;
    this.clientTracingId = 0;
  };
  GpuService_EstablishGpuChannel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_EstablishGpuChannel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  GpuService_EstablishGpuChannel_Params.encodedSize = codec.kStructHeaderSize + 16;

  GpuService_EstablishGpuChannel_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_EstablishGpuChannel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clientId =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.isGpuHost = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.clientTracingId =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  GpuService_EstablishGpuChannel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_EstablishGpuChannel_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.clientId);
    packed = 0;
    packed |= (val.isGpuHost & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Uint64, val.clientTracingId);
  };
  function GpuService_EstablishGpuChannel_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_EstablishGpuChannel_ResponseParams.prototype.initDefaults_ = function() {
    this.channelHandle = null;
    this.gpuInfo = null;
    this.gpuFeatureInfo = null;
    this.sharedImageCapabilities = null;
  };
  GpuService_EstablishGpuChannel_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_EstablishGpuChannel_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_EstablishGpuChannel_ResponseParams.channelHandle
    err = messageValidator.validateHandle(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_EstablishGpuChannel_ResponseParams.gpuInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, gpu_info$.GpuInfo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_EstablishGpuChannel_ResponseParams.gpuFeatureInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, gpu_feature_info$.GpuFeatureInfo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_EstablishGpuChannel_ResponseParams.sharedImageCapabilities
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, shared_image_capabilities$.SharedImageCapabilities, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_EstablishGpuChannel_ResponseParams.encodedSize = codec.kStructHeaderSize + 32;

  GpuService_EstablishGpuChannel_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GpuService_EstablishGpuChannel_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.channelHandle =
        decoder.decodeStruct(codec.NullableHandle);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.gpuInfo =
        decoder.decodeStructPointer(gpu_info$.GpuInfo);
    val.gpuFeatureInfo =
        decoder.decodeStructPointer(gpu_feature_info$.GpuFeatureInfo);
    val.sharedImageCapabilities =
        decoder.decodeStructPointer(shared_image_capabilities$.SharedImageCapabilities);
    return val;
  };

  GpuService_EstablishGpuChannel_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_EstablishGpuChannel_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableHandle, val.channelHandle);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(gpu_info$.GpuInfo, val.gpuInfo);
    encoder.encodeStructPointer(gpu_feature_info$.GpuFeatureInfo, val.gpuFeatureInfo);
    encoder.encodeStructPointer(shared_image_capabilities$.SharedImageCapabilities, val.sharedImageCapabilities);
  };
  function GpuService_SetChannelClientPid_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_SetChannelClientPid_Params.prototype.initDefaults_ = function() {
    this.clientId = 0;
    this.clientPid = null;
  };
  GpuService_SetChannelClientPid_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_SetChannelClientPid_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate GpuService_SetChannelClientPid_Params.clientPid
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, process_id$.ProcessId, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_SetChannelClientPid_Params.encodedSize = codec.kStructHeaderSize + 16;

  GpuService_SetChannelClientPid_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_SetChannelClientPid_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clientId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.clientPid =
        decoder.decodeStructPointer(process_id$.ProcessId);
    return val;
  };

  GpuService_SetChannelClientPid_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_SetChannelClientPid_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.clientId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(process_id$.ProcessId, val.clientPid);
  };
  function GpuService_SetChannelDiskCacheHandle_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_SetChannelDiskCacheHandle_Params.prototype.initDefaults_ = function() {
    this.clientId = 0;
    this.cacheHandle = null;
  };
  GpuService_SetChannelDiskCacheHandle_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_SetChannelDiskCacheHandle_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate GpuService_SetChannelDiskCacheHandle_Params.cacheHandle
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 8, gpu_disk_cache_type$.GpuDiskCacheHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_SetChannelDiskCacheHandle_Params.encodedSize = codec.kStructHeaderSize + 24;

  GpuService_SetChannelDiskCacheHandle_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_SetChannelDiskCacheHandle_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clientId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.cacheHandle =
        decoder.decodeStruct(gpu_disk_cache_type$.GpuDiskCacheHandle);
    return val;
  };

  GpuService_SetChannelDiskCacheHandle_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_SetChannelDiskCacheHandle_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.clientId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(gpu_disk_cache_type$.GpuDiskCacheHandle, val.cacheHandle);
  };
  function GpuService_OnDiskCacheHandleDestoyed_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_OnDiskCacheHandleDestoyed_Params.prototype.initDefaults_ = function() {
    this.cacheHandle = null;
  };
  GpuService_OnDiskCacheHandleDestoyed_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_OnDiskCacheHandleDestoyed_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_OnDiskCacheHandleDestoyed_Params.cacheHandle
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, gpu_disk_cache_type$.GpuDiskCacheHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_OnDiskCacheHandleDestoyed_Params.encodedSize = codec.kStructHeaderSize + 16;

  GpuService_OnDiskCacheHandleDestoyed_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_OnDiskCacheHandleDestoyed_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cacheHandle =
        decoder.decodeStruct(gpu_disk_cache_type$.GpuDiskCacheHandle);
    return val;
  };

  GpuService_OnDiskCacheHandleDestoyed_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_OnDiskCacheHandleDestoyed_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(gpu_disk_cache_type$.GpuDiskCacheHandle, val.cacheHandle);
  };
  function GpuService_CloseChannel_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_CloseChannel_Params.prototype.initDefaults_ = function() {
    this.clientId = 0;
  };
  GpuService_CloseChannel_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_CloseChannel_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuService_CloseChannel_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_CloseChannel_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_CloseChannel_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.clientId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuService_CloseChannel_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_CloseChannel_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.clientId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuService_BindClientGmbInterface_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_BindClientGmbInterface_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
    this.clientId = 0;
  };
  GpuService_BindClientGmbInterface_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_BindClientGmbInterface_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_BindClientGmbInterface_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuService_BindClientGmbInterface_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_BindClientGmbInterface_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_BindClientGmbInterface_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.clientId =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  GpuService_BindClientGmbInterface_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_BindClientGmbInterface_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(codec.Int32, val.clientId);
  };
  function GpuService_CreateVideoEncodeAcceleratorProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_CreateVideoEncodeAcceleratorProvider_Params.prototype.initDefaults_ = function() {
    this.veaProvider = new bindings.InterfaceRequest();
  };
  GpuService_CreateVideoEncodeAcceleratorProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_CreateVideoEncodeAcceleratorProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_CreateVideoEncodeAcceleratorProvider_Params.veaProvider
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_CreateVideoEncodeAcceleratorProvider_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_CreateVideoEncodeAcceleratorProvider_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_CreateVideoEncodeAcceleratorProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.veaProvider =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuService_CreateVideoEncodeAcceleratorProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_CreateVideoEncodeAcceleratorProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.veaProvider);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuService_BindWebNNContextProvider_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_BindWebNNContextProvider_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
    this.clientId = 0;
  };
  GpuService_BindWebNNContextProvider_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_BindWebNNContextProvider_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_BindWebNNContextProvider_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuService_BindWebNNContextProvider_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_BindWebNNContextProvider_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_BindWebNNContextProvider_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    val.clientId =
        decoder.decodeStruct(codec.Int32);
    return val;
  };

  GpuService_BindWebNNContextProvider_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_BindWebNNContextProvider_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.encodeStruct(codec.Int32, val.clientId);
  };
  function GpuService_CreateGpuMemoryBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_CreateGpuMemoryBuffer_Params.prototype.initDefaults_ = function() {
    this.id = null;
    this.size = null;
    this.format = 0;
    this.usage = 0;
    this.clientId = 0;
    this.surfaceHandle = null;
  };
  GpuService_CreateGpuMemoryBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_CreateGpuMemoryBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_CreateGpuMemoryBuffer_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, buffer_types$.GpuMemoryBufferId, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_CreateGpuMemoryBuffer_Params.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_CreateGpuMemoryBuffer_Params.format
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 16, buffer_types$.BufferFormat);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_CreateGpuMemoryBuffer_Params.usage
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 20, buffer_types$.BufferUsage);
    if (err !== validator.validationError.NONE)
        return err;



    // validate GpuService_CreateGpuMemoryBuffer_Params.surfaceHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, surface_handle$.SurfaceHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_CreateGpuMemoryBuffer_Params.encodedSize = codec.kStructHeaderSize + 40;

  GpuService_CreateGpuMemoryBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_CreateGpuMemoryBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(buffer_types$.GpuMemoryBufferId);
    val.size =
        decoder.decodeStructPointer(geometry$.Size);
    val.format =
        decoder.decodeStruct(new codec.Enum(buffer_types$.BufferFormat));
    val.usage =
        decoder.decodeStruct(new codec.Enum(buffer_types$.BufferUsage));
    val.clientId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.surfaceHandle =
        decoder.decodeStructPointer(surface_handle$.SurfaceHandle);
    return val;
  };

  GpuService_CreateGpuMemoryBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_CreateGpuMemoryBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(buffer_types$.GpuMemoryBufferId, val.id);
    encoder.encodeStructPointer(geometry$.Size, val.size);
    encoder.encodeStruct(codec.Int32, val.format);
    encoder.encodeStruct(codec.Int32, val.usage);
    encoder.encodeStruct(codec.Int32, val.clientId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(surface_handle$.SurfaceHandle, val.surfaceHandle);
  };
  function GpuService_CreateGpuMemoryBuffer_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_CreateGpuMemoryBuffer_ResponseParams.prototype.initDefaults_ = function() {
    this.bufferHandle = null;
  };
  GpuService_CreateGpuMemoryBuffer_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_CreateGpuMemoryBuffer_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_CreateGpuMemoryBuffer_ResponseParams.bufferHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, buffer_types$.GpuMemoryBufferHandle, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_CreateGpuMemoryBuffer_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_CreateGpuMemoryBuffer_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GpuService_CreateGpuMemoryBuffer_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferHandle =
        decoder.decodeStructPointer(buffer_types$.GpuMemoryBufferHandle);
    return val;
  };

  GpuService_CreateGpuMemoryBuffer_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_CreateGpuMemoryBuffer_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(buffer_types$.GpuMemoryBufferHandle, val.bufferHandle);
  };
  function GpuService_DestroyGpuMemoryBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_DestroyGpuMemoryBuffer_Params.prototype.initDefaults_ = function() {
    this.id = null;
    this.clientId = 0;
  };
  GpuService_DestroyGpuMemoryBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_DestroyGpuMemoryBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_DestroyGpuMemoryBuffer_Params.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, buffer_types$.GpuMemoryBufferId, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuService_DestroyGpuMemoryBuffer_Params.encodedSize = codec.kStructHeaderSize + 16;

  GpuService_DestroyGpuMemoryBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_DestroyGpuMemoryBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(buffer_types$.GpuMemoryBufferId);
    val.clientId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuService_DestroyGpuMemoryBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_DestroyGpuMemoryBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(buffer_types$.GpuMemoryBufferId, val.id);
    encoder.encodeStruct(codec.Int32, val.clientId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuService_CopyGpuMemoryBuffer_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_CopyGpuMemoryBuffer_Params.prototype.initDefaults_ = function() {
    this.bufferHandle = null;
    this.sharedMemory = null;
  };
  GpuService_CopyGpuMemoryBuffer_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_CopyGpuMemoryBuffer_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_CopyGpuMemoryBuffer_Params.bufferHandle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, buffer_types$.GpuMemoryBufferHandle, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_CopyGpuMemoryBuffer_Params.sharedMemory
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, shared_memory$.UnsafeSharedMemoryRegion, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_CopyGpuMemoryBuffer_Params.encodedSize = codec.kStructHeaderSize + 16;

  GpuService_CopyGpuMemoryBuffer_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_CopyGpuMemoryBuffer_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bufferHandle =
        decoder.decodeStructPointer(buffer_types$.GpuMemoryBufferHandle);
    val.sharedMemory =
        decoder.decodeStructPointer(shared_memory$.UnsafeSharedMemoryRegion);
    return val;
  };

  GpuService_CopyGpuMemoryBuffer_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_CopyGpuMemoryBuffer_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(buffer_types$.GpuMemoryBufferHandle, val.bufferHandle);
    encoder.encodeStructPointer(shared_memory$.UnsafeSharedMemoryRegion, val.sharedMemory);
  };
  function GpuService_CopyGpuMemoryBuffer_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_CopyGpuMemoryBuffer_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  GpuService_CopyGpuMemoryBuffer_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_CopyGpuMemoryBuffer_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuService_CopyGpuMemoryBuffer_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_CopyGpuMemoryBuffer_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GpuService_CopyGpuMemoryBuffer_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuService_CopyGpuMemoryBuffer_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_CopyGpuMemoryBuffer_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuService_GetVideoMemoryUsageStats_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_GetVideoMemoryUsageStats_Params.prototype.initDefaults_ = function() {
  };
  GpuService_GetVideoMemoryUsageStats_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_GetVideoMemoryUsageStats_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_GetVideoMemoryUsageStats_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_GetVideoMemoryUsageStats_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_GetVideoMemoryUsageStats_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_GetVideoMemoryUsageStats_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_GetVideoMemoryUsageStats_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuService_GetVideoMemoryUsageStats_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_GetVideoMemoryUsageStats_ResponseParams.prototype.initDefaults_ = function() {
    this.stats = null;
  };
  GpuService_GetVideoMemoryUsageStats_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_GetVideoMemoryUsageStats_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_GetVideoMemoryUsageStats_ResponseParams.stats
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, memory_stats$.VideoMemoryUsageStats, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_GetVideoMemoryUsageStats_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_GetVideoMemoryUsageStats_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GpuService_GetVideoMemoryUsageStats_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.stats =
        decoder.decodeStructPointer(memory_stats$.VideoMemoryUsageStats);
    return val;
  };

  GpuService_GetVideoMemoryUsageStats_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_GetVideoMemoryUsageStats_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(memory_stats$.VideoMemoryUsageStats, val.stats);
  };
  function GpuService_StartPeakMemoryMonitor_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_StartPeakMemoryMonitor_Params.prototype.initDefaults_ = function() {
    this.sequenceNum = 0;
  };
  GpuService_StartPeakMemoryMonitor_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_StartPeakMemoryMonitor_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuService_StartPeakMemoryMonitor_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_StartPeakMemoryMonitor_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_StartPeakMemoryMonitor_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sequenceNum =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuService_StartPeakMemoryMonitor_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_StartPeakMemoryMonitor_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.sequenceNum);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuService_GetPeakMemoryUsage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_GetPeakMemoryUsage_Params.prototype.initDefaults_ = function() {
    this.sequenceNum = 0;
  };
  GpuService_GetPeakMemoryUsage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_GetPeakMemoryUsage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuService_GetPeakMemoryUsage_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_GetPeakMemoryUsage_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_GetPeakMemoryUsage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.sequenceNum =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuService_GetPeakMemoryUsage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_GetPeakMemoryUsage_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.sequenceNum);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuService_GetPeakMemoryUsage_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_GetPeakMemoryUsage_ResponseParams.prototype.initDefaults_ = function() {
    this.memoryUsage = 0;
    this.memoryPerAllocationSource = null;
  };
  GpuService_GetPeakMemoryUsage_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_GetPeakMemoryUsage_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate GpuService_GetPeakMemoryUsage_ResponseParams.memoryPerAllocationSource
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 8, false, new codec.Enum(gpu_peak_memory$.GpuPeakMemoryAllocationSource), codec.Uint64, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_GetPeakMemoryUsage_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  GpuService_GetPeakMemoryUsage_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GpuService_GetPeakMemoryUsage_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.memoryUsage =
        decoder.decodeStruct(codec.Uint64);
    val.memoryPerAllocationSource =
        decoder.decodeMapPointer(new codec.Enum(gpu_peak_memory$.GpuPeakMemoryAllocationSource), codec.Uint64);
    return val;
  };

  GpuService_GetPeakMemoryUsage_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_GetPeakMemoryUsage_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.memoryUsage);
    encoder.encodeMapPointer(new codec.Enum(gpu_peak_memory$.GpuPeakMemoryAllocationSource), codec.Uint64, val.memoryPerAllocationSource);
  };
  function GpuService_LoadedBlob_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_LoadedBlob_Params.prototype.initDefaults_ = function() {
    this.cacheHandle = null;
    this.key = null;
    this.data = null;
  };
  GpuService_LoadedBlob_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_LoadedBlob_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_LoadedBlob_Params.cacheHandle
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, gpu_disk_cache_type$.GpuDiskCacheHandle, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_LoadedBlob_Params.key
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_LoadedBlob_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, byte_string$.ByteString, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_LoadedBlob_Params.encodedSize = codec.kStructHeaderSize + 32;

  GpuService_LoadedBlob_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_LoadedBlob_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.cacheHandle =
        decoder.decodeStruct(gpu_disk_cache_type$.GpuDiskCacheHandle);
    val.key =
        decoder.decodeStruct(codec.String);
    val.data =
        decoder.decodeStructPointer(byte_string$.ByteString);
    return val;
  };

  GpuService_LoadedBlob_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_LoadedBlob_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(gpu_disk_cache_type$.GpuDiskCacheHandle, val.cacheHandle);
    encoder.encodeStruct(codec.String, val.key);
    encoder.encodeStructPointer(byte_string$.ByteString, val.data);
  };
  function GpuService_WakeUpGpu_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_WakeUpGpu_Params.prototype.initDefaults_ = function() {
  };
  GpuService_WakeUpGpu_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_WakeUpGpu_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_WakeUpGpu_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_WakeUpGpu_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_WakeUpGpu_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_WakeUpGpu_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_WakeUpGpu_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuService_GpuSwitched_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_GpuSwitched_Params.prototype.initDefaults_ = function() {
    this.activeGpuHeuristic = 0;
  };
  GpuService_GpuSwitched_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_GpuSwitched_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_GpuSwitched_Params.activeGpuHeuristic
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, gpu_preference$.GpuPreference);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_GpuSwitched_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_GpuSwitched_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_GpuSwitched_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.activeGpuHeuristic =
        decoder.decodeStruct(new codec.Enum(gpu_preference$.GpuPreference));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuService_GpuSwitched_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_GpuSwitched_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.activeGpuHeuristic);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuService_DisplayAdded_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_DisplayAdded_Params.prototype.initDefaults_ = function() {
  };
  GpuService_DisplayAdded_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_DisplayAdded_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_DisplayAdded_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_DisplayAdded_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_DisplayAdded_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_DisplayAdded_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_DisplayAdded_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuService_DisplayRemoved_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_DisplayRemoved_Params.prototype.initDefaults_ = function() {
  };
  GpuService_DisplayRemoved_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_DisplayRemoved_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_DisplayRemoved_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_DisplayRemoved_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_DisplayRemoved_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_DisplayRemoved_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_DisplayRemoved_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuService_DisplayMetricsChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_DisplayMetricsChanged_Params.prototype.initDefaults_ = function() {
  };
  GpuService_DisplayMetricsChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_DisplayMetricsChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_DisplayMetricsChanged_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_DisplayMetricsChanged_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_DisplayMetricsChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_DisplayMetricsChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_DisplayMetricsChanged_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuService_DestroyAllChannels_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_DestroyAllChannels_Params.prototype.initDefaults_ = function() {
  };
  GpuService_DestroyAllChannels_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_DestroyAllChannels_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_DestroyAllChannels_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_DestroyAllChannels_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_DestroyAllChannels_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_DestroyAllChannels_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_DestroyAllChannels_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuService_OnBackgroundCleanup_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_OnBackgroundCleanup_Params.prototype.initDefaults_ = function() {
  };
  GpuService_OnBackgroundCleanup_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_OnBackgroundCleanup_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_OnBackgroundCleanup_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_OnBackgroundCleanup_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_OnBackgroundCleanup_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_OnBackgroundCleanup_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_OnBackgroundCleanup_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuService_OnBackgrounded_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_OnBackgrounded_Params.prototype.initDefaults_ = function() {
  };
  GpuService_OnBackgrounded_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_OnBackgrounded_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_OnBackgrounded_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_OnBackgrounded_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_OnBackgrounded_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_OnBackgrounded_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_OnBackgrounded_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuService_OnForegrounded_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_OnForegrounded_Params.prototype.initDefaults_ = function() {
  };
  GpuService_OnForegrounded_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_OnForegrounded_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_OnForegrounded_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_OnForegrounded_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_OnForegrounded_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_OnForegrounded_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_OnForegrounded_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuService_OnMemoryPressure_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_OnMemoryPressure_Params.prototype.initDefaults_ = function() {
    this.level = 0;
  };
  GpuService_OnMemoryPressure_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_OnMemoryPressure_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_OnMemoryPressure_Params.level
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, memory_pressure_level$.MemoryPressureLevel);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_OnMemoryPressure_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_OnMemoryPressure_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_OnMemoryPressure_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.level =
        decoder.decodeStruct(new codec.Enum(memory_pressure_level$.MemoryPressureLevel));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuService_OnMemoryPressure_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_OnMemoryPressure_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.level);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuService_GetDawnInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_GetDawnInfo_Params.prototype.initDefaults_ = function() {
    this.collectMetrics = false;
  };
  GpuService_GetDawnInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_GetDawnInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  GpuService_GetDawnInfo_Params.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_GetDawnInfo_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_GetDawnInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.collectMetrics = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  GpuService_GetDawnInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_GetDawnInfo_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.collectMetrics & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function GpuService_GetDawnInfo_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_GetDawnInfo_ResponseParams.prototype.initDefaults_ = function() {
    this.dawnInfoList = null;
  };
  GpuService_GetDawnInfo_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_GetDawnInfo_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GpuService_GetDawnInfo_ResponseParams.dawnInfoList
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_GetDawnInfo_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  GpuService_GetDawnInfo_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new GpuService_GetDawnInfo_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dawnInfoList =
        decoder.decodeArrayPointer(codec.String);
    return val;
  };

  GpuService_GetDawnInfo_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_GetDawnInfo_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(codec.String, val.dawnInfoList);
  };
  function GpuService_Crash_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_Crash_Params.prototype.initDefaults_ = function() {
  };
  GpuService_Crash_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_Crash_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_Crash_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_Crash_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_Crash_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_Crash_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_Crash_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuService_Hang_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_Hang_Params.prototype.initDefaults_ = function() {
  };
  GpuService_Hang_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_Hang_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_Hang_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_Hang_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_Hang_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_Hang_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_Hang_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function GpuService_ThrowJavaException_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GpuService_ThrowJavaException_Params.prototype.initDefaults_ = function() {
  };
  GpuService_ThrowJavaException_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GpuService_ThrowJavaException_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GpuService_ThrowJavaException_Params.encodedSize = codec.kStructHeaderSize + 0;

  GpuService_ThrowJavaException_Params.decode = function(decoder) {
    var packed;
    var val = new GpuService_ThrowJavaException_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GpuService_ThrowJavaException_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GpuService_ThrowJavaException_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kGpuService_EstablishGpuChannel_Name = 1932918239;
  var kGpuService_SetChannelClientPid_Name = 1670714555;
  var kGpuService_SetChannelDiskCacheHandle_Name = 142733017;
  var kGpuService_OnDiskCacheHandleDestoyed_Name = 202871014;
  var kGpuService_CloseChannel_Name = 511760969;
  var kGpuService_BindClientGmbInterface_Name = 1483461605;
  var kGpuService_CreateVideoEncodeAcceleratorProvider_Name = 1317187603;
  var kGpuService_BindWebNNContextProvider_Name = 110911195;
  var kGpuService_CreateGpuMemoryBuffer_Name = 476397994;
  var kGpuService_DestroyGpuMemoryBuffer_Name = 1348663969;
  var kGpuService_CopyGpuMemoryBuffer_Name = 813561355;
  var kGpuService_GetVideoMemoryUsageStats_Name = 2136947856;
  var kGpuService_StartPeakMemoryMonitor_Name = 351864220;
  var kGpuService_GetPeakMemoryUsage_Name = 234069723;
  var kGpuService_LoadedBlob_Name = 662258020;
  var kGpuService_WakeUpGpu_Name = 1784337059;
  var kGpuService_GpuSwitched_Name = 1323664095;
  var kGpuService_DisplayAdded_Name = 1111625681;
  var kGpuService_DisplayRemoved_Name = 1559754197;
  var kGpuService_DisplayMetricsChanged_Name = 43762775;
  var kGpuService_DestroyAllChannels_Name = 2137315652;
  var kGpuService_OnBackgroundCleanup_Name = 1722959081;
  var kGpuService_OnBackgrounded_Name = 1832632193;
  var kGpuService_OnForegrounded_Name = 1440563934;
  var kGpuService_OnMemoryPressure_Name = 274766356;
  var kGpuService_GetDawnInfo_Name = 327457341;
  var kGpuService_Crash_Name = 834955432;
  var kGpuService_Hang_Name = 154209862;
  var kGpuService_ThrowJavaException_Name = 372934006;

  function GpuServicePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(GpuService,
                                                   handleOrPtrInfo);
  }

  function GpuServiceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        GpuService, associatedInterfacePtrInfo);
  }

  GpuServiceAssociatedPtr.prototype =
      Object.create(GpuServicePtr.prototype);
  GpuServiceAssociatedPtr.prototype.constructor =
      GpuServiceAssociatedPtr;

  function GpuServiceProxy(receiver) {
    this.receiver_ = receiver;
  }
  GpuServicePtr.prototype.establishGpuChannel = function() {
    return GpuServiceProxy.prototype.establishGpuChannel
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.establishGpuChannel = function(clientId, clientTracingId, isGpuHost) {
    var params_ = new GpuService_EstablishGpuChannel_Params();
    params_.clientId = clientId;
    params_.clientTracingId = clientTracingId;
    params_.isGpuHost = isGpuHost;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGpuService_EstablishGpuChannel_Name,
          codec.align(GpuService_EstablishGpuChannel_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GpuService_EstablishGpuChannel_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GpuService_EstablishGpuChannel_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  GpuServicePtr.prototype.setChannelClientPid = function() {
    return GpuServiceProxy.prototype.setChannelClientPid
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.setChannelClientPid = function(clientId, clientPid) {
    var params_ = new GpuService_SetChannelClientPid_Params();
    params_.clientId = clientId;
    params_.clientPid = clientPid;
    var builder = new codec.MessageV0Builder(
        kGpuService_SetChannelClientPid_Name,
        codec.align(GpuService_SetChannelClientPid_Params.encodedSize));
    builder.encodeStruct(GpuService_SetChannelClientPid_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.setChannelDiskCacheHandle = function() {
    return GpuServiceProxy.prototype.setChannelDiskCacheHandle
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.setChannelDiskCacheHandle = function(clientId, cacheHandle) {
    var params_ = new GpuService_SetChannelDiskCacheHandle_Params();
    params_.clientId = clientId;
    params_.cacheHandle = cacheHandle;
    var builder = new codec.MessageV0Builder(
        kGpuService_SetChannelDiskCacheHandle_Name,
        codec.align(GpuService_SetChannelDiskCacheHandle_Params.encodedSize));
    builder.encodeStruct(GpuService_SetChannelDiskCacheHandle_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.onDiskCacheHandleDestoyed = function() {
    return GpuServiceProxy.prototype.onDiskCacheHandleDestoyed
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.onDiskCacheHandleDestoyed = function(cacheHandle) {
    var params_ = new GpuService_OnDiskCacheHandleDestoyed_Params();
    params_.cacheHandle = cacheHandle;
    var builder = new codec.MessageV0Builder(
        kGpuService_OnDiskCacheHandleDestoyed_Name,
        codec.align(GpuService_OnDiskCacheHandleDestoyed_Params.encodedSize));
    builder.encodeStruct(GpuService_OnDiskCacheHandleDestoyed_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.closeChannel = function() {
    return GpuServiceProxy.prototype.closeChannel
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.closeChannel = function(clientId) {
    var params_ = new GpuService_CloseChannel_Params();
    params_.clientId = clientId;
    var builder = new codec.MessageV0Builder(
        kGpuService_CloseChannel_Name,
        codec.align(GpuService_CloseChannel_Params.encodedSize));
    builder.encodeStruct(GpuService_CloseChannel_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.bindClientGmbInterface = function() {
    return GpuServiceProxy.prototype.bindClientGmbInterface
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.bindClientGmbInterface = function(receiver, clientId) {
    var params_ = new GpuService_BindClientGmbInterface_Params();
    params_.receiver = receiver;
    params_.clientId = clientId;
    var builder = new codec.MessageV0Builder(
        kGpuService_BindClientGmbInterface_Name,
        codec.align(GpuService_BindClientGmbInterface_Params.encodedSize));
    builder.encodeStruct(GpuService_BindClientGmbInterface_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.createVideoEncodeAcceleratorProvider = function() {
    return GpuServiceProxy.prototype.createVideoEncodeAcceleratorProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.createVideoEncodeAcceleratorProvider = function(veaProvider) {
    var params_ = new GpuService_CreateVideoEncodeAcceleratorProvider_Params();
    params_.veaProvider = veaProvider;
    var builder = new codec.MessageV0Builder(
        kGpuService_CreateVideoEncodeAcceleratorProvider_Name,
        codec.align(GpuService_CreateVideoEncodeAcceleratorProvider_Params.encodedSize));
    builder.encodeStruct(GpuService_CreateVideoEncodeAcceleratorProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.bindWebNNContextProvider = function() {
    return GpuServiceProxy.prototype.bindWebNNContextProvider
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.bindWebNNContextProvider = function(receiver, clientId) {
    var params_ = new GpuService_BindWebNNContextProvider_Params();
    params_.receiver = receiver;
    params_.clientId = clientId;
    var builder = new codec.MessageV0Builder(
        kGpuService_BindWebNNContextProvider_Name,
        codec.align(GpuService_BindWebNNContextProvider_Params.encodedSize));
    builder.encodeStruct(GpuService_BindWebNNContextProvider_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.createGpuMemoryBuffer = function() {
    return GpuServiceProxy.prototype.createGpuMemoryBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.createGpuMemoryBuffer = function(id, size, format, usage, clientId, surfaceHandle) {
    var params_ = new GpuService_CreateGpuMemoryBuffer_Params();
    params_.id = id;
    params_.size = size;
    params_.format = format;
    params_.usage = usage;
    params_.clientId = clientId;
    params_.surfaceHandle = surfaceHandle;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGpuService_CreateGpuMemoryBuffer_Name,
          codec.align(GpuService_CreateGpuMemoryBuffer_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GpuService_CreateGpuMemoryBuffer_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GpuService_CreateGpuMemoryBuffer_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  GpuServicePtr.prototype.destroyGpuMemoryBuffer = function() {
    return GpuServiceProxy.prototype.destroyGpuMemoryBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.destroyGpuMemoryBuffer = function(id, clientId) {
    var params_ = new GpuService_DestroyGpuMemoryBuffer_Params();
    params_.id = id;
    params_.clientId = clientId;
    var builder = new codec.MessageV0Builder(
        kGpuService_DestroyGpuMemoryBuffer_Name,
        codec.align(GpuService_DestroyGpuMemoryBuffer_Params.encodedSize));
    builder.encodeStruct(GpuService_DestroyGpuMemoryBuffer_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.copyGpuMemoryBuffer = function() {
    return GpuServiceProxy.prototype.copyGpuMemoryBuffer
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.copyGpuMemoryBuffer = function(bufferHandle, sharedMemory) {
    var params_ = new GpuService_CopyGpuMemoryBuffer_Params();
    params_.bufferHandle = bufferHandle;
    params_.sharedMemory = sharedMemory;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGpuService_CopyGpuMemoryBuffer_Name,
          codec.align(GpuService_CopyGpuMemoryBuffer_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GpuService_CopyGpuMemoryBuffer_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GpuService_CopyGpuMemoryBuffer_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  GpuServicePtr.prototype.getVideoMemoryUsageStats = function() {
    return GpuServiceProxy.prototype.getVideoMemoryUsageStats
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.getVideoMemoryUsageStats = function() {
    var params_ = new GpuService_GetVideoMemoryUsageStats_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGpuService_GetVideoMemoryUsageStats_Name,
          codec.align(GpuService_GetVideoMemoryUsageStats_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GpuService_GetVideoMemoryUsageStats_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GpuService_GetVideoMemoryUsageStats_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  GpuServicePtr.prototype.startPeakMemoryMonitor = function() {
    return GpuServiceProxy.prototype.startPeakMemoryMonitor
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.startPeakMemoryMonitor = function(sequenceNum) {
    var params_ = new GpuService_StartPeakMemoryMonitor_Params();
    params_.sequenceNum = sequenceNum;
    var builder = new codec.MessageV0Builder(
        kGpuService_StartPeakMemoryMonitor_Name,
        codec.align(GpuService_StartPeakMemoryMonitor_Params.encodedSize));
    builder.encodeStruct(GpuService_StartPeakMemoryMonitor_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.getPeakMemoryUsage = function() {
    return GpuServiceProxy.prototype.getPeakMemoryUsage
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.getPeakMemoryUsage = function(sequenceNum) {
    var params_ = new GpuService_GetPeakMemoryUsage_Params();
    params_.sequenceNum = sequenceNum;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGpuService_GetPeakMemoryUsage_Name,
          codec.align(GpuService_GetPeakMemoryUsage_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GpuService_GetPeakMemoryUsage_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GpuService_GetPeakMemoryUsage_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  GpuServicePtr.prototype.loadedBlob = function() {
    return GpuServiceProxy.prototype.loadedBlob
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.loadedBlob = function(cacheHandle, key, data) {
    var params_ = new GpuService_LoadedBlob_Params();
    params_.cacheHandle = cacheHandle;
    params_.key = key;
    params_.data = data;
    var builder = new codec.MessageV0Builder(
        kGpuService_LoadedBlob_Name,
        codec.align(GpuService_LoadedBlob_Params.encodedSize));
    builder.encodeStruct(GpuService_LoadedBlob_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.wakeUpGpu = function() {
    return GpuServiceProxy.prototype.wakeUpGpu
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.wakeUpGpu = function() {
    var params_ = new GpuService_WakeUpGpu_Params();
    var builder = new codec.MessageV0Builder(
        kGpuService_WakeUpGpu_Name,
        codec.align(GpuService_WakeUpGpu_Params.encodedSize));
    builder.encodeStruct(GpuService_WakeUpGpu_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.gpuSwitched = function() {
    return GpuServiceProxy.prototype.gpuSwitched
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.gpuSwitched = function(activeGpuHeuristic) {
    var params_ = new GpuService_GpuSwitched_Params();
    params_.activeGpuHeuristic = activeGpuHeuristic;
    var builder = new codec.MessageV0Builder(
        kGpuService_GpuSwitched_Name,
        codec.align(GpuService_GpuSwitched_Params.encodedSize));
    builder.encodeStruct(GpuService_GpuSwitched_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.displayAdded = function() {
    return GpuServiceProxy.prototype.displayAdded
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.displayAdded = function() {
    var params_ = new GpuService_DisplayAdded_Params();
    var builder = new codec.MessageV0Builder(
        kGpuService_DisplayAdded_Name,
        codec.align(GpuService_DisplayAdded_Params.encodedSize));
    builder.encodeStruct(GpuService_DisplayAdded_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.displayRemoved = function() {
    return GpuServiceProxy.prototype.displayRemoved
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.displayRemoved = function() {
    var params_ = new GpuService_DisplayRemoved_Params();
    var builder = new codec.MessageV0Builder(
        kGpuService_DisplayRemoved_Name,
        codec.align(GpuService_DisplayRemoved_Params.encodedSize));
    builder.encodeStruct(GpuService_DisplayRemoved_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.displayMetricsChanged = function() {
    return GpuServiceProxy.prototype.displayMetricsChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.displayMetricsChanged = function() {
    var params_ = new GpuService_DisplayMetricsChanged_Params();
    var builder = new codec.MessageV0Builder(
        kGpuService_DisplayMetricsChanged_Name,
        codec.align(GpuService_DisplayMetricsChanged_Params.encodedSize));
    builder.encodeStruct(GpuService_DisplayMetricsChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.destroyAllChannels = function() {
    return GpuServiceProxy.prototype.destroyAllChannels
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.destroyAllChannels = function() {
    var params_ = new GpuService_DestroyAllChannels_Params();
    var builder = new codec.MessageV0Builder(
        kGpuService_DestroyAllChannels_Name,
        codec.align(GpuService_DestroyAllChannels_Params.encodedSize));
    builder.encodeStruct(GpuService_DestroyAllChannels_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.onBackgroundCleanup = function() {
    return GpuServiceProxy.prototype.onBackgroundCleanup
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.onBackgroundCleanup = function() {
    var params_ = new GpuService_OnBackgroundCleanup_Params();
    var builder = new codec.MessageV0Builder(
        kGpuService_OnBackgroundCleanup_Name,
        codec.align(GpuService_OnBackgroundCleanup_Params.encodedSize));
    builder.encodeStruct(GpuService_OnBackgroundCleanup_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.onBackgrounded = function() {
    return GpuServiceProxy.prototype.onBackgrounded
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.onBackgrounded = function() {
    var params_ = new GpuService_OnBackgrounded_Params();
    var builder = new codec.MessageV0Builder(
        kGpuService_OnBackgrounded_Name,
        codec.align(GpuService_OnBackgrounded_Params.encodedSize));
    builder.encodeStruct(GpuService_OnBackgrounded_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.onForegrounded = function() {
    return GpuServiceProxy.prototype.onForegrounded
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.onForegrounded = function() {
    var params_ = new GpuService_OnForegrounded_Params();
    var builder = new codec.MessageV0Builder(
        kGpuService_OnForegrounded_Name,
        codec.align(GpuService_OnForegrounded_Params.encodedSize));
    builder.encodeStruct(GpuService_OnForegrounded_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.onMemoryPressure = function() {
    return GpuServiceProxy.prototype.onMemoryPressure
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.onMemoryPressure = function(level) {
    var params_ = new GpuService_OnMemoryPressure_Params();
    params_.level = level;
    var builder = new codec.MessageV0Builder(
        kGpuService_OnMemoryPressure_Name,
        codec.align(GpuService_OnMemoryPressure_Params.encodedSize));
    builder.encodeStruct(GpuService_OnMemoryPressure_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.getDawnInfo = function() {
    return GpuServiceProxy.prototype.getDawnInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.getDawnInfo = function(collectMetrics) {
    var params_ = new GpuService_GetDawnInfo_Params();
    params_.collectMetrics = collectMetrics;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kGpuService_GetDawnInfo_Name,
          codec.align(GpuService_GetDawnInfo_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(GpuService_GetDawnInfo_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(GpuService_GetDawnInfo_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  GpuServicePtr.prototype.crash = function() {
    return GpuServiceProxy.prototype.crash
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.crash = function() {
    var params_ = new GpuService_Crash_Params();
    var builder = new codec.MessageV0Builder(
        kGpuService_Crash_Name,
        codec.align(GpuService_Crash_Params.encodedSize));
    builder.encodeStruct(GpuService_Crash_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.hang = function() {
    return GpuServiceProxy.prototype.hang
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.hang = function() {
    var params_ = new GpuService_Hang_Params();
    var builder = new codec.MessageV0Builder(
        kGpuService_Hang_Name,
        codec.align(GpuService_Hang_Params.encodedSize));
    builder.encodeStruct(GpuService_Hang_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GpuServicePtr.prototype.throwJavaException = function() {
    return GpuServiceProxy.prototype.throwJavaException
        .apply(this.ptr.getProxy(), arguments);
  };

  GpuServiceProxy.prototype.throwJavaException = function() {
    var params_ = new GpuService_ThrowJavaException_Params();
    var builder = new codec.MessageV0Builder(
        kGpuService_ThrowJavaException_Name,
        codec.align(GpuService_ThrowJavaException_Params.encodedSize));
    builder.encodeStruct(GpuService_ThrowJavaException_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function GpuServiceStub(delegate) {
    this.delegate_ = delegate;
  }
  GpuServiceStub.prototype.establishGpuChannel = function(clientId, clientTracingId, isGpuHost) {
    return this.delegate_ && this.delegate_.establishGpuChannel && this.delegate_.establishGpuChannel(clientId, clientTracingId, isGpuHost);
  }
  GpuServiceStub.prototype.setChannelClientPid = function(clientId, clientPid) {
    return this.delegate_ && this.delegate_.setChannelClientPid && this.delegate_.setChannelClientPid(clientId, clientPid);
  }
  GpuServiceStub.prototype.setChannelDiskCacheHandle = function(clientId, cacheHandle) {
    return this.delegate_ && this.delegate_.setChannelDiskCacheHandle && this.delegate_.setChannelDiskCacheHandle(clientId, cacheHandle);
  }
  GpuServiceStub.prototype.onDiskCacheHandleDestoyed = function(cacheHandle) {
    return this.delegate_ && this.delegate_.onDiskCacheHandleDestoyed && this.delegate_.onDiskCacheHandleDestoyed(cacheHandle);
  }
  GpuServiceStub.prototype.closeChannel = function(clientId) {
    return this.delegate_ && this.delegate_.closeChannel && this.delegate_.closeChannel(clientId);
  }
  GpuServiceStub.prototype.bindClientGmbInterface = function(receiver, clientId) {
    return this.delegate_ && this.delegate_.bindClientGmbInterface && this.delegate_.bindClientGmbInterface(receiver, clientId);
  }
  GpuServiceStub.prototype.createVideoEncodeAcceleratorProvider = function(veaProvider) {
    return this.delegate_ && this.delegate_.createVideoEncodeAcceleratorProvider && this.delegate_.createVideoEncodeAcceleratorProvider(veaProvider);
  }
  GpuServiceStub.prototype.bindWebNNContextProvider = function(receiver, clientId) {
    return this.delegate_ && this.delegate_.bindWebNNContextProvider && this.delegate_.bindWebNNContextProvider(receiver, clientId);
  }
  GpuServiceStub.prototype.createGpuMemoryBuffer = function(id, size, format, usage, clientId, surfaceHandle) {
    return this.delegate_ && this.delegate_.createGpuMemoryBuffer && this.delegate_.createGpuMemoryBuffer(id, size, format, usage, clientId, surfaceHandle);
  }
  GpuServiceStub.prototype.destroyGpuMemoryBuffer = function(id, clientId) {
    return this.delegate_ && this.delegate_.destroyGpuMemoryBuffer && this.delegate_.destroyGpuMemoryBuffer(id, clientId);
  }
  GpuServiceStub.prototype.copyGpuMemoryBuffer = function(bufferHandle, sharedMemory) {
    return this.delegate_ && this.delegate_.copyGpuMemoryBuffer && this.delegate_.copyGpuMemoryBuffer(bufferHandle, sharedMemory);
  }
  GpuServiceStub.prototype.getVideoMemoryUsageStats = function() {
    return this.delegate_ && this.delegate_.getVideoMemoryUsageStats && this.delegate_.getVideoMemoryUsageStats();
  }
  GpuServiceStub.prototype.startPeakMemoryMonitor = function(sequenceNum) {
    return this.delegate_ && this.delegate_.startPeakMemoryMonitor && this.delegate_.startPeakMemoryMonitor(sequenceNum);
  }
  GpuServiceStub.prototype.getPeakMemoryUsage = function(sequenceNum) {
    return this.delegate_ && this.delegate_.getPeakMemoryUsage && this.delegate_.getPeakMemoryUsage(sequenceNum);
  }
  GpuServiceStub.prototype.loadedBlob = function(cacheHandle, key, data) {
    return this.delegate_ && this.delegate_.loadedBlob && this.delegate_.loadedBlob(cacheHandle, key, data);
  }
  GpuServiceStub.prototype.wakeUpGpu = function() {
    return this.delegate_ && this.delegate_.wakeUpGpu && this.delegate_.wakeUpGpu();
  }
  GpuServiceStub.prototype.gpuSwitched = function(activeGpuHeuristic) {
    return this.delegate_ && this.delegate_.gpuSwitched && this.delegate_.gpuSwitched(activeGpuHeuristic);
  }
  GpuServiceStub.prototype.displayAdded = function() {
    return this.delegate_ && this.delegate_.displayAdded && this.delegate_.displayAdded();
  }
  GpuServiceStub.prototype.displayRemoved = function() {
    return this.delegate_ && this.delegate_.displayRemoved && this.delegate_.displayRemoved();
  }
  GpuServiceStub.prototype.displayMetricsChanged = function() {
    return this.delegate_ && this.delegate_.displayMetricsChanged && this.delegate_.displayMetricsChanged();
  }
  GpuServiceStub.prototype.destroyAllChannels = function() {
    return this.delegate_ && this.delegate_.destroyAllChannels && this.delegate_.destroyAllChannels();
  }
  GpuServiceStub.prototype.onBackgroundCleanup = function() {
    return this.delegate_ && this.delegate_.onBackgroundCleanup && this.delegate_.onBackgroundCleanup();
  }
  GpuServiceStub.prototype.onBackgrounded = function() {
    return this.delegate_ && this.delegate_.onBackgrounded && this.delegate_.onBackgrounded();
  }
  GpuServiceStub.prototype.onForegrounded = function() {
    return this.delegate_ && this.delegate_.onForegrounded && this.delegate_.onForegrounded();
  }
  GpuServiceStub.prototype.onMemoryPressure = function(level) {
    return this.delegate_ && this.delegate_.onMemoryPressure && this.delegate_.onMemoryPressure(level);
  }
  GpuServiceStub.prototype.getDawnInfo = function(collectMetrics) {
    return this.delegate_ && this.delegate_.getDawnInfo && this.delegate_.getDawnInfo(collectMetrics);
  }
  GpuServiceStub.prototype.crash = function() {
    return this.delegate_ && this.delegate_.crash && this.delegate_.crash();
  }
  GpuServiceStub.prototype.hang = function() {
    return this.delegate_ && this.delegate_.hang && this.delegate_.hang();
  }
  GpuServiceStub.prototype.throwJavaException = function() {
    return this.delegate_ && this.delegate_.throwJavaException && this.delegate_.throwJavaException();
  }

  GpuServiceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGpuService_SetChannelClientPid_Name:
      var params = reader.decodeStruct(GpuService_SetChannelClientPid_Params);
      this.setChannelClientPid(params.clientId, params.clientPid);
      return true;
    case kGpuService_SetChannelDiskCacheHandle_Name:
      var params = reader.decodeStruct(GpuService_SetChannelDiskCacheHandle_Params);
      this.setChannelDiskCacheHandle(params.clientId, params.cacheHandle);
      return true;
    case kGpuService_OnDiskCacheHandleDestoyed_Name:
      var params = reader.decodeStruct(GpuService_OnDiskCacheHandleDestoyed_Params);
      this.onDiskCacheHandleDestoyed(params.cacheHandle);
      return true;
    case kGpuService_CloseChannel_Name:
      var params = reader.decodeStruct(GpuService_CloseChannel_Params);
      this.closeChannel(params.clientId);
      return true;
    case kGpuService_BindClientGmbInterface_Name:
      var params = reader.decodeStruct(GpuService_BindClientGmbInterface_Params);
      this.bindClientGmbInterface(params.receiver, params.clientId);
      return true;
    case kGpuService_CreateVideoEncodeAcceleratorProvider_Name:
      var params = reader.decodeStruct(GpuService_CreateVideoEncodeAcceleratorProvider_Params);
      this.createVideoEncodeAcceleratorProvider(params.veaProvider);
      return true;
    case kGpuService_BindWebNNContextProvider_Name:
      var params = reader.decodeStruct(GpuService_BindWebNNContextProvider_Params);
      this.bindWebNNContextProvider(params.receiver, params.clientId);
      return true;
    case kGpuService_DestroyGpuMemoryBuffer_Name:
      var params = reader.decodeStruct(GpuService_DestroyGpuMemoryBuffer_Params);
      this.destroyGpuMemoryBuffer(params.id, params.clientId);
      return true;
    case kGpuService_StartPeakMemoryMonitor_Name:
      var params = reader.decodeStruct(GpuService_StartPeakMemoryMonitor_Params);
      this.startPeakMemoryMonitor(params.sequenceNum);
      return true;
    case kGpuService_LoadedBlob_Name:
      var params = reader.decodeStruct(GpuService_LoadedBlob_Params);
      this.loadedBlob(params.cacheHandle, params.key, params.data);
      return true;
    case kGpuService_WakeUpGpu_Name:
      var params = reader.decodeStruct(GpuService_WakeUpGpu_Params);
      this.wakeUpGpu();
      return true;
    case kGpuService_GpuSwitched_Name:
      var params = reader.decodeStruct(GpuService_GpuSwitched_Params);
      this.gpuSwitched(params.activeGpuHeuristic);
      return true;
    case kGpuService_DisplayAdded_Name:
      var params = reader.decodeStruct(GpuService_DisplayAdded_Params);
      this.displayAdded();
      return true;
    case kGpuService_DisplayRemoved_Name:
      var params = reader.decodeStruct(GpuService_DisplayRemoved_Params);
      this.displayRemoved();
      return true;
    case kGpuService_DisplayMetricsChanged_Name:
      var params = reader.decodeStruct(GpuService_DisplayMetricsChanged_Params);
      this.displayMetricsChanged();
      return true;
    case kGpuService_DestroyAllChannels_Name:
      var params = reader.decodeStruct(GpuService_DestroyAllChannels_Params);
      this.destroyAllChannels();
      return true;
    case kGpuService_OnBackgroundCleanup_Name:
      var params = reader.decodeStruct(GpuService_OnBackgroundCleanup_Params);
      this.onBackgroundCleanup();
      return true;
    case kGpuService_OnBackgrounded_Name:
      var params = reader.decodeStruct(GpuService_OnBackgrounded_Params);
      this.onBackgrounded();
      return true;
    case kGpuService_OnForegrounded_Name:
      var params = reader.decodeStruct(GpuService_OnForegrounded_Params);
      this.onForegrounded();
      return true;
    case kGpuService_OnMemoryPressure_Name:
      var params = reader.decodeStruct(GpuService_OnMemoryPressure_Params);
      this.onMemoryPressure(params.level);
      return true;
    case kGpuService_Crash_Name:
      var params = reader.decodeStruct(GpuService_Crash_Params);
      this.crash();
      return true;
    case kGpuService_Hang_Name:
      var params = reader.decodeStruct(GpuService_Hang_Params);
      this.hang();
      return true;
    case kGpuService_ThrowJavaException_Name:
      var params = reader.decodeStruct(GpuService_ThrowJavaException_Params);
      this.throwJavaException();
      return true;
    default:
      return false;
    }
  };

  GpuServiceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGpuService_EstablishGpuChannel_Name:
      var params = reader.decodeStruct(GpuService_EstablishGpuChannel_Params);
      this.establishGpuChannel(params.clientId, params.clientTracingId, params.isGpuHost).then(function(response) {
        var responseParams =
            new GpuService_EstablishGpuChannel_ResponseParams();
        responseParams.channelHandle = response.channelHandle;
        responseParams.gpuInfo = response.gpuInfo;
        responseParams.gpuFeatureInfo = response.gpuFeatureInfo;
        responseParams.sharedImageCapabilities = response.sharedImageCapabilities;
        var builder = new codec.MessageV1Builder(
            kGpuService_EstablishGpuChannel_Name,
            codec.align(GpuService_EstablishGpuChannel_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GpuService_EstablishGpuChannel_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kGpuService_CreateGpuMemoryBuffer_Name:
      var params = reader.decodeStruct(GpuService_CreateGpuMemoryBuffer_Params);
      this.createGpuMemoryBuffer(params.id, params.size, params.format, params.usage, params.clientId, params.surfaceHandle).then(function(response) {
        var responseParams =
            new GpuService_CreateGpuMemoryBuffer_ResponseParams();
        responseParams.bufferHandle = response.bufferHandle;
        var builder = new codec.MessageV1Builder(
            kGpuService_CreateGpuMemoryBuffer_Name,
            codec.align(GpuService_CreateGpuMemoryBuffer_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GpuService_CreateGpuMemoryBuffer_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kGpuService_CopyGpuMemoryBuffer_Name:
      var params = reader.decodeStruct(GpuService_CopyGpuMemoryBuffer_Params);
      this.copyGpuMemoryBuffer(params.bufferHandle, params.sharedMemory).then(function(response) {
        var responseParams =
            new GpuService_CopyGpuMemoryBuffer_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kGpuService_CopyGpuMemoryBuffer_Name,
            codec.align(GpuService_CopyGpuMemoryBuffer_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GpuService_CopyGpuMemoryBuffer_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kGpuService_GetVideoMemoryUsageStats_Name:
      var params = reader.decodeStruct(GpuService_GetVideoMemoryUsageStats_Params);
      this.getVideoMemoryUsageStats().then(function(response) {
        var responseParams =
            new GpuService_GetVideoMemoryUsageStats_ResponseParams();
        responseParams.stats = response.stats;
        var builder = new codec.MessageV1Builder(
            kGpuService_GetVideoMemoryUsageStats_Name,
            codec.align(GpuService_GetVideoMemoryUsageStats_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GpuService_GetVideoMemoryUsageStats_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kGpuService_GetPeakMemoryUsage_Name:
      var params = reader.decodeStruct(GpuService_GetPeakMemoryUsage_Params);
      this.getPeakMemoryUsage(params.sequenceNum).then(function(response) {
        var responseParams =
            new GpuService_GetPeakMemoryUsage_ResponseParams();
        responseParams.memoryUsage = response.memoryUsage;
        responseParams.memoryPerAllocationSource = response.memoryPerAllocationSource;
        var builder = new codec.MessageV1Builder(
            kGpuService_GetPeakMemoryUsage_Name,
            codec.align(GpuService_GetPeakMemoryUsage_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GpuService_GetPeakMemoryUsage_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kGpuService_GetDawnInfo_Name:
      var params = reader.decodeStruct(GpuService_GetDawnInfo_Params);
      this.getDawnInfo(params.collectMetrics).then(function(response) {
        var responseParams =
            new GpuService_GetDawnInfo_ResponseParams();
        responseParams.dawnInfoList = response.dawnInfoList;
        var builder = new codec.MessageV1Builder(
            kGpuService_GetDawnInfo_Name,
            codec.align(GpuService_GetDawnInfo_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(GpuService_GetDawnInfo_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateGpuServiceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kGpuService_EstablishGpuChannel_Name:
        if (message.expectsResponse())
          paramsClass = GpuService_EstablishGpuChannel_Params;
      break;
      case kGpuService_SetChannelClientPid_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_SetChannelClientPid_Params;
      break;
      case kGpuService_SetChannelDiskCacheHandle_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_SetChannelDiskCacheHandle_Params;
      break;
      case kGpuService_OnDiskCacheHandleDestoyed_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_OnDiskCacheHandleDestoyed_Params;
      break;
      case kGpuService_CloseChannel_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_CloseChannel_Params;
      break;
      case kGpuService_BindClientGmbInterface_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_BindClientGmbInterface_Params;
      break;
      case kGpuService_CreateVideoEncodeAcceleratorProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_CreateVideoEncodeAcceleratorProvider_Params;
      break;
      case kGpuService_BindWebNNContextProvider_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_BindWebNNContextProvider_Params;
      break;
      case kGpuService_CreateGpuMemoryBuffer_Name:
        if (message.expectsResponse())
          paramsClass = GpuService_CreateGpuMemoryBuffer_Params;
      break;
      case kGpuService_DestroyGpuMemoryBuffer_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_DestroyGpuMemoryBuffer_Params;
      break;
      case kGpuService_CopyGpuMemoryBuffer_Name:
        if (message.expectsResponse())
          paramsClass = GpuService_CopyGpuMemoryBuffer_Params;
      break;
      case kGpuService_GetVideoMemoryUsageStats_Name:
        if (message.expectsResponse())
          paramsClass = GpuService_GetVideoMemoryUsageStats_Params;
      break;
      case kGpuService_StartPeakMemoryMonitor_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_StartPeakMemoryMonitor_Params;
      break;
      case kGpuService_GetPeakMemoryUsage_Name:
        if (message.expectsResponse())
          paramsClass = GpuService_GetPeakMemoryUsage_Params;
      break;
      case kGpuService_LoadedBlob_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_LoadedBlob_Params;
      break;
      case kGpuService_WakeUpGpu_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_WakeUpGpu_Params;
      break;
      case kGpuService_GpuSwitched_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_GpuSwitched_Params;
      break;
      case kGpuService_DisplayAdded_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_DisplayAdded_Params;
      break;
      case kGpuService_DisplayRemoved_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_DisplayRemoved_Params;
      break;
      case kGpuService_DisplayMetricsChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_DisplayMetricsChanged_Params;
      break;
      case kGpuService_DestroyAllChannels_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_DestroyAllChannels_Params;
      break;
      case kGpuService_OnBackgroundCleanup_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_OnBackgroundCleanup_Params;
      break;
      case kGpuService_OnBackgrounded_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_OnBackgrounded_Params;
      break;
      case kGpuService_OnForegrounded_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_OnForegrounded_Params;
      break;
      case kGpuService_OnMemoryPressure_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_OnMemoryPressure_Params;
      break;
      case kGpuService_GetDawnInfo_Name:
        if (message.expectsResponse())
          paramsClass = GpuService_GetDawnInfo_Params;
      break;
      case kGpuService_Crash_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_Crash_Params;
      break;
      case kGpuService_Hang_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_Hang_Params;
      break;
      case kGpuService_ThrowJavaException_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GpuService_ThrowJavaException_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateGpuServiceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kGpuService_EstablishGpuChannel_Name:
        if (message.isResponse())
          paramsClass = GpuService_EstablishGpuChannel_ResponseParams;
        break;
      case kGpuService_CreateGpuMemoryBuffer_Name:
        if (message.isResponse())
          paramsClass = GpuService_CreateGpuMemoryBuffer_ResponseParams;
        break;
      case kGpuService_CopyGpuMemoryBuffer_Name:
        if (message.isResponse())
          paramsClass = GpuService_CopyGpuMemoryBuffer_ResponseParams;
        break;
      case kGpuService_GetVideoMemoryUsageStats_Name:
        if (message.isResponse())
          paramsClass = GpuService_GetVideoMemoryUsageStats_ResponseParams;
        break;
      case kGpuService_GetPeakMemoryUsage_Name:
        if (message.isResponse())
          paramsClass = GpuService_GetPeakMemoryUsage_ResponseParams;
        break;
      case kGpuService_GetDawnInfo_Name:
        if (message.isResponse())
          paramsClass = GpuService_GetDawnInfo_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var GpuService = {
    name: 'viz.mojom.GpuService',
    kVersion: 0,
    ptrClass: GpuServicePtr,
    proxyClass: GpuServiceProxy,
    stubClass: GpuServiceStub,
    validateRequest: validateGpuServiceRequest,
    validateResponse: validateGpuServiceResponse,
  };
  GpuServiceStub.prototype.validator = validateGpuServiceRequest;
  GpuServiceProxy.prototype.validator = validateGpuServiceResponse;
  exports.GpuService = GpuService;
  exports.GpuServicePtr = GpuServicePtr;
  exports.GpuServiceAssociatedPtr = GpuServiceAssociatedPtr;
})();