// services/viz/public/mojom/compositing/transferable_resource.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/viz/public/mojom/compositing/transferable_resource.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('viz.mojom');
  var mailbox_holder$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/mailbox_holder.mojom', '../../../../../gpu/ipc/common/mailbox_holder.mojom.js');
  }
  var vulkan_ycbcr_info$ =
      mojo.internal.exposeNamespace('gpu.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'gpu/ipc/common/vulkan_ycbcr_info.mojom', '../../../../../gpu/ipc/common/vulkan_ycbcr_info.mojom.js');
  }
  var shared_image_format$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/public/mojom/compositing/shared_image_format.mojom', 'shared_image_format.mojom.js');
  }
  var resource_id$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/public/mojom/compositing/resource_id.mojom', 'resource_id.mojom.js');
  }
  var geometry$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/geometry/mojom/geometry.mojom', '../../../../../ui/gfx/geometry/mojom/geometry.mojom.js');
  }
  var color_space$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/color_space.mojom', '../../../../../ui/gfx/mojom/color_space.mojom.js');
  }
  var hdr_metadata$ =
      mojo.internal.exposeNamespace('gfx.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'ui/gfx/mojom/hdr_metadata.mojom', '../../../../../ui/gfx/mojom/hdr_metadata.mojom.js');
  }


  var SynchronizationType = {};
  SynchronizationType.kSyncToken = 0;
  SynchronizationType.kGpuCommandsCompleted = 1;
  SynchronizationType.kReleaseFence = 2;
  SynchronizationType.MIN_VALUE = 0;
  SynchronizationType.MAX_VALUE = 2;

  SynchronizationType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  SynchronizationType.toKnownEnumValue = function(value) {
    return value;
  };

  SynchronizationType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function TransferableResource(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TransferableResource.prototype.initDefaults_ = function() {
    this.id = null;
    this.format = null;
    this.size = null;
    this.mailboxHolder = null;
    this.synchronizationType = 0;
    this.isSoftware = false;
    this.isOverlayCandidate = false;
    this.isBackedBySurfaceTexture = false;
    this.wantsPromotionHint = false;
    this.colorSpace = null;
    this.colorSpaceWhenSampled = null;
    this.hdrMetadata = null;
    this.ycbcrInfo = null;
  };
  TransferableResource.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TransferableResource.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 88}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TransferableResource.id
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, resource_id$.ResourceId, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TransferableResource.format
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 8, shared_image_format$.SharedImageFormat, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TransferableResource.size
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, geometry$.Size, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TransferableResource.mailboxHolder
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, mailbox_holder$.MailboxHolder, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TransferableResource.synchronizationType
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 40, SynchronizationType);
    if (err !== validator.validationError.NONE)
        return err;






    // validate TransferableResource.colorSpace
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, color_space$.ColorSpace, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TransferableResource.colorSpaceWhenSampled
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, color_space$.ColorSpace, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TransferableResource.hdrMetadata
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, hdr_metadata$.HDRMetadata, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TransferableResource.ycbcrInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, vulkan_ycbcr_info$.VulkanYCbCrInfo, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TransferableResource.encodedSize = codec.kStructHeaderSize + 80;

  TransferableResource.decode = function(decoder) {
    var packed;
    var val = new TransferableResource();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStructPointer(resource_id$.ResourceId);
    val.format =
        decoder.decodeStruct(shared_image_format$.SharedImageFormat);
    val.size =
        decoder.decodeStructPointer(geometry$.Size);
    val.mailboxHolder =
        decoder.decodeStructPointer(mailbox_holder$.MailboxHolder);
    val.synchronizationType =
        decoder.decodeStruct(new codec.Enum(SynchronizationType));
    packed = decoder.readUint8();
    val.isSoftware = (packed >> 0) & 1 ? true : false;
    val.isOverlayCandidate = (packed >> 1) & 1 ? true : false;
    val.isBackedBySurfaceTexture = (packed >> 2) & 1 ? true : false;
    val.wantsPromotionHint = (packed >> 3) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.colorSpace =
        decoder.decodeStructPointer(color_space$.ColorSpace);
    val.colorSpaceWhenSampled =
        decoder.decodeStructPointer(color_space$.ColorSpace);
    val.hdrMetadata =
        decoder.decodeStructPointer(hdr_metadata$.HDRMetadata);
    val.ycbcrInfo =
        decoder.decodeStructPointer(vulkan_ycbcr_info$.VulkanYCbCrInfo);
    return val;
  };

  TransferableResource.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TransferableResource.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(resource_id$.ResourceId, val.id);
    encoder.encodeStruct(shared_image_format$.SharedImageFormat, val.format);
    encoder.encodeStructPointer(geometry$.Size, val.size);
    encoder.encodeStructPointer(mailbox_holder$.MailboxHolder, val.mailboxHolder);
    encoder.encodeStruct(codec.Int32, val.synchronizationType);
    packed = 0;
    packed |= (val.isSoftware & 1) << 0
    packed |= (val.isOverlayCandidate & 1) << 1
    packed |= (val.isBackedBySurfaceTexture & 1) << 2
    packed |= (val.wantsPromotionHint & 1) << 3
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(color_space$.ColorSpace, val.colorSpace);
    encoder.encodeStructPointer(color_space$.ColorSpace, val.colorSpaceWhenSampled);
    encoder.encodeStructPointer(hdr_metadata$.HDRMetadata, val.hdrMetadata);
    encoder.encodeStructPointer(vulkan_ycbcr_info$.VulkanYCbCrInfo, val.ycbcrInfo);
  };
  exports.SynchronizationType = SynchronizationType;
  exports.TransferableResource = TransferableResource;
})();