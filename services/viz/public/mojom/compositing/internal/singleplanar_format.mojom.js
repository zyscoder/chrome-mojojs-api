// services/viz/public/mojom/compositing/internal/singleplanar_format.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/viz/public/mojom/compositing/internal/singleplanar_format.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('viz.mojom');


  var SingleplanarFormat = {};
  SingleplanarFormat.RGBA_8888 = 0;
  SingleplanarFormat.RGBA_4444 = 1;
  SingleplanarFormat.BGRA_8888 = 2;
  SingleplanarFormat.ALPHA_8 = 3;
  SingleplanarFormat.LUMINANCE_8 = 4;
  SingleplanarFormat.RGB_565 = 5;
  SingleplanarFormat.BGR_565 = 6;
  SingleplanarFormat.ETC1 = 7;
  SingleplanarFormat.RED_8 = 8;
  SingleplanarFormat.RG_88 = 9;
  SingleplanarFormat.LUMINANCE_F16 = 10;
  SingleplanarFormat.RGBA_F16 = 11;
  SingleplanarFormat.R16_EXT = 12;
  SingleplanarFormat.RG16_EXT = 13;
  SingleplanarFormat.RGBX_8888 = 14;
  SingleplanarFormat.BGRX_8888 = 15;
  SingleplanarFormat.RGBX_1010102 = 16;
  SingleplanarFormat.BGRX_1010102 = 17;
  SingleplanarFormat.YV12_LEGACY = 18;
  SingleplanarFormat.NV12_LEGACY = 19;
  SingleplanarFormat.NV12A_LEGACY = 20;
  SingleplanarFormat.P010_LEGACY = 21;
  SingleplanarFormat.MIN_VALUE = 0;
  SingleplanarFormat.MAX_VALUE = 21;

  SingleplanarFormat.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    }
    return false;
  };

  SingleplanarFormat.toKnownEnumValue = function(value) {
    return value;
  };

  SingleplanarFormat.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  exports.SingleplanarFormat = SingleplanarFormat;
})();