// services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('viz.mojom');
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var compositor_render_pass_id$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/public/mojom/compositing/compositor_render_pass_id.mojom', 'compositor_render_pass_id.mojom.js');
  }
  var view_transition_element_resource_id$ =
      mojo.internal.exposeNamespace('viz.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/viz/public/mojom/compositing/view_transition_element_resource_id.mojom', 'view_transition_element_resource_id.mojom.js');
  }


  var CompositorFrameTransitionDirectiveType = {};
  CompositorFrameTransitionDirectiveType.kSave = 0;
  CompositorFrameTransitionDirectiveType.kAnimateRenderer = 1;
  CompositorFrameTransitionDirectiveType.kRelease = 2;
  CompositorFrameTransitionDirectiveType.MIN_VALUE = 0;
  CompositorFrameTransitionDirectiveType.MAX_VALUE = 2;

  CompositorFrameTransitionDirectiveType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  CompositorFrameTransitionDirectiveType.toKnownEnumValue = function(value) {
    return value;
  };

  CompositorFrameTransitionDirectiveType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function CompositorFrameTransitionDirectiveSharedElement(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CompositorFrameTransitionDirectiveSharedElement.prototype.initDefaults_ = function() {
    this.renderPassId = null;
    this.viewTransitionElementResourceId = null;
  };
  CompositorFrameTransitionDirectiveSharedElement.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CompositorFrameTransitionDirectiveSharedElement.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CompositorFrameTransitionDirectiveSharedElement.renderPassId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, compositor_render_pass_id$.CompositorRenderPassId, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CompositorFrameTransitionDirectiveSharedElement.viewTransitionElementResourceId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, view_transition_element_resource_id$.ViewTransitionElementResourceId, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CompositorFrameTransitionDirectiveSharedElement.encodedSize = codec.kStructHeaderSize + 16;

  CompositorFrameTransitionDirectiveSharedElement.decode = function(decoder) {
    var packed;
    var val = new CompositorFrameTransitionDirectiveSharedElement();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.renderPassId =
        decoder.decodeStructPointer(compositor_render_pass_id$.CompositorRenderPassId);
    val.viewTransitionElementResourceId =
        decoder.decodeStructPointer(view_transition_element_resource_id$.ViewTransitionElementResourceId);
    return val;
  };

  CompositorFrameTransitionDirectiveSharedElement.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CompositorFrameTransitionDirectiveSharedElement.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(compositor_render_pass_id$.CompositorRenderPassId, val.renderPassId);
    encoder.encodeStructPointer(view_transition_element_resource_id$.ViewTransitionElementResourceId, val.viewTransitionElementResourceId);
  };
  function CompositorFrameTransitionDirective(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CompositorFrameTransitionDirective.prototype.initDefaults_ = function() {
    this.navigationId = null;
    this.sequenceId = 0;
    this.type = 0;
    this.sharedElements = null;
  };
  CompositorFrameTransitionDirective.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CompositorFrameTransitionDirective.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CompositorFrameTransitionDirective.navigationId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, true);
    if (err !== validator.validationError.NONE)
        return err;



    // validate CompositorFrameTransitionDirective.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 12, CompositorFrameTransitionDirectiveType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CompositorFrameTransitionDirective.sharedElements
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(CompositorFrameTransitionDirectiveSharedElement), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CompositorFrameTransitionDirective.encodedSize = codec.kStructHeaderSize + 24;

  CompositorFrameTransitionDirective.decode = function(decoder) {
    var packed;
    var val = new CompositorFrameTransitionDirective();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.navigationId =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.sequenceId =
        decoder.decodeStruct(codec.Uint32);
    val.type =
        decoder.decodeStruct(new codec.Enum(CompositorFrameTransitionDirectiveType));
    val.sharedElements =
        decoder.decodeArrayPointer(new codec.PointerTo(CompositorFrameTransitionDirectiveSharedElement));
    return val;
  };

  CompositorFrameTransitionDirective.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CompositorFrameTransitionDirective.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.navigationId);
    encoder.encodeStruct(codec.Uint32, val.sequenceId);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.encodeArrayPointer(new codec.PointerTo(CompositorFrameTransitionDirectiveSharedElement), val.sharedElements);
  };
  exports.CompositorFrameTransitionDirectiveType = CompositorFrameTransitionDirectiveType;
  exports.CompositorFrameTransitionDirectiveSharedElement = CompositorFrameTransitionDirectiveSharedElement;
  exports.CompositorFrameTransitionDirective = CompositorFrameTransitionDirective;
})();