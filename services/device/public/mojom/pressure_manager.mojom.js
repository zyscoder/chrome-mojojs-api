// services/device/public/mojom/pressure_manager.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/device/public/mojom/pressure_manager.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('device.mojom');
  var pressure_update$ =
      mojo.internal.exposeNamespace('device.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/device/public/mojom/pressure_update.mojom', 'pressure_update.mojom.js');
  }


  var PressureStatus = {};
  PressureStatus.kOk = 0;
  PressureStatus.kNotSupported = 1;
  PressureStatus.MIN_VALUE = 0;
  PressureStatus.MAX_VALUE = 1;

  PressureStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
      return true;
    }
    return false;
  };

  PressureStatus.toKnownEnumValue = function(value) {
    return value;
  };

  PressureStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function PressureManager_AddClient_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PressureManager_AddClient_Params.prototype.initDefaults_ = function() {
    this.client = new PressureClientPtr();
    this.source = 0;
  };
  PressureManager_AddClient_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PressureManager_AddClient_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PressureManager_AddClient_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PressureManager_AddClient_Params.source
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, pressure_update$.PressureSource);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PressureManager_AddClient_Params.encodedSize = codec.kStructHeaderSize + 16;

  PressureManager_AddClient_Params.decode = function(decoder) {
    var packed;
    var val = new PressureManager_AddClient_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.client =
        decoder.decodeStruct(new codec.Interface(PressureClientPtr));
    val.source =
        decoder.decodeStruct(new codec.Enum(pressure_update$.PressureSource));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PressureManager_AddClient_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PressureManager_AddClient_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(PressureClientPtr), val.client);
    encoder.encodeStruct(codec.Int32, val.source);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PressureManager_AddClient_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PressureManager_AddClient_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  PressureManager_AddClient_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PressureManager_AddClient_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PressureManager_AddClient_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, PressureStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PressureManager_AddClient_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PressureManager_AddClient_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PressureManager_AddClient_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(PressureStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PressureManager_AddClient_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PressureManager_AddClient_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PressureClient_OnPressureUpdated_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PressureClient_OnPressureUpdated_Params.prototype.initDefaults_ = function() {
    this.update = null;
  };
  PressureClient_OnPressureUpdated_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PressureClient_OnPressureUpdated_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PressureClient_OnPressureUpdated_Params.update
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, pressure_update$.PressureUpdate, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PressureClient_OnPressureUpdated_Params.encodedSize = codec.kStructHeaderSize + 8;

  PressureClient_OnPressureUpdated_Params.decode = function(decoder) {
    var packed;
    var val = new PressureClient_OnPressureUpdated_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.update =
        decoder.decodeStructPointer(pressure_update$.PressureUpdate);
    return val;
  };

  PressureClient_OnPressureUpdated_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PressureClient_OnPressureUpdated_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(pressure_update$.PressureUpdate, val.update);
  };
  var kPressureManager_AddClient_Name = 577644260;

  function PressureManagerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PressureManager,
                                                   handleOrPtrInfo);
  }

  function PressureManagerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PressureManager, associatedInterfacePtrInfo);
  }

  PressureManagerAssociatedPtr.prototype =
      Object.create(PressureManagerPtr.prototype);
  PressureManagerAssociatedPtr.prototype.constructor =
      PressureManagerAssociatedPtr;

  function PressureManagerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PressureManagerPtr.prototype.addClient = function() {
    return PressureManagerProxy.prototype.addClient
        .apply(this.ptr.getProxy(), arguments);
  };

  PressureManagerProxy.prototype.addClient = function(client, source) {
    var params_ = new PressureManager_AddClient_Params();
    params_.client = client;
    params_.source = source;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPressureManager_AddClient_Name,
          codec.align(PressureManager_AddClient_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PressureManager_AddClient_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PressureManager_AddClient_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function PressureManagerStub(delegate) {
    this.delegate_ = delegate;
  }
  PressureManagerStub.prototype.addClient = function(client, source) {
    return this.delegate_ && this.delegate_.addClient && this.delegate_.addClient(client, source);
  }

  PressureManagerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  PressureManagerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPressureManager_AddClient_Name:
      var params = reader.decodeStruct(PressureManager_AddClient_Params);
      this.addClient(params.client, params.source).then(function(response) {
        var responseParams =
            new PressureManager_AddClient_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kPressureManager_AddClient_Name,
            codec.align(PressureManager_AddClient_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PressureManager_AddClient_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePressureManagerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPressureManager_AddClient_Name:
        if (message.expectsResponse())
          paramsClass = PressureManager_AddClient_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePressureManagerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPressureManager_AddClient_Name:
        if (message.isResponse())
          paramsClass = PressureManager_AddClient_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PressureManager = {
    name: 'device.mojom.PressureManager',
    kVersion: 0,
    ptrClass: PressureManagerPtr,
    proxyClass: PressureManagerProxy,
    stubClass: PressureManagerStub,
    validateRequest: validatePressureManagerRequest,
    validateResponse: validatePressureManagerResponse,
  };
  PressureManagerStub.prototype.validator = validatePressureManagerRequest;
  PressureManagerProxy.prototype.validator = validatePressureManagerResponse;
  var kPressureClient_OnPressureUpdated_Name = 1892777015;

  function PressureClientPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PressureClient,
                                                   handleOrPtrInfo);
  }

  function PressureClientAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PressureClient, associatedInterfacePtrInfo);
  }

  PressureClientAssociatedPtr.prototype =
      Object.create(PressureClientPtr.prototype);
  PressureClientAssociatedPtr.prototype.constructor =
      PressureClientAssociatedPtr;

  function PressureClientProxy(receiver) {
    this.receiver_ = receiver;
  }
  PressureClientPtr.prototype.onPressureUpdated = function() {
    return PressureClientProxy.prototype.onPressureUpdated
        .apply(this.ptr.getProxy(), arguments);
  };

  PressureClientProxy.prototype.onPressureUpdated = function(update) {
    var params_ = new PressureClient_OnPressureUpdated_Params();
    params_.update = update;
    var builder = new codec.MessageV0Builder(
        kPressureClient_OnPressureUpdated_Name,
        codec.align(PressureClient_OnPressureUpdated_Params.encodedSize));
    builder.encodeStruct(PressureClient_OnPressureUpdated_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PressureClientStub(delegate) {
    this.delegate_ = delegate;
  }
  PressureClientStub.prototype.onPressureUpdated = function(update) {
    return this.delegate_ && this.delegate_.onPressureUpdated && this.delegate_.onPressureUpdated(update);
  }

  PressureClientStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPressureClient_OnPressureUpdated_Name:
      var params = reader.decodeStruct(PressureClient_OnPressureUpdated_Params);
      this.onPressureUpdated(params.update);
      return true;
    default:
      return false;
    }
  };

  PressureClientStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePressureClientRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPressureClient_OnPressureUpdated_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PressureClient_OnPressureUpdated_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePressureClientResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PressureClient = {
    name: 'device.mojom.PressureClient',
    kVersion: 0,
    ptrClass: PressureClientPtr,
    proxyClass: PressureClientProxy,
    stubClass: PressureClientStub,
    validateRequest: validatePressureClientRequest,
    validateResponse: null,
  };
  PressureClientStub.prototype.validator = validatePressureClientRequest;
  PressureClientProxy.prototype.validator = null;
  exports.PressureStatus = PressureStatus;
  exports.PressureManager = PressureManager;
  exports.PressureManagerPtr = PressureManagerPtr;
  exports.PressureManagerAssociatedPtr = PressureManagerAssociatedPtr;
  exports.PressureClient = PressureClient;
  exports.PressureClientPtr = PressureClientPtr;
  exports.PressureClientAssociatedPtr = PressureClientAssociatedPtr;
})();