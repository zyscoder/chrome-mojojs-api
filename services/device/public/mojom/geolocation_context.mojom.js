// services/device/public/mojom/geolocation_context.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/device/public/mojom/geolocation_context.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('device.mojom');
  var geolocation$ =
      mojo.internal.exposeNamespace('device.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/device/public/mojom/geolocation.mojom', 'geolocation.mojom.js');
  }
  var geoposition$ =
      mojo.internal.exposeNamespace('device.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/device/public/mojom/geoposition.mojom', 'geoposition.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../url/mojom/url.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../url/mojom/origin.mojom.js');
  }



  function GeolocationContext_BindGeolocation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GeolocationContext_BindGeolocation_Params.prototype.initDefaults_ = function() {
    this.receiver = new bindings.InterfaceRequest();
    this.requestingUrl = null;
  };
  GeolocationContext_BindGeolocation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GeolocationContext_BindGeolocation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GeolocationContext_BindGeolocation_Params.receiver
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate GeolocationContext_BindGeolocation_Params.requestingUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GeolocationContext_BindGeolocation_Params.encodedSize = codec.kStructHeaderSize + 16;

  GeolocationContext_BindGeolocation_Params.decode = function(decoder) {
    var packed;
    var val = new GeolocationContext_BindGeolocation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.receiver =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.requestingUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  GeolocationContext_BindGeolocation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GeolocationContext_BindGeolocation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.receiver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.requestingUrl);
  };
  function GeolocationContext_OnPermissionRevoked_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GeolocationContext_OnPermissionRevoked_Params.prototype.initDefaults_ = function() {
    this.origin = null;
  };
  GeolocationContext_OnPermissionRevoked_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GeolocationContext_OnPermissionRevoked_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GeolocationContext_OnPermissionRevoked_Params.origin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GeolocationContext_OnPermissionRevoked_Params.encodedSize = codec.kStructHeaderSize + 8;

  GeolocationContext_OnPermissionRevoked_Params.decode = function(decoder) {
    var packed;
    var val = new GeolocationContext_OnPermissionRevoked_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.origin =
        decoder.decodeStructPointer(origin$.Origin);
    return val;
  };

  GeolocationContext_OnPermissionRevoked_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GeolocationContext_OnPermissionRevoked_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.origin);
  };
  function GeolocationContext_SetOverride_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GeolocationContext_SetOverride_Params.prototype.initDefaults_ = function() {
    this.result = null;
  };
  GeolocationContext_SetOverride_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GeolocationContext_SetOverride_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate GeolocationContext_SetOverride_Params.result
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, geoposition$.GeopositionResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GeolocationContext_SetOverride_Params.encodedSize = codec.kStructHeaderSize + 16;

  GeolocationContext_SetOverride_Params.decode = function(decoder) {
    var packed;
    var val = new GeolocationContext_SetOverride_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStruct(geoposition$.GeopositionResult);
    return val;
  };

  GeolocationContext_SetOverride_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GeolocationContext_SetOverride_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(geoposition$.GeopositionResult, val.result);
  };
  function GeolocationContext_ClearOverride_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  GeolocationContext_ClearOverride_Params.prototype.initDefaults_ = function() {
  };
  GeolocationContext_ClearOverride_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  GeolocationContext_ClearOverride_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  GeolocationContext_ClearOverride_Params.encodedSize = codec.kStructHeaderSize + 0;

  GeolocationContext_ClearOverride_Params.decode = function(decoder) {
    var packed;
    var val = new GeolocationContext_ClearOverride_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  GeolocationContext_ClearOverride_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(GeolocationContext_ClearOverride_Params.encodedSize);
    encoder.writeUint32(0);
  };
  var kGeolocationContext_BindGeolocation_Name = 753416897;
  var kGeolocationContext_OnPermissionRevoked_Name = 834998011;
  var kGeolocationContext_SetOverride_Name = 325801087;
  var kGeolocationContext_ClearOverride_Name = 1278275295;

  function GeolocationContextPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(GeolocationContext,
                                                   handleOrPtrInfo);
  }

  function GeolocationContextAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        GeolocationContext, associatedInterfacePtrInfo);
  }

  GeolocationContextAssociatedPtr.prototype =
      Object.create(GeolocationContextPtr.prototype);
  GeolocationContextAssociatedPtr.prototype.constructor =
      GeolocationContextAssociatedPtr;

  function GeolocationContextProxy(receiver) {
    this.receiver_ = receiver;
  }
  GeolocationContextPtr.prototype.bindGeolocation = function() {
    return GeolocationContextProxy.prototype.bindGeolocation
        .apply(this.ptr.getProxy(), arguments);
  };

  GeolocationContextProxy.prototype.bindGeolocation = function(receiver, requestingUrl) {
    var params_ = new GeolocationContext_BindGeolocation_Params();
    params_.receiver = receiver;
    params_.requestingUrl = requestingUrl;
    var builder = new codec.MessageV0Builder(
        kGeolocationContext_BindGeolocation_Name,
        codec.align(GeolocationContext_BindGeolocation_Params.encodedSize));
    builder.encodeStruct(GeolocationContext_BindGeolocation_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GeolocationContextPtr.prototype.onPermissionRevoked = function() {
    return GeolocationContextProxy.prototype.onPermissionRevoked
        .apply(this.ptr.getProxy(), arguments);
  };

  GeolocationContextProxy.prototype.onPermissionRevoked = function(origin) {
    var params_ = new GeolocationContext_OnPermissionRevoked_Params();
    params_.origin = origin;
    var builder = new codec.MessageV0Builder(
        kGeolocationContext_OnPermissionRevoked_Name,
        codec.align(GeolocationContext_OnPermissionRevoked_Params.encodedSize));
    builder.encodeStruct(GeolocationContext_OnPermissionRevoked_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GeolocationContextPtr.prototype.setOverride = function() {
    return GeolocationContextProxy.prototype.setOverride
        .apply(this.ptr.getProxy(), arguments);
  };

  GeolocationContextProxy.prototype.setOverride = function(result) {
    var params_ = new GeolocationContext_SetOverride_Params();
    params_.result = result;
    var builder = new codec.MessageV0Builder(
        kGeolocationContext_SetOverride_Name,
        codec.align(GeolocationContext_SetOverride_Params.encodedSize));
    builder.encodeStruct(GeolocationContext_SetOverride_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  GeolocationContextPtr.prototype.clearOverride = function() {
    return GeolocationContextProxy.prototype.clearOverride
        .apply(this.ptr.getProxy(), arguments);
  };

  GeolocationContextProxy.prototype.clearOverride = function() {
    var params_ = new GeolocationContext_ClearOverride_Params();
    var builder = new codec.MessageV0Builder(
        kGeolocationContext_ClearOverride_Name,
        codec.align(GeolocationContext_ClearOverride_Params.encodedSize));
    builder.encodeStruct(GeolocationContext_ClearOverride_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function GeolocationContextStub(delegate) {
    this.delegate_ = delegate;
  }
  GeolocationContextStub.prototype.bindGeolocation = function(receiver, requestingUrl) {
    return this.delegate_ && this.delegate_.bindGeolocation && this.delegate_.bindGeolocation(receiver, requestingUrl);
  }
  GeolocationContextStub.prototype.onPermissionRevoked = function(origin) {
    return this.delegate_ && this.delegate_.onPermissionRevoked && this.delegate_.onPermissionRevoked(origin);
  }
  GeolocationContextStub.prototype.setOverride = function(result) {
    return this.delegate_ && this.delegate_.setOverride && this.delegate_.setOverride(result);
  }
  GeolocationContextStub.prototype.clearOverride = function() {
    return this.delegate_ && this.delegate_.clearOverride && this.delegate_.clearOverride();
  }

  GeolocationContextStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kGeolocationContext_BindGeolocation_Name:
      var params = reader.decodeStruct(GeolocationContext_BindGeolocation_Params);
      this.bindGeolocation(params.receiver, params.requestingUrl);
      return true;
    case kGeolocationContext_OnPermissionRevoked_Name:
      var params = reader.decodeStruct(GeolocationContext_OnPermissionRevoked_Params);
      this.onPermissionRevoked(params.origin);
      return true;
    case kGeolocationContext_SetOverride_Name:
      var params = reader.decodeStruct(GeolocationContext_SetOverride_Params);
      this.setOverride(params.result);
      return true;
    case kGeolocationContext_ClearOverride_Name:
      var params = reader.decodeStruct(GeolocationContext_ClearOverride_Params);
      this.clearOverride();
      return true;
    default:
      return false;
    }
  };

  GeolocationContextStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateGeolocationContextRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kGeolocationContext_BindGeolocation_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GeolocationContext_BindGeolocation_Params;
      break;
      case kGeolocationContext_OnPermissionRevoked_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GeolocationContext_OnPermissionRevoked_Params;
      break;
      case kGeolocationContext_SetOverride_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GeolocationContext_SetOverride_Params;
      break;
      case kGeolocationContext_ClearOverride_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = GeolocationContext_ClearOverride_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateGeolocationContextResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var GeolocationContext = {
    name: 'device.mojom.GeolocationContext',
    kVersion: 0,
    ptrClass: GeolocationContextPtr,
    proxyClass: GeolocationContextProxy,
    stubClass: GeolocationContextStub,
    validateRequest: validateGeolocationContextRequest,
    validateResponse: null,
  };
  GeolocationContextStub.prototype.validator = validateGeolocationContextRequest;
  GeolocationContextProxy.prototype.validator = null;
  exports.GeolocationContext = GeolocationContext;
  exports.GeolocationContextPtr = GeolocationContextPtr;
  exports.GeolocationContextAssociatedPtr = GeolocationContextAssociatedPtr;
})();